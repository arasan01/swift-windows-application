// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import UWP
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.carettype)
public typealias CaretType = __x_ABI_CMicrosoft_CUI_CText_CCaretType
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.findoptions)
public typealias FindOptions = __x_ABI_CMicrosoft_CUI_CText_CFindOptions
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.formateffect)
public typealias FormatEffect = __x_ABI_CMicrosoft_CUI_CText_CFormatEffect
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.horizontalcharacteralignment)
public typealias HorizontalCharacterAlignment = __x_ABI_CMicrosoft_CUI_CText_CHorizontalCharacterAlignment
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.lettercase)
public typealias LetterCase = __x_ABI_CMicrosoft_CUI_CText_CLetterCase
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.linespacingrule)
public typealias LineSpacingRule = __x_ABI_CMicrosoft_CUI_CText_CLineSpacingRule
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.linktype)
public typealias LinkType = __x_ABI_CMicrosoft_CUI_CText_CLinkType
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.markeralignment)
public typealias MarkerAlignment = __x_ABI_CMicrosoft_CUI_CText_CMarkerAlignment
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.markerstyle)
public typealias MarkerStyle = __x_ABI_CMicrosoft_CUI_CText_CMarkerStyle
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.markertype)
public typealias MarkerType = __x_ABI_CMicrosoft_CUI_CText_CMarkerType
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.paragraphalignment)
public typealias ParagraphAlignment = __x_ABI_CMicrosoft_CUI_CText_CParagraphAlignment
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.paragraphstyle)
public typealias ParagraphStyle = __x_ABI_CMicrosoft_CUI_CText_CParagraphStyle
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.pointoptions)
public typealias PointOptions = __x_ABI_CMicrosoft_CUI_CText_CPointOptions
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.rangegravity)
public typealias RangeGravity = __x_ABI_CMicrosoft_CUI_CText_CRangeGravity
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richeditmathmode)
public typealias RichEditMathMode = __x_ABI_CMicrosoft_CUI_CText_CRichEditMathMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.selectionoptions)
public typealias SelectionOptions = __x_ABI_CMicrosoft_CUI_CText_CSelectionOptions
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.selectiontype)
public typealias SelectionType = __x_ABI_CMicrosoft_CUI_CText_CSelectionType
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.tabalignment)
public typealias TabAlignment = __x_ABI_CMicrosoft_CUI_CText_CTabAlignment
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.tableader)
public typealias TabLeader = __x_ABI_CMicrosoft_CUI_CText_CTabLeader
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.textgetoptions)
public typealias TextGetOptions = __x_ABI_CMicrosoft_CUI_CText_CTextGetOptions
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.textrangeunit)
public typealias TextRangeUnit = __x_ABI_CMicrosoft_CUI_CText_CTextRangeUnit
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.textscript)
public typealias TextScript = __x_ABI_CMicrosoft_CUI_CText_CTextScript
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.textsetoptions)
public typealias TextSetOptions = __x_ABI_CMicrosoft_CUI_CText_CTextSetOptions
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.underlinetype)
public typealias UnderlineType = __x_ABI_CMicrosoft_CUI_CText_CUnderlineType
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.verticalcharacteralignment)
public typealias VerticalCharacterAlignment = __x_ABI_CMicrosoft_CUI_CText_CVerticalCharacterAlignment
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.fontweights)
public final class FontWeights : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Text.IFontWeights
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CText_CIFontWeights
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CText_CIFontWeights>?) -> FontWeights? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IFontWeightsStatics: __ABI_Microsoft_UI_Text.IFontWeightsStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Text.FontWeights"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.fontweights.black)
    public static var black : UWP.FontWeight {
        get { try! _IFontWeightsStatics.get_BlackImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.fontweights.bold)
    public static var bold : UWP.FontWeight {
        get { try! _IFontWeightsStatics.get_BoldImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.fontweights.extrablack)
    public static var extraBlack : UWP.FontWeight {
        get { try! _IFontWeightsStatics.get_ExtraBlackImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.fontweights.extrabold)
    public static var extraBold : UWP.FontWeight {
        get { try! _IFontWeightsStatics.get_ExtraBoldImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.fontweights.extralight)
    public static var extraLight : UWP.FontWeight {
        get { try! _IFontWeightsStatics.get_ExtraLightImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.fontweights.light)
    public static var light : UWP.FontWeight {
        get { try! _IFontWeightsStatics.get_LightImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.fontweights.medium)
    public static var medium : UWP.FontWeight {
        get { try! _IFontWeightsStatics.get_MediumImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.fontweights.normal)
    public static var normal : UWP.FontWeight {
        get { try! _IFontWeightsStatics.get_NormalImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.fontweights.semibold)
    public static var semiBold : UWP.FontWeight {
        get { try! _IFontWeightsStatics.get_SemiBoldImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.fontweights.semilight)
    public static var semiLight : UWP.FontWeight {
        get { try! _IFontWeightsStatics.get_SemiLightImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.fontweights.thin)
    public static var thin : UWP.FontWeight {
        get { try! _IFontWeightsStatics.get_ThinImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextdocument)
public final class RichEditTextDocument : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Text.ITextDocument
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CText_CITextDocument
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CText_CITextDocument>?) -> RichEditTextDocument? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextdocument.cancopy)
    public func canCopy() throws -> Bool {
        try _default.CanCopyImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextdocument.canpaste)
    public func canPaste() throws -> Bool {
        try _default.CanPasteImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextdocument.canredo)
    public func canRedo() throws -> Bool {
        try _default.CanRedoImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextdocument.canundo)
    public func canUndo() throws -> Bool {
        try _default.CanUndoImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextdocument.applydisplayupdates)
    public func applyDisplayUpdates() throws -> Int32 {
        try _default.ApplyDisplayUpdatesImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextdocument.batchdisplayupdates)
    public func batchDisplayUpdates() throws -> Int32 {
        try _default.BatchDisplayUpdatesImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextdocument.beginundogroup)
    public func beginUndoGroup() throws {
        try _default.BeginUndoGroupImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextdocument.endundogroup)
    public func endUndoGroup() throws {
        try _default.EndUndoGroupImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextdocument.getdefaultcharacterformat)
    public func getDefaultCharacterFormat() throws -> AnyITextCharacterFormat! {
        try _default.GetDefaultCharacterFormatImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextdocument.getdefaultparagraphformat)
    public func getDefaultParagraphFormat() throws -> AnyITextParagraphFormat! {
        try _default.GetDefaultParagraphFormatImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextdocument.getrange)
    public func getRange(_ startPosition: Int32, _ endPosition: Int32) throws -> AnyITextRange! {
        try _default.GetRangeImpl(startPosition, endPosition)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextdocument.getrangefrompoint)
    public func getRangeFromPoint(_ point: WindowsFoundation.Point, _ options: PointOptions) throws -> AnyITextRange! {
        try _default.GetRangeFromPointImpl(point, options)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextdocument.gettext)
    public func getText(_ options: TextGetOptions, _ value: inout String) throws {
        try _default.GetTextImpl(options, &value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextdocument.loadfromstream)
    public func loadFromStream(_ options: TextSetOptions, _ value: UWP.AnyIRandomAccessStream!) throws {
        try _default.LoadFromStreamImpl(options, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextdocument.redo)
    public func redo() throws {
        try _default.RedoImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextdocument.savetostream)
    public func saveToStream(_ options: TextGetOptions, _ value: UWP.AnyIRandomAccessStream!) throws {
        try _default.SaveToStreamImpl(options, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextdocument.setdefaultcharacterformat)
    public func setDefaultCharacterFormat(_ value: AnyITextCharacterFormat!) throws {
        try _default.SetDefaultCharacterFormatImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextdocument.setdefaultparagraphformat)
    public func setDefaultParagraphFormat(_ value: AnyITextParagraphFormat!) throws {
        try _default.SetDefaultParagraphFormatImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextdocument.settext)
    public func setText(_ options: TextSetOptions, _ value: String) throws {
        try _default.SetTextImpl(options, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextdocument.undo)
    public func undo() throws {
        try _default.UndoImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextdocument.clearundoredohistory)
    public func clearUndoRedoHistory() throws {
        try _default.ClearUndoRedoHistoryImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextdocument.alignmentincludestrailingwhitespace)
    public var alignmentIncludesTrailingWhitespace : Bool {
        get { try! _default.get_AlignmentIncludesTrailingWhitespaceImpl() }
        set { try! _default.put_AlignmentIncludesTrailingWhitespaceImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextdocument.carettype)
    public var caretType : CaretType {
        get { try! _default.get_CaretTypeImpl() }
        set { try! _default.put_CaretTypeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextdocument.defaulttabstop)
    public var defaultTabStop : Float {
        get { try! _default.get_DefaultTabStopImpl() }
        set { try! _default.put_DefaultTabStopImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextdocument.ignoretrailingcharacterspacing)
    public var ignoreTrailingCharacterSpacing : Bool {
        get { try! _default.get_IgnoreTrailingCharacterSpacingImpl() }
        set { try! _default.put_IgnoreTrailingCharacterSpacingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextdocument.selection)
    public var selection : AnyITextSelection! {
        get { try! _default.get_SelectionImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextdocument.undolimit)
    public var undoLimit : UInt32 {
        get { try! _default.get_UndoLimitImpl() }
        set { try! _default.put_UndoLimitImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextrange)
public final class RichEditTextRange : WinRTClass, ITextRange {
    private typealias SwiftABI = __ABI_Microsoft_UI_Text.ITextRange
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CText_CITextRange
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CText_CITextRange>?) -> RichEditTextRange? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextrange.canpaste)
    public func canPaste(_ format: Int32) throws -> Bool {
        try _default.CanPasteImpl(format)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextrange.changecase)
    public func changeCase(_ value: LetterCase) throws {
        try _default.ChangeCaseImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextrange.collapse)
    public func collapse(_ value: Bool) throws {
        try _default.CollapseImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextrange.copy)
    public func copy() throws {
        try _default.CopyImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextrange.cut)
    public func cut() throws {
        try _default.CutImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextrange.delete)
    public func delete(_ unit: TextRangeUnit, _ count: Int32) throws -> Int32 {
        try _default.DeleteImpl(unit, count)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextrange.endof)
    public func endOf(_ unit: TextRangeUnit, _ extend: Bool) throws -> Int32 {
        try _default.EndOfImpl(unit, extend)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextrange.expand)
    public func expand(_ unit: TextRangeUnit) throws -> Int32 {
        try _default.ExpandImpl(unit)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextrange.findtext)
    public func findText(_ value: String, _ scanLength: Int32, _ options: FindOptions) throws -> Int32 {
        try _default.FindTextImpl(value, scanLength, options)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextrange.getcharacterutf32)
    public func getCharacterUtf32(_ value: inout UInt32, _ offset: Int32) throws {
        try _default.GetCharacterUtf32Impl(&value, offset)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextrange.getclone)
    public func getClone() throws -> AnyITextRange! {
        try _default.GetCloneImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextrange.getindex)
    public func getIndex(_ unit: TextRangeUnit) throws -> Int32 {
        try _default.GetIndexImpl(unit)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextrange.getpoint)
    public func getPoint(_ horizontalAlign: HorizontalCharacterAlignment, _ verticalAlign: VerticalCharacterAlignment, _ options: PointOptions, _ point: inout WindowsFoundation.Point) throws {
        try _default.GetPointImpl(horizontalAlign, verticalAlign, options, &point)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextrange.getrect)
    public func getRect(_ options: PointOptions, _ rect: inout WindowsFoundation.Rect, _ hit: inout Int32) throws {
        try _default.GetRectImpl(options, &rect, &hit)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextrange.gettext)
    public func getText(_ options: TextGetOptions, _ value: inout String) throws {
        try _default.GetTextImpl(options, &value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextrange.gettextviastream)
    public func getTextViaStream(_ options: TextGetOptions, _ value: UWP.AnyIRandomAccessStream!) throws {
        try _default.GetTextViaStreamImpl(options, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextrange.inrange)
    public func inRange(_ range: AnyITextRange!) throws -> Bool {
        try _default.InRangeImpl(range)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextrange.insertimage)
    public func insertImage(_ width: Int32, _ height: Int32, _ ascent: Int32, _ verticalAlign: VerticalCharacterAlignment, _ alternateText: String, _ value: UWP.AnyIRandomAccessStream!) throws {
        try _default.InsertImageImpl(width, height, ascent, verticalAlign, alternateText, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextrange.instory)
    public func inStory(_ range: AnyITextRange!) throws -> Bool {
        try _default.InStoryImpl(range)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextrange.isequal)
    public func isEqual(_ range: AnyITextRange!) throws -> Bool {
        try _default.IsEqualImpl(range)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextrange.move)
    public func move(_ unit: TextRangeUnit, _ count: Int32) throws -> Int32 {
        try _default.MoveImpl(unit, count)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextrange.moveend)
    public func moveEnd(_ unit: TextRangeUnit, _ count: Int32) throws -> Int32 {
        try _default.MoveEndImpl(unit, count)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextrange.movestart)
    public func moveStart(_ unit: TextRangeUnit, _ count: Int32) throws -> Int32 {
        try _default.MoveStartImpl(unit, count)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextrange.paste)
    public func paste(_ format: Int32) throws {
        try _default.PasteImpl(format)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextrange.scrollintoview)
    public func scrollIntoView(_ value: PointOptions) throws {
        try _default.ScrollIntoViewImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextrange.matchselection)
    public func matchSelection() throws {
        try _default.MatchSelectionImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextrange.setindex)
    public func setIndex(_ unit: TextRangeUnit, _ index: Int32, _ extend: Bool) throws {
        try _default.SetIndexImpl(unit, index, extend)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextrange.setpoint)
    public func setPoint(_ point: WindowsFoundation.Point, _ options: PointOptions, _ extend: Bool) throws {
        try _default.SetPointImpl(point, options, extend)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextrange.setrange)
    public func setRange(_ startPosition: Int32, _ endPosition: Int32) throws {
        try _default.SetRangeImpl(startPosition, endPosition)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextrange.settext)
    public func setText(_ options: TextSetOptions, _ value: String) throws {
        try _default.SetTextImpl(options, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextrange.settextviastream)
    public func setTextViaStream(_ options: TextSetOptions, _ value: UWP.AnyIRandomAccessStream!) throws {
        try _default.SetTextViaStreamImpl(options, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextrange.startof)
    public func startOf(_ unit: TextRangeUnit, _ extend: Bool) throws -> Int32 {
        try _default.StartOfImpl(unit, extend)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextrange.character)
    public var character : Character {
        get { try! _default.get_CharacterImpl() }
        set { try! _default.put_CharacterImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextrange.characterformat)
    public var characterFormat : AnyITextCharacterFormat! {
        get { try! _default.get_CharacterFormatImpl() }
        set { try! _default.put_CharacterFormatImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextrange.endposition)
    public var endPosition : Int32 {
        get { try! _default.get_EndPositionImpl() }
        set { try! _default.put_EndPositionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextrange.formattedtext)
    public var formattedText : AnyITextRange! {
        get { try! _default.get_FormattedTextImpl() }
        set { try! _default.put_FormattedTextImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextrange.gravity)
    public var gravity : RangeGravity {
        get { try! _default.get_GravityImpl() }
        set { try! _default.put_GravityImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextrange.length)
    public var length : Int32 {
        get { try! _default.get_LengthImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextrange.link)
    public var link : String {
        get { try! _default.get_LinkImpl() }
        set { try! _default.put_LinkImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextrange.paragraphformat)
    public var paragraphFormat : AnyITextParagraphFormat! {
        get { try! _default.get_ParagraphFormatImpl() }
        set { try! _default.put_ParagraphFormatImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextrange.startposition)
    public var startPosition : Int32 {
        get { try! _default.get_StartPositionImpl() }
        set { try! _default.put_StartPositionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextrange.storylength)
    public var storyLength : Int32 {
        get { try! _default.get_StoryLengthImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.richedittextrange.text)
    public var text : String {
        get { try! _default.get_TextImpl() }
        set { try! _default.put_TextImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.textconstants)
public final class TextConstants {
    private static let _ITextConstantsStatics: __ABI_Microsoft_UI_Text.ITextConstantsStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Text.TextConstants"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.textconstants.autocolor)
    public static var autoColor : UWP.Color {
        get { try! _ITextConstantsStatics.get_AutoColorImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.textconstants.maxunitcount)
    public static var maxUnitCount : Int32 {
        get { try! _ITextConstantsStatics.get_MaxUnitCountImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.textconstants.minunitcount)
    public static var minUnitCount : Int32 {
        get { try! _ITextConstantsStatics.get_MinUnitCountImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.textconstants.undefinedcolor)
    public static var undefinedColor : UWP.Color {
        get { try! _ITextConstantsStatics.get_UndefinedColorImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.textconstants.undefinedfloatvalue)
    public static var undefinedFloatValue : Float {
        get { try! _ITextConstantsStatics.get_UndefinedFloatValueImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.textconstants.undefinedfontstretch)
    public static var undefinedFontStretch : UWP.FontStretch {
        get { try! _ITextConstantsStatics.get_UndefinedFontStretchImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.textconstants.undefinedfontstyle)
    public static var undefinedFontStyle : UWP.FontStyle {
        get { try! _ITextConstantsStatics.get_UndefinedFontStyleImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.textconstants.undefinedint32value)
    public static var undefinedInt32Value : Int32 {
        get { try! _ITextConstantsStatics.get_UndefinedInt32ValueImpl() }
    }

}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextcharacterformat)
public protocol ITextCharacterFormat : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextcharacterformat.setclone)
    func setClone(_ value: WinAppSDK.AnyITextCharacterFormat!) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextcharacterformat.getclone)
    func getClone() throws -> WinAppSDK.AnyITextCharacterFormat!
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextcharacterformat.isequal)
    func isEqual(_ format: WinAppSDK.AnyITextCharacterFormat!) throws -> Bool
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextcharacterformat.allcaps)
    var allCaps: WinAppSDK.FormatEffect { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextcharacterformat.backgroundcolor)
    var backgroundColor: UWP.Color { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextcharacterformat.bold)
    var bold: WinAppSDK.FormatEffect { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextcharacterformat.fontstretch)
    var fontStretch: UWP.FontStretch { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextcharacterformat.fontstyle)
    var fontStyle: UWP.FontStyle { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextcharacterformat.foregroundcolor)
    var foregroundColor: UWP.Color { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextcharacterformat.hidden)
    var hidden: WinAppSDK.FormatEffect { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextcharacterformat.italic)
    var italic: WinAppSDK.FormatEffect { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextcharacterformat.kerning)
    var kerning: Float { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextcharacterformat.languagetag)
    var languageTag: String { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextcharacterformat.linktype)
    var linkType: WinAppSDK.LinkType { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextcharacterformat.name)
    var name: String { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextcharacterformat.outline)
    var outline: WinAppSDK.FormatEffect { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextcharacterformat.position)
    var position: Float { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextcharacterformat.protectedtext)
    var protectedText: WinAppSDK.FormatEffect { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextcharacterformat.size)
    var size: Float { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextcharacterformat.smallcaps)
    var smallCaps: WinAppSDK.FormatEffect { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextcharacterformat.spacing)
    var spacing: Float { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextcharacterformat.strikethrough)
    var strikethrough: WinAppSDK.FormatEffect { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextcharacterformat.subscript)
    var `subscript`: WinAppSDK.FormatEffect { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextcharacterformat.superscript)
    var superscript: WinAppSDK.FormatEffect { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextcharacterformat.textscript)
    var textScript: WinAppSDK.TextScript { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextcharacterformat.underline)
    var underline: WinAppSDK.UnderlineType { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextcharacterformat.weight)
    var weight: Int32 { get set }
}

extension ITextCharacterFormat {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Text.ITextCharacterFormatWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Text.ITextCharacterFormatWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyITextCharacterFormat = any ITextCharacterFormat

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextparagraphformat)
public protocol ITextParagraphFormat : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextparagraphformat.addtab)
    func addTab(_ position: Float, _ align: WinAppSDK.TabAlignment, _ leader: WinAppSDK.TabLeader) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextparagraphformat.clearalltabs)
    func clearAllTabs() throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextparagraphformat.deletetab)
    func deleteTab(_ position: Float) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextparagraphformat.getclone)
    func getClone() throws -> WinAppSDK.AnyITextParagraphFormat!
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextparagraphformat.gettab)
    func getTab(_ index: Int32, _ position: inout Float, _ align: inout WinAppSDK.TabAlignment, _ leader: inout WinAppSDK.TabLeader) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextparagraphformat.isequal)
    func isEqual(_ format: WinAppSDK.AnyITextParagraphFormat!) throws -> Bool
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextparagraphformat.setclone)
    func setClone(_ format: WinAppSDK.AnyITextParagraphFormat!) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextparagraphformat.setindents)
    func setIndents(_ start: Float, _ left: Float, _ right: Float) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextparagraphformat.setlinespacing)
    func setLineSpacing(_ rule: WinAppSDK.LineSpacingRule, _ spacing: Float) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextparagraphformat.alignment)
    var alignment: WinAppSDK.ParagraphAlignment { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextparagraphformat.firstlineindent)
    var firstLineIndent: Float { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextparagraphformat.keeptogether)
    var keepTogether: WinAppSDK.FormatEffect { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextparagraphformat.keepwithnext)
    var keepWithNext: WinAppSDK.FormatEffect { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextparagraphformat.leftindent)
    var leftIndent: Float { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextparagraphformat.linespacing)
    var lineSpacing: Float { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextparagraphformat.linespacingrule)
    var lineSpacingRule: WinAppSDK.LineSpacingRule { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextparagraphformat.listalignment)
    var listAlignment: WinAppSDK.MarkerAlignment { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextparagraphformat.listlevelindex)
    var listLevelIndex: Int32 { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextparagraphformat.liststart)
    var listStart: Int32 { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextparagraphformat.liststyle)
    var listStyle: WinAppSDK.MarkerStyle { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextparagraphformat.listtab)
    var listTab: Float { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextparagraphformat.listtype)
    var listType: WinAppSDK.MarkerType { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextparagraphformat.nolinenumber)
    var noLineNumber: WinAppSDK.FormatEffect { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextparagraphformat.pagebreakbefore)
    var pageBreakBefore: WinAppSDK.FormatEffect { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextparagraphformat.rightindent)
    var rightIndent: Float { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextparagraphformat.righttoleft)
    var rightToLeft: WinAppSDK.FormatEffect { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextparagraphformat.spaceafter)
    var spaceAfter: Float { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextparagraphformat.spacebefore)
    var spaceBefore: Float { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextparagraphformat.style)
    var style: WinAppSDK.ParagraphStyle { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextparagraphformat.tabcount)
    var tabCount: Int32 { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextparagraphformat.widowcontrol)
    var widowControl: WinAppSDK.FormatEffect { get set }
}

extension ITextParagraphFormat {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Text.ITextParagraphFormatWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Text.ITextParagraphFormatWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyITextParagraphFormat = any ITextParagraphFormat

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextrange)
public protocol ITextRange : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextrange.canpaste)
    func canPaste(_ format: Int32) throws -> Bool
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextrange.changecase)
    func changeCase(_ value: WinAppSDK.LetterCase) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextrange.collapse)
    func collapse(_ value: Bool) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextrange.copy)
    func copy() throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextrange.cut)
    func cut() throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextrange.delete)
    func delete(_ unit: WinAppSDK.TextRangeUnit, _ count: Int32) throws -> Int32
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextrange.endof)
    func endOf(_ unit: WinAppSDK.TextRangeUnit, _ extend: Bool) throws -> Int32
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextrange.expand)
    func expand(_ unit: WinAppSDK.TextRangeUnit) throws -> Int32
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextrange.findtext)
    func findText(_ value: String, _ scanLength: Int32, _ options: WinAppSDK.FindOptions) throws -> Int32
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextrange.getcharacterutf32)
    func getCharacterUtf32(_ value: inout UInt32, _ offset: Int32) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextrange.getclone)
    func getClone() throws -> WinAppSDK.AnyITextRange!
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextrange.getindex)
    func getIndex(_ unit: WinAppSDK.TextRangeUnit) throws -> Int32
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextrange.getpoint)
    func getPoint(_ horizontalAlign: WinAppSDK.HorizontalCharacterAlignment, _ verticalAlign: WinAppSDK.VerticalCharacterAlignment, _ options: WinAppSDK.PointOptions, _ point: inout WindowsFoundation.Point) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextrange.getrect)
    func getRect(_ options: WinAppSDK.PointOptions, _ rect: inout WindowsFoundation.Rect, _ hit: inout Int32) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextrange.gettext)
    func getText(_ options: WinAppSDK.TextGetOptions, _ value: inout String) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextrange.gettextviastream)
    func getTextViaStream(_ options: WinAppSDK.TextGetOptions, _ value: UWP.AnyIRandomAccessStream!) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextrange.inrange)
    func inRange(_ range: WinAppSDK.AnyITextRange!) throws -> Bool
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextrange.insertimage)
    func insertImage(_ width: Int32, _ height: Int32, _ ascent: Int32, _ verticalAlign: WinAppSDK.VerticalCharacterAlignment, _ alternateText: String, _ value: UWP.AnyIRandomAccessStream!) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextrange.instory)
    func inStory(_ range: WinAppSDK.AnyITextRange!) throws -> Bool
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextrange.isequal)
    func isEqual(_ range: WinAppSDK.AnyITextRange!) throws -> Bool
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextrange.move)
    func move(_ unit: WinAppSDK.TextRangeUnit, _ count: Int32) throws -> Int32
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextrange.moveend)
    func moveEnd(_ unit: WinAppSDK.TextRangeUnit, _ count: Int32) throws -> Int32
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextrange.movestart)
    func moveStart(_ unit: WinAppSDK.TextRangeUnit, _ count: Int32) throws -> Int32
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextrange.paste)
    func paste(_ format: Int32) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextrange.scrollintoview)
    func scrollIntoView(_ value: WinAppSDK.PointOptions) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextrange.matchselection)
    func matchSelection() throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextrange.setindex)
    func setIndex(_ unit: WinAppSDK.TextRangeUnit, _ index: Int32, _ extend: Bool) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextrange.setpoint)
    func setPoint(_ point: WindowsFoundation.Point, _ options: WinAppSDK.PointOptions, _ extend: Bool) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextrange.setrange)
    func setRange(_ startPosition: Int32, _ endPosition: Int32) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextrange.settext)
    func setText(_ options: WinAppSDK.TextSetOptions, _ value: String) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextrange.settextviastream)
    func setTextViaStream(_ options: WinAppSDK.TextSetOptions, _ value: UWP.AnyIRandomAccessStream!) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextrange.startof)
    func startOf(_ unit: WinAppSDK.TextRangeUnit, _ extend: Bool) throws -> Int32
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextrange.character)
    var character: Character { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextrange.characterformat)
    var characterFormat: WinAppSDK.AnyITextCharacterFormat! { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextrange.endposition)
    var endPosition: Int32 { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextrange.formattedtext)
    var formattedText: WinAppSDK.AnyITextRange! { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextrange.gravity)
    var gravity: WinAppSDK.RangeGravity { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextrange.length)
    var length: Int32 { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextrange.link)
    var link: String { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextrange.paragraphformat)
    var paragraphFormat: WinAppSDK.AnyITextParagraphFormat! { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextrange.startposition)
    var startPosition: Int32 { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextrange.storylength)
    var storyLength: Int32 { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextrange.text)
    var text: String { get set }
}

extension ITextRange {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Text.ITextRangeWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Text.ITextRangeWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyITextRange = any ITextRange

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextselection)
public protocol ITextSelection : ITextRange {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextselection.endkey)
    func endKey(_ unit: WinAppSDK.TextRangeUnit, _ extend: Bool) throws -> Int32
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextselection.homekey)
    func homeKey(_ unit: WinAppSDK.TextRangeUnit, _ extend: Bool) throws -> Int32
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextselection.movedown)
    func moveDown(_ unit: WinAppSDK.TextRangeUnit, _ count: Int32, _ extend: Bool) throws -> Int32
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextselection.moveleft)
    func moveLeft(_ unit: WinAppSDK.TextRangeUnit, _ count: Int32, _ extend: Bool) throws -> Int32
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextselection.moveright)
    func moveRight(_ unit: WinAppSDK.TextRangeUnit, _ count: Int32, _ extend: Bool) throws -> Int32
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextselection.moveup)
    func moveUp(_ unit: WinAppSDK.TextRangeUnit, _ count: Int32, _ extend: Bool) throws -> Int32
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextselection.typetext)
    func typeText(_ value: String) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextselection.options)
    var options: WinAppSDK.SelectionOptions { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.text.itextselection.type)
    var type: WinAppSDK.SelectionType { get }
}

extension ITextSelection {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Text.ITextSelectionWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Text.ITextSelectionWrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Microsoft_UI_Text.ITextRangeWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Text.ITextRangeWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyITextSelection = any ITextSelection

extension WinAppSDK.CaretType {
    public static var normal : WinAppSDK.CaretType {
        __x_ABI_CMicrosoft_CUI_CText_CCaretType_Normal
    }
    public static var null : WinAppSDK.CaretType {
        __x_ABI_CMicrosoft_CUI_CText_CCaretType_Null
    }
}
extension WinAppSDK.CaretType: @retroactive Hashable, @retroactive Codable {}

extension WinAppSDK.FindOptions {
    public static var none : WinAppSDK.FindOptions {
        __x_ABI_CMicrosoft_CUI_CText_CFindOptions_None
    }
    public static var word : WinAppSDK.FindOptions {
        __x_ABI_CMicrosoft_CUI_CText_CFindOptions_Word
    }
    public static var `case` : WinAppSDK.FindOptions {
        __x_ABI_CMicrosoft_CUI_CText_CFindOptions_Case
    }
}
extension WinAppSDK.FindOptions: @retroactive Hashable, @retroactive Codable {}

extension WinAppSDK.FormatEffect {
    public static var off : WinAppSDK.FormatEffect {
        __x_ABI_CMicrosoft_CUI_CText_CFormatEffect_Off
    }
    public static var on : WinAppSDK.FormatEffect {
        __x_ABI_CMicrosoft_CUI_CText_CFormatEffect_On
    }
    public static var toggle : WinAppSDK.FormatEffect {
        __x_ABI_CMicrosoft_CUI_CText_CFormatEffect_Toggle
    }
    public static var undefined : WinAppSDK.FormatEffect {
        __x_ABI_CMicrosoft_CUI_CText_CFormatEffect_Undefined
    }
}
extension WinAppSDK.FormatEffect: @retroactive Hashable, @retroactive Codable {}

extension WinAppSDK.HorizontalCharacterAlignment {
    public static var left : WinAppSDK.HorizontalCharacterAlignment {
        __x_ABI_CMicrosoft_CUI_CText_CHorizontalCharacterAlignment_Left
    }
    public static var right : WinAppSDK.HorizontalCharacterAlignment {
        __x_ABI_CMicrosoft_CUI_CText_CHorizontalCharacterAlignment_Right
    }
    public static var center : WinAppSDK.HorizontalCharacterAlignment {
        __x_ABI_CMicrosoft_CUI_CText_CHorizontalCharacterAlignment_Center
    }
}
extension WinAppSDK.HorizontalCharacterAlignment: @retroactive Hashable, @retroactive Codable {}

extension WinAppSDK.LetterCase {
    public static var lower : WinAppSDK.LetterCase {
        __x_ABI_CMicrosoft_CUI_CText_CLetterCase_Lower
    }
    public static var upper : WinAppSDK.LetterCase {
        __x_ABI_CMicrosoft_CUI_CText_CLetterCase_Upper
    }
}
extension WinAppSDK.LetterCase: @retroactive Hashable, @retroactive Codable {}

extension WinAppSDK.LineSpacingRule {
    public static var undefined : WinAppSDK.LineSpacingRule {
        __x_ABI_CMicrosoft_CUI_CText_CLineSpacingRule_Undefined
    }
    public static var single : WinAppSDK.LineSpacingRule {
        __x_ABI_CMicrosoft_CUI_CText_CLineSpacingRule_Single
    }
    public static var oneAndHalf : WinAppSDK.LineSpacingRule {
        __x_ABI_CMicrosoft_CUI_CText_CLineSpacingRule_OneAndHalf
    }
    public static var double : WinAppSDK.LineSpacingRule {
        __x_ABI_CMicrosoft_CUI_CText_CLineSpacingRule_Double
    }
    public static var atLeast : WinAppSDK.LineSpacingRule {
        __x_ABI_CMicrosoft_CUI_CText_CLineSpacingRule_AtLeast
    }
    public static var exactly : WinAppSDK.LineSpacingRule {
        __x_ABI_CMicrosoft_CUI_CText_CLineSpacingRule_Exactly
    }
    public static var multiple : WinAppSDK.LineSpacingRule {
        __x_ABI_CMicrosoft_CUI_CText_CLineSpacingRule_Multiple
    }
    public static var percent : WinAppSDK.LineSpacingRule {
        __x_ABI_CMicrosoft_CUI_CText_CLineSpacingRule_Percent
    }
}
extension WinAppSDK.LineSpacingRule: @retroactive Hashable, @retroactive Codable {}

extension WinAppSDK.LinkType {
    public static var undefined : WinAppSDK.LinkType {
        __x_ABI_CMicrosoft_CUI_CText_CLinkType_Undefined
    }
    public static var notALink : WinAppSDK.LinkType {
        __x_ABI_CMicrosoft_CUI_CText_CLinkType_NotALink
    }
    public static var clientLink : WinAppSDK.LinkType {
        __x_ABI_CMicrosoft_CUI_CText_CLinkType_ClientLink
    }
    public static var friendlyLinkName : WinAppSDK.LinkType {
        __x_ABI_CMicrosoft_CUI_CText_CLinkType_FriendlyLinkName
    }
    public static var friendlyLinkAddress : WinAppSDK.LinkType {
        __x_ABI_CMicrosoft_CUI_CText_CLinkType_FriendlyLinkAddress
    }
    public static var autoLink : WinAppSDK.LinkType {
        __x_ABI_CMicrosoft_CUI_CText_CLinkType_AutoLink
    }
    public static var autoLinkEmail : WinAppSDK.LinkType {
        __x_ABI_CMicrosoft_CUI_CText_CLinkType_AutoLinkEmail
    }
    public static var autoLinkPhone : WinAppSDK.LinkType {
        __x_ABI_CMicrosoft_CUI_CText_CLinkType_AutoLinkPhone
    }
    public static var autoLinkPath : WinAppSDK.LinkType {
        __x_ABI_CMicrosoft_CUI_CText_CLinkType_AutoLinkPath
    }
}
extension WinAppSDK.LinkType: @retroactive Hashable, @retroactive Codable {}

extension WinAppSDK.MarkerAlignment {
    public static var undefined : WinAppSDK.MarkerAlignment {
        __x_ABI_CMicrosoft_CUI_CText_CMarkerAlignment_Undefined
    }
    public static var left : WinAppSDK.MarkerAlignment {
        __x_ABI_CMicrosoft_CUI_CText_CMarkerAlignment_Left
    }
    public static var center : WinAppSDK.MarkerAlignment {
        __x_ABI_CMicrosoft_CUI_CText_CMarkerAlignment_Center
    }
    public static var right : WinAppSDK.MarkerAlignment {
        __x_ABI_CMicrosoft_CUI_CText_CMarkerAlignment_Right
    }
}
extension WinAppSDK.MarkerAlignment: @retroactive Hashable, @retroactive Codable {}

extension WinAppSDK.MarkerStyle {
    public static var undefined : WinAppSDK.MarkerStyle {
        __x_ABI_CMicrosoft_CUI_CText_CMarkerStyle_Undefined
    }
    public static var parenthesis : WinAppSDK.MarkerStyle {
        __x_ABI_CMicrosoft_CUI_CText_CMarkerStyle_Parenthesis
    }
    public static var parentheses : WinAppSDK.MarkerStyle {
        __x_ABI_CMicrosoft_CUI_CText_CMarkerStyle_Parentheses
    }
    public static var period : WinAppSDK.MarkerStyle {
        __x_ABI_CMicrosoft_CUI_CText_CMarkerStyle_Period
    }
    public static var plain : WinAppSDK.MarkerStyle {
        __x_ABI_CMicrosoft_CUI_CText_CMarkerStyle_Plain
    }
    public static var minus : WinAppSDK.MarkerStyle {
        __x_ABI_CMicrosoft_CUI_CText_CMarkerStyle_Minus
    }
    public static var noNumber : WinAppSDK.MarkerStyle {
        __x_ABI_CMicrosoft_CUI_CText_CMarkerStyle_NoNumber
    }
}
extension WinAppSDK.MarkerStyle: @retroactive Hashable, @retroactive Codable {}

extension WinAppSDK.MarkerType {
    public static var undefined : WinAppSDK.MarkerType {
        __x_ABI_CMicrosoft_CUI_CText_CMarkerType_Undefined
    }
    public static var none : WinAppSDK.MarkerType {
        __x_ABI_CMicrosoft_CUI_CText_CMarkerType_None
    }
    public static var bullet : WinAppSDK.MarkerType {
        __x_ABI_CMicrosoft_CUI_CText_CMarkerType_Bullet
    }
    public static var arabic : WinAppSDK.MarkerType {
        __x_ABI_CMicrosoft_CUI_CText_CMarkerType_Arabic
    }
    public static var lowercaseEnglishLetter : WinAppSDK.MarkerType {
        __x_ABI_CMicrosoft_CUI_CText_CMarkerType_LowercaseEnglishLetter
    }
    public static var uppercaseEnglishLetter : WinAppSDK.MarkerType {
        __x_ABI_CMicrosoft_CUI_CText_CMarkerType_UppercaseEnglishLetter
    }
    public static var lowercaseRoman : WinAppSDK.MarkerType {
        __x_ABI_CMicrosoft_CUI_CText_CMarkerType_LowercaseRoman
    }
    public static var uppercaseRoman : WinAppSDK.MarkerType {
        __x_ABI_CMicrosoft_CUI_CText_CMarkerType_UppercaseRoman
    }
    public static var unicodeSequence : WinAppSDK.MarkerType {
        __x_ABI_CMicrosoft_CUI_CText_CMarkerType_UnicodeSequence
    }
    public static var circledNumber : WinAppSDK.MarkerType {
        __x_ABI_CMicrosoft_CUI_CText_CMarkerType_CircledNumber
    }
    public static var blackCircleWingding : WinAppSDK.MarkerType {
        __x_ABI_CMicrosoft_CUI_CText_CMarkerType_BlackCircleWingding
    }
    public static var whiteCircleWingding : WinAppSDK.MarkerType {
        __x_ABI_CMicrosoft_CUI_CText_CMarkerType_WhiteCircleWingding
    }
    public static var arabicWide : WinAppSDK.MarkerType {
        __x_ABI_CMicrosoft_CUI_CText_CMarkerType_ArabicWide
    }
    public static var simplifiedChinese : WinAppSDK.MarkerType {
        __x_ABI_CMicrosoft_CUI_CText_CMarkerType_SimplifiedChinese
    }
    public static var traditionalChinese : WinAppSDK.MarkerType {
        __x_ABI_CMicrosoft_CUI_CText_CMarkerType_TraditionalChinese
    }
    public static var japanSimplifiedChinese : WinAppSDK.MarkerType {
        __x_ABI_CMicrosoft_CUI_CText_CMarkerType_JapanSimplifiedChinese
    }
    public static var japanKorea : WinAppSDK.MarkerType {
        __x_ABI_CMicrosoft_CUI_CText_CMarkerType_JapanKorea
    }
    public static var arabicDictionary : WinAppSDK.MarkerType {
        __x_ABI_CMicrosoft_CUI_CText_CMarkerType_ArabicDictionary
    }
    public static var arabicAbjad : WinAppSDK.MarkerType {
        __x_ABI_CMicrosoft_CUI_CText_CMarkerType_ArabicAbjad
    }
    public static var hebrew : WinAppSDK.MarkerType {
        __x_ABI_CMicrosoft_CUI_CText_CMarkerType_Hebrew
    }
    public static var thaiAlphabetic : WinAppSDK.MarkerType {
        __x_ABI_CMicrosoft_CUI_CText_CMarkerType_ThaiAlphabetic
    }
    public static var thaiNumeric : WinAppSDK.MarkerType {
        __x_ABI_CMicrosoft_CUI_CText_CMarkerType_ThaiNumeric
    }
    public static var devanagariVowel : WinAppSDK.MarkerType {
        __x_ABI_CMicrosoft_CUI_CText_CMarkerType_DevanagariVowel
    }
    public static var devanagariConsonant : WinAppSDK.MarkerType {
        __x_ABI_CMicrosoft_CUI_CText_CMarkerType_DevanagariConsonant
    }
    public static var devanagariNumeric : WinAppSDK.MarkerType {
        __x_ABI_CMicrosoft_CUI_CText_CMarkerType_DevanagariNumeric
    }
}
extension WinAppSDK.MarkerType: @retroactive Hashable, @retroactive Codable {}

extension WinAppSDK.ParagraphAlignment {
    public static var undefined : WinAppSDK.ParagraphAlignment {
        __x_ABI_CMicrosoft_CUI_CText_CParagraphAlignment_Undefined
    }
    public static var left : WinAppSDK.ParagraphAlignment {
        __x_ABI_CMicrosoft_CUI_CText_CParagraphAlignment_Left
    }
    public static var center : WinAppSDK.ParagraphAlignment {
        __x_ABI_CMicrosoft_CUI_CText_CParagraphAlignment_Center
    }
    public static var right : WinAppSDK.ParagraphAlignment {
        __x_ABI_CMicrosoft_CUI_CText_CParagraphAlignment_Right
    }
    public static var justify : WinAppSDK.ParagraphAlignment {
        __x_ABI_CMicrosoft_CUI_CText_CParagraphAlignment_Justify
    }
}
extension WinAppSDK.ParagraphAlignment: @retroactive Hashable, @retroactive Codable {}

extension WinAppSDK.ParagraphStyle {
    public static var undefined : WinAppSDK.ParagraphStyle {
        __x_ABI_CMicrosoft_CUI_CText_CParagraphStyle_Undefined
    }
    public static var none : WinAppSDK.ParagraphStyle {
        __x_ABI_CMicrosoft_CUI_CText_CParagraphStyle_None
    }
    public static var normal : WinAppSDK.ParagraphStyle {
        __x_ABI_CMicrosoft_CUI_CText_CParagraphStyle_Normal
    }
    public static var heading1 : WinAppSDK.ParagraphStyle {
        __x_ABI_CMicrosoft_CUI_CText_CParagraphStyle_Heading1
    }
    public static var heading2 : WinAppSDK.ParagraphStyle {
        __x_ABI_CMicrosoft_CUI_CText_CParagraphStyle_Heading2
    }
    public static var heading3 : WinAppSDK.ParagraphStyle {
        __x_ABI_CMicrosoft_CUI_CText_CParagraphStyle_Heading3
    }
    public static var heading4 : WinAppSDK.ParagraphStyle {
        __x_ABI_CMicrosoft_CUI_CText_CParagraphStyle_Heading4
    }
    public static var heading5 : WinAppSDK.ParagraphStyle {
        __x_ABI_CMicrosoft_CUI_CText_CParagraphStyle_Heading5
    }
    public static var heading6 : WinAppSDK.ParagraphStyle {
        __x_ABI_CMicrosoft_CUI_CText_CParagraphStyle_Heading6
    }
    public static var heading7 : WinAppSDK.ParagraphStyle {
        __x_ABI_CMicrosoft_CUI_CText_CParagraphStyle_Heading7
    }
    public static var heading8 : WinAppSDK.ParagraphStyle {
        __x_ABI_CMicrosoft_CUI_CText_CParagraphStyle_Heading8
    }
    public static var heading9 : WinAppSDK.ParagraphStyle {
        __x_ABI_CMicrosoft_CUI_CText_CParagraphStyle_Heading9
    }
}
extension WinAppSDK.ParagraphStyle: @retroactive Hashable, @retroactive Codable {}

extension WinAppSDK.PointOptions {
    public static var none : WinAppSDK.PointOptions {
        __x_ABI_CMicrosoft_CUI_CText_CPointOptions_None
    }
    public static var includeInset : WinAppSDK.PointOptions {
        __x_ABI_CMicrosoft_CUI_CText_CPointOptions_IncludeInset
    }
    public static var start : WinAppSDK.PointOptions {
        __x_ABI_CMicrosoft_CUI_CText_CPointOptions_Start
    }
    public static var clientCoordinates : WinAppSDK.PointOptions {
        __x_ABI_CMicrosoft_CUI_CText_CPointOptions_ClientCoordinates
    }
    public static var allowOffClient : WinAppSDK.PointOptions {
        __x_ABI_CMicrosoft_CUI_CText_CPointOptions_AllowOffClient
    }
    public static var transform : WinAppSDK.PointOptions {
        __x_ABI_CMicrosoft_CUI_CText_CPointOptions_Transform
    }
    public static var noHorizontalScroll : WinAppSDK.PointOptions {
        __x_ABI_CMicrosoft_CUI_CText_CPointOptions_NoHorizontalScroll
    }
    public static var noVerticalScroll : WinAppSDK.PointOptions {
        __x_ABI_CMicrosoft_CUI_CText_CPointOptions_NoVerticalScroll
    }
}
extension WinAppSDK.PointOptions: @retroactive Hashable, @retroactive Codable {}

extension WinAppSDK.RangeGravity {
    public static var uiBehavior : WinAppSDK.RangeGravity {
        __x_ABI_CMicrosoft_CUI_CText_CRangeGravity_UIBehavior
    }
    public static var backward : WinAppSDK.RangeGravity {
        __x_ABI_CMicrosoft_CUI_CText_CRangeGravity_Backward
    }
    public static var forward : WinAppSDK.RangeGravity {
        __x_ABI_CMicrosoft_CUI_CText_CRangeGravity_Forward
    }
    public static var inward : WinAppSDK.RangeGravity {
        __x_ABI_CMicrosoft_CUI_CText_CRangeGravity_Inward
    }
    public static var outward : WinAppSDK.RangeGravity {
        __x_ABI_CMicrosoft_CUI_CText_CRangeGravity_Outward
    }
}
extension WinAppSDK.RangeGravity: @retroactive Hashable, @retroactive Codable {}

extension WinAppSDK.RichEditMathMode {
    public static var noMath : WinAppSDK.RichEditMathMode {
        __x_ABI_CMicrosoft_CUI_CText_CRichEditMathMode_NoMath
    }
    public static var mathOnly : WinAppSDK.RichEditMathMode {
        __x_ABI_CMicrosoft_CUI_CText_CRichEditMathMode_MathOnly
    }
}
extension WinAppSDK.RichEditMathMode: @retroactive Hashable, @retroactive Codable {}

extension WinAppSDK.SelectionOptions {
    public static var startActive : WinAppSDK.SelectionOptions {
        __x_ABI_CMicrosoft_CUI_CText_CSelectionOptions_StartActive
    }
    public static var atEndOfLine : WinAppSDK.SelectionOptions {
        __x_ABI_CMicrosoft_CUI_CText_CSelectionOptions_AtEndOfLine
    }
    public static var overtype : WinAppSDK.SelectionOptions {
        __x_ABI_CMicrosoft_CUI_CText_CSelectionOptions_Overtype
    }
    public static var active : WinAppSDK.SelectionOptions {
        __x_ABI_CMicrosoft_CUI_CText_CSelectionOptions_Active
    }
    public static var replace : WinAppSDK.SelectionOptions {
        __x_ABI_CMicrosoft_CUI_CText_CSelectionOptions_Replace
    }
}
extension WinAppSDK.SelectionOptions: @retroactive Hashable, @retroactive Codable {}

extension WinAppSDK.SelectionType {
    public static var none : WinAppSDK.SelectionType {
        __x_ABI_CMicrosoft_CUI_CText_CSelectionType_None
    }
    public static var insertionPoint : WinAppSDK.SelectionType {
        __x_ABI_CMicrosoft_CUI_CText_CSelectionType_InsertionPoint
    }
    public static var normal : WinAppSDK.SelectionType {
        __x_ABI_CMicrosoft_CUI_CText_CSelectionType_Normal
    }
    public static var inlineShape : WinAppSDK.SelectionType {
        __x_ABI_CMicrosoft_CUI_CText_CSelectionType_InlineShape
    }
    public static var shape : WinAppSDK.SelectionType {
        __x_ABI_CMicrosoft_CUI_CText_CSelectionType_Shape
    }
}
extension WinAppSDK.SelectionType: @retroactive Hashable, @retroactive Codable {}

extension WinAppSDK.TabAlignment {
    public static var left : WinAppSDK.TabAlignment {
        __x_ABI_CMicrosoft_CUI_CText_CTabAlignment_Left
    }
    public static var center : WinAppSDK.TabAlignment {
        __x_ABI_CMicrosoft_CUI_CText_CTabAlignment_Center
    }
    public static var right : WinAppSDK.TabAlignment {
        __x_ABI_CMicrosoft_CUI_CText_CTabAlignment_Right
    }
    public static var decimal : WinAppSDK.TabAlignment {
        __x_ABI_CMicrosoft_CUI_CText_CTabAlignment_Decimal
    }
    public static var bar : WinAppSDK.TabAlignment {
        __x_ABI_CMicrosoft_CUI_CText_CTabAlignment_Bar
    }
}
extension WinAppSDK.TabAlignment: @retroactive Hashable, @retroactive Codable {}

extension WinAppSDK.TabLeader {
    public static var spaces : WinAppSDK.TabLeader {
        __x_ABI_CMicrosoft_CUI_CText_CTabLeader_Spaces
    }
    public static var dots : WinAppSDK.TabLeader {
        __x_ABI_CMicrosoft_CUI_CText_CTabLeader_Dots
    }
    public static var dashes : WinAppSDK.TabLeader {
        __x_ABI_CMicrosoft_CUI_CText_CTabLeader_Dashes
    }
    public static var lines : WinAppSDK.TabLeader {
        __x_ABI_CMicrosoft_CUI_CText_CTabLeader_Lines
    }
    public static var thickLines : WinAppSDK.TabLeader {
        __x_ABI_CMicrosoft_CUI_CText_CTabLeader_ThickLines
    }
    public static var equals : WinAppSDK.TabLeader {
        __x_ABI_CMicrosoft_CUI_CText_CTabLeader_Equals
    }
}
extension WinAppSDK.TabLeader: @retroactive Hashable, @retroactive Codable {}

extension WinAppSDK.TextGetOptions {
    public static var none : WinAppSDK.TextGetOptions {
        __x_ABI_CMicrosoft_CUI_CText_CTextGetOptions_None
    }
    public static var adjustCrlf : WinAppSDK.TextGetOptions {
        __x_ABI_CMicrosoft_CUI_CText_CTextGetOptions_AdjustCrlf
    }
    public static var useCrlf : WinAppSDK.TextGetOptions {
        __x_ABI_CMicrosoft_CUI_CText_CTextGetOptions_UseCrlf
    }
    public static var useObjectText : WinAppSDK.TextGetOptions {
        __x_ABI_CMicrosoft_CUI_CText_CTextGetOptions_UseObjectText
    }
    public static var allowFinalEop : WinAppSDK.TextGetOptions {
        __x_ABI_CMicrosoft_CUI_CText_CTextGetOptions_AllowFinalEop
    }
    public static var noHidden : WinAppSDK.TextGetOptions {
        __x_ABI_CMicrosoft_CUI_CText_CTextGetOptions_NoHidden
    }
    public static var includeNumbering : WinAppSDK.TextGetOptions {
        __x_ABI_CMicrosoft_CUI_CText_CTextGetOptions_IncludeNumbering
    }
    public static var formatRtf : WinAppSDK.TextGetOptions {
        __x_ABI_CMicrosoft_CUI_CText_CTextGetOptions_FormatRtf
    }
    public static var useLf : WinAppSDK.TextGetOptions {
        __x_ABI_CMicrosoft_CUI_CText_CTextGetOptions_UseLf
    }
}
extension WinAppSDK.TextGetOptions: @retroactive Hashable, @retroactive Codable {}

extension WinAppSDK.TextRangeUnit {
    public static var character : WinAppSDK.TextRangeUnit {
        __x_ABI_CMicrosoft_CUI_CText_CTextRangeUnit_Character
    }
    public static var word : WinAppSDK.TextRangeUnit {
        __x_ABI_CMicrosoft_CUI_CText_CTextRangeUnit_Word
    }
    public static var sentence : WinAppSDK.TextRangeUnit {
        __x_ABI_CMicrosoft_CUI_CText_CTextRangeUnit_Sentence
    }
    public static var paragraph : WinAppSDK.TextRangeUnit {
        __x_ABI_CMicrosoft_CUI_CText_CTextRangeUnit_Paragraph
    }
    public static var line : WinAppSDK.TextRangeUnit {
        __x_ABI_CMicrosoft_CUI_CText_CTextRangeUnit_Line
    }
    public static var story : WinAppSDK.TextRangeUnit {
        __x_ABI_CMicrosoft_CUI_CText_CTextRangeUnit_Story
    }
    public static var screen : WinAppSDK.TextRangeUnit {
        __x_ABI_CMicrosoft_CUI_CText_CTextRangeUnit_Screen
    }
    public static var section : WinAppSDK.TextRangeUnit {
        __x_ABI_CMicrosoft_CUI_CText_CTextRangeUnit_Section
    }
    public static var window : WinAppSDK.TextRangeUnit {
        __x_ABI_CMicrosoft_CUI_CText_CTextRangeUnit_Window
    }
    public static var characterFormat : WinAppSDK.TextRangeUnit {
        __x_ABI_CMicrosoft_CUI_CText_CTextRangeUnit_CharacterFormat
    }
    public static var paragraphFormat : WinAppSDK.TextRangeUnit {
        __x_ABI_CMicrosoft_CUI_CText_CTextRangeUnit_ParagraphFormat
    }
    public static var object : WinAppSDK.TextRangeUnit {
        __x_ABI_CMicrosoft_CUI_CText_CTextRangeUnit_Object
    }
    public static var hardParagraph : WinAppSDK.TextRangeUnit {
        __x_ABI_CMicrosoft_CUI_CText_CTextRangeUnit_HardParagraph
    }
    public static var cluster : WinAppSDK.TextRangeUnit {
        __x_ABI_CMicrosoft_CUI_CText_CTextRangeUnit_Cluster
    }
    public static var bold : WinAppSDK.TextRangeUnit {
        __x_ABI_CMicrosoft_CUI_CText_CTextRangeUnit_Bold
    }
    public static var italic : WinAppSDK.TextRangeUnit {
        __x_ABI_CMicrosoft_CUI_CText_CTextRangeUnit_Italic
    }
    public static var underline : WinAppSDK.TextRangeUnit {
        __x_ABI_CMicrosoft_CUI_CText_CTextRangeUnit_Underline
    }
    public static var strikethrough : WinAppSDK.TextRangeUnit {
        __x_ABI_CMicrosoft_CUI_CText_CTextRangeUnit_Strikethrough
    }
    public static var protectedText : WinAppSDK.TextRangeUnit {
        __x_ABI_CMicrosoft_CUI_CText_CTextRangeUnit_ProtectedText
    }
    public static var link : WinAppSDK.TextRangeUnit {
        __x_ABI_CMicrosoft_CUI_CText_CTextRangeUnit_Link
    }
    public static var smallCaps : WinAppSDK.TextRangeUnit {
        __x_ABI_CMicrosoft_CUI_CText_CTextRangeUnit_SmallCaps
    }
    public static var allCaps : WinAppSDK.TextRangeUnit {
        __x_ABI_CMicrosoft_CUI_CText_CTextRangeUnit_AllCaps
    }
    public static var hidden : WinAppSDK.TextRangeUnit {
        __x_ABI_CMicrosoft_CUI_CText_CTextRangeUnit_Hidden
    }
    public static var outline : WinAppSDK.TextRangeUnit {
        __x_ABI_CMicrosoft_CUI_CText_CTextRangeUnit_Outline
    }
    public static var shadow : WinAppSDK.TextRangeUnit {
        __x_ABI_CMicrosoft_CUI_CText_CTextRangeUnit_Shadow
    }
    public static var imprint : WinAppSDK.TextRangeUnit {
        __x_ABI_CMicrosoft_CUI_CText_CTextRangeUnit_Imprint
    }
    public static var disabled : WinAppSDK.TextRangeUnit {
        __x_ABI_CMicrosoft_CUI_CText_CTextRangeUnit_Disabled
    }
    public static var revised : WinAppSDK.TextRangeUnit {
        __x_ABI_CMicrosoft_CUI_CText_CTextRangeUnit_Revised
    }
    public static var `subscript` : WinAppSDK.TextRangeUnit {
        __x_ABI_CMicrosoft_CUI_CText_CTextRangeUnit_Subscript
    }
    public static var superscript : WinAppSDK.TextRangeUnit {
        __x_ABI_CMicrosoft_CUI_CText_CTextRangeUnit_Superscript
    }
    public static var fontBound : WinAppSDK.TextRangeUnit {
        __x_ABI_CMicrosoft_CUI_CText_CTextRangeUnit_FontBound
    }
    public static var linkProtected : WinAppSDK.TextRangeUnit {
        __x_ABI_CMicrosoft_CUI_CText_CTextRangeUnit_LinkProtected
    }
    public static var contentLink : WinAppSDK.TextRangeUnit {
        __x_ABI_CMicrosoft_CUI_CText_CTextRangeUnit_ContentLink
    }
}
extension WinAppSDK.TextRangeUnit: @retroactive Hashable, @retroactive Codable {}

extension WinAppSDK.TextScript {
    public static var undefined : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_Undefined
    }
    public static var ansi : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_Ansi
    }
    public static var eastEurope : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_EastEurope
    }
    public static var cyrillic : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_Cyrillic
    }
    public static var greek : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_Greek
    }
    public static var turkish : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_Turkish
    }
    public static var hebrew : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_Hebrew
    }
    public static var arabic : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_Arabic
    }
    public static var baltic : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_Baltic
    }
    public static var vietnamese : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_Vietnamese
    }
    public static var `default` : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_Default
    }
    public static var symbol : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_Symbol
    }
    public static var thai : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_Thai
    }
    public static var shiftJis : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_ShiftJis
    }
    public static var gb2312 : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_GB2312
    }
    public static var hangul : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_Hangul
    }
    public static var big5 : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_Big5
    }
    public static var pc437 : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_PC437
    }
    public static var oem : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_Oem
    }
    public static var mac : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_Mac
    }
    public static var armenian : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_Armenian
    }
    public static var syriac : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_Syriac
    }
    public static var thaana : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_Thaana
    }
    public static var devanagari : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_Devanagari
    }
    public static var bengali : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_Bengali
    }
    public static var gurmukhi : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_Gurmukhi
    }
    public static var gujarati : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_Gujarati
    }
    public static var oriya : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_Oriya
    }
    public static var tamil : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_Tamil
    }
    public static var telugu : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_Telugu
    }
    public static var kannada : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_Kannada
    }
    public static var malayalam : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_Malayalam
    }
    public static var sinhala : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_Sinhala
    }
    public static var lao : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_Lao
    }
    public static var tibetan : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_Tibetan
    }
    public static var myanmar : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_Myanmar
    }
    public static var georgian : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_Georgian
    }
    public static var jamo : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_Jamo
    }
    public static var ethiopic : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_Ethiopic
    }
    public static var cherokee : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_Cherokee
    }
    public static var aboriginal : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_Aboriginal
    }
    public static var ogham : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_Ogham
    }
    public static var runic : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_Runic
    }
    public static var khmer : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_Khmer
    }
    public static var mongolian : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_Mongolian
    }
    public static var braille : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_Braille
    }
    public static var yi : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_Yi
    }
    public static var limbu : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_Limbu
    }
    public static var taiLe : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_TaiLe
    }
    public static var newTaiLue : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_NewTaiLue
    }
    public static var sylotiNagri : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_SylotiNagri
    }
    public static var kharoshthi : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_Kharoshthi
    }
    public static var kayahli : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_Kayahli
    }
    public static var unicodeSymbol : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_UnicodeSymbol
    }
    public static var emoji : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_Emoji
    }
    public static var glagolitic : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_Glagolitic
    }
    public static var lisu : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_Lisu
    }
    public static var vai : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_Vai
    }
    public static var nko : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_NKo
    }
    public static var osmanya : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_Osmanya
    }
    public static var phagsPa : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_PhagsPa
    }
    public static var gothic : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_Gothic
    }
    public static var deseret : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_Deseret
    }
    public static var tifinagh : WinAppSDK.TextScript {
        __x_ABI_CMicrosoft_CUI_CText_CTextScript_Tifinagh
    }
}
extension WinAppSDK.TextScript: @retroactive Hashable, @retroactive Codable {}

extension WinAppSDK.TextSetOptions {
    public static var none : WinAppSDK.TextSetOptions {
        __x_ABI_CMicrosoft_CUI_CText_CTextSetOptions_None
    }
    public static var unicodeBidi : WinAppSDK.TextSetOptions {
        __x_ABI_CMicrosoft_CUI_CText_CTextSetOptions_UnicodeBidi
    }
    public static var unlink : WinAppSDK.TextSetOptions {
        __x_ABI_CMicrosoft_CUI_CText_CTextSetOptions_Unlink
    }
    public static var unhide : WinAppSDK.TextSetOptions {
        __x_ABI_CMicrosoft_CUI_CText_CTextSetOptions_Unhide
    }
    public static var checkTextLimit : WinAppSDK.TextSetOptions {
        __x_ABI_CMicrosoft_CUI_CText_CTextSetOptions_CheckTextLimit
    }
    public static var formatRtf : WinAppSDK.TextSetOptions {
        __x_ABI_CMicrosoft_CUI_CText_CTextSetOptions_FormatRtf
    }
    public static var applyRtfDocumentDefaults : WinAppSDK.TextSetOptions {
        __x_ABI_CMicrosoft_CUI_CText_CTextSetOptions_ApplyRtfDocumentDefaults
    }
}
extension WinAppSDK.TextSetOptions: @retroactive Hashable, @retroactive Codable {}

extension WinAppSDK.UnderlineType {
    public static var undefined : WinAppSDK.UnderlineType {
        __x_ABI_CMicrosoft_CUI_CText_CUnderlineType_Undefined
    }
    public static var none : WinAppSDK.UnderlineType {
        __x_ABI_CMicrosoft_CUI_CText_CUnderlineType_None
    }
    public static var single : WinAppSDK.UnderlineType {
        __x_ABI_CMicrosoft_CUI_CText_CUnderlineType_Single
    }
    public static var words : WinAppSDK.UnderlineType {
        __x_ABI_CMicrosoft_CUI_CText_CUnderlineType_Words
    }
    public static var double : WinAppSDK.UnderlineType {
        __x_ABI_CMicrosoft_CUI_CText_CUnderlineType_Double
    }
    public static var dotted : WinAppSDK.UnderlineType {
        __x_ABI_CMicrosoft_CUI_CText_CUnderlineType_Dotted
    }
    public static var dash : WinAppSDK.UnderlineType {
        __x_ABI_CMicrosoft_CUI_CText_CUnderlineType_Dash
    }
    public static var dashDot : WinAppSDK.UnderlineType {
        __x_ABI_CMicrosoft_CUI_CText_CUnderlineType_DashDot
    }
    public static var dashDotDot : WinAppSDK.UnderlineType {
        __x_ABI_CMicrosoft_CUI_CText_CUnderlineType_DashDotDot
    }
    public static var wave : WinAppSDK.UnderlineType {
        __x_ABI_CMicrosoft_CUI_CText_CUnderlineType_Wave
    }
    public static var thick : WinAppSDK.UnderlineType {
        __x_ABI_CMicrosoft_CUI_CText_CUnderlineType_Thick
    }
    public static var thin : WinAppSDK.UnderlineType {
        __x_ABI_CMicrosoft_CUI_CText_CUnderlineType_Thin
    }
    public static var doubleWave : WinAppSDK.UnderlineType {
        __x_ABI_CMicrosoft_CUI_CText_CUnderlineType_DoubleWave
    }
    public static var heavyWave : WinAppSDK.UnderlineType {
        __x_ABI_CMicrosoft_CUI_CText_CUnderlineType_HeavyWave
    }
    public static var longDash : WinAppSDK.UnderlineType {
        __x_ABI_CMicrosoft_CUI_CText_CUnderlineType_LongDash
    }
    public static var thickDash : WinAppSDK.UnderlineType {
        __x_ABI_CMicrosoft_CUI_CText_CUnderlineType_ThickDash
    }
    public static var thickDashDot : WinAppSDK.UnderlineType {
        __x_ABI_CMicrosoft_CUI_CText_CUnderlineType_ThickDashDot
    }
    public static var thickDashDotDot : WinAppSDK.UnderlineType {
        __x_ABI_CMicrosoft_CUI_CText_CUnderlineType_ThickDashDotDot
    }
    public static var thickDotted : WinAppSDK.UnderlineType {
        __x_ABI_CMicrosoft_CUI_CText_CUnderlineType_ThickDotted
    }
    public static var thickLongDash : WinAppSDK.UnderlineType {
        __x_ABI_CMicrosoft_CUI_CText_CUnderlineType_ThickLongDash
    }
}
extension WinAppSDK.UnderlineType: @retroactive Hashable, @retroactive Codable {}

extension WinAppSDK.VerticalCharacterAlignment {
    public static var top : WinAppSDK.VerticalCharacterAlignment {
        __x_ABI_CMicrosoft_CUI_CText_CVerticalCharacterAlignment_Top
    }
    public static var baseline : WinAppSDK.VerticalCharacterAlignment {
        __x_ABI_CMicrosoft_CUI_CText_CVerticalCharacterAlignment_Baseline
    }
    public static var bottom : WinAppSDK.VerticalCharacterAlignment {
        __x_ABI_CMicrosoft_CUI_CText_CVerticalCharacterAlignment_Bottom
    }
}
extension WinAppSDK.VerticalCharacterAlignment: @retroactive Hashable, @retroactive Codable {}

