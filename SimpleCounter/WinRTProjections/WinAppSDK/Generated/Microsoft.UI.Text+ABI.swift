// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import UWP
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

private var IID___x_ABI_CMicrosoft_CUI_CText_CIFontWeights: WindowsFoundation.IID {
    .init(Data1: 0x386CD040, Data2: 0x5404, Data3: 0x5A8D, Data4: ( 0x8B,0xC7,0x2C,0xA9,0x89,0xF5,0xC0,0x65 ))// 386CD040-5404-5A8D-8BC7-2CA989F5C065
}

private var IID___x_ABI_CMicrosoft_CUI_CText_CIFontWeightsStatics: WindowsFoundation.IID {
    .init(Data1: 0xCC390DF6, Data2: 0x76B0, Data3: 0x5807, Data4: ( 0x8B,0x9D,0xE9,0x49,0xA4,0xE6,0x23,0xAE ))// CC390DF6-76B0-5807-8B9D-E949A4E623AE
}

private var IID___x_ABI_CMicrosoft_CUI_CText_CITextCharacterFormat: WindowsFoundation.IID {
    .init(Data1: 0xF5710050, Data2: 0x98E5, Data3: 0x5788, Data4: ( 0xB1,0xE3,0x32,0x19,0x1E,0xEB,0xF9,0x4D ))// F5710050-98E5-5788-B1E3-32191EEBF94D
}

private var IID___x_ABI_CMicrosoft_CUI_CText_CITextConstantsStatics: WindowsFoundation.IID {
    .init(Data1: 0xCD353B3C, Data2: 0xAF63, Data3: 0x5CFB, Data4: ( 0x91,0x8C,0x0F,0x9C,0x89,0x31,0xA1,0x61 ))// CD353B3C-AF63-5CFB-918C-0F9C8931A161
}

private var IID___x_ABI_CMicrosoft_CUI_CText_CITextDocument: WindowsFoundation.IID {
    .init(Data1: 0x1149D57D, Data2: 0x86A6, Data3: 0x59DD, Data4: ( 0x88,0xD9,0x19,0x6F,0x27,0xBC,0x5C,0x85 ))// 1149D57D-86A6-59DD-88D9-196F27BC5C85
}

private var IID___x_ABI_CMicrosoft_CUI_CText_CITextParagraphFormat: WindowsFoundation.IID {
    .init(Data1: 0x219B6CDF, Data2: 0x0D0B, Data3: 0x5701, Data4: ( 0xB8,0xA1,0x6C,0x90,0x6B,0x3E,0xBB,0xE1 ))// 219B6CDF-0D0B-5701-B8A1-6C906B3EBBE1
}

private var IID___x_ABI_CMicrosoft_CUI_CText_CITextRange: WindowsFoundation.IID {
    .init(Data1: 0x06D4ABCF, Data2: 0x0C06, Data3: 0x5D12, Data4: ( 0xA7,0x43,0x85,0x53,0x7E,0xFD,0x09,0xEA ))// 06D4ABCF-0C06-5D12-A743-85537EFD09EA
}

private var IID___x_ABI_CMicrosoft_CUI_CText_CITextSelection: WindowsFoundation.IID {
    .init(Data1: 0x8F5E6CB1, Data2: 0x2B04, Data3: 0x589F, Data4: ( 0xBD,0x24,0x54,0xE5,0xCD,0x8D,0xD3,0x99 ))// 8F5E6CB1-2B04-589F-BD24-54E5CD8DD399
}

public enum __ABI_Microsoft_UI_Text {
    public class IFontWeights: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CText_CIFontWeights }

    }

    public class IFontWeightsStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CText_CIFontWeightsStatics }

        internal func get_BlackImpl() throws -> UWP.FontWeight {
            var value: __x_ABI_CWindows_CUI_CText_CFontWeight = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CIFontWeightsStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Black(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_BoldImpl() throws -> UWP.FontWeight {
            var value: __x_ABI_CWindows_CUI_CText_CFontWeight = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CIFontWeightsStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Bold(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_ExtraBlackImpl() throws -> UWP.FontWeight {
            var value: __x_ABI_CWindows_CUI_CText_CFontWeight = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CIFontWeightsStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExtraBlack(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_ExtraBoldImpl() throws -> UWP.FontWeight {
            var value: __x_ABI_CWindows_CUI_CText_CFontWeight = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CIFontWeightsStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExtraBold(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_ExtraLightImpl() throws -> UWP.FontWeight {
            var value: __x_ABI_CWindows_CUI_CText_CFontWeight = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CIFontWeightsStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExtraLight(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_LightImpl() throws -> UWP.FontWeight {
            var value: __x_ABI_CWindows_CUI_CText_CFontWeight = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CIFontWeightsStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Light(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_MediumImpl() throws -> UWP.FontWeight {
            var value: __x_ABI_CWindows_CUI_CText_CFontWeight = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CIFontWeightsStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Medium(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_NormalImpl() throws -> UWP.FontWeight {
            var value: __x_ABI_CWindows_CUI_CText_CFontWeight = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CIFontWeightsStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Normal(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_SemiBoldImpl() throws -> UWP.FontWeight {
            var value: __x_ABI_CWindows_CUI_CText_CFontWeight = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CIFontWeightsStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SemiBold(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_SemiLightImpl() throws -> UWP.FontWeight {
            var value: __x_ABI_CWindows_CUI_CText_CFontWeight = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CIFontWeightsStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SemiLight(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_ThinImpl() throws -> UWP.FontWeight {
            var value: __x_ABI_CWindows_CUI_CText_CFontWeight = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CIFontWeightsStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Thin(pThis, &value))
            }
            return .from(abi: value)
        }

    }

    public class ITextCharacterFormat: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CText_CITextCharacterFormat }

        open func get_AllCapsImpl() throws -> WinAppSDK.FormatEffect {
            var value: __x_ABI_CMicrosoft_CUI_CText_CFormatEffect = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextCharacterFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AllCaps(pThis, &value))
            }
            return value
        }

        open func put_AllCapsImpl(_ value: WinAppSDK.FormatEffect) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextCharacterFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AllCaps(pThis, value))
            }
        }

        open func get_BackgroundColorImpl() throws -> UWP.Color {
            var value: __x_ABI_CWindows_CUI_CColor = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextCharacterFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackgroundColor(pThis, &value))
            }
            return .from(abi: value)
        }

        open func put_BackgroundColorImpl(_ value: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextCharacterFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BackgroundColor(pThis, .from(swift: value)))
            }
        }

        open func get_BoldImpl() throws -> WinAppSDK.FormatEffect {
            var value: __x_ABI_CMicrosoft_CUI_CText_CFormatEffect = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextCharacterFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Bold(pThis, &value))
            }
            return value
        }

        open func put_BoldImpl(_ value: WinAppSDK.FormatEffect) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextCharacterFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Bold(pThis, value))
            }
        }

        open func get_FontStretchImpl() throws -> UWP.FontStretch {
            var value: __x_ABI_CWindows_CUI_CText_CFontStretch = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextCharacterFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontStretch(pThis, &value))
            }
            return value
        }

        open func put_FontStretchImpl(_ value: UWP.FontStretch) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextCharacterFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontStretch(pThis, value))
            }
        }

        open func get_FontStyleImpl() throws -> UWP.FontStyle {
            var value: __x_ABI_CWindows_CUI_CText_CFontStyle = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextCharacterFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontStyle(pThis, &value))
            }
            return value
        }

        open func put_FontStyleImpl(_ value: UWP.FontStyle) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextCharacterFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontStyle(pThis, value))
            }
        }

        open func get_ForegroundColorImpl() throws -> UWP.Color {
            var value: __x_ABI_CWindows_CUI_CColor = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextCharacterFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ForegroundColor(pThis, &value))
            }
            return .from(abi: value)
        }

        open func put_ForegroundColorImpl(_ value: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextCharacterFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ForegroundColor(pThis, .from(swift: value)))
            }
        }

        open func get_HiddenImpl() throws -> WinAppSDK.FormatEffect {
            var value: __x_ABI_CMicrosoft_CUI_CText_CFormatEffect = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextCharacterFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Hidden(pThis, &value))
            }
            return value
        }

        open func put_HiddenImpl(_ value: WinAppSDK.FormatEffect) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextCharacterFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Hidden(pThis, value))
            }
        }

        open func get_ItalicImpl() throws -> WinAppSDK.FormatEffect {
            var value: __x_ABI_CMicrosoft_CUI_CText_CFormatEffect = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextCharacterFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Italic(pThis, &value))
            }
            return value
        }

        open func put_ItalicImpl(_ value: WinAppSDK.FormatEffect) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextCharacterFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Italic(pThis, value))
            }
        }

        open func get_KerningImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextCharacterFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Kerning(pThis, &value))
            }
            return value
        }

        open func put_KerningImpl(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextCharacterFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Kerning(pThis, value))
            }
        }

        open func get_LanguageTagImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextCharacterFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LanguageTag(pThis, &value))
            }
            return .init(from: value)
        }

        open func put_LanguageTagImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextCharacterFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LanguageTag(pThis, _value.get()))
            }
        }

        open func get_LinkTypeImpl() throws -> WinAppSDK.LinkType {
            var value: __x_ABI_CMicrosoft_CUI_CText_CLinkType = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextCharacterFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LinkType(pThis, &value))
            }
            return value
        }

        open func get_NameImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextCharacterFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Name(pThis, &value))
            }
            return .init(from: value)
        }

        open func put_NameImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextCharacterFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Name(pThis, _value.get()))
            }
        }

        open func get_OutlineImpl() throws -> WinAppSDK.FormatEffect {
            var value: __x_ABI_CMicrosoft_CUI_CText_CFormatEffect = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextCharacterFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Outline(pThis, &value))
            }
            return value
        }

        open func put_OutlineImpl(_ value: WinAppSDK.FormatEffect) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextCharacterFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Outline(pThis, value))
            }
        }

        open func get_PositionImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextCharacterFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Position(pThis, &value))
            }
            return value
        }

        open func put_PositionImpl(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextCharacterFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Position(pThis, value))
            }
        }

        open func get_ProtectedTextImpl() throws -> WinAppSDK.FormatEffect {
            var value: __x_ABI_CMicrosoft_CUI_CText_CFormatEffect = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextCharacterFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ProtectedText(pThis, &value))
            }
            return value
        }

        open func put_ProtectedTextImpl(_ value: WinAppSDK.FormatEffect) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextCharacterFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ProtectedText(pThis, value))
            }
        }

        open func get_SizeImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextCharacterFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &value))
            }
            return value
        }

        open func put_SizeImpl(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextCharacterFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Size(pThis, value))
            }
        }

        open func get_SmallCapsImpl() throws -> WinAppSDK.FormatEffect {
            var value: __x_ABI_CMicrosoft_CUI_CText_CFormatEffect = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextCharacterFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SmallCaps(pThis, &value))
            }
            return value
        }

        open func put_SmallCapsImpl(_ value: WinAppSDK.FormatEffect) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextCharacterFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SmallCaps(pThis, value))
            }
        }

        open func get_SpacingImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextCharacterFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Spacing(pThis, &value))
            }
            return value
        }

        open func put_SpacingImpl(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextCharacterFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Spacing(pThis, value))
            }
        }

        open func get_StrikethroughImpl() throws -> WinAppSDK.FormatEffect {
            var value: __x_ABI_CMicrosoft_CUI_CText_CFormatEffect = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextCharacterFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Strikethrough(pThis, &value))
            }
            return value
        }

        open func put_StrikethroughImpl(_ value: WinAppSDK.FormatEffect) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextCharacterFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Strikethrough(pThis, value))
            }
        }

        open func get_SubscriptImpl() throws -> WinAppSDK.FormatEffect {
            var value: __x_ABI_CMicrosoft_CUI_CText_CFormatEffect = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextCharacterFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Subscript(pThis, &value))
            }
            return value
        }

        open func put_SubscriptImpl(_ value: WinAppSDK.FormatEffect) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextCharacterFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Subscript(pThis, value))
            }
        }

        open func get_SuperscriptImpl() throws -> WinAppSDK.FormatEffect {
            var value: __x_ABI_CMicrosoft_CUI_CText_CFormatEffect = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextCharacterFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Superscript(pThis, &value))
            }
            return value
        }

        open func put_SuperscriptImpl(_ value: WinAppSDK.FormatEffect) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextCharacterFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Superscript(pThis, value))
            }
        }

        open func get_TextScriptImpl() throws -> WinAppSDK.TextScript {
            var value: __x_ABI_CMicrosoft_CUI_CText_CTextScript = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextCharacterFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextScript(pThis, &value))
            }
            return value
        }

        open func put_TextScriptImpl(_ value: WinAppSDK.TextScript) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextCharacterFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TextScript(pThis, value))
            }
        }

        open func get_UnderlineImpl() throws -> WinAppSDK.UnderlineType {
            var value: __x_ABI_CMicrosoft_CUI_CText_CUnderlineType = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextCharacterFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Underline(pThis, &value))
            }
            return value
        }

        open func put_UnderlineImpl(_ value: WinAppSDK.UnderlineType) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextCharacterFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Underline(pThis, value))
            }
        }

        open func get_WeightImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextCharacterFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Weight(pThis, &value))
            }
            return value
        }

        open func put_WeightImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextCharacterFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Weight(pThis, value))
            }
        }

        open func SetCloneImpl(_ value: WinAppSDK.AnyITextCharacterFormat?) throws {
            let valueWrapper = __ABI_Microsoft_UI_Text.ITextCharacterFormatWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextCharacterFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetClone(pThis, _value))
            }
        }

        open func GetCloneImpl() throws -> WinAppSDK.AnyITextCharacterFormat? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextCharacterFormat.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetClone(pThis, &resultAbi))
                }
            }
            return __ABI_Microsoft_UI_Text.ITextCharacterFormatWrapper.unwrapFrom(abi: result)
        }

        open func IsEqualImpl(_ format: WinAppSDK.AnyITextCharacterFormat?) throws -> Bool {
            var result: boolean = 0
            let formatWrapper = __ABI_Microsoft_UI_Text.ITextCharacterFormatWrapper(format)
            let _format = try! formatWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextCharacterFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsEqual(pThis, _format, &result))
            }
            return .init(from: result)
        }

    }

    internal static var ITextCharacterFormatVTable: __x_ABI_CMicrosoft_CUI_CText_CITextCharacterFormatVtbl = .init(
        QueryInterface: { ITextCharacterFormatWrapper.queryInterface($0, $1, $2) },
        AddRef: { ITextCharacterFormatWrapper.addRef($0) },
        Release: { ITextCharacterFormatWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Text.ITextCharacterFormatWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Microsoft.UI.Text.ITextCharacterFormat").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_AllCaps: {
            guard let __unwrapped__instance = ITextCharacterFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.allCaps
            $1?.initialize(to: value)
            return S_OK
        },

        put_AllCaps: {
            guard let __unwrapped__instance = ITextCharacterFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: WinAppSDK.FormatEffect = $1
            __unwrapped__instance.allCaps = value
            return S_OK
        },

        get_BackgroundColor: {
            guard let __unwrapped__instance = ITextCharacterFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.backgroundColor
            $1?.initialize(to: .from(swift: value))
            return S_OK
        },

        put_BackgroundColor: {
            guard let __unwrapped__instance = ITextCharacterFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: UWP.Color = .from(abi: $1)
            __unwrapped__instance.backgroundColor = value
            return S_OK
        },

        get_Bold: {
            guard let __unwrapped__instance = ITextCharacterFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.bold
            $1?.initialize(to: value)
            return S_OK
        },

        put_Bold: {
            guard let __unwrapped__instance = ITextCharacterFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: WinAppSDK.FormatEffect = $1
            __unwrapped__instance.bold = value
            return S_OK
        },

        get_FontStretch: {
            guard let __unwrapped__instance = ITextCharacterFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.fontStretch
            $1?.initialize(to: value)
            return S_OK
        },

        put_FontStretch: {
            guard let __unwrapped__instance = ITextCharacterFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: UWP.FontStretch = $1
            __unwrapped__instance.fontStretch = value
            return S_OK
        },

        get_FontStyle: {
            guard let __unwrapped__instance = ITextCharacterFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.fontStyle
            $1?.initialize(to: value)
            return S_OK
        },

        put_FontStyle: {
            guard let __unwrapped__instance = ITextCharacterFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: UWP.FontStyle = $1
            __unwrapped__instance.fontStyle = value
            return S_OK
        },

        get_ForegroundColor: {
            guard let __unwrapped__instance = ITextCharacterFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.foregroundColor
            $1?.initialize(to: .from(swift: value))
            return S_OK
        },

        put_ForegroundColor: {
            guard let __unwrapped__instance = ITextCharacterFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: UWP.Color = .from(abi: $1)
            __unwrapped__instance.foregroundColor = value
            return S_OK
        },

        get_Hidden: {
            guard let __unwrapped__instance = ITextCharacterFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.hidden
            $1?.initialize(to: value)
            return S_OK
        },

        put_Hidden: {
            guard let __unwrapped__instance = ITextCharacterFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: WinAppSDK.FormatEffect = $1
            __unwrapped__instance.hidden = value
            return S_OK
        },

        get_Italic: {
            guard let __unwrapped__instance = ITextCharacterFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.italic
            $1?.initialize(to: value)
            return S_OK
        },

        put_Italic: {
            guard let __unwrapped__instance = ITextCharacterFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: WinAppSDK.FormatEffect = $1
            __unwrapped__instance.italic = value
            return S_OK
        },

        get_Kerning: {
            guard let __unwrapped__instance = ITextCharacterFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.kerning
            $1?.initialize(to: value)
            return S_OK
        },

        put_Kerning: {
            guard let __unwrapped__instance = ITextCharacterFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: Float = $1
            __unwrapped__instance.kerning = value
            return S_OK
        },

        get_LanguageTag: {
            guard let __unwrapped__instance = ITextCharacterFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.languageTag
            $1?.initialize(to: try! HString(value).detach())
            return S_OK
        },

        put_LanguageTag: {
            guard let __unwrapped__instance = ITextCharacterFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: String = .init(from: $1)
            __unwrapped__instance.languageTag = value
            return S_OK
        },

        get_LinkType: {
            guard let __unwrapped__instance = ITextCharacterFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.linkType
            $1?.initialize(to: value)
            return S_OK
        },

        get_Name: {
            guard let __unwrapped__instance = ITextCharacterFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.name
            $1?.initialize(to: try! HString(value).detach())
            return S_OK
        },

        put_Name: {
            guard let __unwrapped__instance = ITextCharacterFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: String = .init(from: $1)
            __unwrapped__instance.name = value
            return S_OK
        },

        get_Outline: {
            guard let __unwrapped__instance = ITextCharacterFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.outline
            $1?.initialize(to: value)
            return S_OK
        },

        put_Outline: {
            guard let __unwrapped__instance = ITextCharacterFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: WinAppSDK.FormatEffect = $1
            __unwrapped__instance.outline = value
            return S_OK
        },

        get_Position: {
            guard let __unwrapped__instance = ITextCharacterFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.position
            $1?.initialize(to: value)
            return S_OK
        },

        put_Position: {
            guard let __unwrapped__instance = ITextCharacterFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: Float = $1
            __unwrapped__instance.position = value
            return S_OK
        },

        get_ProtectedText: {
            guard let __unwrapped__instance = ITextCharacterFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.protectedText
            $1?.initialize(to: value)
            return S_OK
        },

        put_ProtectedText: {
            guard let __unwrapped__instance = ITextCharacterFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: WinAppSDK.FormatEffect = $1
            __unwrapped__instance.protectedText = value
            return S_OK
        },

        get_Size: {
            guard let __unwrapped__instance = ITextCharacterFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.size
            $1?.initialize(to: value)
            return S_OK
        },

        put_Size: {
            guard let __unwrapped__instance = ITextCharacterFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: Float = $1
            __unwrapped__instance.size = value
            return S_OK
        },

        get_SmallCaps: {
            guard let __unwrapped__instance = ITextCharacterFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.smallCaps
            $1?.initialize(to: value)
            return S_OK
        },

        put_SmallCaps: {
            guard let __unwrapped__instance = ITextCharacterFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: WinAppSDK.FormatEffect = $1
            __unwrapped__instance.smallCaps = value
            return S_OK
        },

        get_Spacing: {
            guard let __unwrapped__instance = ITextCharacterFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.spacing
            $1?.initialize(to: value)
            return S_OK
        },

        put_Spacing: {
            guard let __unwrapped__instance = ITextCharacterFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: Float = $1
            __unwrapped__instance.spacing = value
            return S_OK
        },

        get_Strikethrough: {
            guard let __unwrapped__instance = ITextCharacterFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.strikethrough
            $1?.initialize(to: value)
            return S_OK
        },

        put_Strikethrough: {
            guard let __unwrapped__instance = ITextCharacterFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: WinAppSDK.FormatEffect = $1
            __unwrapped__instance.strikethrough = value
            return S_OK
        },

        get_Subscript: {
            guard let __unwrapped__instance = ITextCharacterFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.`subscript`
            $1?.initialize(to: value)
            return S_OK
        },

        put_Subscript: {
            guard let __unwrapped__instance = ITextCharacterFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: WinAppSDK.FormatEffect = $1
            __unwrapped__instance.`subscript` = value
            return S_OK
        },

        get_Superscript: {
            guard let __unwrapped__instance = ITextCharacterFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.superscript
            $1?.initialize(to: value)
            return S_OK
        },

        put_Superscript: {
            guard let __unwrapped__instance = ITextCharacterFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: WinAppSDK.FormatEffect = $1
            __unwrapped__instance.superscript = value
            return S_OK
        },

        get_TextScript: {
            guard let __unwrapped__instance = ITextCharacterFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.textScript
            $1?.initialize(to: value)
            return S_OK
        },

        put_TextScript: {
            guard let __unwrapped__instance = ITextCharacterFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: WinAppSDK.TextScript = $1
            __unwrapped__instance.textScript = value
            return S_OK
        },

        get_Underline: {
            guard let __unwrapped__instance = ITextCharacterFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.underline
            $1?.initialize(to: value)
            return S_OK
        },

        put_Underline: {
            guard let __unwrapped__instance = ITextCharacterFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: WinAppSDK.UnderlineType = $1
            __unwrapped__instance.underline = value
            return S_OK
        },

        get_Weight: {
            guard let __unwrapped__instance = ITextCharacterFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.weight
            $1?.initialize(to: value)
            return S_OK
        },

        put_Weight: {
            guard let __unwrapped__instance = ITextCharacterFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: Int32 = $1
            __unwrapped__instance.weight = value
            return S_OK
        },

        SetClone: {
            do {
                guard let __unwrapped__instance = ITextCharacterFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value: WinAppSDK.AnyITextCharacterFormat? = __ABI_Microsoft_UI_Text.ITextCharacterFormatWrapper.unwrapFrom(abi: ComPtr($1))
                try __unwrapped__instance.setClone(value)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetClone: {
            do {
                guard let __unwrapped__instance = ITextCharacterFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let result = try __unwrapped__instance.getClone()
                let resultWrapper = __ABI_Microsoft_UI_Text.ITextCharacterFormatWrapper(result)
                resultWrapper?.copyTo($1)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        IsEqual: {
            do {
                guard let __unwrapped__instance = ITextCharacterFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let format: WinAppSDK.AnyITextCharacterFormat? = __ABI_Microsoft_UI_Text.ITextCharacterFormatWrapper.unwrapFrom(abi: ComPtr($1))
                let result = try __unwrapped__instance.isEqual(format)
                $2?.initialize(to: .init(from: result))
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )

    public typealias ITextCharacterFormatWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Text.ITextCharacterFormatBridge>
    public class ITextConstantsStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CText_CITextConstantsStatics }

        internal func get_AutoColorImpl() throws -> UWP.Color {
            var value: __x_ABI_CWindows_CUI_CColor = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextConstantsStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AutoColor(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_MinUnitCountImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextConstantsStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MinUnitCount(pThis, &value))
            }
            return value
        }

        internal func get_MaxUnitCountImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextConstantsStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxUnitCount(pThis, &value))
            }
            return value
        }

        internal func get_UndefinedColorImpl() throws -> UWP.Color {
            var value: __x_ABI_CWindows_CUI_CColor = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextConstantsStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_UndefinedColor(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_UndefinedFloatValueImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextConstantsStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_UndefinedFloatValue(pThis, &value))
            }
            return value
        }

        internal func get_UndefinedInt32ValueImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextConstantsStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_UndefinedInt32Value(pThis, &value))
            }
            return value
        }

        internal func get_UndefinedFontStretchImpl() throws -> UWP.FontStretch {
            var value: __x_ABI_CWindows_CUI_CText_CFontStretch = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextConstantsStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_UndefinedFontStretch(pThis, &value))
            }
            return value
        }

        internal func get_UndefinedFontStyleImpl() throws -> UWP.FontStyle {
            var value: __x_ABI_CWindows_CUI_CText_CFontStyle = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextConstantsStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_UndefinedFontStyle(pThis, &value))
            }
            return value
        }

    }

    public class ITextDocument: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CText_CITextDocument }

        internal func get_CaretTypeImpl() throws -> WinAppSDK.CaretType {
            var value: __x_ABI_CMicrosoft_CUI_CText_CCaretType = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextDocument.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CaretType(pThis, &value))
            }
            return value
        }

        internal func put_CaretTypeImpl(_ value: WinAppSDK.CaretType) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextDocument.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CaretType(pThis, value))
            }
        }

        internal func get_DefaultTabStopImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextDocument.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DefaultTabStop(pThis, &value))
            }
            return value
        }

        internal func put_DefaultTabStopImpl(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextDocument.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DefaultTabStop(pThis, value))
            }
        }

        internal func get_SelectionImpl() throws -> WinAppSDK.AnyITextSelection? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextDocument.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Selection(pThis, &valueAbi))
                }
            }
            return __ABI_Microsoft_UI_Text.ITextSelectionWrapper.unwrapFrom(abi: value)
        }

        internal func get_UndoLimitImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextDocument.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_UndoLimit(pThis, &value))
            }
            return value
        }

        internal func put_UndoLimitImpl(_ value: UInt32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextDocument.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_UndoLimit(pThis, value))
            }
        }

        internal func CanCopyImpl() throws -> Bool {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextDocument.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CanCopy(pThis, &result))
            }
            return .init(from: result)
        }

        internal func CanPasteImpl() throws -> Bool {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextDocument.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CanPaste(pThis, &result))
            }
            return .init(from: result)
        }

        internal func CanRedoImpl() throws -> Bool {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextDocument.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CanRedo(pThis, &result))
            }
            return .init(from: result)
        }

        internal func CanUndoImpl() throws -> Bool {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextDocument.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CanUndo(pThis, &result))
            }
            return .init(from: result)
        }

        internal func ApplyDisplayUpdatesImpl() throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextDocument.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ApplyDisplayUpdates(pThis, &result))
            }
            return result
        }

        internal func BatchDisplayUpdatesImpl() throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextDocument.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.BatchDisplayUpdates(pThis, &result))
            }
            return result
        }

        internal func BeginUndoGroupImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextDocument.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.BeginUndoGroup(pThis))
            }
        }

        internal func EndUndoGroupImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextDocument.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.EndUndoGroup(pThis))
            }
        }

        internal func GetDefaultCharacterFormatImpl() throws -> WinAppSDK.AnyITextCharacterFormat? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextDocument.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDefaultCharacterFormat(pThis, &resultAbi))
                }
            }
            return __ABI_Microsoft_UI_Text.ITextCharacterFormatWrapper.unwrapFrom(abi: result)
        }

        internal func GetDefaultParagraphFormatImpl() throws -> WinAppSDK.AnyITextParagraphFormat? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextDocument.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDefaultParagraphFormat(pThis, &resultAbi))
                }
            }
            return __ABI_Microsoft_UI_Text.ITextParagraphFormatWrapper.unwrapFrom(abi: result)
        }

        internal func GetRangeImpl(_ startPosition: Int32, _ endPosition: Int32) throws -> WinAppSDK.AnyITextRange? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextDocument.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetRange(pThis, startPosition, endPosition, &resultAbi))
                }
            }
            return __ABI_Microsoft_UI_Text.ITextRangeWrapper.unwrapFrom(abi: result)
        }

        internal func GetRangeFromPointImpl(_ point: WindowsFoundation.Point, _ options: WinAppSDK.PointOptions) throws -> WinAppSDK.AnyITextRange? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextDocument.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetRangeFromPoint(pThis, .from(swift: point), options, &resultAbi))
                }
            }
            return __ABI_Microsoft_UI_Text.ITextRangeWrapper.unwrapFrom(abi: result)
        }

        internal func GetTextImpl(_ options: WinAppSDK.TextGetOptions, _ value: inout String) throws {
            var _value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextDocument.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetText(pThis, options, &_value))
            }
            value = .init(from: _value)
            WindowsDeleteString(_value)
        }

        internal func LoadFromStreamImpl(_ options: WinAppSDK.TextSetOptions, _ value: UWP.AnyIRandomAccessStream?) throws {
            let valueWrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextDocument.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.LoadFromStream(pThis, options, _value))
            }
        }

        internal func RedoImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextDocument.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Redo(pThis))
            }
        }

        internal func SaveToStreamImpl(_ options: WinAppSDK.TextGetOptions, _ value: UWP.AnyIRandomAccessStream?) throws {
            let valueWrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextDocument.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SaveToStream(pThis, options, _value))
            }
        }

        internal func SetDefaultCharacterFormatImpl(_ value: WinAppSDK.AnyITextCharacterFormat?) throws {
            let valueWrapper = __ABI_Microsoft_UI_Text.ITextCharacterFormatWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextDocument.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetDefaultCharacterFormat(pThis, _value))
            }
        }

        internal func SetDefaultParagraphFormatImpl(_ value: WinAppSDK.AnyITextParagraphFormat?) throws {
            let valueWrapper = __ABI_Microsoft_UI_Text.ITextParagraphFormatWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextDocument.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetDefaultParagraphFormat(pThis, _value))
            }
        }

        internal func SetTextImpl(_ options: WinAppSDK.TextSetOptions, _ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextDocument.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetText(pThis, options, _value.get()))
            }
        }

        internal func UndoImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextDocument.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Undo(pThis))
            }
        }

        internal func get_AlignmentIncludesTrailingWhitespaceImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextDocument.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlignmentIncludesTrailingWhitespace(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_AlignmentIncludesTrailingWhitespaceImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextDocument.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AlignmentIncludesTrailingWhitespace(pThis, .init(from: value)))
            }
        }

        internal func get_IgnoreTrailingCharacterSpacingImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextDocument.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IgnoreTrailingCharacterSpacing(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IgnoreTrailingCharacterSpacingImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextDocument.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IgnoreTrailingCharacterSpacing(pThis, .init(from: value)))
            }
        }

        internal func ClearUndoRedoHistoryImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextDocument.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ClearUndoRedoHistory(pThis))
            }
        }

    }

    public class ITextParagraphFormat: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CText_CITextParagraphFormat }

        open func get_AlignmentImpl() throws -> WinAppSDK.ParagraphAlignment {
            var value: __x_ABI_CMicrosoft_CUI_CText_CParagraphAlignment = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextParagraphFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Alignment(pThis, &value))
            }
            return value
        }

        open func put_AlignmentImpl(_ value: WinAppSDK.ParagraphAlignment) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextParagraphFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Alignment(pThis, value))
            }
        }

        open func get_FirstLineIndentImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextParagraphFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FirstLineIndent(pThis, &value))
            }
            return value
        }

        open func get_KeepTogetherImpl() throws -> WinAppSDK.FormatEffect {
            var value: __x_ABI_CMicrosoft_CUI_CText_CFormatEffect = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextParagraphFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_KeepTogether(pThis, &value))
            }
            return value
        }

        open func put_KeepTogetherImpl(_ value: WinAppSDK.FormatEffect) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextParagraphFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_KeepTogether(pThis, value))
            }
        }

        open func get_KeepWithNextImpl() throws -> WinAppSDK.FormatEffect {
            var value: __x_ABI_CMicrosoft_CUI_CText_CFormatEffect = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextParagraphFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_KeepWithNext(pThis, &value))
            }
            return value
        }

        open func put_KeepWithNextImpl(_ value: WinAppSDK.FormatEffect) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextParagraphFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_KeepWithNext(pThis, value))
            }
        }

        open func get_LeftIndentImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextParagraphFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LeftIndent(pThis, &value))
            }
            return value
        }

        open func get_LineSpacingImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextParagraphFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LineSpacing(pThis, &value))
            }
            return value
        }

        open func get_LineSpacingRuleImpl() throws -> WinAppSDK.LineSpacingRule {
            var value: __x_ABI_CMicrosoft_CUI_CText_CLineSpacingRule = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextParagraphFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LineSpacingRule(pThis, &value))
            }
            return value
        }

        open func get_ListAlignmentImpl() throws -> WinAppSDK.MarkerAlignment {
            var value: __x_ABI_CMicrosoft_CUI_CText_CMarkerAlignment = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextParagraphFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ListAlignment(pThis, &value))
            }
            return value
        }

        open func put_ListAlignmentImpl(_ value: WinAppSDK.MarkerAlignment) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextParagraphFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ListAlignment(pThis, value))
            }
        }

        open func get_ListLevelIndexImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextParagraphFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ListLevelIndex(pThis, &value))
            }
            return value
        }

        open func put_ListLevelIndexImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextParagraphFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ListLevelIndex(pThis, value))
            }
        }

        open func get_ListStartImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextParagraphFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ListStart(pThis, &value))
            }
            return value
        }

        open func put_ListStartImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextParagraphFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ListStart(pThis, value))
            }
        }

        open func get_ListStyleImpl() throws -> WinAppSDK.MarkerStyle {
            var value: __x_ABI_CMicrosoft_CUI_CText_CMarkerStyle = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextParagraphFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ListStyle(pThis, &value))
            }
            return value
        }

        open func put_ListStyleImpl(_ value: WinAppSDK.MarkerStyle) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextParagraphFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ListStyle(pThis, value))
            }
        }

        open func get_ListTabImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextParagraphFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ListTab(pThis, &value))
            }
            return value
        }

        open func put_ListTabImpl(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextParagraphFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ListTab(pThis, value))
            }
        }

        open func get_ListTypeImpl() throws -> WinAppSDK.MarkerType {
            var value: __x_ABI_CMicrosoft_CUI_CText_CMarkerType = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextParagraphFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ListType(pThis, &value))
            }
            return value
        }

        open func put_ListTypeImpl(_ value: WinAppSDK.MarkerType) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextParagraphFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ListType(pThis, value))
            }
        }

        open func get_NoLineNumberImpl() throws -> WinAppSDK.FormatEffect {
            var value: __x_ABI_CMicrosoft_CUI_CText_CFormatEffect = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextParagraphFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NoLineNumber(pThis, &value))
            }
            return value
        }

        open func put_NoLineNumberImpl(_ value: WinAppSDK.FormatEffect) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextParagraphFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_NoLineNumber(pThis, value))
            }
        }

        open func get_PageBreakBeforeImpl() throws -> WinAppSDK.FormatEffect {
            var value: __x_ABI_CMicrosoft_CUI_CText_CFormatEffect = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextParagraphFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PageBreakBefore(pThis, &value))
            }
            return value
        }

        open func put_PageBreakBeforeImpl(_ value: WinAppSDK.FormatEffect) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextParagraphFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PageBreakBefore(pThis, value))
            }
        }

        open func get_RightIndentImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextParagraphFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_RightIndent(pThis, &value))
            }
            return value
        }

        open func put_RightIndentImpl(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextParagraphFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_RightIndent(pThis, value))
            }
        }

        open func get_RightToLeftImpl() throws -> WinAppSDK.FormatEffect {
            var value: __x_ABI_CMicrosoft_CUI_CText_CFormatEffect = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextParagraphFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_RightToLeft(pThis, &value))
            }
            return value
        }

        open func put_RightToLeftImpl(_ value: WinAppSDK.FormatEffect) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextParagraphFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_RightToLeft(pThis, value))
            }
        }

        open func get_StyleImpl() throws -> WinAppSDK.ParagraphStyle {
            var value: __x_ABI_CMicrosoft_CUI_CText_CParagraphStyle = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextParagraphFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Style(pThis, &value))
            }
            return value
        }

        open func put_StyleImpl(_ value: WinAppSDK.ParagraphStyle) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextParagraphFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Style(pThis, value))
            }
        }

        open func get_SpaceAfterImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextParagraphFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SpaceAfter(pThis, &value))
            }
            return value
        }

        open func put_SpaceAfterImpl(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextParagraphFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SpaceAfter(pThis, value))
            }
        }

        open func get_SpaceBeforeImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextParagraphFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SpaceBefore(pThis, &value))
            }
            return value
        }

        open func put_SpaceBeforeImpl(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextParagraphFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SpaceBefore(pThis, value))
            }
        }

        open func get_WidowControlImpl() throws -> WinAppSDK.FormatEffect {
            var value: __x_ABI_CMicrosoft_CUI_CText_CFormatEffect = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextParagraphFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_WidowControl(pThis, &value))
            }
            return value
        }

        open func put_WidowControlImpl(_ value: WinAppSDK.FormatEffect) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextParagraphFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_WidowControl(pThis, value))
            }
        }

        open func get_TabCountImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextParagraphFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TabCount(pThis, &value))
            }
            return value
        }

        open func AddTabImpl(_ position: Float, _ align: WinAppSDK.TabAlignment, _ leader: WinAppSDK.TabLeader) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextParagraphFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.AddTab(pThis, position, align, leader))
            }
        }

        open func ClearAllTabsImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextParagraphFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ClearAllTabs(pThis))
            }
        }

        open func DeleteTabImpl(_ position: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextParagraphFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DeleteTab(pThis, position))
            }
        }

        open func GetCloneImpl() throws -> WinAppSDK.AnyITextParagraphFormat? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextParagraphFormat.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetClone(pThis, &resultAbi))
                }
            }
            return __ABI_Microsoft_UI_Text.ITextParagraphFormatWrapper.unwrapFrom(abi: result)
        }

        open func GetTabImpl(_ index: Int32, _ position: inout Float, _ align: inout WinAppSDK.TabAlignment, _ leader: inout WinAppSDK.TabLeader) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextParagraphFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetTab(pThis, index, &position, &align, &leader))
            }
        }

        open func IsEqualImpl(_ format: WinAppSDK.AnyITextParagraphFormat?) throws -> Bool {
            var result: boolean = 0
            let formatWrapper = __ABI_Microsoft_UI_Text.ITextParagraphFormatWrapper(format)
            let _format = try! formatWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextParagraphFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsEqual(pThis, _format, &result))
            }
            return .init(from: result)
        }

        open func SetCloneImpl(_ format: WinAppSDK.AnyITextParagraphFormat?) throws {
            let formatWrapper = __ABI_Microsoft_UI_Text.ITextParagraphFormatWrapper(format)
            let _format = try! formatWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextParagraphFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetClone(pThis, _format))
            }
        }

        open func SetIndentsImpl(_ start: Float, _ left: Float, _ right: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextParagraphFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetIndents(pThis, start, left, right))
            }
        }

        open func SetLineSpacingImpl(_ rule: WinAppSDK.LineSpacingRule, _ spacing: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextParagraphFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetLineSpacing(pThis, rule, spacing))
            }
        }

    }

    internal static var ITextParagraphFormatVTable: __x_ABI_CMicrosoft_CUI_CText_CITextParagraphFormatVtbl = .init(
        QueryInterface: { ITextParagraphFormatWrapper.queryInterface($0, $1, $2) },
        AddRef: { ITextParagraphFormatWrapper.addRef($0) },
        Release: { ITextParagraphFormatWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Text.ITextParagraphFormatWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Microsoft.UI.Text.ITextParagraphFormat").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_Alignment: {
            guard let __unwrapped__instance = ITextParagraphFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.alignment
            $1?.initialize(to: value)
            return S_OK
        },

        put_Alignment: {
            guard let __unwrapped__instance = ITextParagraphFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: WinAppSDK.ParagraphAlignment = $1
            __unwrapped__instance.alignment = value
            return S_OK
        },

        get_FirstLineIndent: {
            guard let __unwrapped__instance = ITextParagraphFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.firstLineIndent
            $1?.initialize(to: value)
            return S_OK
        },

        get_KeepTogether: {
            guard let __unwrapped__instance = ITextParagraphFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.keepTogether
            $1?.initialize(to: value)
            return S_OK
        },

        put_KeepTogether: {
            guard let __unwrapped__instance = ITextParagraphFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: WinAppSDK.FormatEffect = $1
            __unwrapped__instance.keepTogether = value
            return S_OK
        },

        get_KeepWithNext: {
            guard let __unwrapped__instance = ITextParagraphFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.keepWithNext
            $1?.initialize(to: value)
            return S_OK
        },

        put_KeepWithNext: {
            guard let __unwrapped__instance = ITextParagraphFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: WinAppSDK.FormatEffect = $1
            __unwrapped__instance.keepWithNext = value
            return S_OK
        },

        get_LeftIndent: {
            guard let __unwrapped__instance = ITextParagraphFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.leftIndent
            $1?.initialize(to: value)
            return S_OK
        },

        get_LineSpacing: {
            guard let __unwrapped__instance = ITextParagraphFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.lineSpacing
            $1?.initialize(to: value)
            return S_OK
        },

        get_LineSpacingRule: {
            guard let __unwrapped__instance = ITextParagraphFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.lineSpacingRule
            $1?.initialize(to: value)
            return S_OK
        },

        get_ListAlignment: {
            guard let __unwrapped__instance = ITextParagraphFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.listAlignment
            $1?.initialize(to: value)
            return S_OK
        },

        put_ListAlignment: {
            guard let __unwrapped__instance = ITextParagraphFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: WinAppSDK.MarkerAlignment = $1
            __unwrapped__instance.listAlignment = value
            return S_OK
        },

        get_ListLevelIndex: {
            guard let __unwrapped__instance = ITextParagraphFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.listLevelIndex
            $1?.initialize(to: value)
            return S_OK
        },

        put_ListLevelIndex: {
            guard let __unwrapped__instance = ITextParagraphFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: Int32 = $1
            __unwrapped__instance.listLevelIndex = value
            return S_OK
        },

        get_ListStart: {
            guard let __unwrapped__instance = ITextParagraphFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.listStart
            $1?.initialize(to: value)
            return S_OK
        },

        put_ListStart: {
            guard let __unwrapped__instance = ITextParagraphFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: Int32 = $1
            __unwrapped__instance.listStart = value
            return S_OK
        },

        get_ListStyle: {
            guard let __unwrapped__instance = ITextParagraphFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.listStyle
            $1?.initialize(to: value)
            return S_OK
        },

        put_ListStyle: {
            guard let __unwrapped__instance = ITextParagraphFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: WinAppSDK.MarkerStyle = $1
            __unwrapped__instance.listStyle = value
            return S_OK
        },

        get_ListTab: {
            guard let __unwrapped__instance = ITextParagraphFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.listTab
            $1?.initialize(to: value)
            return S_OK
        },

        put_ListTab: {
            guard let __unwrapped__instance = ITextParagraphFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: Float = $1
            __unwrapped__instance.listTab = value
            return S_OK
        },

        get_ListType: {
            guard let __unwrapped__instance = ITextParagraphFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.listType
            $1?.initialize(to: value)
            return S_OK
        },

        put_ListType: {
            guard let __unwrapped__instance = ITextParagraphFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: WinAppSDK.MarkerType = $1
            __unwrapped__instance.listType = value
            return S_OK
        },

        get_NoLineNumber: {
            guard let __unwrapped__instance = ITextParagraphFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.noLineNumber
            $1?.initialize(to: value)
            return S_OK
        },

        put_NoLineNumber: {
            guard let __unwrapped__instance = ITextParagraphFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: WinAppSDK.FormatEffect = $1
            __unwrapped__instance.noLineNumber = value
            return S_OK
        },

        get_PageBreakBefore: {
            guard let __unwrapped__instance = ITextParagraphFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.pageBreakBefore
            $1?.initialize(to: value)
            return S_OK
        },

        put_PageBreakBefore: {
            guard let __unwrapped__instance = ITextParagraphFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: WinAppSDK.FormatEffect = $1
            __unwrapped__instance.pageBreakBefore = value
            return S_OK
        },

        get_RightIndent: {
            guard let __unwrapped__instance = ITextParagraphFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.rightIndent
            $1?.initialize(to: value)
            return S_OK
        },

        put_RightIndent: {
            guard let __unwrapped__instance = ITextParagraphFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: Float = $1
            __unwrapped__instance.rightIndent = value
            return S_OK
        },

        get_RightToLeft: {
            guard let __unwrapped__instance = ITextParagraphFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.rightToLeft
            $1?.initialize(to: value)
            return S_OK
        },

        put_RightToLeft: {
            guard let __unwrapped__instance = ITextParagraphFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: WinAppSDK.FormatEffect = $1
            __unwrapped__instance.rightToLeft = value
            return S_OK
        },

        get_Style: {
            guard let __unwrapped__instance = ITextParagraphFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.style
            $1?.initialize(to: value)
            return S_OK
        },

        put_Style: {
            guard let __unwrapped__instance = ITextParagraphFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: WinAppSDK.ParagraphStyle = $1
            __unwrapped__instance.style = value
            return S_OK
        },

        get_SpaceAfter: {
            guard let __unwrapped__instance = ITextParagraphFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.spaceAfter
            $1?.initialize(to: value)
            return S_OK
        },

        put_SpaceAfter: {
            guard let __unwrapped__instance = ITextParagraphFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: Float = $1
            __unwrapped__instance.spaceAfter = value
            return S_OK
        },

        get_SpaceBefore: {
            guard let __unwrapped__instance = ITextParagraphFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.spaceBefore
            $1?.initialize(to: value)
            return S_OK
        },

        put_SpaceBefore: {
            guard let __unwrapped__instance = ITextParagraphFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: Float = $1
            __unwrapped__instance.spaceBefore = value
            return S_OK
        },

        get_WidowControl: {
            guard let __unwrapped__instance = ITextParagraphFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.widowControl
            $1?.initialize(to: value)
            return S_OK
        },

        put_WidowControl: {
            guard let __unwrapped__instance = ITextParagraphFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: WinAppSDK.FormatEffect = $1
            __unwrapped__instance.widowControl = value
            return S_OK
        },

        get_TabCount: {
            guard let __unwrapped__instance = ITextParagraphFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.tabCount
            $1?.initialize(to: value)
            return S_OK
        },

        AddTab: {
            do {
                guard let __unwrapped__instance = ITextParagraphFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let position: Float = $1
                let align: WinAppSDK.TabAlignment = $2
                let leader: WinAppSDK.TabLeader = $3
                try __unwrapped__instance.addTab(position, align, leader)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        ClearAllTabs: {
            do {
                guard let __unwrapped__instance = ITextParagraphFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.clearAllTabs()
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        DeleteTab: {
            do {
                guard let __unwrapped__instance = ITextParagraphFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let position: Float = $1
                try __unwrapped__instance.deleteTab(position)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetClone: {
            do {
                guard let __unwrapped__instance = ITextParagraphFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let result = try __unwrapped__instance.getClone()
                let resultWrapper = __ABI_Microsoft_UI_Text.ITextParagraphFormatWrapper(result)
                resultWrapper?.copyTo($1)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetTab: {
            do {
                guard let __unwrapped__instance = ITextParagraphFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let index: Int32 = $1
                var position: Float = 0.0
                var align: WinAppSDK.TabAlignment = .init(0)
                var leader: WinAppSDK.TabLeader = .init(0)
                try __unwrapped__instance.getTab(index, &position, &align, &leader)
                $2?.initialize(to: position)
                $3?.initialize(to: align)
                $4?.initialize(to: leader)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        IsEqual: {
            do {
                guard let __unwrapped__instance = ITextParagraphFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let format: WinAppSDK.AnyITextParagraphFormat? = __ABI_Microsoft_UI_Text.ITextParagraphFormatWrapper.unwrapFrom(abi: ComPtr($1))
                let result = try __unwrapped__instance.isEqual(format)
                $2?.initialize(to: .init(from: result))
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        SetClone: {
            do {
                guard let __unwrapped__instance = ITextParagraphFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let format: WinAppSDK.AnyITextParagraphFormat? = __ABI_Microsoft_UI_Text.ITextParagraphFormatWrapper.unwrapFrom(abi: ComPtr($1))
                try __unwrapped__instance.setClone(format)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        SetIndents: {
            do {
                guard let __unwrapped__instance = ITextParagraphFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let start: Float = $1
                let left: Float = $2
                let right: Float = $3
                try __unwrapped__instance.setIndents(start, left, right)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        SetLineSpacing: {
            do {
                guard let __unwrapped__instance = ITextParagraphFormatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let rule: WinAppSDK.LineSpacingRule = $1
                let spacing: Float = $2
                try __unwrapped__instance.setLineSpacing(rule, spacing)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )

    public typealias ITextParagraphFormatWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Text.ITextParagraphFormatBridge>
    public class ITextRange: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CText_CITextRange }

        open func get_CharacterImpl() throws -> Character {
            var value: WCHAR = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextRange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Character(pThis, &value))
            }
            return .init(from: value)
        }

        open func put_CharacterImpl(_ value: Character) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextRange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Character(pThis, .init(from: value)))
            }
        }

        open func get_CharacterFormatImpl() throws -> WinAppSDK.AnyITextCharacterFormat? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextRange.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CharacterFormat(pThis, &valueAbi))
                }
            }
            return __ABI_Microsoft_UI_Text.ITextCharacterFormatWrapper.unwrapFrom(abi: value)
        }

        open func put_CharacterFormatImpl(_ value: WinAppSDK.AnyITextCharacterFormat?) throws {
            let valueWrapper = __ABI_Microsoft_UI_Text.ITextCharacterFormatWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextRange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CharacterFormat(pThis, _value))
            }
        }

        open func get_FormattedTextImpl() throws -> WinAppSDK.AnyITextRange? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextRange.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FormattedText(pThis, &valueAbi))
                }
            }
            return __ABI_Microsoft_UI_Text.ITextRangeWrapper.unwrapFrom(abi: value)
        }

        open func put_FormattedTextImpl(_ value: WinAppSDK.AnyITextRange?) throws {
            let valueWrapper = __ABI_Microsoft_UI_Text.ITextRangeWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextRange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FormattedText(pThis, _value))
            }
        }

        open func get_EndPositionImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextRange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_EndPosition(pThis, &value))
            }
            return value
        }

        open func put_EndPositionImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextRange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_EndPosition(pThis, value))
            }
        }

        open func get_GravityImpl() throws -> WinAppSDK.RangeGravity {
            var value: __x_ABI_CMicrosoft_CUI_CText_CRangeGravity = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextRange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Gravity(pThis, &value))
            }
            return value
        }

        open func put_GravityImpl(_ value: WinAppSDK.RangeGravity) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextRange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Gravity(pThis, value))
            }
        }

        open func get_LengthImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextRange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Length(pThis, &value))
            }
            return value
        }

        open func get_LinkImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextRange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Link(pThis, &value))
            }
            return .init(from: value)
        }

        open func put_LinkImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextRange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Link(pThis, _value.get()))
            }
        }

        open func get_ParagraphFormatImpl() throws -> WinAppSDK.AnyITextParagraphFormat? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextRange.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ParagraphFormat(pThis, &valueAbi))
                }
            }
            return __ABI_Microsoft_UI_Text.ITextParagraphFormatWrapper.unwrapFrom(abi: value)
        }

        open func put_ParagraphFormatImpl(_ value: WinAppSDK.AnyITextParagraphFormat?) throws {
            let valueWrapper = __ABI_Microsoft_UI_Text.ITextParagraphFormatWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextRange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ParagraphFormat(pThis, _value))
            }
        }

        open func get_StartPositionImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextRange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_StartPosition(pThis, &value))
            }
            return value
        }

        open func put_StartPositionImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextRange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_StartPosition(pThis, value))
            }
        }

        open func get_StoryLengthImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextRange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_StoryLength(pThis, &value))
            }
            return value
        }

        open func get_TextImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextRange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Text(pThis, &value))
            }
            return .init(from: value)
        }

        open func put_TextImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextRange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Text(pThis, _value.get()))
            }
        }

        open func CanPasteImpl(_ format: Int32) throws -> Bool {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextRange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CanPaste(pThis, format, &result))
            }
            return .init(from: result)
        }

        open func ChangeCaseImpl(_ value: WinAppSDK.LetterCase) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextRange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ChangeCase(pThis, value))
            }
        }

        open func CollapseImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextRange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Collapse(pThis, .init(from: value)))
            }
        }

        open func CopyImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextRange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Copy(pThis))
            }
        }

        open func CutImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextRange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Cut(pThis))
            }
        }

        open func DeleteImpl(_ unit: WinAppSDK.TextRangeUnit, _ count: Int32) throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextRange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Delete(pThis, unit, count, &result))
            }
            return result
        }

        open func EndOfImpl(_ unit: WinAppSDK.TextRangeUnit, _ extend: Bool) throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextRange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.EndOf(pThis, unit, .init(from: extend), &result))
            }
            return result
        }

        open func ExpandImpl(_ unit: WinAppSDK.TextRangeUnit) throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextRange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Expand(pThis, unit, &result))
            }
            return result
        }

        open func FindTextImpl(_ value: String, _ scanLength: Int32, _ options: WinAppSDK.FindOptions) throws -> Int32 {
            var result: INT32 = 0
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextRange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.FindText(pThis, _value.get(), scanLength, options, &result))
            }
            return result
        }

        open func GetCharacterUtf32Impl(_ value: inout UInt32, _ offset: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextRange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetCharacterUtf32(pThis, &value, offset))
            }
        }

        open func GetCloneImpl() throws -> WinAppSDK.AnyITextRange? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextRange.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetClone(pThis, &resultAbi))
                }
            }
            return __ABI_Microsoft_UI_Text.ITextRangeWrapper.unwrapFrom(abi: result)
        }

        open func GetIndexImpl(_ unit: WinAppSDK.TextRangeUnit) throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextRange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetIndex(pThis, unit, &result))
            }
            return result
        }

        open func GetPointImpl(_ horizontalAlign: WinAppSDK.HorizontalCharacterAlignment, _ verticalAlign: WinAppSDK.VerticalCharacterAlignment, _ options: WinAppSDK.PointOptions, _ point: inout WindowsFoundation.Point) throws {
            var _point: __x_ABI_CWindows_CFoundation_CPoint = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextRange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetPoint(pThis, horizontalAlign, verticalAlign, options, &_point))
            }
            point = .from(abi: _point)
        }

        open func GetRectImpl(_ options: WinAppSDK.PointOptions, _ rect: inout WindowsFoundation.Rect, _ hit: inout Int32) throws {
            var _rect: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextRange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetRect(pThis, options, &_rect, &hit))
            }
            rect = .from(abi: _rect)
        }

        open func GetTextImpl(_ options: WinAppSDK.TextGetOptions, _ value: inout String) throws {
            var _value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextRange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetText(pThis, options, &_value))
            }
            value = .init(from: _value)
            WindowsDeleteString(_value)
        }

        open func GetTextViaStreamImpl(_ options: WinAppSDK.TextGetOptions, _ value: UWP.AnyIRandomAccessStream?) throws {
            let valueWrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextRange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetTextViaStream(pThis, options, _value))
            }
        }

        open func InRangeImpl(_ range: WinAppSDK.AnyITextRange?) throws -> Bool {
            var result: boolean = 0
            let rangeWrapper = __ABI_Microsoft_UI_Text.ITextRangeWrapper(range)
            let _range = try! rangeWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextRange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InRange(pThis, _range, &result))
            }
            return .init(from: result)
        }

        open func InsertImageImpl(_ width: Int32, _ height: Int32, _ ascent: Int32, _ verticalAlign: WinAppSDK.VerticalCharacterAlignment, _ alternateText: String, _ value: UWP.AnyIRandomAccessStream?) throws {
            let _alternateText = try! HString(alternateText)
            let valueWrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextRange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InsertImage(pThis, width, height, ascent, verticalAlign, _alternateText.get(), _value))
            }
        }

        open func InStoryImpl(_ range: WinAppSDK.AnyITextRange?) throws -> Bool {
            var result: boolean = 0
            let rangeWrapper = __ABI_Microsoft_UI_Text.ITextRangeWrapper(range)
            let _range = try! rangeWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextRange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InStory(pThis, _range, &result))
            }
            return .init(from: result)
        }

        open func IsEqualImpl(_ range: WinAppSDK.AnyITextRange?) throws -> Bool {
            var result: boolean = 0
            let rangeWrapper = __ABI_Microsoft_UI_Text.ITextRangeWrapper(range)
            let _range = try! rangeWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextRange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsEqual(pThis, _range, &result))
            }
            return .init(from: result)
        }

        open func MoveImpl(_ unit: WinAppSDK.TextRangeUnit, _ count: Int32) throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextRange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Move(pThis, unit, count, &result))
            }
            return result
        }

        open func MoveEndImpl(_ unit: WinAppSDK.TextRangeUnit, _ count: Int32) throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextRange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.MoveEnd(pThis, unit, count, &result))
            }
            return result
        }

        open func MoveStartImpl(_ unit: WinAppSDK.TextRangeUnit, _ count: Int32) throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextRange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.MoveStart(pThis, unit, count, &result))
            }
            return result
        }

        open func PasteImpl(_ format: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextRange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Paste(pThis, format))
            }
        }

        open func ScrollIntoViewImpl(_ value: WinAppSDK.PointOptions) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextRange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ScrollIntoView(pThis, value))
            }
        }

        open func MatchSelectionImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextRange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.MatchSelection(pThis))
            }
        }

        open func SetIndexImpl(_ unit: WinAppSDK.TextRangeUnit, _ index: Int32, _ extend: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextRange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetIndex(pThis, unit, index, .init(from: extend)))
            }
        }

        open func SetPointImpl(_ point: WindowsFoundation.Point, _ options: WinAppSDK.PointOptions, _ extend: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextRange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetPoint(pThis, .from(swift: point), options, .init(from: extend)))
            }
        }

        open func SetRangeImpl(_ startPosition: Int32, _ endPosition: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextRange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetRange(pThis, startPosition, endPosition))
            }
        }

        open func SetTextImpl(_ options: WinAppSDK.TextSetOptions, _ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextRange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetText(pThis, options, _value.get()))
            }
        }

        open func SetTextViaStreamImpl(_ options: WinAppSDK.TextSetOptions, _ value: UWP.AnyIRandomAccessStream?) throws {
            let valueWrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextRange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetTextViaStream(pThis, options, _value))
            }
        }

        open func StartOfImpl(_ unit: WinAppSDK.TextRangeUnit, _ extend: Bool) throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextRange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.StartOf(pThis, unit, .init(from: extend), &result))
            }
            return result
        }

    }

    internal static var ITextRangeVTable: __x_ABI_CMicrosoft_CUI_CText_CITextRangeVtbl = .init(
        QueryInterface: { ITextRangeWrapper.queryInterface($0, $1, $2) },
        AddRef: { ITextRangeWrapper.addRef($0) },
        Release: { ITextRangeWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Text.ITextRangeWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Microsoft.UI.Text.ITextRange").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_Character: {
            guard let __unwrapped__instance = ITextRangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.character
            $1?.initialize(to: .init(from: value))
            return S_OK
        },

        put_Character: {
            guard let __unwrapped__instance = ITextRangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: Character = .init(from: $1)
            __unwrapped__instance.character = value
            return S_OK
        },

        get_CharacterFormat: {
            guard let __unwrapped__instance = ITextRangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.characterFormat
            let valueWrapper = __ABI_Microsoft_UI_Text.ITextCharacterFormatWrapper(value)
            valueWrapper?.copyTo($1)
            return S_OK
        },

        put_CharacterFormat: {
            guard let __unwrapped__instance = ITextRangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: WinAppSDK.AnyITextCharacterFormat? = __ABI_Microsoft_UI_Text.ITextCharacterFormatWrapper.unwrapFrom(abi: ComPtr($1))
            __unwrapped__instance.characterFormat = value
            return S_OK
        },

        get_FormattedText: {
            guard let __unwrapped__instance = ITextRangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.formattedText
            let valueWrapper = __ABI_Microsoft_UI_Text.ITextRangeWrapper(value)
            valueWrapper?.copyTo($1)
            return S_OK
        },

        put_FormattedText: {
            guard let __unwrapped__instance = ITextRangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: WinAppSDK.AnyITextRange? = __ABI_Microsoft_UI_Text.ITextRangeWrapper.unwrapFrom(abi: ComPtr($1))
            __unwrapped__instance.formattedText = value
            return S_OK
        },

        get_EndPosition: {
            guard let __unwrapped__instance = ITextRangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.endPosition
            $1?.initialize(to: value)
            return S_OK
        },

        put_EndPosition: {
            guard let __unwrapped__instance = ITextRangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: Int32 = $1
            __unwrapped__instance.endPosition = value
            return S_OK
        },

        get_Gravity: {
            guard let __unwrapped__instance = ITextRangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.gravity
            $1?.initialize(to: value)
            return S_OK
        },

        put_Gravity: {
            guard let __unwrapped__instance = ITextRangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: WinAppSDK.RangeGravity = $1
            __unwrapped__instance.gravity = value
            return S_OK
        },

        get_Length: {
            guard let __unwrapped__instance = ITextRangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.length
            $1?.initialize(to: value)
            return S_OK
        },

        get_Link: {
            guard let __unwrapped__instance = ITextRangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.link
            $1?.initialize(to: try! HString(value).detach())
            return S_OK
        },

        put_Link: {
            guard let __unwrapped__instance = ITextRangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: String = .init(from: $1)
            __unwrapped__instance.link = value
            return S_OK
        },

        get_ParagraphFormat: {
            guard let __unwrapped__instance = ITextRangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.paragraphFormat
            let valueWrapper = __ABI_Microsoft_UI_Text.ITextParagraphFormatWrapper(value)
            valueWrapper?.copyTo($1)
            return S_OK
        },

        put_ParagraphFormat: {
            guard let __unwrapped__instance = ITextRangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: WinAppSDK.AnyITextParagraphFormat? = __ABI_Microsoft_UI_Text.ITextParagraphFormatWrapper.unwrapFrom(abi: ComPtr($1))
            __unwrapped__instance.paragraphFormat = value
            return S_OK
        },

        get_StartPosition: {
            guard let __unwrapped__instance = ITextRangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.startPosition
            $1?.initialize(to: value)
            return S_OK
        },

        put_StartPosition: {
            guard let __unwrapped__instance = ITextRangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: Int32 = $1
            __unwrapped__instance.startPosition = value
            return S_OK
        },

        get_StoryLength: {
            guard let __unwrapped__instance = ITextRangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.storyLength
            $1?.initialize(to: value)
            return S_OK
        },

        get_Text: {
            guard let __unwrapped__instance = ITextRangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.text
            $1?.initialize(to: try! HString(value).detach())
            return S_OK
        },

        put_Text: {
            guard let __unwrapped__instance = ITextRangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: String = .init(from: $1)
            __unwrapped__instance.text = value
            return S_OK
        },

        CanPaste: {
            do {
                guard let __unwrapped__instance = ITextRangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let format: Int32 = $1
                let result = try __unwrapped__instance.canPaste(format)
                $2?.initialize(to: .init(from: result))
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        ChangeCase: {
            do {
                guard let __unwrapped__instance = ITextRangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value: WinAppSDK.LetterCase = $1
                try __unwrapped__instance.changeCase(value)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        Collapse: {
            do {
                guard let __unwrapped__instance = ITextRangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value: Bool = .init(from: $1)
                try __unwrapped__instance.collapse(value)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        Copy: {
            do {
                guard let __unwrapped__instance = ITextRangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.copy()
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        Cut: {
            do {
                guard let __unwrapped__instance = ITextRangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.cut()
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        Delete: {
            do {
                guard let __unwrapped__instance = ITextRangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let unit: WinAppSDK.TextRangeUnit = $1
                let count: Int32 = $2
                let result = try __unwrapped__instance.delete(unit, count)
                $3?.initialize(to: result)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        EndOf: {
            do {
                guard let __unwrapped__instance = ITextRangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let unit: WinAppSDK.TextRangeUnit = $1
                let extend: Bool = .init(from: $2)
                let result = try __unwrapped__instance.endOf(unit, extend)
                $3?.initialize(to: result)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        Expand: {
            do {
                guard let __unwrapped__instance = ITextRangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let unit: WinAppSDK.TextRangeUnit = $1
                let result = try __unwrapped__instance.expand(unit)
                $2?.initialize(to: result)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        FindText: {
            do {
                guard let __unwrapped__instance = ITextRangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value: String = .init(from: $1)
                let scanLength: Int32 = $2
                let options: WinAppSDK.FindOptions = $3
                let result = try __unwrapped__instance.findText(value, scanLength, options)
                $4?.initialize(to: result)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetCharacterUtf32: {
            do {
                guard let __unwrapped__instance = ITextRangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                var value: UInt32 = 0
                let offset: Int32 = $2
                try __unwrapped__instance.getCharacterUtf32(&value, offset)
                $1?.initialize(to: value)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetClone: {
            do {
                guard let __unwrapped__instance = ITextRangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let result = try __unwrapped__instance.getClone()
                let resultWrapper = __ABI_Microsoft_UI_Text.ITextRangeWrapper(result)
                resultWrapper?.copyTo($1)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetIndex: {
            do {
                guard let __unwrapped__instance = ITextRangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let unit: WinAppSDK.TextRangeUnit = $1
                let result = try __unwrapped__instance.getIndex(unit)
                $2?.initialize(to: result)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetPoint: {
            do {
                guard let __unwrapped__instance = ITextRangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let horizontalAlign: WinAppSDK.HorizontalCharacterAlignment = $1
                let verticalAlign: WinAppSDK.VerticalCharacterAlignment = $2
                let options: WinAppSDK.PointOptions = $3
                var point: WindowsFoundation.Point = .init()
                try __unwrapped__instance.getPoint(horizontalAlign, verticalAlign, options, &point)
                $4?.initialize(to: .from(swift: point))
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetRect: {
            do {
                guard let __unwrapped__instance = ITextRangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let options: WinAppSDK.PointOptions = $1
                var rect: WindowsFoundation.Rect = .init()
                var hit: Int32 = 0
                try __unwrapped__instance.getRect(options, &rect, &hit)
                $2?.initialize(to: .from(swift: rect))
                $3?.initialize(to: hit)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetText: {
            do {
                guard let __unwrapped__instance = ITextRangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let options: WinAppSDK.TextGetOptions = $1
                var value: String = ""
                try __unwrapped__instance.getText(options, &value)
                $2?.initialize(to: try! HString(value).detach())
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetTextViaStream: {
            do {
                guard let __unwrapped__instance = ITextRangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let options: WinAppSDK.TextGetOptions = $1
                let value: UWP.AnyIRandomAccessStream? = __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper.unwrapFrom(abi: ComPtr($2))
                try __unwrapped__instance.getTextViaStream(options, value)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        InRange: {
            do {
                guard let __unwrapped__instance = ITextRangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let range: WinAppSDK.AnyITextRange? = __ABI_Microsoft_UI_Text.ITextRangeWrapper.unwrapFrom(abi: ComPtr($1))
                let result = try __unwrapped__instance.inRange(range)
                $2?.initialize(to: .init(from: result))
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        InsertImage: {
            do {
                guard let __unwrapped__instance = ITextRangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let width: Int32 = $1
                let height: Int32 = $2
                let ascent: Int32 = $3
                let verticalAlign: WinAppSDK.VerticalCharacterAlignment = $4
                let alternateText: String = .init(from: $5)
                let value: UWP.AnyIRandomAccessStream? = __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper.unwrapFrom(abi: ComPtr($6))
                try __unwrapped__instance.insertImage(width, height, ascent, verticalAlign, alternateText, value)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        InStory: {
            do {
                guard let __unwrapped__instance = ITextRangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let range: WinAppSDK.AnyITextRange? = __ABI_Microsoft_UI_Text.ITextRangeWrapper.unwrapFrom(abi: ComPtr($1))
                let result = try __unwrapped__instance.inStory(range)
                $2?.initialize(to: .init(from: result))
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        IsEqual: {
            do {
                guard let __unwrapped__instance = ITextRangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let range: WinAppSDK.AnyITextRange? = __ABI_Microsoft_UI_Text.ITextRangeWrapper.unwrapFrom(abi: ComPtr($1))
                let result = try __unwrapped__instance.isEqual(range)
                $2?.initialize(to: .init(from: result))
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        Move: {
            do {
                guard let __unwrapped__instance = ITextRangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let unit: WinAppSDK.TextRangeUnit = $1
                let count: Int32 = $2
                let result = try __unwrapped__instance.move(unit, count)
                $3?.initialize(to: result)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        MoveEnd: {
            do {
                guard let __unwrapped__instance = ITextRangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let unit: WinAppSDK.TextRangeUnit = $1
                let count: Int32 = $2
                let result = try __unwrapped__instance.moveEnd(unit, count)
                $3?.initialize(to: result)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        MoveStart: {
            do {
                guard let __unwrapped__instance = ITextRangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let unit: WinAppSDK.TextRangeUnit = $1
                let count: Int32 = $2
                let result = try __unwrapped__instance.moveStart(unit, count)
                $3?.initialize(to: result)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        Paste: {
            do {
                guard let __unwrapped__instance = ITextRangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let format: Int32 = $1
                try __unwrapped__instance.paste(format)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        ScrollIntoView: {
            do {
                guard let __unwrapped__instance = ITextRangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value: WinAppSDK.PointOptions = $1
                try __unwrapped__instance.scrollIntoView(value)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        MatchSelection: {
            do {
                guard let __unwrapped__instance = ITextRangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.matchSelection()
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        SetIndex: {
            do {
                guard let __unwrapped__instance = ITextRangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let unit: WinAppSDK.TextRangeUnit = $1
                let index: Int32 = $2
                let extend: Bool = .init(from: $3)
                try __unwrapped__instance.setIndex(unit, index, extend)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        SetPoint: {
            do {
                guard let __unwrapped__instance = ITextRangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let point: WindowsFoundation.Point = .from(abi: $1)
                let options: WinAppSDK.PointOptions = $2
                let extend: Bool = .init(from: $3)
                try __unwrapped__instance.setPoint(point, options, extend)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        SetRange: {
            do {
                guard let __unwrapped__instance = ITextRangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let startPosition: Int32 = $1
                let endPosition: Int32 = $2
                try __unwrapped__instance.setRange(startPosition, endPosition)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        SetText: {
            do {
                guard let __unwrapped__instance = ITextRangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let options: WinAppSDK.TextSetOptions = $1
                let value: String = .init(from: $2)
                try __unwrapped__instance.setText(options, value)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        SetTextViaStream: {
            do {
                guard let __unwrapped__instance = ITextRangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let options: WinAppSDK.TextSetOptions = $1
                let value: UWP.AnyIRandomAccessStream? = __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper.unwrapFrom(abi: ComPtr($2))
                try __unwrapped__instance.setTextViaStream(options, value)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        StartOf: {
            do {
                guard let __unwrapped__instance = ITextRangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let unit: WinAppSDK.TextRangeUnit = $1
                let extend: Bool = .init(from: $2)
                let result = try __unwrapped__instance.startOf(unit, extend)
                $3?.initialize(to: result)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )

    public typealias ITextRangeWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Text.ITextRangeBridge>
    public class ITextSelection: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CText_CITextSelection }

        open func get_OptionsImpl() throws -> WinAppSDK.SelectionOptions {
            var value: __x_ABI_CMicrosoft_CUI_CText_CSelectionOptions = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextSelection.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Options(pThis, &value))
            }
            return value
        }

        open func put_OptionsImpl(_ value: WinAppSDK.SelectionOptions) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextSelection.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Options(pThis, value))
            }
        }

        open func get_TypeImpl() throws -> WinAppSDK.SelectionType {
            var value: __x_ABI_CMicrosoft_CUI_CText_CSelectionType = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextSelection.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Type(pThis, &value))
            }
            return value
        }

        open func EndKeyImpl(_ unit: WinAppSDK.TextRangeUnit, _ extend: Bool) throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextSelection.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.EndKey(pThis, unit, .init(from: extend), &result))
            }
            return result
        }

        open func HomeKeyImpl(_ unit: WinAppSDK.TextRangeUnit, _ extend: Bool) throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextSelection.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.HomeKey(pThis, unit, .init(from: extend), &result))
            }
            return result
        }

        open func MoveDownImpl(_ unit: WinAppSDK.TextRangeUnit, _ count: Int32, _ extend: Bool) throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextSelection.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.MoveDown(pThis, unit, count, .init(from: extend), &result))
            }
            return result
        }

        open func MoveLeftImpl(_ unit: WinAppSDK.TextRangeUnit, _ count: Int32, _ extend: Bool) throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextSelection.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.MoveLeft(pThis, unit, count, .init(from: extend), &result))
            }
            return result
        }

        open func MoveRightImpl(_ unit: WinAppSDK.TextRangeUnit, _ count: Int32, _ extend: Bool) throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextSelection.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.MoveRight(pThis, unit, count, .init(from: extend), &result))
            }
            return result
        }

        open func MoveUpImpl(_ unit: WinAppSDK.TextRangeUnit, _ count: Int32, _ extend: Bool) throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextSelection.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.MoveUp(pThis, unit, count, .init(from: extend), &result))
            }
            return result
        }

        open func TypeTextImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CText_CITextSelection.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.TypeText(pThis, _value.get()))
            }
        }

    }

    internal static var ITextSelectionVTable: __x_ABI_CMicrosoft_CUI_CText_CITextSelectionVtbl = .init(
        QueryInterface: { ITextSelectionWrapper.queryInterface($0, $1, $2) },
        AddRef: { ITextSelectionWrapper.addRef($0) },
        Release: { ITextSelectionWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Text.ITextSelectionWrapper.IID
            iids[3] = __ABI_Microsoft_UI_Text.ITextRangeWrapper.IID
            $1!.pointee = 4
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Microsoft.UI.Text.ITextSelection").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_Options: {
            guard let __unwrapped__instance = ITextSelectionWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.options
            $1?.initialize(to: value)
            return S_OK
        },

        put_Options: {
            guard let __unwrapped__instance = ITextSelectionWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: WinAppSDK.SelectionOptions = $1
            __unwrapped__instance.options = value
            return S_OK
        },

        get_Type: {
            guard let __unwrapped__instance = ITextSelectionWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.type
            $1?.initialize(to: value)
            return S_OK
        },

        EndKey: {
            do {
                guard let __unwrapped__instance = ITextSelectionWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let unit: WinAppSDK.TextRangeUnit = $1
                let extend: Bool = .init(from: $2)
                let result = try __unwrapped__instance.endKey(unit, extend)
                $3?.initialize(to: result)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        HomeKey: {
            do {
                guard let __unwrapped__instance = ITextSelectionWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let unit: WinAppSDK.TextRangeUnit = $1
                let extend: Bool = .init(from: $2)
                let result = try __unwrapped__instance.homeKey(unit, extend)
                $3?.initialize(to: result)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        MoveDown: {
            do {
                guard let __unwrapped__instance = ITextSelectionWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let unit: WinAppSDK.TextRangeUnit = $1
                let count: Int32 = $2
                let extend: Bool = .init(from: $3)
                let result = try __unwrapped__instance.moveDown(unit, count, extend)
                $4?.initialize(to: result)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        MoveLeft: {
            do {
                guard let __unwrapped__instance = ITextSelectionWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let unit: WinAppSDK.TextRangeUnit = $1
                let count: Int32 = $2
                let extend: Bool = .init(from: $3)
                let result = try __unwrapped__instance.moveLeft(unit, count, extend)
                $4?.initialize(to: result)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        MoveRight: {
            do {
                guard let __unwrapped__instance = ITextSelectionWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let unit: WinAppSDK.TextRangeUnit = $1
                let count: Int32 = $2
                let extend: Bool = .init(from: $3)
                let result = try __unwrapped__instance.moveRight(unit, count, extend)
                $4?.initialize(to: result)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        MoveUp: {
            do {
                guard let __unwrapped__instance = ITextSelectionWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let unit: WinAppSDK.TextRangeUnit = $1
                let count: Int32 = $2
                let extend: Bool = .init(from: $3)
                let result = try __unwrapped__instance.moveUp(unit, count, extend)
                $4?.initialize(to: result)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        TypeText: {
            do {
                guard let __unwrapped__instance = ITextSelectionWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value: String = .init(from: $1)
                try __unwrapped__instance.typeText(value)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )

    public typealias ITextSelectionWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Text.ITextSelectionBridge>
}
