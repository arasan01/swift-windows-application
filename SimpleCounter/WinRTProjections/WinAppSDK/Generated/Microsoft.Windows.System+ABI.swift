// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

private var IID___x_ABI_CMicrosoft_CWindows_CSystem_CIEnvironmentManager: WindowsFoundation.IID {
    .init(Data1: 0xD1B239BB, Data2: 0x7013, Data3: 0x5176, Data4: ( 0xB0,0x2A,0x63,0x47,0x74,0x10,0xD9,0x86 ))// D1B239BB-7013-5176-B02A-63477410D986
}

private var IID___x_ABI_CMicrosoft_CWindows_CSystem_CIEnvironmentManager2: WindowsFoundation.IID {
    .init(Data1: 0xCFC0AD51, Data2: 0x02B7, Data3: 0x57FF, Data4: ( 0x8C,0xA7,0xE0,0x15,0x25,0x17,0x37,0xCB ))// CFC0AD51-02B7-57FF-8CA7-E015251737CB
}

private var IID___x_ABI_CMicrosoft_CWindows_CSystem_CIEnvironmentManagerStatics: WindowsFoundation.IID {
    .init(Data1: 0x407B1522, Data2: 0x6156, Data3: 0x5398, Data4: ( 0x93,0xFD,0xD6,0x41,0x1C,0x35,0xE7,0xB1 ))// 407B1522-6156-5398-93FD-D6411C35E7B1
}

public enum __ABI_Microsoft_Windows_System {
    public class IEnvironmentManager: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWindows_CSystem_CIEnvironmentManager }

        internal func GetEnvironmentVariablesImpl() throws -> WindowsFoundation.AnyIMapView<String, String>? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWindows_CSystem_CIEnvironmentManager.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetEnvironmentVariables(pThis, &resultAbi))
                }
            }
            return WinAppSDK.__x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper.unwrapFrom(abi: result)
        }

        internal func GetEnvironmentVariableImpl(_ name: String) throws -> String {
            var result: HSTRING?
            let _name = try! HString(name)
            _ = try perform(as: __x_ABI_CMicrosoft_CWindows_CSystem_CIEnvironmentManager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetEnvironmentVariable(pThis, _name.get(), &result))
            }
            return .init(from: result)
        }

        internal func SetEnvironmentVariableImpl(_ name: String, _ value: String) throws {
            let _name = try! HString(name)
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CWindows_CSystem_CIEnvironmentManager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetEnvironmentVariable(pThis, _name.get(), _value.get()))
            }
        }

        internal func AppendToPathImpl(_ path: String) throws {
            let _path = try! HString(path)
            _ = try perform(as: __x_ABI_CMicrosoft_CWindows_CSystem_CIEnvironmentManager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.AppendToPath(pThis, _path.get()))
            }
        }

        internal func RemoveFromPathImpl(_ path: String) throws {
            let _path = try! HString(path)
            _ = try perform(as: __x_ABI_CMicrosoft_CWindows_CSystem_CIEnvironmentManager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveFromPath(pThis, _path.get()))
            }
        }

        internal func AddExecutableFileExtensionImpl(_ pathExt: String) throws {
            let _pathExt = try! HString(pathExt)
            _ = try perform(as: __x_ABI_CMicrosoft_CWindows_CSystem_CIEnvironmentManager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.AddExecutableFileExtension(pThis, _pathExt.get()))
            }
        }

        internal func RemoveExecutableFileExtensionImpl(_ pathExt: String) throws {
            let _pathExt = try! HString(pathExt)
            _ = try perform(as: __x_ABI_CMicrosoft_CWindows_CSystem_CIEnvironmentManager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveExecutableFileExtension(pThis, _pathExt.get()))
            }
        }

    }

    public class IEnvironmentManager2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWindows_CSystem_CIEnvironmentManager2 }

        internal func get_AreChangesTrackedImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWindows_CSystem_CIEnvironmentManager2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AreChangesTracked(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class IEnvironmentManagerStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWindows_CSystem_CIEnvironmentManagerStatics }

        internal func GetForProcessImpl() throws -> WinAppSDK.EnvironmentManager? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWindows_CSystem_CIEnvironmentManagerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetForProcess(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func GetForUserImpl() throws -> WinAppSDK.EnvironmentManager? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWindows_CSystem_CIEnvironmentManagerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetForUser(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func GetForMachineImpl() throws -> WinAppSDK.EnvironmentManager? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWindows_CSystem_CIEnvironmentManagerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetForMachine(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func get_IsSupportedImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWindows_CSystem_CIEnvironmentManagerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSupported(pThis, &value))
            }
            return .init(from: value)
        }

    }

}
