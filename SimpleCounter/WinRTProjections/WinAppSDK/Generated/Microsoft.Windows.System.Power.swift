// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.system.power.batterystatus)
public typealias BatteryStatus = __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CBatteryStatus
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.system.power.displaystatus)
public typealias DisplayStatus = __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CDisplayStatus
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.system.power.effectivepowermode)
public typealias EffectivePowerMode = __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.system.power.energysaverstatus)
public typealias EnergySaverStatus = __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CEnergySaverStatus
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.system.power.powersourcekind)
public typealias PowerSourceKind = __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CPowerSourceKind
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.system.power.powersupplystatus)
public typealias PowerSupplyStatus = __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CPowerSupplyStatus
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.system.power.systemsuspendstatus)
public typealias SystemSuspendStatus = __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CSystemSuspendStatus
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.system.power.userpresencestatus)
public typealias UserPresenceStatus = __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CUserPresenceStatus
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.system.power.powermanager)
public final class PowerManager {
    private static let _IPowerManagerStatics: __ABI_Microsoft_Windows_System_Power.IPowerManagerStatics = try! RoGetActivationFactory(HString("Microsoft.Windows.System.Power.PowerManager"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.system.power.powermanager.batterystatus)
    public static var batteryStatus : BatteryStatus {
        get { try! _IPowerManagerStatics.get_BatteryStatusImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.system.power.powermanager.displaystatus)
    public static var displayStatus : DisplayStatus {
        get { try! _IPowerManagerStatics.get_DisplayStatusImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.system.power.powermanager.effectivepowermode)
    public static var effectivePowerMode : WindowsFoundation.AnyIAsyncOperation<EffectivePowerMode>! {
        get { try! _IPowerManagerStatics.get_EffectivePowerModeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.system.power.powermanager.energysaverstatus)
    public static var energySaverStatus : EnergySaverStatus {
        get { try! _IPowerManagerStatics.get_EnergySaverStatusImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.system.power.powermanager.powersourcekind)
    public static var powerSourceKind : PowerSourceKind {
        get { try! _IPowerManagerStatics.get_PowerSourceKindImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.system.power.powermanager.powersupplystatus)
    public static var powerSupplyStatus : PowerSupplyStatus {
        get { try! _IPowerManagerStatics.get_PowerSupplyStatusImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.system.power.powermanager.remainingchargepercent)
    public static var remainingChargePercent : Int32 {
        get { try! _IPowerManagerStatics.get_RemainingChargePercentImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.system.power.powermanager.remainingdischargetime)
    public static var remainingDischargeTime : WindowsFoundation.TimeSpan {
        get { try! _IPowerManagerStatics.get_RemainingDischargeTimeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.system.power.powermanager.systemsuspendstatus)
    public static var systemSuspendStatus : SystemSuspendStatus {
        get { try! _IPowerManagerStatics.get_SystemSuspendStatusImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.system.power.powermanager.userpresencestatus)
    public static var userPresenceStatus : UserPresenceStatus {
        get { try! _IPowerManagerStatics.get_UserPresenceStatusImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.system.power.powermanager.batterystatuschanged)
    public static var batteryStatusChanged : Event<EventHandler<Any?>> = {
      .init(
        add: { try! _IPowerManagerStatics.add_BatteryStatusChangedImpl($0) },
        remove: { try? _IPowerManagerStatics.remove_BatteryStatusChangedImpl($0) }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.system.power.powermanager.displaystatuschanged)
    public static var displayStatusChanged : Event<EventHandler<Any?>> = {
      .init(
        add: { try! _IPowerManagerStatics.add_DisplayStatusChangedImpl($0) },
        remove: { try? _IPowerManagerStatics.remove_DisplayStatusChangedImpl($0) }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.system.power.powermanager.effectivepowermodechanged)
    public static var effectivePowerModeChanged : Event<EventHandler<Any?>> = {
      .init(
        add: { try! _IPowerManagerStatics.add_EffectivePowerModeChangedImpl($0) },
        remove: { try? _IPowerManagerStatics.remove_EffectivePowerModeChangedImpl($0) }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.system.power.powermanager.energysaverstatuschanged)
    public static var energySaverStatusChanged : Event<EventHandler<Any?>> = {
      .init(
        add: { try! _IPowerManagerStatics.add_EnergySaverStatusChangedImpl($0) },
        remove: { try? _IPowerManagerStatics.remove_EnergySaverStatusChangedImpl($0) }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.system.power.powermanager.powersourcekindchanged)
    public static var powerSourceKindChanged : Event<EventHandler<Any?>> = {
      .init(
        add: { try! _IPowerManagerStatics.add_PowerSourceKindChangedImpl($0) },
        remove: { try? _IPowerManagerStatics.remove_PowerSourceKindChangedImpl($0) }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.system.power.powermanager.powersupplystatuschanged)
    public static var powerSupplyStatusChanged : Event<EventHandler<Any?>> = {
      .init(
        add: { try! _IPowerManagerStatics.add_PowerSupplyStatusChangedImpl($0) },
        remove: { try? _IPowerManagerStatics.remove_PowerSupplyStatusChangedImpl($0) }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.system.power.powermanager.remainingchargepercentchanged)
    public static var remainingChargePercentChanged : Event<EventHandler<Any?>> = {
      .init(
        add: { try! _IPowerManagerStatics.add_RemainingChargePercentChangedImpl($0) },
        remove: { try? _IPowerManagerStatics.remove_RemainingChargePercentChangedImpl($0) }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.system.power.powermanager.remainingdischargetimechanged)
    public static var remainingDischargeTimeChanged : Event<EventHandler<Any?>> = {
      .init(
        add: { try! _IPowerManagerStatics.add_RemainingDischargeTimeChangedImpl($0) },
        remove: { try? _IPowerManagerStatics.remove_RemainingDischargeTimeChangedImpl($0) }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.system.power.powermanager.systemidlestatuschanged)
    public static var systemIdleStatusChanged : Event<EventHandler<Any?>> = {
      .init(
        add: { try! _IPowerManagerStatics.add_SystemIdleStatusChangedImpl($0) },
        remove: { try? _IPowerManagerStatics.remove_SystemIdleStatusChangedImpl($0) }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.system.power.powermanager.systemsuspendstatuschanged)
    public static var systemSuspendStatusChanged : Event<EventHandler<Any?>> = {
      .init(
        add: { try! _IPowerManagerStatics.add_SystemSuspendStatusChangedImpl($0) },
        remove: { try? _IPowerManagerStatics.remove_SystemSuspendStatusChangedImpl($0) }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.system.power.powermanager.userpresencestatuschanged)
    public static var userPresenceStatusChanged : Event<EventHandler<Any?>> = {
      .init(
        add: { try! _IPowerManagerStatics.add_UserPresenceStatusChangedImpl($0) },
        remove: { try? _IPowerManagerStatics.remove_UserPresenceStatusChangedImpl($0) }
      )
    }()

    private static let _IPowerManagerStatics2: __ABI_Microsoft_Windows_System_Power.IPowerManagerStatics2 = try! RoGetActivationFactory(HString("Microsoft.Windows.System.Power.PowerManager"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.system.power.powermanager.effectivepowermode2)
    public static var effectivePowerMode2 : EffectivePowerMode {
        get { try! _IPowerManagerStatics2.get_EffectivePowerMode2Impl() }
    }

}

extension WinAppSDK.BatteryStatus {
    public static var notPresent : WinAppSDK.BatteryStatus {
        __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CBatteryStatus_NotPresent
    }
    public static var discharging : WinAppSDK.BatteryStatus {
        __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CBatteryStatus_Discharging
    }
    public static var idle : WinAppSDK.BatteryStatus {
        __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CBatteryStatus_Idle
    }
    public static var charging : WinAppSDK.BatteryStatus {
        __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CBatteryStatus_Charging
    }
}
extension WinAppSDK.BatteryStatus: @retroactive Hashable, @retroactive Codable {}

extension WinAppSDK.DisplayStatus {
    public static var off : WinAppSDK.DisplayStatus {
        __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CDisplayStatus_Off
    }
    public static var on : WinAppSDK.DisplayStatus {
        __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CDisplayStatus_On
    }
    public static var dimmed : WinAppSDK.DisplayStatus {
        __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CDisplayStatus_Dimmed
    }
}
extension WinAppSDK.DisplayStatus: @retroactive Hashable, @retroactive Codable {}

extension WinAppSDK.EffectivePowerMode {
    public static var batterySaver : WinAppSDK.EffectivePowerMode {
        __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode_BatterySaver
    }
    public static var betterBattery : WinAppSDK.EffectivePowerMode {
        __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode_BetterBattery
    }
    public static var balanced : WinAppSDK.EffectivePowerMode {
        __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode_Balanced
    }
    public static var highPerformance : WinAppSDK.EffectivePowerMode {
        __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode_HighPerformance
    }
    public static var maxPerformance : WinAppSDK.EffectivePowerMode {
        __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode_MaxPerformance
    }
    public static var gameMode : WinAppSDK.EffectivePowerMode {
        __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode_GameMode
    }
    public static var mixedReality : WinAppSDK.EffectivePowerMode {
        __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode_MixedReality
    }
}
extension WinAppSDK.EffectivePowerMode: @retroactive Hashable, @retroactive Codable {}

extension WinAppSDK.EnergySaverStatus {
    public static var uninitialized : WinAppSDK.EnergySaverStatus {
        __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CEnergySaverStatus_Uninitialized
    }
    public static var disabled : WinAppSDK.EnergySaverStatus {
        __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CEnergySaverStatus_Disabled
    }
    public static var off : WinAppSDK.EnergySaverStatus {
        __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CEnergySaverStatus_Off
    }
    public static var on : WinAppSDK.EnergySaverStatus {
        __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CEnergySaverStatus_On
    }
}
extension WinAppSDK.EnergySaverStatus: @retroactive Hashable, @retroactive Codable {}

extension WinAppSDK.PowerSourceKind {
    public static var ac : WinAppSDK.PowerSourceKind {
        __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CPowerSourceKind_AC
    }
    public static var dc : WinAppSDK.PowerSourceKind {
        __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CPowerSourceKind_DC
    }
}
extension WinAppSDK.PowerSourceKind: @retroactive Hashable, @retroactive Codable {}

extension WinAppSDK.PowerSupplyStatus {
    public static var notPresent : WinAppSDK.PowerSupplyStatus {
        __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CPowerSupplyStatus_NotPresent
    }
    public static var inadequate : WinAppSDK.PowerSupplyStatus {
        __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CPowerSupplyStatus_Inadequate
    }
    public static var adequate : WinAppSDK.PowerSupplyStatus {
        __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CPowerSupplyStatus_Adequate
    }
}
extension WinAppSDK.PowerSupplyStatus: @retroactive Hashable, @retroactive Codable {}

extension WinAppSDK.SystemSuspendStatus {
    public static var uninitialized : WinAppSDK.SystemSuspendStatus {
        __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CSystemSuspendStatus_Uninitialized
    }
    public static var entering : WinAppSDK.SystemSuspendStatus {
        __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CSystemSuspendStatus_Entering
    }
    public static var autoResume : WinAppSDK.SystemSuspendStatus {
        __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CSystemSuspendStatus_AutoResume
    }
    public static var manualResume : WinAppSDK.SystemSuspendStatus {
        __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CSystemSuspendStatus_ManualResume
    }
}
extension WinAppSDK.SystemSuspendStatus: @retroactive Hashable, @retroactive Codable {}

extension WinAppSDK.UserPresenceStatus {
    public static var present : WinAppSDK.UserPresenceStatus {
        __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CUserPresenceStatus_Present
    }
    public static var absent : WinAppSDK.UserPresenceStatus {
        __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CUserPresenceStatus_Absent
    }
}
extension WinAppSDK.UserPresenceStatus: @retroactive Hashable, @retroactive Codable {}

