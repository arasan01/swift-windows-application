// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

private var IID___x_ABI_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics: WindowsFoundation.IID {
    .init(Data1: 0xFA3554CC, Data2: 0xBE1C, Data3: 0x534C, Data4: ( 0xBF,0xF8,0x72,0xDF,0x78,0xE9,0xF4,0xA4 ))// FA3554CC-BE1C-534C-BFF8-72DF78E9F4A4
}

private var IID___x_ABI_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics2: WindowsFoundation.IID {
    .init(Data1: 0x61F3CC25, Data2: 0x65B4, Data3: 0x5DEF, Data4: ( 0x9C,0x9B,0x99,0x0C,0xEF,0x3B,0x08,0x33 ))// 61F3CC25-65B4-5DEF-9C9B-990CEF3B0833
}

public enum __ABI_Microsoft_Windows_System_Power {
    public class IPowerManagerStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics }

        internal func get_EnergySaverStatusImpl() throws -> WinAppSDK.EnergySaverStatus {
            var value: __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CEnergySaverStatus = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_EnergySaverStatus(pThis, &value))
            }
            return value
        }

        internal func add_EnergySaverStatusChangedImpl(_ handler: EventHandler<Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinAppSDK.__x_ABI_C__FIEventHandler_1_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_EnergySaverStatusChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_EnergySaverStatusChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_EnergySaverStatusChanged(pThis, token))
            }
        }

        internal func get_BatteryStatusImpl() throws -> WinAppSDK.BatteryStatus {
            var value: __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CBatteryStatus = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BatteryStatus(pThis, &value))
            }
            return value
        }

        internal func add_BatteryStatusChangedImpl(_ handler: EventHandler<Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinAppSDK.__x_ABI_C__FIEventHandler_1_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_BatteryStatusChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_BatteryStatusChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_BatteryStatusChanged(pThis, token))
            }
        }

        internal func get_PowerSupplyStatusImpl() throws -> WinAppSDK.PowerSupplyStatus {
            var value: __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CPowerSupplyStatus = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PowerSupplyStatus(pThis, &value))
            }
            return value
        }

        internal func add_PowerSupplyStatusChangedImpl(_ handler: EventHandler<Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinAppSDK.__x_ABI_C__FIEventHandler_1_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_PowerSupplyStatusChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_PowerSupplyStatusChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PowerSupplyStatusChanged(pThis, token))
            }
        }

        internal func get_RemainingChargePercentImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_RemainingChargePercent(pThis, &value))
            }
            return value
        }

        internal func add_RemainingChargePercentChangedImpl(_ handler: EventHandler<Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinAppSDK.__x_ABI_C__FIEventHandler_1_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_RemainingChargePercentChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_RemainingChargePercentChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_RemainingChargePercentChanged(pThis, token))
            }
        }

        internal func get_RemainingDischargeTimeImpl() throws -> WindowsFoundation.TimeSpan {
            var value: __x_ABI_CWindows_CFoundation_CTimeSpan = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_RemainingDischargeTime(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func add_RemainingDischargeTimeChangedImpl(_ handler: EventHandler<Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinAppSDK.__x_ABI_C__FIEventHandler_1_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_RemainingDischargeTimeChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_RemainingDischargeTimeChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_RemainingDischargeTimeChanged(pThis, token))
            }
        }

        internal func get_PowerSourceKindImpl() throws -> WinAppSDK.PowerSourceKind {
            var value: __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CPowerSourceKind = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PowerSourceKind(pThis, &value))
            }
            return value
        }

        internal func add_PowerSourceKindChangedImpl(_ handler: EventHandler<Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinAppSDK.__x_ABI_C__FIEventHandler_1_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_PowerSourceKindChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_PowerSourceKindChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PowerSourceKindChanged(pThis, token))
            }
        }

        internal func get_DisplayStatusImpl() throws -> WinAppSDK.DisplayStatus {
            var value: __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CDisplayStatus = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DisplayStatus(pThis, &value))
            }
            return value
        }

        internal func add_DisplayStatusChangedImpl(_ handler: EventHandler<Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinAppSDK.__x_ABI_C__FIEventHandler_1_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_DisplayStatusChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_DisplayStatusChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_DisplayStatusChanged(pThis, token))
            }
        }

        internal func add_SystemIdleStatusChangedImpl(_ handler: EventHandler<Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinAppSDK.__x_ABI_C__FIEventHandler_1_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_SystemIdleStatusChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_SystemIdleStatusChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_SystemIdleStatusChanged(pThis, token))
            }
        }

        internal func get_EffectivePowerModeImpl() throws -> WindowsFoundation.AnyIAsyncOperation<WinAppSDK.EffectivePowerMode>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_EffectivePowerMode(pThis, &valueAbi))
                }
            }
            return WinAppSDK.__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CWindows__CSystem__CPower__CEffectivePowerModeWrapper.unwrapFrom(abi: value)
        }

        internal func add_EffectivePowerModeChangedImpl(_ handler: EventHandler<Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinAppSDK.__x_ABI_C__FIEventHandler_1_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_EffectivePowerModeChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_EffectivePowerModeChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_EffectivePowerModeChanged(pThis, token))
            }
        }

        internal func get_UserPresenceStatusImpl() throws -> WinAppSDK.UserPresenceStatus {
            var value: __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CUserPresenceStatus = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_UserPresenceStatus(pThis, &value))
            }
            return value
        }

        internal func add_UserPresenceStatusChangedImpl(_ handler: EventHandler<Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinAppSDK.__x_ABI_C__FIEventHandler_1_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_UserPresenceStatusChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_UserPresenceStatusChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_UserPresenceStatusChanged(pThis, token))
            }
        }

        internal func get_SystemSuspendStatusImpl() throws -> WinAppSDK.SystemSuspendStatus {
            var value: __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CSystemSuspendStatus = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SystemSuspendStatus(pThis, &value))
            }
            return value
        }

        internal func add_SystemSuspendStatusChangedImpl(_ handler: EventHandler<Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = WinAppSDK.__x_ABI_C__FIEventHandler_1_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_SystemSuspendStatusChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_SystemSuspendStatusChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_SystemSuspendStatusChanged(pThis, token))
            }
        }

    }

    public class IPowerManagerStatics2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics2 }

        internal func get_EffectivePowerMode2Impl() throws -> WinAppSDK.EffectivePowerMode {
            var value: __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_EffectivePowerMode2(pThis, &value))
            }
            return value
        }

    }

}
