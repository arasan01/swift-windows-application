// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.resources.customxamlresourceloader)
open class CustomXamlResourceLoader : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Resources.ICustomXamlResourceLoader
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CResources_CICustomXamlResourceLoader
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CResources_CICustomXamlResourceLoader>?) -> CustomXamlResourceLoader? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Resources.ICustomXamlResourceLoaderOverridesWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Resources.ICustomXamlResourceLoaderOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _ICustomXamlResourceLoaderFactory : __ABI_Microsoft_UI_Xaml_Resources.ICustomXamlResourceLoaderFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Resources.CustomXamlResourceLoader"))

    override public init() {
        super.init()
        MakeComposed(composing: Self.Composable.self, self) { baseInterface, innerInterface in 
            try! Self._ICustomXamlResourceLoaderFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _ICustomXamlResourceLoaderStatics: __ABI_Microsoft_UI_Xaml_Resources.ICustomXamlResourceLoaderStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Resources.CustomXamlResourceLoader"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.resources.customxamlresourceloader.current)
    public class var current : CustomXamlResourceLoader! {
        get { try! _ICustomXamlResourceLoaderStatics.get_CurrentImpl() }
        set { try! _ICustomXamlResourceLoaderStatics.put_CurrentImpl(newValue) }
    }

    private lazy var _ICustomXamlResourceLoaderOverrides: __ABI_Microsoft_UI_Xaml_Resources.ICustomXamlResourceLoaderOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.resources.customxamlresourceloader.getresource)
    open func getResource(_ resourceId: String, _ objectType: String, _ propertyName: String, _ propertyType: String) throws -> Any! {
        try _ICustomXamlResourceLoaderOverrides.GetResourceImpl(resourceId, objectType, propertyName, propertyType)
    }

    internal enum ICustomXamlResourceLoaderOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CResources_CICustomXamlResourceLoaderOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Resources.ICustomXamlResourceLoaderOverrides
        internal typealias Class = CustomXamlResourceLoader
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CResources_CICustomXamlResourceLoader
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Resources.ICustomXamlResourceLoader
        }
    }
    internal typealias Composable = ICustomXamlResourceLoaderOverrides
    deinit {
        _default = nil
        _ICustomXamlResourceLoaderOverrides = nil
    }
}

