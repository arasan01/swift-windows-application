// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import UWP
@_spi(WinRTInternal) @_spi(WinRTImplements) import WebView2Core
@_spi(WinRTInternal) @_spi(WinRTImplements) import WinAppSDK
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.annotatedscrollbarscrollingeventkind)
public typealias AnnotatedScrollBarScrollingEventKind = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CAnnotatedScrollBarScrollingEventKind
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbarcloseddisplaymode)
public typealias AppBarClosedDisplayMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CAppBarClosedDisplayMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestionboxtextchangereason)
public typealias AutoSuggestionBoxTextChangeReason = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CAutoSuggestionBoxTextChangeReason
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.backgroundsizing)
public typealias BackgroundSizing = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CBackgroundSizing
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarviewdisplaymode)
public typealias CalendarViewDisplayMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CCalendarViewDisplayMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarviewselectionmode)
public typealias CalendarViewSelectionMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CCalendarViewSelectionMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.candidatewindowalignment)
public typealias CandidateWindowAlignment = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CCandidateWindowAlignment
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.charactercasing)
public typealias CharacterCasing = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CCharacterCasing
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.clickmode)
public typealias ClickMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CClickMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.colorpickerhsvchannel)
public typealias ColorPickerHsvChannel = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CColorPickerHsvChannel
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.colorspectrumcomponents)
public typealias ColorSpectrumComponents = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CColorSpectrumComponents
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.colorspectrumshape)
public typealias ColorSpectrumShape = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CColorSpectrumShape
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.comboboxselectionchangedtrigger)
public typealias ComboBoxSelectionChangedTrigger = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CComboBoxSelectionChangedTrigger
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.commandbardefaultlabelposition)
public typealias CommandBarDefaultLabelPosition = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CCommandBarDefaultLabelPosition
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.commandbardynamicoverflowaction)
public typealias CommandBarDynamicOverflowAction = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CCommandBarDynamicOverflowAction
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.commandbarlabelposition)
public typealias CommandBarLabelPosition = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CCommandBarLabelPosition
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.commandbaroverflowbuttonvisibility)
public typealias CommandBarOverflowButtonVisibility = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CCommandBarOverflowButtonVisibility
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialogbutton)
public typealias ContentDialogButton = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CContentDialogButton
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialogplacement)
public typealias ContentDialogPlacement = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CContentDialogPlacement
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialogresult)
public typealias ContentDialogResult = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CContentDialogResult
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.disabledformattingaccelerators)
public typealias DisabledFormattingAccelerators = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CDisabledFormattingAccelerators
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.elementrealizationoptions)
public typealias ElementRealizationOptions = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CElementRealizationOptions
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.expanddirection)
public typealias ExpandDirection = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CExpandDirection
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.incrementalloadingtrigger)
public typealias IncrementalLoadingTrigger = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIncrementalLoadingTrigger
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.indexbasedlayoutorientation)
public typealias IndexBasedLayoutOrientation = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIndexBasedLayoutOrientation
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobarclosereason)
public typealias InfoBarCloseReason = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CInfoBarCloseReason
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobarseverity)
public typealias InfoBarSeverity = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CInfoBarSeverity
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollectiontransitionoperation)
public typealias ItemCollectionTransitionOperation = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CItemCollectionTransitionOperation
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollectiontransitiontriggers)
public typealias ItemCollectionTransitionTriggers = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CItemCollectionTransitionTriggers
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsupdatingscrollmode)
public typealias ItemsUpdatingScrollMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CItemsUpdatingScrollMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsviewselectionmode)
public typealias ItemsViewSelectionMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CItemsViewSelectionMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.lightdismissoverlaymode)
public typealias LightDismissOverlayMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CLightDismissOverlayMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.linedflowlayoutitemsjustification)
public typealias LinedFlowLayoutItemsJustification = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CLinedFlowLayoutItemsJustification
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.linedflowlayoutitemsstretch)
public typealias LinedFlowLayoutItemsStretch = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CLinedFlowLayoutItemsStretch
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listpickerflyoutselectionmode)
public typealias ListPickerFlyoutSelectionMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CListPickerFlyoutSelectionMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewreordermode)
public typealias ListViewReorderMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CListViewReorderMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewselectionmode)
public typealias ListViewSelectionMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CListViewSelectionMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewbackbuttonvisible)
public typealias NavigationViewBackButtonVisible = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewBackButtonVisible
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewdisplaymode)
public typealias NavigationViewDisplayMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewDisplayMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewoverflowlabelmode)
public typealias NavigationViewOverflowLabelMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewOverflowLabelMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewpanedisplaymode)
public typealias NavigationViewPaneDisplayMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewPaneDisplayMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewselectionfollowsfocus)
public typealias NavigationViewSelectionFollowsFocus = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewSelectionFollowsFocus
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewshouldernavigationenabled)
public typealias NavigationViewShoulderNavigationEnabled = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewShoulderNavigationEnabled
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.numberboxspinbuttonplacementmode)
public typealias NumberBoxSpinButtonPlacementMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNumberBoxSpinButtonPlacementMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.numberboxvalidationmode)
public typealias NumberBoxValidationMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNumberBoxValidationMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.orientation)
public typealias Orientation = __x_ABI_CMicrosoft_CUI_CXaml_CControls_COrientation
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.panelscrollingdirection)
public typealias PanelScrollingDirection = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPanelScrollingDirection
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.parallaxsourceoffsetkind)
public typealias ParallaxSourceOffsetKind = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CParallaxSourceOffsetKind
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordrevealmode)
public typealias PasswordRevealMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPasswordRevealMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pipspagerbuttonvisibility)
public typealias PipsPagerButtonVisibility = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPipsPagerButtonVisibility
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pivotheaderfocusvisualplacement)
public typealias PivotHeaderFocusVisualPlacement = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPivotHeaderFocusVisualPlacement
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pivotslideinanimationgroup)
public typealias PivotSlideInAnimationGroup = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPivotSlideInAnimationGroup
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.playeranimationoptimization)
public typealias PlayerAnimationOptimization = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPlayerAnimationOptimization
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.refreshpulldirection)
public typealias RefreshPullDirection = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CRefreshPullDirection
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.refreshvisualizerorientation)
public typealias RefreshVisualizerOrientation = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CRefreshVisualizerOrientation
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.refreshvisualizerstate)
public typealias RefreshVisualizerState = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CRefreshVisualizerState
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.requirespointer)
public typealias RequiresPointer = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CRequiresPointer
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditclipboardformat)
public typealias RichEditClipboardFormat = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CRichEditClipboardFormat
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollbarvisibility)
public typealias ScrollBarVisibility = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollBarVisibility
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollintoviewalignment)
public typealias ScrollIntoViewAlignment = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollIntoViewAlignment
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollmode)
public typealias ScrollMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollinganimationmode)
public typealias ScrollingAnimationMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingAnimationMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingchainmode)
public typealias ScrollingChainMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingChainMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingcontentorientation)
public typealias ScrollingContentOrientation = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingContentOrientation
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollinginputkinds)
public typealias ScrollingInputKinds = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingInputKinds
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollinginteractionstate)
public typealias ScrollingInteractionState = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingInteractionState
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingrailmode)
public typealias ScrollingRailMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingRailMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingscrollbarvisibility)
public typealias ScrollingScrollBarVisibility = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingScrollBarVisibility
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingscrollmode)
public typealias ScrollingScrollMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingScrollMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingsnappointsmode)
public typealias ScrollingSnapPointsMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingSnapPointsMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingzoommode)
public typealias ScrollingZoomMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingZoomMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.selectionmode)
public typealias SelectionMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSelectionMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.snappointstype)
public typealias SnapPointsType = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSnapPointsType
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitviewdisplaymode)
public typealias SplitViewDisplayMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSplitViewDisplayMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitviewpaneplacement)
public typealias SplitViewPanePlacement = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSplitViewPanePlacement
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stretchdirection)
public typealias StretchDirection = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CStretchDirection
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.swipebehavioroninvoked)
public typealias SwipeBehaviorOnInvoked = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSwipeBehaviorOnInvoked
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.swipemode)
public typealias SwipeMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSwipeMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.symbol)
public typealias Symbol = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabviewclosebuttonoverlaymode)
public typealias TabViewCloseButtonOverlayMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTabViewCloseButtonOverlayMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabviewwidthmode)
public typealias TabViewWidthMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTabViewWidthMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtipclosereason)
public typealias TeachingTipCloseReason = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTeachingTipCloseReason
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtipherocontentplacementmode)
public typealias TeachingTipHeroContentPlacementMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTeachingTipHeroContentPlacementMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtipplacementmode)
public typealias TeachingTipPlacementMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTeachingTipPlacementMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtiptailvisibility)
public typealias TeachingTipTailVisibility = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTeachingTipTailVisibility
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewselectionmode)
public typealias TreeViewSelectionMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTreeViewSelectionMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.twopaneviewmode)
public typealias TwoPaneViewMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTwoPaneViewMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.twopaneviewpriority)
public typealias TwoPaneViewPriority = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTwoPaneViewPriority
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.twopaneviewtallmodeconfiguration)
public typealias TwoPaneViewTallModeConfiguration = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTwoPaneViewTallModeConfiguration
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.twopaneviewwidemodeconfiguration)
public typealias TwoPaneViewWideModeConfiguration = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTwoPaneViewWideModeConfiguration
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uniformgridlayoutitemsjustification)
public typealias UniformGridLayoutItemsJustification = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CUniformGridLayoutItemsJustification
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uniformgridlayoutitemsstretch)
public typealias UniformGridLayoutItemsStretch = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CUniformGridLayoutItemsStretch
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizationmode)
public typealias VirtualizationMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CVirtualizationMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.zoommode)
public typealias ZoomMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CZoomMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.anchorrequestedeventargs)
public final class AnchorRequestedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IAnchorRequestedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAnchorRequestedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAnchorRequestedEventArgs>?) -> AnchorRequestedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.anchorrequestedeventargs.anchor)
    public var anchor : WinUI.UIElement! {
        get { try! _default.get_AnchorImpl() }
        set { try! _default.put_AnchorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.anchorrequestedeventargs.anchorcandidates)
    public var anchorCandidates : WindowsFoundation.AnyIVector<WinUI.UIElement?>! {
        get { try! _default.get_AnchorCandidatesImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.animatedicon)
open class AnimatedIcon : WinUI.IconElement {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IAnimatedIcon
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAnimatedIcon
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAnimatedIcon>?) -> AnimatedIcon? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IAnimatedIconFactory : __ABI_Microsoft_UI_Xaml_Controls.IAnimatedIconFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.AnimatedIcon"))

    public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IAnimatedIconFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IAnimatedIconStatics: __ABI_Microsoft_UI_Xaml_Controls.IAnimatedIconStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.AnimatedIcon"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.animatedicon.setstate)
    public class func setState(_ object: WinUI.DependencyObject!, _ value: String) {
        try! _IAnimatedIconStatics.SetStateImpl(object, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.animatedicon.getstate)
    public class func getState(_ object: WinUI.DependencyObject!) -> String {
        return try! _IAnimatedIconStatics.GetStateImpl(object)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.animatedicon.fallbackiconsourceproperty)
    public class var fallbackIconSourceProperty : WinUI.DependencyProperty! {
        get { try! _IAnimatedIconStatics.get_FallbackIconSourcePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.animatedicon.mirroredwhenrighttoleftproperty)
    public class var mirroredWhenRightToLeftProperty : WinUI.DependencyProperty! {
        get { try! _IAnimatedIconStatics.get_MirroredWhenRightToLeftPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.animatedicon.sourceproperty)
    public class var sourceProperty : WinUI.DependencyProperty! {
        get { try! _IAnimatedIconStatics.get_SourcePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.animatedicon.stateproperty)
    public class var stateProperty : WinUI.DependencyProperty! {
        get { try! _IAnimatedIconStatics.get_StatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.animatedicon.fallbackiconsource)
    public var fallbackIconSource : IconSource! {
        get { try! _default.get_FallbackIconSourceImpl() }
        set { try! _default.put_FallbackIconSourceImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.animatedicon.mirroredwhenrighttoleft)
    public var mirroredWhenRightToLeft : Bool {
        get { try! _default.get_MirroredWhenRightToLeftImpl() }
        set { try! _default.put_MirroredWhenRightToLeftImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.animatedicon.source)
    public var source : AnyIAnimatedVisualSource2! {
        get { try! _default.get_SourceImpl() }
        set { try! _default.put_SourceImpl(newValue) }
    }

    internal enum IFrameworkElementOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
        internal typealias Class = AnimatedIcon
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAnimatedIcon
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IAnimatedIcon
        }
    }
    internal typealias Composable = IFrameworkElementOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.animatediconsource)
open class AnimatedIconSource : WinUI.IconSource {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IAnimatedIconSource
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAnimatedIconSource
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAnimatedIconSource>?) -> AnimatedIconSource? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IAnimatedIconSourceFactory : __ABI_Microsoft_UI_Xaml_Controls.IAnimatedIconSourceFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.AnimatedIconSource"))

    public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IAnimatedIconSourceFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IAnimatedIconSourceStatics: __ABI_Microsoft_UI_Xaml_Controls.IAnimatedIconSourceStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.AnimatedIconSource"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.animatediconsource.fallbackiconsourceproperty)
    public class var fallbackIconSourceProperty : WinUI.DependencyProperty! {
        get { try! _IAnimatedIconSourceStatics.get_FallbackIconSourcePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.animatediconsource.mirroredwhenrighttoleftproperty)
    public class var mirroredWhenRightToLeftProperty : WinUI.DependencyProperty! {
        get { try! _IAnimatedIconSourceStatics.get_MirroredWhenRightToLeftPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.animatediconsource.sourceproperty)
    public class var sourceProperty : WinUI.DependencyProperty! {
        get { try! _IAnimatedIconSourceStatics.get_SourcePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.animatediconsource.fallbackiconsource)
    public var fallbackIconSource : IconSource! {
        get { try! _default.get_FallbackIconSourceImpl() }
        set { try! _default.put_FallbackIconSourceImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.animatediconsource.mirroredwhenrighttoleft)
    public var mirroredWhenRightToLeft : Bool {
        get { try! _default.get_MirroredWhenRightToLeftImpl() }
        set { try! _default.put_MirroredWhenRightToLeftImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.animatediconsource.source)
    public var source : AnyIAnimatedVisualSource2! {
        get { try! _default.get_SourceImpl() }
        set { try! _default.put_SourceImpl(newValue) }
    }

    internal enum IIconSourceOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSourceOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IIconSourceOverrides
        internal typealias Class = AnimatedIconSource
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAnimatedIconSource
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IAnimatedIconSource
        }
    }
    internal typealias Composable = IIconSourceOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.animatedvisualplayer)
open class AnimatedVisualPlayer : WinUI.FrameworkElement {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IAnimatedVisualPlayer
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAnimatedVisualPlayer
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAnimatedVisualPlayer>?) -> AnimatedVisualPlayer? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IAnimatedVisualPlayerFactory : __ABI_Microsoft_UI_Xaml_Controls.IAnimatedVisualPlayerFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.AnimatedVisualPlayer"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IAnimatedVisualPlayerFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IAnimatedVisualPlayerStatics: __ABI_Microsoft_UI_Xaml_Controls.IAnimatedVisualPlayerStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.AnimatedVisualPlayer"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.animatedvisualplayer.autoplayproperty)
    public class var autoPlayProperty : WinUI.DependencyProperty! {
        get { try! _IAnimatedVisualPlayerStatics.get_AutoPlayPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.animatedvisualplayer.diagnosticsproperty)
    public class var diagnosticsProperty : WinUI.DependencyProperty! {
        get { try! _IAnimatedVisualPlayerStatics.get_DiagnosticsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.animatedvisualplayer.durationproperty)
    public class var durationProperty : WinUI.DependencyProperty! {
        get { try! _IAnimatedVisualPlayerStatics.get_DurationPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.animatedvisualplayer.fallbackcontentproperty)
    public class var fallbackContentProperty : WinUI.DependencyProperty! {
        get { try! _IAnimatedVisualPlayerStatics.get_FallbackContentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.animatedvisualplayer.isanimatedvisualloadedproperty)
    public class var isAnimatedVisualLoadedProperty : WinUI.DependencyProperty! {
        get { try! _IAnimatedVisualPlayerStatics.get_IsAnimatedVisualLoadedPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.animatedvisualplayer.isplayingproperty)
    public class var isPlayingProperty : WinUI.DependencyProperty! {
        get { try! _IAnimatedVisualPlayerStatics.get_IsPlayingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.animatedvisualplayer.playbackrateproperty)
    public class var playbackRateProperty : WinUI.DependencyProperty! {
        get { try! _IAnimatedVisualPlayerStatics.get_PlaybackRatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.animatedvisualplayer.sourceproperty)
    public class var sourceProperty : WinUI.DependencyProperty! {
        get { try! _IAnimatedVisualPlayerStatics.get_SourcePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.animatedvisualplayer.stretchproperty)
    public class var stretchProperty : WinUI.DependencyProperty! {
        get { try! _IAnimatedVisualPlayerStatics.get_StretchPropertyImpl() }
    }

    private static let _IAnimatedVisualPlayerStatics2: __ABI_Microsoft_UI_Xaml_Controls.IAnimatedVisualPlayerStatics2 = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.AnimatedVisualPlayer"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.animatedvisualplayer.animationoptimizationproperty)
    public class var animationOptimizationProperty : WinUI.DependencyProperty! {
        get { try! _IAnimatedVisualPlayerStatics2.get_AnimationOptimizationPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.animatedvisualplayer.pause)
    public func pause() throws {
        try _default.PauseImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.animatedvisualplayer.playasync)
    public func playAsync(_ fromProgress: Double, _ toProgress: Double, _ looped: Bool) throws -> WindowsFoundation.AnyIAsyncAction! {
        try _default.PlayAsyncImpl(fromProgress, toProgress, looped)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.animatedvisualplayer.resume)
    public func resume() throws {
        try _default.ResumeImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.animatedvisualplayer.setprogress)
    public func setProgress(_ progress: Double) throws {
        try _default.SetProgressImpl(progress)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.animatedvisualplayer.stop)
    public func stop() throws {
        try _default.StopImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.animatedvisualplayer.autoplay)
    public var autoPlay : Bool {
        get { try! _default.get_AutoPlayImpl() }
        set { try! _default.put_AutoPlayImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.animatedvisualplayer.diagnostics)
    public var diagnostics : Any! {
        get { try! _default.get_DiagnosticsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.animatedvisualplayer.duration)
    public var duration : WindowsFoundation.TimeSpan {
        get { try! _default.get_DurationImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.animatedvisualplayer.fallbackcontent)
    public var fallbackContent : WinUI.DataTemplate! {
        get { try! _default.get_FallbackContentImpl() }
        set { try! _default.put_FallbackContentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.animatedvisualplayer.isanimatedvisualloaded)
    public var isAnimatedVisualLoaded : Bool {
        get { try! _default.get_IsAnimatedVisualLoadedImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.animatedvisualplayer.isplaying)
    public var isPlaying : Bool {
        get { try! _default.get_IsPlayingImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.animatedvisualplayer.playbackrate)
    public var playbackRate : Double {
        get { try! _default.get_PlaybackRateImpl() }
        set { try! _default.put_PlaybackRateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.animatedvisualplayer.progressobject)
    public var progressObject : WinAppSDK.CompositionObject! {
        get { try! _default.get_ProgressObjectImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.animatedvisualplayer.source)
    public var source : AnyIAnimatedVisualSource! {
        get { try! _default.get_SourceImpl() }
        set { try! _default.put_SourceImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.animatedvisualplayer.stretch)
    public var stretch : WinUI.Stretch {
        get { try! _default.get_StretchImpl() }
        set { try! _default.put_StretchImpl(newValue) }
    }

    private lazy var _IAnimatedVisualPlayer2: __ABI_Microsoft_UI_Xaml_Controls.IAnimatedVisualPlayer2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.animatedvisualplayer.animationoptimization)
    public var animationOptimization : PlayerAnimationOptimization {
        get { try! _IAnimatedVisualPlayer2.get_AnimationOptimizationImpl() }
        set { try! _IAnimatedVisualPlayer2.put_AnimationOptimizationImpl(newValue) }
    }

    internal enum IFrameworkElementOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
        internal typealias Class = AnimatedVisualPlayer
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAnimatedVisualPlayer
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IAnimatedVisualPlayer
        }
    }
    internal typealias Composable = IFrameworkElementOverrides
    deinit {
        _default = nil
        _IAnimatedVisualPlayer2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.annotatedscrollbar)
open class AnnotatedScrollBar : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IAnnotatedScrollBar
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAnnotatedScrollBar
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAnnotatedScrollBar>?) -> AnnotatedScrollBar? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IAnnotatedScrollBarFactory : __ABI_Microsoft_UI_Xaml_Controls.IAnnotatedScrollBarFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.AnnotatedScrollBar"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IAnnotatedScrollBarFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IAnnotatedScrollBarStatics: __ABI_Microsoft_UI_Xaml_Controls.IAnnotatedScrollBarStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.AnnotatedScrollBar"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.annotatedscrollbar.detaillabeltemplateproperty)
    public class var detailLabelTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IAnnotatedScrollBarStatics.get_DetailLabelTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.annotatedscrollbar.labeltemplateproperty)
    public class var labelTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IAnnotatedScrollBarStatics.get_LabelTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.annotatedscrollbar.labelsproperty)
    public class var labelsProperty : WinUI.DependencyProperty! {
        get { try! _IAnnotatedScrollBarStatics.get_LabelsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.annotatedscrollbar.smallchangeproperty)
    public class var smallChangeProperty : WinUI.DependencyProperty! {
        get { try! _IAnnotatedScrollBarStatics.get_SmallChangePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.annotatedscrollbar.detaillabeltemplate)
    public var detailLabelTemplate : WinUI.AnyIElementFactory! {
        get { try! _default.get_DetailLabelTemplateImpl() }
        set { try! _default.put_DetailLabelTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.annotatedscrollbar.labeltemplate)
    public var labelTemplate : WinUI.AnyIElementFactory! {
        get { try! _default.get_LabelTemplateImpl() }
        set { try! _default.put_LabelTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.annotatedscrollbar.labels)
    public var labels : WindowsFoundation.AnyIVector<AnnotatedScrollBarLabel?>! {
        get { try! _default.get_LabelsImpl() }
        set { try! _default.put_LabelsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.annotatedscrollbar.scrollcontroller)
    public var scrollController : WinUI.AnyIScrollController! {
        get { try! _default.get_ScrollControllerImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.annotatedscrollbar.smallchange)
    public var smallChange : Double {
        get { try! _default.get_SmallChangeImpl() }
        set { try! _default.put_SmallChangeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.annotatedscrollbar.detaillabelrequested)
    public lazy var detailLabelRequested : Event<TypedEventHandler<AnnotatedScrollBar?, AnnotatedScrollBarDetailLabelRequestedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_DetailLabelRequestedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_DetailLabelRequestedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.annotatedscrollbar.scrolling)
    public lazy var scrolling : Event<TypedEventHandler<AnnotatedScrollBar?, AnnotatedScrollBarScrollingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ScrollingImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ScrollingImpl($0)
       }
      )
    }()

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = AnnotatedScrollBar
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAnnotatedScrollBar
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IAnnotatedScrollBar
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.annotatedscrollbardetaillabelrequestedeventargs)
public final class AnnotatedScrollBarDetailLabelRequestedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IAnnotatedScrollBarDetailLabelRequestedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAnnotatedScrollBarDetailLabelRequestedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAnnotatedScrollBarDetailLabelRequestedEventArgs>?) -> AnnotatedScrollBarDetailLabelRequestedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.annotatedscrollbardetaillabelrequestedeventargs.content)
    public var content : Any! {
        get { try! _default.get_ContentImpl() }
        set { try! _default.put_ContentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.annotatedscrollbardetaillabelrequestedeventargs.scrolloffset)
    public var scrollOffset : Double {
        get { try! _default.get_ScrollOffsetImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.annotatedscrollbarlabel)
public final class AnnotatedScrollBarLabel : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IAnnotatedScrollBarLabel
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAnnotatedScrollBarLabel
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAnnotatedScrollBarLabel>?) -> AnnotatedScrollBarLabel? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IAnnotatedScrollBarLabelFactory: __ABI_Microsoft_UI_Xaml_Controls.IAnnotatedScrollBarLabelFactory = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.AnnotatedScrollBarLabel"))
    public init(_ content: Any!, _ scrollOffset: Double) {
        super.init(try! Self._IAnnotatedScrollBarLabelFactory.CreateInstanceImpl(content, scrollOffset))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.annotatedscrollbarlabel.content)
    public var content : Any! {
        get { try! _default.get_ContentImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.annotatedscrollbarlabel.scrolloffset)
    public var scrollOffset : Double {
        get { try! _default.get_ScrollOffsetImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.annotatedscrollbarscrollingeventargs)
public final class AnnotatedScrollBarScrollingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IAnnotatedScrollBarScrollingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAnnotatedScrollBarScrollingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAnnotatedScrollBarScrollingEventArgs>?) -> AnnotatedScrollBarScrollingEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.annotatedscrollbarscrollingeventargs.cancel)
    public var cancel : Bool {
        get { try! _default.get_CancelImpl() }
        set { try! _default.put_CancelImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.annotatedscrollbarscrollingeventargs.scrolloffset)
    public var scrollOffset : Double {
        get { try! _default.get_ScrollOffsetImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.annotatedscrollbarscrollingeventargs.scrollingeventkind)
    public var scrollingEventKind : AnnotatedScrollBarScrollingEventKind {
        get { try! _default.get_ScrollingEventKindImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbar)
open class AppBar : WinUI.ContentControl {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IAppBar
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAppBar
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAppBar>?) -> AppBar? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.IAppBarOverridesWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.IAppBarOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IAppBarFactory : __ABI_Microsoft_UI_Xaml_Controls.IAppBarFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.AppBar"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IAppBarFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IAppBarStatics: __ABI_Microsoft_UI_Xaml_Controls.IAppBarStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.AppBar"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbar.closeddisplaymodeproperty)
    public class var closedDisplayModeProperty : WinUI.DependencyProperty! {
        get { try! _IAppBarStatics.get_ClosedDisplayModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbar.isopenproperty)
    public class var isOpenProperty : WinUI.DependencyProperty! {
        get { try! _IAppBarStatics.get_IsOpenPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbar.isstickyproperty)
    public class var isStickyProperty : WinUI.DependencyProperty! {
        get { try! _IAppBarStatics.get_IsStickyPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbar.lightdismissoverlaymodeproperty)
    public class var lightDismissOverlayModeProperty : WinUI.DependencyProperty! {
        get { try! _IAppBarStatics.get_LightDismissOverlayModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbar.closeddisplaymode)
    public var closedDisplayMode : AppBarClosedDisplayMode {
        get { try! _default.get_ClosedDisplayModeImpl() }
        set { try! _default.put_ClosedDisplayModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbar.isopen)
    public var isOpen : Bool {
        get { try! _default.get_IsOpenImpl() }
        set { try! _default.put_IsOpenImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbar.issticky)
    public var isSticky : Bool {
        get { try! _default.get_IsStickyImpl() }
        set { try! _default.put_IsStickyImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbar.lightdismissoverlaymode)
    public var lightDismissOverlayMode : LightDismissOverlayMode {
        get { try! _default.get_LightDismissOverlayModeImpl() }
        set { try! _default.put_LightDismissOverlayModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbar.templatesettings)
    public var templateSettings : WinUI.AppBarTemplateSettings! {
        get { try! _default.get_TemplateSettingsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbar.closed)
    public lazy var closed : Event<EventHandler<Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ClosedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ClosedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbar.closing)
    public lazy var closing : Event<EventHandler<Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ClosingImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ClosingImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbar.opened)
    public lazy var opened : Event<EventHandler<Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_OpenedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_OpenedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbar.opening)
    public lazy var opening : Event<EventHandler<Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_OpeningImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_OpeningImpl($0)
       }
      )
    }()

    private lazy var _IAppBarOverrides: __ABI_Microsoft_UI_Xaml_Controls.IAppBarOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbar.onclosed)
    open func onClosed(_ e: Any!) throws {
        try _IAppBarOverrides.OnClosedImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbar.onopened)
    open func onOpened(_ e: Any!) throws {
        try _IAppBarOverrides.OnOpenedImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbar.onclosing)
    open func onClosing(_ e: Any!) throws {
        try _IAppBarOverrides.OnClosingImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbar.onopening)
    open func onOpening(_ e: Any!) throws {
        try _IAppBarOverrides.OnOpeningImpl(e)
    }

    internal enum IAppBarOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAppBarOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IAppBarOverrides
        internal typealias Class = AppBar
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAppBar
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IAppBar
        }
    }
    internal typealias Composable = IAppBarOverrides
    deinit {
        _default = nil
        _IAppBarOverrides = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbarbutton)
open class AppBarButton : WinUI.Button, ICommandBarElement {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IAppBarButton
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAppBarButton
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAppBarButton>?) -> AppBarButton? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IAppBarButtonFactory : __ABI_Microsoft_UI_Xaml_Controls.IAppBarButtonFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.AppBarButton"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IAppBarButtonFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IAppBarButtonStatics: __ABI_Microsoft_UI_Xaml_Controls.IAppBarButtonStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.AppBarButton"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbarbutton.dynamicoverfloworderproperty)
    public class var dynamicOverflowOrderProperty : WinUI.DependencyProperty! {
        get { try! _IAppBarButtonStatics.get_DynamicOverflowOrderPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbarbutton.iconproperty)
    public class var iconProperty : WinUI.DependencyProperty! {
        get { try! _IAppBarButtonStatics.get_IconPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbarbutton.iscompactproperty)
    public class var isCompactProperty : WinUI.DependencyProperty! {
        get { try! _IAppBarButtonStatics.get_IsCompactPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbarbutton.isinoverflowproperty)
    public class var isInOverflowProperty : WinUI.DependencyProperty! {
        get { try! _IAppBarButtonStatics.get_IsInOverflowPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbarbutton.keyboardacceleratortextoverrideproperty)
    public class var keyboardAcceleratorTextOverrideProperty : WinUI.DependencyProperty! {
        get { try! _IAppBarButtonStatics.get_KeyboardAcceleratorTextOverridePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbarbutton.labelpositionproperty)
    public class var labelPositionProperty : WinUI.DependencyProperty! {
        get { try! _IAppBarButtonStatics.get_LabelPositionPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbarbutton.labelproperty)
    public class var labelProperty : WinUI.DependencyProperty! {
        get { try! _IAppBarButtonStatics.get_LabelPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbarbutton.icon)
    public var icon : IconElement! {
        get { try! _default.get_IconImpl() }
        set { try! _default.put_IconImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbarbutton.keyboardacceleratortextoverride)
    public var keyboardAcceleratorTextOverride : String {
        get { try! _default.get_KeyboardAcceleratorTextOverrideImpl() }
        set { try! _default.put_KeyboardAcceleratorTextOverrideImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbarbutton.label)
    public var label : String {
        get { try! _default.get_LabelImpl() }
        set { try! _default.put_LabelImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbarbutton.labelposition)
    public var labelPosition : CommandBarLabelPosition {
        get { try! _default.get_LabelPositionImpl() }
        set { try! _default.put_LabelPositionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbarbutton.templatesettings)
    public var templateSettings : WinUI.AppBarButtonTemplateSettings! {
        get { try! _default.get_TemplateSettingsImpl() }
    }

    private lazy var _ICommandBarElement: __ABI_Microsoft_UI_Xaml_Controls.ICommandBarElement! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbarbutton.dynamicoverfloworder)
    public var dynamicOverflowOrder : Int32 {
        get { try! _ICommandBarElement.get_DynamicOverflowOrderImpl() }
        set { try! _ICommandBarElement.put_DynamicOverflowOrderImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbarbutton.iscompact)
    public var isCompact : Bool {
        get { try! _ICommandBarElement.get_IsCompactImpl() }
        set { try! _ICommandBarElement.put_IsCompactImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbarbutton.isinoverflow)
    public var isInOverflow : Bool {
        get { try! _ICommandBarElement.get_IsInOverflowImpl() }
    }

    internal enum IContentControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
        internal typealias Class = AppBarButton
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAppBarButton
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IAppBarButton
        }
    }
    internal typealias Composable = IContentControlOverrides
    deinit {
        _default = nil
        _ICommandBarElement = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbarelementcontainer)
open class AppBarElementContainer : WinUI.ContentControl, ICommandBarElement {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IAppBarElementContainer
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAppBarElementContainer
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAppBarElementContainer>?) -> AppBarElementContainer? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IAppBarElementContainerFactory : __ABI_Microsoft_UI_Xaml_Controls.IAppBarElementContainerFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.AppBarElementContainer"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IAppBarElementContainerFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IAppBarElementContainerStatics: __ABI_Microsoft_UI_Xaml_Controls.IAppBarElementContainerStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.AppBarElementContainer"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbarelementcontainer.dynamicoverfloworderproperty)
    public class var dynamicOverflowOrderProperty : WinUI.DependencyProperty! {
        get { try! _IAppBarElementContainerStatics.get_DynamicOverflowOrderPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbarelementcontainer.iscompactproperty)
    public class var isCompactProperty : WinUI.DependencyProperty! {
        get { try! _IAppBarElementContainerStatics.get_IsCompactPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbarelementcontainer.isinoverflowproperty)
    public class var isInOverflowProperty : WinUI.DependencyProperty! {
        get { try! _IAppBarElementContainerStatics.get_IsInOverflowPropertyImpl() }
    }

    private lazy var _ICommandBarElement: __ABI_Microsoft_UI_Xaml_Controls.ICommandBarElement! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbarelementcontainer.dynamicoverfloworder)
    public var dynamicOverflowOrder : Int32 {
        get { try! _ICommandBarElement.get_DynamicOverflowOrderImpl() }
        set { try! _ICommandBarElement.put_DynamicOverflowOrderImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbarelementcontainer.iscompact)
    public var isCompact : Bool {
        get { try! _ICommandBarElement.get_IsCompactImpl() }
        set { try! _ICommandBarElement.put_IsCompactImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbarelementcontainer.isinoverflow)
    public var isInOverflow : Bool {
        get { try! _ICommandBarElement.get_IsInOverflowImpl() }
    }

    internal enum IContentControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
        internal typealias Class = AppBarElementContainer
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAppBarElementContainer
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IAppBarElementContainer
        }
    }
    internal typealias Composable = IContentControlOverrides
    deinit {
        _default = nil
        _ICommandBarElement = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbarseparator)
open class AppBarSeparator : WinUI.Control, ICommandBarElement {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IAppBarSeparator
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAppBarSeparator
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAppBarSeparator>?) -> AppBarSeparator? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IAppBarSeparatorFactory : __ABI_Microsoft_UI_Xaml_Controls.IAppBarSeparatorFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.AppBarSeparator"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IAppBarSeparatorFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IAppBarSeparatorStatics: __ABI_Microsoft_UI_Xaml_Controls.IAppBarSeparatorStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.AppBarSeparator"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbarseparator.dynamicoverfloworderproperty)
    public class var dynamicOverflowOrderProperty : WinUI.DependencyProperty! {
        get { try! _IAppBarSeparatorStatics.get_DynamicOverflowOrderPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbarseparator.iscompactproperty)
    public class var isCompactProperty : WinUI.DependencyProperty! {
        get { try! _IAppBarSeparatorStatics.get_IsCompactPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbarseparator.isinoverflowproperty)
    public class var isInOverflowProperty : WinUI.DependencyProperty! {
        get { try! _IAppBarSeparatorStatics.get_IsInOverflowPropertyImpl() }
    }

    private lazy var _ICommandBarElement: __ABI_Microsoft_UI_Xaml_Controls.ICommandBarElement! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbarseparator.dynamicoverfloworder)
    public var dynamicOverflowOrder : Int32 {
        get { try! _ICommandBarElement.get_DynamicOverflowOrderImpl() }
        set { try! _ICommandBarElement.put_DynamicOverflowOrderImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbarseparator.iscompact)
    public var isCompact : Bool {
        get { try! _ICommandBarElement.get_IsCompactImpl() }
        set { try! _ICommandBarElement.put_IsCompactImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbarseparator.isinoverflow)
    public var isInOverflow : Bool {
        get { try! _ICommandBarElement.get_IsInOverflowImpl() }
    }

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = AppBarSeparator
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAppBarSeparator
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IAppBarSeparator
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = nil
        _ICommandBarElement = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbartogglebutton)
open class AppBarToggleButton : WinUI.ToggleButton, ICommandBarElement {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IAppBarToggleButton
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAppBarToggleButton
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAppBarToggleButton>?) -> AppBarToggleButton? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IAppBarToggleButtonFactory : __ABI_Microsoft_UI_Xaml_Controls.IAppBarToggleButtonFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.AppBarToggleButton"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IAppBarToggleButtonFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IAppBarToggleButtonStatics: __ABI_Microsoft_UI_Xaml_Controls.IAppBarToggleButtonStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.AppBarToggleButton"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbartogglebutton.dynamicoverfloworderproperty)
    public class var dynamicOverflowOrderProperty : WinUI.DependencyProperty! {
        get { try! _IAppBarToggleButtonStatics.get_DynamicOverflowOrderPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbartogglebutton.iconproperty)
    public class var iconProperty : WinUI.DependencyProperty! {
        get { try! _IAppBarToggleButtonStatics.get_IconPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbartogglebutton.iscompactproperty)
    public class var isCompactProperty : WinUI.DependencyProperty! {
        get { try! _IAppBarToggleButtonStatics.get_IsCompactPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbartogglebutton.isinoverflowproperty)
    public class var isInOverflowProperty : WinUI.DependencyProperty! {
        get { try! _IAppBarToggleButtonStatics.get_IsInOverflowPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbartogglebutton.keyboardacceleratortextoverrideproperty)
    public class var keyboardAcceleratorTextOverrideProperty : WinUI.DependencyProperty! {
        get { try! _IAppBarToggleButtonStatics.get_KeyboardAcceleratorTextOverridePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbartogglebutton.labelpositionproperty)
    public class var labelPositionProperty : WinUI.DependencyProperty! {
        get { try! _IAppBarToggleButtonStatics.get_LabelPositionPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbartogglebutton.labelproperty)
    public class var labelProperty : WinUI.DependencyProperty! {
        get { try! _IAppBarToggleButtonStatics.get_LabelPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbartogglebutton.icon)
    public var icon : IconElement! {
        get { try! _default.get_IconImpl() }
        set { try! _default.put_IconImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbartogglebutton.keyboardacceleratortextoverride)
    public var keyboardAcceleratorTextOverride : String {
        get { try! _default.get_KeyboardAcceleratorTextOverrideImpl() }
        set { try! _default.put_KeyboardAcceleratorTextOverrideImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbartogglebutton.label)
    public var label : String {
        get { try! _default.get_LabelImpl() }
        set { try! _default.put_LabelImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbartogglebutton.labelposition)
    public var labelPosition : CommandBarLabelPosition {
        get { try! _default.get_LabelPositionImpl() }
        set { try! _default.put_LabelPositionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbartogglebutton.templatesettings)
    public var templateSettings : WinUI.AppBarToggleButtonTemplateSettings! {
        get { try! _default.get_TemplateSettingsImpl() }
    }

    private lazy var _ICommandBarElement: __ABI_Microsoft_UI_Xaml_Controls.ICommandBarElement! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbartogglebutton.dynamicoverfloworder)
    public var dynamicOverflowOrder : Int32 {
        get { try! _ICommandBarElement.get_DynamicOverflowOrderImpl() }
        set { try! _ICommandBarElement.put_DynamicOverflowOrderImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbartogglebutton.iscompact)
    public var isCompact : Bool {
        get { try! _ICommandBarElement.get_IsCompactImpl() }
        set { try! _ICommandBarElement.put_IsCompactImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.appbartogglebutton.isinoverflow)
    public var isInOverflow : Bool {
        get { try! _ICommandBarElement.get_IsInOverflowImpl() }
    }

    internal enum IToggleButtonOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIToggleButtonOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IToggleButtonOverrides
        internal typealias Class = AppBarToggleButton
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAppBarToggleButton
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IAppBarToggleButton
        }
    }
    internal typealias Composable = IToggleButtonOverrides
    deinit {
        _default = nil
        _ICommandBarElement = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox)
public final class AutoSuggestBox : WinUI.ItemsControl {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IAutoSuggestBox
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBox
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBox>?) -> AutoSuggestBox? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.AutoSuggestBox")))
    }

    private static let _IAutoSuggestBoxStatics: __ABI_Microsoft_UI_Xaml_Controls.IAutoSuggestBoxStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.AutoSuggestBox"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.automaximizesuggestionareaproperty)
    public static var autoMaximizeSuggestionAreaProperty : WinUI.DependencyProperty! {
        get { try! _IAutoSuggestBoxStatics.get_AutoMaximizeSuggestionAreaPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.descriptionproperty)
    public static var descriptionProperty : WinUI.DependencyProperty! {
        get { try! _IAutoSuggestBoxStatics.get_DescriptionPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.headerproperty)
    public static var headerProperty : WinUI.DependencyProperty! {
        get { try! _IAutoSuggestBoxStatics.get_HeaderPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.issuggestionlistopenproperty)
    public static var isSuggestionListOpenProperty : WinUI.DependencyProperty! {
        get { try! _IAutoSuggestBoxStatics.get_IsSuggestionListOpenPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.lightdismissoverlaymodeproperty)
    public static var lightDismissOverlayModeProperty : WinUI.DependencyProperty! {
        get { try! _IAutoSuggestBoxStatics.get_LightDismissOverlayModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.maxsuggestionlistheightproperty)
    public static var maxSuggestionListHeightProperty : WinUI.DependencyProperty! {
        get { try! _IAutoSuggestBoxStatics.get_MaxSuggestionListHeightPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.placeholdertextproperty)
    public static var placeholderTextProperty : WinUI.DependencyProperty! {
        get { try! _IAutoSuggestBoxStatics.get_PlaceholderTextPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.queryiconproperty)
    public static var queryIconProperty : WinUI.DependencyProperty! {
        get { try! _IAutoSuggestBoxStatics.get_QueryIconPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.textboxstyleproperty)
    public static var textBoxStyleProperty : WinUI.DependencyProperty! {
        get { try! _IAutoSuggestBoxStatics.get_TextBoxStylePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.textmemberpathproperty)
    public static var textMemberPathProperty : WinUI.DependencyProperty! {
        get { try! _IAutoSuggestBoxStatics.get_TextMemberPathPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.textproperty)
    public static var textProperty : WinUI.DependencyProperty! {
        get { try! _IAutoSuggestBoxStatics.get_TextPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.updatetextonselectproperty)
    public static var updateTextOnSelectProperty : WinUI.DependencyProperty! {
        get { try! _IAutoSuggestBoxStatics.get_UpdateTextOnSelectPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.automaximizesuggestionarea)
    public var autoMaximizeSuggestionArea : Bool {
        get { try! _default.get_AutoMaximizeSuggestionAreaImpl() }
        set { try! _default.put_AutoMaximizeSuggestionAreaImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.description)
    public var description : Any! {
        get { try! _default.get_DescriptionImpl() }
        set { try! _default.put_DescriptionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.header)
    public var header : Any! {
        get { try! _default.get_HeaderImpl() }
        set { try! _default.put_HeaderImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.issuggestionlistopen)
    public var isSuggestionListOpen : Bool {
        get { try! _default.get_IsSuggestionListOpenImpl() }
        set { try! _default.put_IsSuggestionListOpenImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.lightdismissoverlaymode)
    public var lightDismissOverlayMode : LightDismissOverlayMode {
        get { try! _default.get_LightDismissOverlayModeImpl() }
        set { try! _default.put_LightDismissOverlayModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.maxsuggestionlistheight)
    public var maxSuggestionListHeight : Double {
        get { try! _default.get_MaxSuggestionListHeightImpl() }
        set { try! _default.put_MaxSuggestionListHeightImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.placeholdertext)
    public var placeholderText : String {
        get { try! _default.get_PlaceholderTextImpl() }
        set { try! _default.put_PlaceholderTextImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.queryicon)
    public var queryIcon : IconElement! {
        get { try! _default.get_QueryIconImpl() }
        set { try! _default.put_QueryIconImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.text)
    public var text : String {
        get { try! _default.get_TextImpl() }
        set { try! _default.put_TextImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.textboxstyle)
    public var textBoxStyle : WinUI.Style! {
        get { try! _default.get_TextBoxStyleImpl() }
        set { try! _default.put_TextBoxStyleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.textmemberpath)
    public var textMemberPath : String {
        get { try! _default.get_TextMemberPathImpl() }
        set { try! _default.put_TextMemberPathImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.updatetextonselect)
    public var updateTextOnSelect : Bool {
        get { try! _default.get_UpdateTextOnSelectImpl() }
        set { try! _default.put_UpdateTextOnSelectImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.querysubmitted)
    public lazy var querySubmitted : Event<TypedEventHandler<AutoSuggestBox?, AutoSuggestBoxQuerySubmittedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_QuerySubmittedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_QuerySubmittedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.suggestionchosen)
    public lazy var suggestionChosen : Event<TypedEventHandler<AutoSuggestBox?, AutoSuggestBoxSuggestionChosenEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_SuggestionChosenImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_SuggestionChosenImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.textchanged)
    public lazy var textChanged : Event<TypedEventHandler<AutoSuggestBox?, AutoSuggestBoxTextChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_TextChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_TextChangedImpl($0)
       }
      )
    }()

    internal enum IItemsControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsControlOverrides
        internal typealias Class = AutoSuggestBox
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBox
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IAutoSuggestBox
        }
    }
    internal typealias Composable = IItemsControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestboxquerysubmittedeventargs)
public final class AutoSuggestBoxQuerySubmittedEventArgs : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IAutoSuggestBoxQuerySubmittedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBoxQuerySubmittedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBoxQuerySubmittedEventArgs>?) -> AutoSuggestBoxQuerySubmittedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.AutoSuggestBoxQuerySubmittedEventArgs")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestboxquerysubmittedeventargs.chosensuggestion)
    public var chosenSuggestion : Any! {
        get { try! _default.get_ChosenSuggestionImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestboxquerysubmittedeventargs.querytext)
    public var queryText : String {
        get { try! _default.get_QueryTextImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestboxsuggestionchoseneventargs)
public final class AutoSuggestBoxSuggestionChosenEventArgs : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IAutoSuggestBoxSuggestionChosenEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBoxSuggestionChosenEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBoxSuggestionChosenEventArgs>?) -> AutoSuggestBoxSuggestionChosenEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.AutoSuggestBoxSuggestionChosenEventArgs")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestboxsuggestionchoseneventargs.selecteditem)
    public var selectedItem : Any! {
        get { try! _default.get_SelectedItemImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestboxtextchangedeventargs)
public final class AutoSuggestBoxTextChangedEventArgs : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IAutoSuggestBoxTextChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBoxTextChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBoxTextChangedEventArgs>?) -> AutoSuggestBoxTextChangedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.AutoSuggestBoxTextChangedEventArgs")))
    }

    private static let _IAutoSuggestBoxTextChangedEventArgsStatics: __ABI_Microsoft_UI_Xaml_Controls.IAutoSuggestBoxTextChangedEventArgsStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.AutoSuggestBoxTextChangedEventArgs"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestboxtextchangedeventargs.reasonproperty)
    public static var reasonProperty : WinUI.DependencyProperty! {
        get { try! _IAutoSuggestBoxTextChangedEventArgsStatics.get_ReasonPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestboxtextchangedeventargs.checkcurrent)
    public func checkCurrent() throws -> Bool {
        try _default.CheckCurrentImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestboxtextchangedeventargs.reason)
    public var reason : AutoSuggestionBoxTextChangeReason {
        get { try! _default.get_ReasonImpl() }
        set { try! _default.put_ReasonImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.bitmapicon)
open class BitmapIcon : WinUI.IconElement {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IBitmapIcon
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBitmapIcon
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBitmapIcon>?) -> BitmapIcon? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IBitmapIconFactory : __ABI_Microsoft_UI_Xaml_Controls.IBitmapIconFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.BitmapIcon"))

    public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IBitmapIconFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IBitmapIconStatics: __ABI_Microsoft_UI_Xaml_Controls.IBitmapIconStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.BitmapIcon"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.bitmapicon.showasmonochromeproperty)
    public class var showAsMonochromeProperty : WinUI.DependencyProperty! {
        get { try! _IBitmapIconStatics.get_ShowAsMonochromePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.bitmapicon.urisourceproperty)
    public class var uriSourceProperty : WinUI.DependencyProperty! {
        get { try! _IBitmapIconStatics.get_UriSourcePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.bitmapicon.showasmonochrome)
    public var showAsMonochrome : Bool {
        get { try! _default.get_ShowAsMonochromeImpl() }
        set { try! _default.put_ShowAsMonochromeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.bitmapicon.urisource)
    public var uriSource : WindowsFoundation.Uri! {
        get { try! _default.get_UriSourceImpl() }
        set { try! _default.put_UriSourceImpl(newValue) }
    }

    internal enum IFrameworkElementOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
        internal typealias Class = BitmapIcon
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBitmapIcon
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IBitmapIcon
        }
    }
    internal typealias Composable = IFrameworkElementOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.bitmapiconsource)
open class BitmapIconSource : WinUI.IconSource {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IBitmapIconSource
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBitmapIconSource
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBitmapIconSource>?) -> BitmapIconSource? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IBitmapIconSourceFactory : __ABI_Microsoft_UI_Xaml_Controls.IBitmapIconSourceFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.BitmapIconSource"))

    public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IBitmapIconSourceFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IBitmapIconSourceStatics: __ABI_Microsoft_UI_Xaml_Controls.IBitmapIconSourceStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.BitmapIconSource"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.bitmapiconsource.showasmonochromeproperty)
    public class var showAsMonochromeProperty : WinUI.DependencyProperty! {
        get { try! _IBitmapIconSourceStatics.get_ShowAsMonochromePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.bitmapiconsource.urisourceproperty)
    public class var uriSourceProperty : WinUI.DependencyProperty! {
        get { try! _IBitmapIconSourceStatics.get_UriSourcePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.bitmapiconsource.showasmonochrome)
    public var showAsMonochrome : Bool {
        get { try! _default.get_ShowAsMonochromeImpl() }
        set { try! _default.put_ShowAsMonochromeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.bitmapiconsource.urisource)
    public var uriSource : WindowsFoundation.Uri! {
        get { try! _default.get_UriSourceImpl() }
        set { try! _default.put_UriSourceImpl(newValue) }
    }

    internal enum IIconSourceOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSourceOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IIconSourceOverrides
        internal typealias Class = BitmapIconSource
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBitmapIconSource
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IBitmapIconSource
        }
    }
    internal typealias Composable = IIconSourceOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.border)
public final class Border : WinUI.FrameworkElement {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IBorder
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorder
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorder>?) -> Border? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.Border")))
    }

    private static let _IBorderStatics: __ABI_Microsoft_UI_Xaml_Controls.IBorderStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.Border"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.border.backgroundproperty)
    public static var backgroundProperty : WinUI.DependencyProperty! {
        get { try! _IBorderStatics.get_BackgroundPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.border.backgroundsizingproperty)
    public static var backgroundSizingProperty : WinUI.DependencyProperty! {
        get { try! _IBorderStatics.get_BackgroundSizingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.border.borderbrushproperty)
    public static var borderBrushProperty : WinUI.DependencyProperty! {
        get { try! _IBorderStatics.get_BorderBrushPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.border.borderthicknessproperty)
    public static var borderThicknessProperty : WinUI.DependencyProperty! {
        get { try! _IBorderStatics.get_BorderThicknessPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.border.childtransitionsproperty)
    public static var childTransitionsProperty : WinUI.DependencyProperty! {
        get { try! _IBorderStatics.get_ChildTransitionsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.border.cornerradiusproperty)
    public static var cornerRadiusProperty : WinUI.DependencyProperty! {
        get { try! _IBorderStatics.get_CornerRadiusPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.border.paddingproperty)
    public static var paddingProperty : WinUI.DependencyProperty! {
        get { try! _IBorderStatics.get_PaddingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.border.background)
    public var background : WinUI.Brush! {
        get { try! _default.get_BackgroundImpl() }
        set { try! _default.put_BackgroundImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.border.backgroundsizing)
    public var backgroundSizing : BackgroundSizing {
        get { try! _default.get_BackgroundSizingImpl() }
        set { try! _default.put_BackgroundSizingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.border.backgroundtransition)
    public var backgroundTransition : WinUI.BrushTransition! {
        get { try! _default.get_BackgroundTransitionImpl() }
        set { try! _default.put_BackgroundTransitionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.border.borderbrush)
    public var borderBrush : WinUI.Brush! {
        get { try! _default.get_BorderBrushImpl() }
        set { try! _default.put_BorderBrushImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.border.borderthickness)
    public var borderThickness : WinUI.Thickness {
        get { try! _default.get_BorderThicknessImpl() }
        set { try! _default.put_BorderThicknessImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.border.child)
    public var child : WinUI.UIElement! {
        get { try! _default.get_ChildImpl() }
        set { try! _default.put_ChildImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.border.childtransitions)
    public var childTransitions : WinUI.TransitionCollection! {
        get { try! _default.get_ChildTransitionsImpl() }
        set { try! _default.put_ChildTransitionsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.border.cornerradius)
    public var cornerRadius : WinUI.CornerRadius {
        get { try! _default.get_CornerRadiusImpl() }
        set { try! _default.put_CornerRadiusImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.border.padding)
    public var padding : WinUI.Thickness {
        get { try! _default.get_PaddingImpl() }
        set { try! _default.put_PaddingImpl(newValue) }
    }

    internal enum IFrameworkElementOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
        internal typealias Class = Border
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorder
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IBorder
        }
    }
    internal typealias Composable = IFrameworkElementOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.breadcrumbbar)
open class BreadcrumbBar : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IBreadcrumbBar
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBreadcrumbBar
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBreadcrumbBar>?) -> BreadcrumbBar? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IBreadcrumbBarFactory : __ABI_Microsoft_UI_Xaml_Controls.IBreadcrumbBarFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.BreadcrumbBar"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IBreadcrumbBarFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IBreadcrumbBarStatics: __ABI_Microsoft_UI_Xaml_Controls.IBreadcrumbBarStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.BreadcrumbBar"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.breadcrumbbar.itemtemplateproperty)
    public class var itemTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IBreadcrumbBarStatics.get_ItemTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.breadcrumbbar.itemssourceproperty)
    public class var itemsSourceProperty : WinUI.DependencyProperty! {
        get { try! _IBreadcrumbBarStatics.get_ItemsSourcePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.breadcrumbbar.itemtemplate)
    public var itemTemplate : Any! {
        get { try! _default.get_ItemTemplateImpl() }
        set { try! _default.put_ItemTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.breadcrumbbar.itemssource)
    public var itemsSource : Any! {
        get { try! _default.get_ItemsSourceImpl() }
        set { try! _default.put_ItemsSourceImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.breadcrumbbar.itemclicked)
    public lazy var itemClicked : Event<TypedEventHandler<BreadcrumbBar?, BreadcrumbBarItemClickedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ItemClickedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ItemClickedImpl($0)
       }
      )
    }()

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = BreadcrumbBar
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBreadcrumbBar
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IBreadcrumbBar
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.breadcrumbbaritem)
open class BreadcrumbBarItem : WinUI.ContentControl {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IBreadcrumbBarItem
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBreadcrumbBarItem
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBreadcrumbBarItem>?) -> BreadcrumbBarItem? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IBreadcrumbBarItemFactory : __ABI_Microsoft_UI_Xaml_Controls.IBreadcrumbBarItemFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.BreadcrumbBarItem"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IBreadcrumbBarItemFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    internal enum IContentControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
        internal typealias Class = BreadcrumbBarItem
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBreadcrumbBarItem
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IBreadcrumbBarItem
        }
    }
    internal typealias Composable = IContentControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.breadcrumbbaritemclickedeventargs)
public final class BreadcrumbBarItemClickedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IBreadcrumbBarItemClickedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBreadcrumbBarItemClickedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBreadcrumbBarItemClickedEventArgs>?) -> BreadcrumbBarItemClickedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.breadcrumbbaritemclickedeventargs.index)
    public var index : Int32 {
        get { try! _default.get_IndexImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.breadcrumbbaritemclickedeventargs.item)
    public var item : Any! {
        get { try! _default.get_ItemImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.button)
open class Button : WinUI.ButtonBase {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IButton
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIButton
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIButton>?) -> Button? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IButtonFactory : __ABI_Microsoft_UI_Xaml_Controls.IButtonFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.Button"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IButtonFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IButtonStatics: __ABI_Microsoft_UI_Xaml_Controls.IButtonStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.Button"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.button.flyoutproperty)
    public class var flyoutProperty : WinUI.DependencyProperty! {
        get { try! _IButtonStatics.get_FlyoutPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.button.flyout)
    public var flyout : WinUI.FlyoutBase! {
        get { try! _default.get_FlyoutImpl() }
        set { try! _default.put_FlyoutImpl(newValue) }
    }

    internal enum IContentControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
        internal typealias Class = Button
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIButton
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IButton
        }
    }
    internal typealias Composable = IContentControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendardatepicker)
open class CalendarDatePicker : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ICalendarDatePicker
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICalendarDatePicker
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CICalendarDatePicker>?) -> CalendarDatePicker? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ICalendarDatePickerFactory : __ABI_Microsoft_UI_Xaml_Controls.ICalendarDatePickerFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.CalendarDatePicker"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._ICalendarDatePickerFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _ICalendarDatePickerStatics: __ABI_Microsoft_UI_Xaml_Controls.ICalendarDatePickerStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.CalendarDatePicker"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendardatepicker.calendaridentifierproperty)
    public class var calendarIdentifierProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarDatePickerStatics.get_CalendarIdentifierPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendardatepicker.calendarviewstyleproperty)
    public class var calendarViewStyleProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarDatePickerStatics.get_CalendarViewStylePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendardatepicker.dateformatproperty)
    public class var dateFormatProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarDatePickerStatics.get_DateFormatPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendardatepicker.dateproperty)
    public class var dateProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarDatePickerStatics.get_DatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendardatepicker.dayofweekformatproperty)
    public class var dayOfWeekFormatProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarDatePickerStatics.get_DayOfWeekFormatPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendardatepicker.descriptionproperty)
    public class var descriptionProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarDatePickerStatics.get_DescriptionPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendardatepicker.displaymodeproperty)
    public class var displayModeProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarDatePickerStatics.get_DisplayModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendardatepicker.firstdayofweekproperty)
    public class var firstDayOfWeekProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarDatePickerStatics.get_FirstDayOfWeekPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendardatepicker.headerproperty)
    public class var headerProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarDatePickerStatics.get_HeaderPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendardatepicker.headertemplateproperty)
    public class var headerTemplateProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarDatePickerStatics.get_HeaderTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendardatepicker.iscalendaropenproperty)
    public class var isCalendarOpenProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarDatePickerStatics.get_IsCalendarOpenPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendardatepicker.isgrouplabelvisibleproperty)
    public class var isGroupLabelVisibleProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarDatePickerStatics.get_IsGroupLabelVisiblePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendardatepicker.isoutofscopeenabledproperty)
    public class var isOutOfScopeEnabledProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarDatePickerStatics.get_IsOutOfScopeEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendardatepicker.istodayhighlightedproperty)
    public class var isTodayHighlightedProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarDatePickerStatics.get_IsTodayHighlightedPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendardatepicker.lightdismissoverlaymodeproperty)
    public class var lightDismissOverlayModeProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarDatePickerStatics.get_LightDismissOverlayModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendardatepicker.maxdateproperty)
    public class var maxDateProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarDatePickerStatics.get_MaxDatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendardatepicker.mindateproperty)
    public class var minDateProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarDatePickerStatics.get_MinDatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendardatepicker.placeholdertextproperty)
    public class var placeholderTextProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarDatePickerStatics.get_PlaceholderTextPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendardatepicker.setdisplaydate)
    public func setDisplayDate(_ date: WindowsFoundation.DateTime) throws {
        try _default.SetDisplayDateImpl(date)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendardatepicker.setyeardecadedisplaydimensions)
    public func setYearDecadeDisplayDimensions(_ columns: Int32, _ rows: Int32) throws {
        try _default.SetYearDecadeDisplayDimensionsImpl(columns, rows)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendardatepicker.calendaridentifier)
    public var calendarIdentifier : String {
        get { try! _default.get_CalendarIdentifierImpl() }
        set { try! _default.put_CalendarIdentifierImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendardatepicker.calendarviewstyle)
    public var calendarViewStyle : WinUI.Style! {
        get { try! _default.get_CalendarViewStyleImpl() }
        set { try! _default.put_CalendarViewStyleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendardatepicker.date)
    public var date : WindowsFoundation.DateTime? {
        get { try! _default.get_DateImpl() }
        set { try! _default.put_DateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendardatepicker.dateformat)
    public var dateFormat : String {
        get { try! _default.get_DateFormatImpl() }
        set { try! _default.put_DateFormatImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendardatepicker.dayofweekformat)
    public var dayOfWeekFormat : String {
        get { try! _default.get_DayOfWeekFormatImpl() }
        set { try! _default.put_DayOfWeekFormatImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendardatepicker.description)
    public var description : Any! {
        get { try! _default.get_DescriptionImpl() }
        set { try! _default.put_DescriptionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendardatepicker.displaymode)
    public var displayMode : CalendarViewDisplayMode {
        get { try! _default.get_DisplayModeImpl() }
        set { try! _default.put_DisplayModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendardatepicker.firstdayofweek)
    public var firstDayOfWeek : UWP.DayOfWeek {
        get { try! _default.get_FirstDayOfWeekImpl() }
        set { try! _default.put_FirstDayOfWeekImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendardatepicker.header)
    public var header : Any! {
        get { try! _default.get_HeaderImpl() }
        set { try! _default.put_HeaderImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendardatepicker.headertemplate)
    public var headerTemplate : WinUI.DataTemplate! {
        get { try! _default.get_HeaderTemplateImpl() }
        set { try! _default.put_HeaderTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendardatepicker.iscalendaropen)
    public var isCalendarOpen : Bool {
        get { try! _default.get_IsCalendarOpenImpl() }
        set { try! _default.put_IsCalendarOpenImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendardatepicker.isgrouplabelvisible)
    public var isGroupLabelVisible : Bool {
        get { try! _default.get_IsGroupLabelVisibleImpl() }
        set { try! _default.put_IsGroupLabelVisibleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendardatepicker.isoutofscopeenabled)
    public var isOutOfScopeEnabled : Bool {
        get { try! _default.get_IsOutOfScopeEnabledImpl() }
        set { try! _default.put_IsOutOfScopeEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendardatepicker.istodayhighlighted)
    public var isTodayHighlighted : Bool {
        get { try! _default.get_IsTodayHighlightedImpl() }
        set { try! _default.put_IsTodayHighlightedImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendardatepicker.lightdismissoverlaymode)
    public var lightDismissOverlayMode : LightDismissOverlayMode {
        get { try! _default.get_LightDismissOverlayModeImpl() }
        set { try! _default.put_LightDismissOverlayModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendardatepicker.maxdate)
    public var maxDate : WindowsFoundation.DateTime {
        get { try! _default.get_MaxDateImpl() }
        set { try! _default.put_MaxDateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendardatepicker.mindate)
    public var minDate : WindowsFoundation.DateTime {
        get { try! _default.get_MinDateImpl() }
        set { try! _default.put_MinDateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendardatepicker.placeholdertext)
    public var placeholderText : String {
        get { try! _default.get_PlaceholderTextImpl() }
        set { try! _default.put_PlaceholderTextImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendardatepicker.calendarviewdayitemchanging)
    public lazy var calendarViewDayItemChanging : Event<CalendarViewDayItemChangingEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_CalendarViewDayItemChangingImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_CalendarViewDayItemChangingImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendardatepicker.closed)
    public lazy var closed : Event<EventHandler<Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ClosedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ClosedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendardatepicker.datechanged)
    public lazy var dateChanged : Event<TypedEventHandler<CalendarDatePicker?, CalendarDatePickerDateChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_DateChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_DateChangedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendardatepicker.opened)
    public lazy var opened : Event<EventHandler<Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_OpenedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_OpenedImpl($0)
       }
      )
    }()

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = CalendarDatePicker
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICalendarDatePicker
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ICalendarDatePicker
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendardatepickerdatechangedeventargs)
public final class CalendarDatePickerDateChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ICalendarDatePickerDateChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICalendarDatePickerDateChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CICalendarDatePickerDateChangedEventArgs>?) -> CalendarDatePickerDateChangedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendardatepickerdatechangedeventargs.newdate)
    public var newDate : WindowsFoundation.DateTime? {
        get { try! _default.get_NewDateImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendardatepickerdatechangedeventargs.olddate)
    public var oldDate : WindowsFoundation.DateTime? {
        get { try! _default.get_OldDateImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview)
open class CalendarView : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ICalendarView
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICalendarView
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CICalendarView>?) -> CalendarView? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ICalendarViewFactory : __ABI_Microsoft_UI_Xaml_Controls.ICalendarViewFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.CalendarView"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._ICalendarViewFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _ICalendarViewStatics: __ABI_Microsoft_UI_Xaml_Controls.ICalendarViewStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.CalendarView"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.blackoutbackgroundproperty)
    public class var blackoutBackgroundProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_BlackoutBackgroundPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.blackoutforegroundproperty)
    public class var blackoutForegroundProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_BlackoutForegroundPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.blackoutstrikethroughbrushproperty)
    public class var blackoutStrikethroughBrushProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_BlackoutStrikethroughBrushPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.calendaridentifierproperty)
    public class var calendarIdentifierProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_CalendarIdentifierPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.calendaritembackgroundproperty)
    public class var calendarItemBackgroundProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_CalendarItemBackgroundPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.calendaritemborderbrushproperty)
    public class var calendarItemBorderBrushProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_CalendarItemBorderBrushPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.calendaritemborderthicknessproperty)
    public class var calendarItemBorderThicknessProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_CalendarItemBorderThicknessPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.calendaritemcornerradiusproperty)
    public class var calendarItemCornerRadiusProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_CalendarItemCornerRadiusPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.calendaritemdisabledbackgroundproperty)
    public class var calendarItemDisabledBackgroundProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_CalendarItemDisabledBackgroundPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.calendaritemforegroundproperty)
    public class var calendarItemForegroundProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_CalendarItemForegroundPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.calendaritemhoverbackgroundproperty)
    public class var calendarItemHoverBackgroundProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_CalendarItemHoverBackgroundPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.calendaritempressedbackgroundproperty)
    public class var calendarItemPressedBackgroundProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_CalendarItemPressedBackgroundPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.calendarviewdayitemstyleproperty)
    public class var calendarViewDayItemStyleProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_CalendarViewDayItemStylePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.dayitemfontfamilyproperty)
    public class var dayItemFontFamilyProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_DayItemFontFamilyPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.dayitemfontsizeproperty)
    public class var dayItemFontSizeProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_DayItemFontSizePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.dayitemfontstyleproperty)
    public class var dayItemFontStyleProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_DayItemFontStylePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.dayitemfontweightproperty)
    public class var dayItemFontWeightProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_DayItemFontWeightPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.dayitemmarginproperty)
    public class var dayItemMarginProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_DayItemMarginPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.dayofweekformatproperty)
    public class var dayOfWeekFormatProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_DayOfWeekFormatPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.disabledforegroundproperty)
    public class var disabledForegroundProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_DisabledForegroundPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.displaymodeproperty)
    public class var displayModeProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_DisplayModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.firstdayofweekproperty)
    public class var firstDayOfWeekProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_FirstDayOfWeekPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.firstofmonthlabelfontfamilyproperty)
    public class var firstOfMonthLabelFontFamilyProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_FirstOfMonthLabelFontFamilyPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.firstofmonthlabelfontsizeproperty)
    public class var firstOfMonthLabelFontSizeProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_FirstOfMonthLabelFontSizePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.firstofmonthlabelfontstyleproperty)
    public class var firstOfMonthLabelFontStyleProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_FirstOfMonthLabelFontStylePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.firstofmonthlabelfontweightproperty)
    public class var firstOfMonthLabelFontWeightProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_FirstOfMonthLabelFontWeightPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.firstofmonthlabelmarginproperty)
    public class var firstOfMonthLabelMarginProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_FirstOfMonthLabelMarginPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.firstofyeardecadelabelfontfamilyproperty)
    public class var firstOfYearDecadeLabelFontFamilyProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_FirstOfYearDecadeLabelFontFamilyPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.firstofyeardecadelabelfontsizeproperty)
    public class var firstOfYearDecadeLabelFontSizeProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_FirstOfYearDecadeLabelFontSizePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.firstofyeardecadelabelfontstyleproperty)
    public class var firstOfYearDecadeLabelFontStyleProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_FirstOfYearDecadeLabelFontStylePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.firstofyeardecadelabelfontweightproperty)
    public class var firstOfYearDecadeLabelFontWeightProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_FirstOfYearDecadeLabelFontWeightPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.firstofyeardecadelabelmarginproperty)
    public class var firstOfYearDecadeLabelMarginProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_FirstOfYearDecadeLabelMarginPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.focusborderbrushproperty)
    public class var focusBorderBrushProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_FocusBorderBrushPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.horizontaldayitemalignmentproperty)
    public class var horizontalDayItemAlignmentProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_HorizontalDayItemAlignmentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.horizontalfirstofmonthlabelalignmentproperty)
    public class var horizontalFirstOfMonthLabelAlignmentProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_HorizontalFirstOfMonthLabelAlignmentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.hoverborderbrushproperty)
    public class var hoverBorderBrushProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_HoverBorderBrushPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.isgrouplabelvisibleproperty)
    public class var isGroupLabelVisibleProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_IsGroupLabelVisiblePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.isoutofscopeenabledproperty)
    public class var isOutOfScopeEnabledProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_IsOutOfScopeEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.istodayhighlightedproperty)
    public class var isTodayHighlightedProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_IsTodayHighlightedPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.maxdateproperty)
    public class var maxDateProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_MaxDatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.mindateproperty)
    public class var minDateProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_MinDatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.monthyearitemfontfamilyproperty)
    public class var monthYearItemFontFamilyProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_MonthYearItemFontFamilyPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.monthyearitemfontsizeproperty)
    public class var monthYearItemFontSizeProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_MonthYearItemFontSizePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.monthyearitemfontstyleproperty)
    public class var monthYearItemFontStyleProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_MonthYearItemFontStylePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.monthyearitemfontweightproperty)
    public class var monthYearItemFontWeightProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_MonthYearItemFontWeightPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.monthyearitemmarginproperty)
    public class var monthYearItemMarginProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_MonthYearItemMarginPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.numberofweeksinviewproperty)
    public class var numberOfWeeksInViewProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_NumberOfWeeksInViewPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.outofscopebackgroundproperty)
    public class var outOfScopeBackgroundProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_OutOfScopeBackgroundPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.outofscopeforegroundproperty)
    public class var outOfScopeForegroundProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_OutOfScopeForegroundPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.outofscopehoverforegroundproperty)
    public class var outOfScopeHoverForegroundProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_OutOfScopeHoverForegroundPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.outofscopepressedforegroundproperty)
    public class var outOfScopePressedForegroundProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_OutOfScopePressedForegroundPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.pressedborderbrushproperty)
    public class var pressedBorderBrushProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_PressedBorderBrushPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.pressedforegroundproperty)
    public class var pressedForegroundProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_PressedForegroundPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.selectedborderbrushproperty)
    public class var selectedBorderBrushProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_SelectedBorderBrushPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.selecteddatesproperty)
    public class var selectedDatesProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_SelectedDatesPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.selecteddisabledborderbrushproperty)
    public class var selectedDisabledBorderBrushProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_SelectedDisabledBorderBrushPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.selecteddisabledforegroundproperty)
    public class var selectedDisabledForegroundProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_SelectedDisabledForegroundPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.selectedforegroundproperty)
    public class var selectedForegroundProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_SelectedForegroundPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.selectedhoverborderbrushproperty)
    public class var selectedHoverBorderBrushProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_SelectedHoverBorderBrushPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.selectedhoverforegroundproperty)
    public class var selectedHoverForegroundProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_SelectedHoverForegroundPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.selectedpressedborderbrushproperty)
    public class var selectedPressedBorderBrushProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_SelectedPressedBorderBrushPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.selectedpressedforegroundproperty)
    public class var selectedPressedForegroundProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_SelectedPressedForegroundPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.selectionmodeproperty)
    public class var selectionModeProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_SelectionModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.templatesettingsproperty)
    public class var templateSettingsProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_TemplateSettingsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.todaybackgroundproperty)
    public class var todayBackgroundProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_TodayBackgroundPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.todayblackoutbackgroundproperty)
    public class var todayBlackoutBackgroundProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_TodayBlackoutBackgroundPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.todayblackoutforegroundproperty)
    public class var todayBlackoutForegroundProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_TodayBlackoutForegroundPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.todaydisabledbackgroundproperty)
    public class var todayDisabledBackgroundProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_TodayDisabledBackgroundPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.todayfontweightproperty)
    public class var todayFontWeightProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_TodayFontWeightPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.todayforegroundproperty)
    public class var todayForegroundProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_TodayForegroundPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.todayhoverbackgroundproperty)
    public class var todayHoverBackgroundProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_TodayHoverBackgroundPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.todaypressedbackgroundproperty)
    public class var todayPressedBackgroundProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_TodayPressedBackgroundPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.todayselectedinnerborderbrushproperty)
    public class var todaySelectedInnerBorderBrushProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_TodaySelectedInnerBorderBrushPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.verticaldayitemalignmentproperty)
    public class var verticalDayItemAlignmentProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_VerticalDayItemAlignmentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.verticalfirstofmonthlabelalignmentproperty)
    public class var verticalFirstOfMonthLabelAlignmentProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewStatics.get_VerticalFirstOfMonthLabelAlignmentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.setdisplaydate)
    public func setDisplayDate(_ date: WindowsFoundation.DateTime) throws {
        try _default.SetDisplayDateImpl(date)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.setyeardecadedisplaydimensions)
    public func setYearDecadeDisplayDimensions(_ columns: Int32, _ rows: Int32) throws {
        try _default.SetYearDecadeDisplayDimensionsImpl(columns, rows)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.blackoutbackground)
    public var blackoutBackground : WinUI.Brush! {
        get { try! _default.get_BlackoutBackgroundImpl() }
        set { try! _default.put_BlackoutBackgroundImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.blackoutforeground)
    public var blackoutForeground : WinUI.Brush! {
        get { try! _default.get_BlackoutForegroundImpl() }
        set { try! _default.put_BlackoutForegroundImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.blackoutstrikethroughbrush)
    public var blackoutStrikethroughBrush : WinUI.Brush! {
        get { try! _default.get_BlackoutStrikethroughBrushImpl() }
        set { try! _default.put_BlackoutStrikethroughBrushImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.calendaridentifier)
    public var calendarIdentifier : String {
        get { try! _default.get_CalendarIdentifierImpl() }
        set { try! _default.put_CalendarIdentifierImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.calendaritembackground)
    public var calendarItemBackground : WinUI.Brush! {
        get { try! _default.get_CalendarItemBackgroundImpl() }
        set { try! _default.put_CalendarItemBackgroundImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.calendaritemborderbrush)
    public var calendarItemBorderBrush : WinUI.Brush! {
        get { try! _default.get_CalendarItemBorderBrushImpl() }
        set { try! _default.put_CalendarItemBorderBrushImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.calendaritemborderthickness)
    public var calendarItemBorderThickness : WinUI.Thickness {
        get { try! _default.get_CalendarItemBorderThicknessImpl() }
        set { try! _default.put_CalendarItemBorderThicknessImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.calendaritemcornerradius)
    public var calendarItemCornerRadius : WinUI.CornerRadius {
        get { try! _default.get_CalendarItemCornerRadiusImpl() }
        set { try! _default.put_CalendarItemCornerRadiusImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.calendaritemdisabledbackground)
    public var calendarItemDisabledBackground : WinUI.Brush! {
        get { try! _default.get_CalendarItemDisabledBackgroundImpl() }
        set { try! _default.put_CalendarItemDisabledBackgroundImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.calendaritemforeground)
    public var calendarItemForeground : WinUI.Brush! {
        get { try! _default.get_CalendarItemForegroundImpl() }
        set { try! _default.put_CalendarItemForegroundImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.calendaritemhoverbackground)
    public var calendarItemHoverBackground : WinUI.Brush! {
        get { try! _default.get_CalendarItemHoverBackgroundImpl() }
        set { try! _default.put_CalendarItemHoverBackgroundImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.calendaritempressedbackground)
    public var calendarItemPressedBackground : WinUI.Brush! {
        get { try! _default.get_CalendarItemPressedBackgroundImpl() }
        set { try! _default.put_CalendarItemPressedBackgroundImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.calendarviewdayitemstyle)
    public var calendarViewDayItemStyle : WinUI.Style! {
        get { try! _default.get_CalendarViewDayItemStyleImpl() }
        set { try! _default.put_CalendarViewDayItemStyleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.dayitemfontfamily)
    public var dayItemFontFamily : WinUI.FontFamily! {
        get { try! _default.get_DayItemFontFamilyImpl() }
        set { try! _default.put_DayItemFontFamilyImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.dayitemfontsize)
    public var dayItemFontSize : Double {
        get { try! _default.get_DayItemFontSizeImpl() }
        set { try! _default.put_DayItemFontSizeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.dayitemfontstyle)
    public var dayItemFontStyle : UWP.FontStyle {
        get { try! _default.get_DayItemFontStyleImpl() }
        set { try! _default.put_DayItemFontStyleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.dayitemfontweight)
    public var dayItemFontWeight : UWP.FontWeight {
        get { try! _default.get_DayItemFontWeightImpl() }
        set { try! _default.put_DayItemFontWeightImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.dayitemmargin)
    public var dayItemMargin : WinUI.Thickness {
        get { try! _default.get_DayItemMarginImpl() }
        set { try! _default.put_DayItemMarginImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.dayofweekformat)
    public var dayOfWeekFormat : String {
        get { try! _default.get_DayOfWeekFormatImpl() }
        set { try! _default.put_DayOfWeekFormatImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.disabledforeground)
    public var disabledForeground : WinUI.Brush! {
        get { try! _default.get_DisabledForegroundImpl() }
        set { try! _default.put_DisabledForegroundImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.displaymode)
    public var displayMode : CalendarViewDisplayMode {
        get { try! _default.get_DisplayModeImpl() }
        set { try! _default.put_DisplayModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.firstdayofweek)
    public var firstDayOfWeek : UWP.DayOfWeek {
        get { try! _default.get_FirstDayOfWeekImpl() }
        set { try! _default.put_FirstDayOfWeekImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.firstofmonthlabelfontfamily)
    public var firstOfMonthLabelFontFamily : WinUI.FontFamily! {
        get { try! _default.get_FirstOfMonthLabelFontFamilyImpl() }
        set { try! _default.put_FirstOfMonthLabelFontFamilyImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.firstofmonthlabelfontsize)
    public var firstOfMonthLabelFontSize : Double {
        get { try! _default.get_FirstOfMonthLabelFontSizeImpl() }
        set { try! _default.put_FirstOfMonthLabelFontSizeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.firstofmonthlabelfontstyle)
    public var firstOfMonthLabelFontStyle : UWP.FontStyle {
        get { try! _default.get_FirstOfMonthLabelFontStyleImpl() }
        set { try! _default.put_FirstOfMonthLabelFontStyleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.firstofmonthlabelfontweight)
    public var firstOfMonthLabelFontWeight : UWP.FontWeight {
        get { try! _default.get_FirstOfMonthLabelFontWeightImpl() }
        set { try! _default.put_FirstOfMonthLabelFontWeightImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.firstofmonthlabelmargin)
    public var firstOfMonthLabelMargin : WinUI.Thickness {
        get { try! _default.get_FirstOfMonthLabelMarginImpl() }
        set { try! _default.put_FirstOfMonthLabelMarginImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.firstofyeardecadelabelfontfamily)
    public var firstOfYearDecadeLabelFontFamily : WinUI.FontFamily! {
        get { try! _default.get_FirstOfYearDecadeLabelFontFamilyImpl() }
        set { try! _default.put_FirstOfYearDecadeLabelFontFamilyImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.firstofyeardecadelabelfontsize)
    public var firstOfYearDecadeLabelFontSize : Double {
        get { try! _default.get_FirstOfYearDecadeLabelFontSizeImpl() }
        set { try! _default.put_FirstOfYearDecadeLabelFontSizeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.firstofyeardecadelabelfontstyle)
    public var firstOfYearDecadeLabelFontStyle : UWP.FontStyle {
        get { try! _default.get_FirstOfYearDecadeLabelFontStyleImpl() }
        set { try! _default.put_FirstOfYearDecadeLabelFontStyleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.firstofyeardecadelabelfontweight)
    public var firstOfYearDecadeLabelFontWeight : UWP.FontWeight {
        get { try! _default.get_FirstOfYearDecadeLabelFontWeightImpl() }
        set { try! _default.put_FirstOfYearDecadeLabelFontWeightImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.firstofyeardecadelabelmargin)
    public var firstOfYearDecadeLabelMargin : WinUI.Thickness {
        get { try! _default.get_FirstOfYearDecadeLabelMarginImpl() }
        set { try! _default.put_FirstOfYearDecadeLabelMarginImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.focusborderbrush)
    public var focusBorderBrush : WinUI.Brush! {
        get { try! _default.get_FocusBorderBrushImpl() }
        set { try! _default.put_FocusBorderBrushImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.horizontaldayitemalignment)
    public var horizontalDayItemAlignment : WinUI.HorizontalAlignment {
        get { try! _default.get_HorizontalDayItemAlignmentImpl() }
        set { try! _default.put_HorizontalDayItemAlignmentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.horizontalfirstofmonthlabelalignment)
    public var horizontalFirstOfMonthLabelAlignment : WinUI.HorizontalAlignment {
        get { try! _default.get_HorizontalFirstOfMonthLabelAlignmentImpl() }
        set { try! _default.put_HorizontalFirstOfMonthLabelAlignmentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.hoverborderbrush)
    public var hoverBorderBrush : WinUI.Brush! {
        get { try! _default.get_HoverBorderBrushImpl() }
        set { try! _default.put_HoverBorderBrushImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.isgrouplabelvisible)
    public var isGroupLabelVisible : Bool {
        get { try! _default.get_IsGroupLabelVisibleImpl() }
        set { try! _default.put_IsGroupLabelVisibleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.isoutofscopeenabled)
    public var isOutOfScopeEnabled : Bool {
        get { try! _default.get_IsOutOfScopeEnabledImpl() }
        set { try! _default.put_IsOutOfScopeEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.istodayhighlighted)
    public var isTodayHighlighted : Bool {
        get { try! _default.get_IsTodayHighlightedImpl() }
        set { try! _default.put_IsTodayHighlightedImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.maxdate)
    public var maxDate : WindowsFoundation.DateTime {
        get { try! _default.get_MaxDateImpl() }
        set { try! _default.put_MaxDateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.mindate)
    public var minDate : WindowsFoundation.DateTime {
        get { try! _default.get_MinDateImpl() }
        set { try! _default.put_MinDateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.monthyearitemfontfamily)
    public var monthYearItemFontFamily : WinUI.FontFamily! {
        get { try! _default.get_MonthYearItemFontFamilyImpl() }
        set { try! _default.put_MonthYearItemFontFamilyImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.monthyearitemfontsize)
    public var monthYearItemFontSize : Double {
        get { try! _default.get_MonthYearItemFontSizeImpl() }
        set { try! _default.put_MonthYearItemFontSizeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.monthyearitemfontstyle)
    public var monthYearItemFontStyle : UWP.FontStyle {
        get { try! _default.get_MonthYearItemFontStyleImpl() }
        set { try! _default.put_MonthYearItemFontStyleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.monthyearitemfontweight)
    public var monthYearItemFontWeight : UWP.FontWeight {
        get { try! _default.get_MonthYearItemFontWeightImpl() }
        set { try! _default.put_MonthYearItemFontWeightImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.monthyearitemmargin)
    public var monthYearItemMargin : WinUI.Thickness {
        get { try! _default.get_MonthYearItemMarginImpl() }
        set { try! _default.put_MonthYearItemMarginImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.numberofweeksinview)
    public var numberOfWeeksInView : Int32 {
        get { try! _default.get_NumberOfWeeksInViewImpl() }
        set { try! _default.put_NumberOfWeeksInViewImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.outofscopebackground)
    public var outOfScopeBackground : WinUI.Brush! {
        get { try! _default.get_OutOfScopeBackgroundImpl() }
        set { try! _default.put_OutOfScopeBackgroundImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.outofscopeforeground)
    public var outOfScopeForeground : WinUI.Brush! {
        get { try! _default.get_OutOfScopeForegroundImpl() }
        set { try! _default.put_OutOfScopeForegroundImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.outofscopehoverforeground)
    public var outOfScopeHoverForeground : WinUI.Brush! {
        get { try! _default.get_OutOfScopeHoverForegroundImpl() }
        set { try! _default.put_OutOfScopeHoverForegroundImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.outofscopepressedforeground)
    public var outOfScopePressedForeground : WinUI.Brush! {
        get { try! _default.get_OutOfScopePressedForegroundImpl() }
        set { try! _default.put_OutOfScopePressedForegroundImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.pressedborderbrush)
    public var pressedBorderBrush : WinUI.Brush! {
        get { try! _default.get_PressedBorderBrushImpl() }
        set { try! _default.put_PressedBorderBrushImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.pressedforeground)
    public var pressedForeground : WinUI.Brush! {
        get { try! _default.get_PressedForegroundImpl() }
        set { try! _default.put_PressedForegroundImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.selectedborderbrush)
    public var selectedBorderBrush : WinUI.Brush! {
        get { try! _default.get_SelectedBorderBrushImpl() }
        set { try! _default.put_SelectedBorderBrushImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.selecteddates)
    public var selectedDates : WindowsFoundation.AnyIVector<WindowsFoundation.DateTime>! {
        get { try! _default.get_SelectedDatesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.selecteddisabledborderbrush)
    public var selectedDisabledBorderBrush : WinUI.Brush! {
        get { try! _default.get_SelectedDisabledBorderBrushImpl() }
        set { try! _default.put_SelectedDisabledBorderBrushImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.selecteddisabledforeground)
    public var selectedDisabledForeground : WinUI.Brush! {
        get { try! _default.get_SelectedDisabledForegroundImpl() }
        set { try! _default.put_SelectedDisabledForegroundImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.selectedforeground)
    public var selectedForeground : WinUI.Brush! {
        get { try! _default.get_SelectedForegroundImpl() }
        set { try! _default.put_SelectedForegroundImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.selectedhoverborderbrush)
    public var selectedHoverBorderBrush : WinUI.Brush! {
        get { try! _default.get_SelectedHoverBorderBrushImpl() }
        set { try! _default.put_SelectedHoverBorderBrushImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.selectedhoverforeground)
    public var selectedHoverForeground : WinUI.Brush! {
        get { try! _default.get_SelectedHoverForegroundImpl() }
        set { try! _default.put_SelectedHoverForegroundImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.selectedpressedborderbrush)
    public var selectedPressedBorderBrush : WinUI.Brush! {
        get { try! _default.get_SelectedPressedBorderBrushImpl() }
        set { try! _default.put_SelectedPressedBorderBrushImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.selectedpressedforeground)
    public var selectedPressedForeground : WinUI.Brush! {
        get { try! _default.get_SelectedPressedForegroundImpl() }
        set { try! _default.put_SelectedPressedForegroundImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.selectionmode)
    public var selectionMode : CalendarViewSelectionMode {
        get { try! _default.get_SelectionModeImpl() }
        set { try! _default.put_SelectionModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.templatesettings)
    public var templateSettings : WinUI.CalendarViewTemplateSettings! {
        get { try! _default.get_TemplateSettingsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.todaybackground)
    public var todayBackground : WinUI.Brush! {
        get { try! _default.get_TodayBackgroundImpl() }
        set { try! _default.put_TodayBackgroundImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.todayblackoutbackground)
    public var todayBlackoutBackground : WinUI.Brush! {
        get { try! _default.get_TodayBlackoutBackgroundImpl() }
        set { try! _default.put_TodayBlackoutBackgroundImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.todayblackoutforeground)
    public var todayBlackoutForeground : WinUI.Brush! {
        get { try! _default.get_TodayBlackoutForegroundImpl() }
        set { try! _default.put_TodayBlackoutForegroundImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.todaydisabledbackground)
    public var todayDisabledBackground : WinUI.Brush! {
        get { try! _default.get_TodayDisabledBackgroundImpl() }
        set { try! _default.put_TodayDisabledBackgroundImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.todayfontweight)
    public var todayFontWeight : UWP.FontWeight {
        get { try! _default.get_TodayFontWeightImpl() }
        set { try! _default.put_TodayFontWeightImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.todayforeground)
    public var todayForeground : WinUI.Brush! {
        get { try! _default.get_TodayForegroundImpl() }
        set { try! _default.put_TodayForegroundImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.todayhoverbackground)
    public var todayHoverBackground : WinUI.Brush! {
        get { try! _default.get_TodayHoverBackgroundImpl() }
        set { try! _default.put_TodayHoverBackgroundImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.todaypressedbackground)
    public var todayPressedBackground : WinUI.Brush! {
        get { try! _default.get_TodayPressedBackgroundImpl() }
        set { try! _default.put_TodayPressedBackgroundImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.todayselectedinnerborderbrush)
    public var todaySelectedInnerBorderBrush : WinUI.Brush! {
        get { try! _default.get_TodaySelectedInnerBorderBrushImpl() }
        set { try! _default.put_TodaySelectedInnerBorderBrushImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.verticaldayitemalignment)
    public var verticalDayItemAlignment : WinUI.VerticalAlignment {
        get { try! _default.get_VerticalDayItemAlignmentImpl() }
        set { try! _default.put_VerticalDayItemAlignmentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.verticalfirstofmonthlabelalignment)
    public var verticalFirstOfMonthLabelAlignment : WinUI.VerticalAlignment {
        get { try! _default.get_VerticalFirstOfMonthLabelAlignmentImpl() }
        set { try! _default.put_VerticalFirstOfMonthLabelAlignmentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.calendarviewdayitemchanging)
    public lazy var calendarViewDayItemChanging : Event<TypedEventHandler<CalendarView?, CalendarViewDayItemChangingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_CalendarViewDayItemChangingImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_CalendarViewDayItemChangingImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarview.selecteddateschanged)
    public lazy var selectedDatesChanged : Event<TypedEventHandler<CalendarView?, CalendarViewSelectedDatesChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_SelectedDatesChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_SelectedDatesChangedImpl($0)
       }
      )
    }()

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = CalendarView
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICalendarView
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ICalendarView
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarviewdayitem)
open class CalendarViewDayItem : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ICalendarViewDayItem
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICalendarViewDayItem
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CICalendarViewDayItem>?) -> CalendarViewDayItem? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ICalendarViewDayItemFactory : __ABI_Microsoft_UI_Xaml_Controls.ICalendarViewDayItemFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.CalendarViewDayItem"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._ICalendarViewDayItemFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _ICalendarViewDayItemStatics: __ABI_Microsoft_UI_Xaml_Controls.ICalendarViewDayItemStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.CalendarViewDayItem"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarviewdayitem.dateproperty)
    public class var dateProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewDayItemStatics.get_DatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarviewdayitem.isblackoutproperty)
    public class var isBlackoutProperty : WinUI.DependencyProperty! {
        get { try! _ICalendarViewDayItemStatics.get_IsBlackoutPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarviewdayitem.setdensitycolors)
    public func setDensityColors(_ colors: WindowsFoundation.AnyIIterable<UWP.Color>!) throws {
        try _default.SetDensityColorsImpl(colors)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarviewdayitem.date)
    public var date : WindowsFoundation.DateTime {
        get { try! _default.get_DateImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarviewdayitem.isblackout)
    public var isBlackout : Bool {
        get { try! _default.get_IsBlackoutImpl() }
        set { try! _default.put_IsBlackoutImpl(newValue) }
    }

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = CalendarViewDayItem
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICalendarViewDayItem
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ICalendarViewDayItem
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarviewdayitemchangingeventargs)
public final class CalendarViewDayItemChangingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ICalendarViewDayItemChangingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICalendarViewDayItemChangingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CICalendarViewDayItemChangingEventArgs>?) -> CalendarViewDayItemChangingEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarviewdayitemchangingeventargs.registerupdatecallback)
    public func registerUpdateCallback(_ callback: TypedEventHandler<CalendarView?, CalendarViewDayItemChangingEventArgs?>!) throws {
        try _default.RegisterUpdateCallbackImpl(callback)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarviewdayitemchangingeventargs.registerupdatecallback)
    public func registerUpdateCallback(_ callbackPhase: UInt32, _ callback: TypedEventHandler<CalendarView?, CalendarViewDayItemChangingEventArgs?>!) throws {
        try _default.RegisterUpdateCallbackWithPhaseImpl(callbackPhase, callback)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarviewdayitemchangingeventargs.inrecyclequeue)
    public var inRecycleQueue : Bool {
        get { try! _default.get_InRecycleQueueImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarviewdayitemchangingeventargs.item)
    public var item : CalendarViewDayItem! {
        get { try! _default.get_ItemImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarviewdayitemchangingeventargs.phase)
    public var phase : UInt32 {
        get { try! _default.get_PhaseImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarviewselecteddateschangedeventargs)
public final class CalendarViewSelectedDatesChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ICalendarViewSelectedDatesChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICalendarViewSelectedDatesChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CICalendarViewSelectedDatesChangedEventArgs>?) -> CalendarViewSelectedDatesChangedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarviewselecteddateschangedeventargs.addeddates)
    public var addedDates : WindowsFoundation.AnyIVectorView<WindowsFoundation.DateTime>! {
        get { try! _default.get_AddedDatesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.calendarviewselecteddateschangedeventargs.removeddates)
    public var removedDates : WindowsFoundation.AnyIVectorView<WindowsFoundation.DateTime>! {
        get { try! _default.get_RemovedDatesImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.candidatewindowboundschangedeventargs)
public final class CandidateWindowBoundsChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ICandidateWindowBoundsChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICandidateWindowBoundsChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CICandidateWindowBoundsChangedEventArgs>?) -> CandidateWindowBoundsChangedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.candidatewindowboundschangedeventargs.bounds)
    public var bounds : WindowsFoundation.Rect {
        get { try! _default.get_BoundsImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.canvas)
open class Canvas : WinUI.Panel {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ICanvas
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICanvas
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CICanvas>?) -> Canvas? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ICanvasFactory : __ABI_Microsoft_UI_Xaml_Controls.ICanvasFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.Canvas"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._ICanvasFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _ICanvasStatics: __ABI_Microsoft_UI_Xaml_Controls.ICanvasStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.Canvas"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.canvas.getleft)
    public class func getLeft(_ element: WinUI.UIElement!) -> Double {
        return try! _ICanvasStatics.GetLeftImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.canvas.setleft)
    public class func setLeft(_ element: WinUI.UIElement!, _ length: Double) {
        try! _ICanvasStatics.SetLeftImpl(element, length)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.canvas.gettop)
    public class func getTop(_ element: WinUI.UIElement!) -> Double {
        return try! _ICanvasStatics.GetTopImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.canvas.settop)
    public class func setTop(_ element: WinUI.UIElement!, _ length: Double) {
        try! _ICanvasStatics.SetTopImpl(element, length)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.canvas.getzindex)
    public class func getZIndex(_ element: WinUI.UIElement!) -> Int32 {
        return try! _ICanvasStatics.GetZIndexImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.canvas.setzindex)
    public class func setZIndex(_ element: WinUI.UIElement!, _ value: Int32) {
        try! _ICanvasStatics.SetZIndexImpl(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.canvas.leftproperty)
    public class var leftProperty : WinUI.DependencyProperty! {
        get { try! _ICanvasStatics.get_LeftPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.canvas.topproperty)
    public class var topProperty : WinUI.DependencyProperty! {
        get { try! _ICanvasStatics.get_TopPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.canvas.zindexproperty)
    public class var zindexProperty : WinUI.DependencyProperty! {
        get { try! _ICanvasStatics.get_ZIndexPropertyImpl() }
    }

    internal enum IFrameworkElementOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
        internal typealias Class = Canvas
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICanvas
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ICanvas
        }
    }
    internal typealias Composable = IFrameworkElementOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.checkbox)
open class CheckBox : WinUI.ToggleButton {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ICheckBox
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICheckBox
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CICheckBox>?) -> CheckBox? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ICheckBoxFactory : __ABI_Microsoft_UI_Xaml_Controls.ICheckBoxFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.CheckBox"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._ICheckBoxFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    internal enum IToggleButtonOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIToggleButtonOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IToggleButtonOverrides
        internal typealias Class = CheckBox
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICheckBox
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ICheckBox
        }
    }
    internal typealias Composable = IToggleButtonOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.choosinggroupheadercontainereventargs)
public final class ChoosingGroupHeaderContainerEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IChoosingGroupHeaderContainerEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIChoosingGroupHeaderContainerEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIChoosingGroupHeaderContainerEventArgs>?) -> ChoosingGroupHeaderContainerEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public init() {
        super.init(try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.ChoosingGroupHeaderContainerEventArgs")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.choosinggroupheadercontainereventargs.group)
    public var group : Any! {
        get { try! _default.get_GroupImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.choosinggroupheadercontainereventargs.groupheadercontainer)
    public var groupHeaderContainer : ListViewBaseHeaderItem! {
        get { try! _default.get_GroupHeaderContainerImpl() }
        set { try! _default.put_GroupHeaderContainerImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.choosinggroupheadercontainereventargs.groupindex)
    public var groupIndex : Int32 {
        get { try! _default.get_GroupIndexImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.choosingitemcontainereventargs)
public final class ChoosingItemContainerEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IChoosingItemContainerEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIChoosingItemContainerEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIChoosingItemContainerEventArgs>?) -> ChoosingItemContainerEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public init() {
        super.init(try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.ChoosingItemContainerEventArgs")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.choosingitemcontainereventargs.iscontainerprepared)
    public var isContainerPrepared : Bool {
        get { try! _default.get_IsContainerPreparedImpl() }
        set { try! _default.put_IsContainerPreparedImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.choosingitemcontainereventargs.item)
    public var item : Any! {
        get { try! _default.get_ItemImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.choosingitemcontainereventargs.itemcontainer)
    public var itemContainer : WinUI.SelectorItem! {
        get { try! _default.get_ItemContainerImpl() }
        set { try! _default.put_ItemContainerImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.choosingitemcontainereventargs.itemindex)
    public var itemIndex : Int32 {
        get { try! _default.get_ItemIndexImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.cleanupvirtualizeditemeventargs)
public final class CleanUpVirtualizedItemEventArgs : WinUI.RoutedEventArgs {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ICleanUpVirtualizedItemEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICleanUpVirtualizedItemEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CICleanUpVirtualizedItemEventArgs>?) -> CleanUpVirtualizedItemEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.cleanupvirtualizeditemeventargs.cancel)
    public var cancel : Bool {
        get { try! _default.get_CancelImpl() }
        set { try! _default.put_CancelImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.cleanupvirtualizeditemeventargs.uielement)
    public var uiElement : WinUI.UIElement! {
        get { try! _default.get_UIElementImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.cleanupvirtualizeditemeventargs.value)
    public var value : Any! {
        get { try! _default.get_ValueImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.colorchangedeventargs)
public final class ColorChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IColorChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIColorChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIColorChangedEventArgs>?) -> ColorChangedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.colorchangedeventargs.newcolor)
    public var newColor : UWP.Color {
        get { try! _default.get_NewColorImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.colorchangedeventargs.oldcolor)
    public var oldColor : UWP.Color {
        get { try! _default.get_OldColorImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.colorpicker)
open class ColorPicker : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IColorPicker
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIColorPicker
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIColorPicker>?) -> ColorPicker? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IColorPickerFactory : __ABI_Microsoft_UI_Xaml_Controls.IColorPickerFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ColorPicker"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IColorPickerFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IColorPickerStatics: __ABI_Microsoft_UI_Xaml_Controls.IColorPickerStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ColorPicker"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.colorpicker.colorproperty)
    public class var colorProperty : WinUI.DependencyProperty! {
        get { try! _IColorPickerStatics.get_ColorPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.colorpicker.colorspectrumcomponentsproperty)
    public class var colorSpectrumComponentsProperty : WinUI.DependencyProperty! {
        get { try! _IColorPickerStatics.get_ColorSpectrumComponentsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.colorpicker.colorspectrumshapeproperty)
    public class var colorSpectrumShapeProperty : WinUI.DependencyProperty! {
        get { try! _IColorPickerStatics.get_ColorSpectrumShapePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.colorpicker.isalphaenabledproperty)
    public class var isAlphaEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IColorPickerStatics.get_IsAlphaEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.colorpicker.isalphaslidervisibleproperty)
    public class var isAlphaSliderVisibleProperty : WinUI.DependencyProperty! {
        get { try! _IColorPickerStatics.get_IsAlphaSliderVisiblePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.colorpicker.isalphatextinputvisibleproperty)
    public class var isAlphaTextInputVisibleProperty : WinUI.DependencyProperty! {
        get { try! _IColorPickerStatics.get_IsAlphaTextInputVisiblePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.colorpicker.iscolorchanneltextinputvisibleproperty)
    public class var isColorChannelTextInputVisibleProperty : WinUI.DependencyProperty! {
        get { try! _IColorPickerStatics.get_IsColorChannelTextInputVisiblePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.colorpicker.iscolorpreviewvisibleproperty)
    public class var isColorPreviewVisibleProperty : WinUI.DependencyProperty! {
        get { try! _IColorPickerStatics.get_IsColorPreviewVisiblePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.colorpicker.iscolorslidervisibleproperty)
    public class var isColorSliderVisibleProperty : WinUI.DependencyProperty! {
        get { try! _IColorPickerStatics.get_IsColorSliderVisiblePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.colorpicker.iscolorspectrumvisibleproperty)
    public class var isColorSpectrumVisibleProperty : WinUI.DependencyProperty! {
        get { try! _IColorPickerStatics.get_IsColorSpectrumVisiblePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.colorpicker.ishexinputvisibleproperty)
    public class var isHexInputVisibleProperty : WinUI.DependencyProperty! {
        get { try! _IColorPickerStatics.get_IsHexInputVisiblePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.colorpicker.ismorebuttonvisibleproperty)
    public class var isMoreButtonVisibleProperty : WinUI.DependencyProperty! {
        get { try! _IColorPickerStatics.get_IsMoreButtonVisiblePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.colorpicker.maxhueproperty)
    public class var maxHueProperty : WinUI.DependencyProperty! {
        get { try! _IColorPickerStatics.get_MaxHuePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.colorpicker.maxsaturationproperty)
    public class var maxSaturationProperty : WinUI.DependencyProperty! {
        get { try! _IColorPickerStatics.get_MaxSaturationPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.colorpicker.maxvalueproperty)
    public class var maxValueProperty : WinUI.DependencyProperty! {
        get { try! _IColorPickerStatics.get_MaxValuePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.colorpicker.minhueproperty)
    public class var minHueProperty : WinUI.DependencyProperty! {
        get { try! _IColorPickerStatics.get_MinHuePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.colorpicker.minsaturationproperty)
    public class var minSaturationProperty : WinUI.DependencyProperty! {
        get { try! _IColorPickerStatics.get_MinSaturationPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.colorpicker.minvalueproperty)
    public class var minValueProperty : WinUI.DependencyProperty! {
        get { try! _IColorPickerStatics.get_MinValuePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.colorpicker.previouscolorproperty)
    public class var previousColorProperty : WinUI.DependencyProperty! {
        get { try! _IColorPickerStatics.get_PreviousColorPropertyImpl() }
    }

    private static let _IColorPickerStatics2: __ABI_Microsoft_UI_Xaml_Controls.IColorPickerStatics2 = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ColorPicker"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.colorpicker.orientationproperty)
    public class var orientationProperty : WinUI.DependencyProperty! {
        get { try! _IColorPickerStatics2.get_OrientationPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.colorpicker.color)
    public var color : UWP.Color {
        get { try! _default.get_ColorImpl() }
        set { try! _default.put_ColorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.colorpicker.colorspectrumcomponents)
    public var colorSpectrumComponents : ColorSpectrumComponents {
        get { try! _default.get_ColorSpectrumComponentsImpl() }
        set { try! _default.put_ColorSpectrumComponentsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.colorpicker.colorspectrumshape)
    public var colorSpectrumShape : ColorSpectrumShape {
        get { try! _default.get_ColorSpectrumShapeImpl() }
        set { try! _default.put_ColorSpectrumShapeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.colorpicker.isalphaenabled)
    public var isAlphaEnabled : Bool {
        get { try! _default.get_IsAlphaEnabledImpl() }
        set { try! _default.put_IsAlphaEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.colorpicker.isalphaslidervisible)
    public var isAlphaSliderVisible : Bool {
        get { try! _default.get_IsAlphaSliderVisibleImpl() }
        set { try! _default.put_IsAlphaSliderVisibleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.colorpicker.isalphatextinputvisible)
    public var isAlphaTextInputVisible : Bool {
        get { try! _default.get_IsAlphaTextInputVisibleImpl() }
        set { try! _default.put_IsAlphaTextInputVisibleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.colorpicker.iscolorchanneltextinputvisible)
    public var isColorChannelTextInputVisible : Bool {
        get { try! _default.get_IsColorChannelTextInputVisibleImpl() }
        set { try! _default.put_IsColorChannelTextInputVisibleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.colorpicker.iscolorpreviewvisible)
    public var isColorPreviewVisible : Bool {
        get { try! _default.get_IsColorPreviewVisibleImpl() }
        set { try! _default.put_IsColorPreviewVisibleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.colorpicker.iscolorslidervisible)
    public var isColorSliderVisible : Bool {
        get { try! _default.get_IsColorSliderVisibleImpl() }
        set { try! _default.put_IsColorSliderVisibleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.colorpicker.iscolorspectrumvisible)
    public var isColorSpectrumVisible : Bool {
        get { try! _default.get_IsColorSpectrumVisibleImpl() }
        set { try! _default.put_IsColorSpectrumVisibleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.colorpicker.ishexinputvisible)
    public var isHexInputVisible : Bool {
        get { try! _default.get_IsHexInputVisibleImpl() }
        set { try! _default.put_IsHexInputVisibleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.colorpicker.ismorebuttonvisible)
    public var isMoreButtonVisible : Bool {
        get { try! _default.get_IsMoreButtonVisibleImpl() }
        set { try! _default.put_IsMoreButtonVisibleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.colorpicker.maxhue)
    public var maxHue : Int32 {
        get { try! _default.get_MaxHueImpl() }
        set { try! _default.put_MaxHueImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.colorpicker.maxsaturation)
    public var maxSaturation : Int32 {
        get { try! _default.get_MaxSaturationImpl() }
        set { try! _default.put_MaxSaturationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.colorpicker.maxvalue)
    public var maxValue : Int32 {
        get { try! _default.get_MaxValueImpl() }
        set { try! _default.put_MaxValueImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.colorpicker.minhue)
    public var minHue : Int32 {
        get { try! _default.get_MinHueImpl() }
        set { try! _default.put_MinHueImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.colorpicker.minsaturation)
    public var minSaturation : Int32 {
        get { try! _default.get_MinSaturationImpl() }
        set { try! _default.put_MinSaturationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.colorpicker.minvalue)
    public var minValue : Int32 {
        get { try! _default.get_MinValueImpl() }
        set { try! _default.put_MinValueImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.colorpicker.previouscolor)
    public var previousColor : UWP.Color? {
        get { try! _default.get_PreviousColorImpl() }
        set { try! _default.put_PreviousColorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.colorpicker.colorchanged)
    public lazy var colorChanged : Event<TypedEventHandler<ColorPicker?, ColorChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ColorChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ColorChangedImpl($0)
       }
      )
    }()

    private lazy var _IColorPicker2: __ABI_Microsoft_UI_Xaml_Controls.IColorPicker2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.colorpicker.orientation)
    public var orientation : Orientation {
        get { try! _IColorPicker2.get_OrientationImpl() }
        set { try! _IColorPicker2.put_OrientationImpl(newValue) }
    }

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = ColorPicker
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIColorPicker
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IColorPicker
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = nil
        _IColorPicker2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinition)
public final class ColumnDefinition : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IColumnDefinition
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIColumnDefinition
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIColumnDefinition>?) -> ColumnDefinition? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.ColumnDefinition")))
    }

    private static let _IColumnDefinitionStatics: __ABI_Microsoft_UI_Xaml_Controls.IColumnDefinitionStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ColumnDefinition"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinition.maxwidthproperty)
    public static var maxWidthProperty : WinUI.DependencyProperty! {
        get { try! _IColumnDefinitionStatics.get_MaxWidthPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinition.minwidthproperty)
    public static var minWidthProperty : WinUI.DependencyProperty! {
        get { try! _IColumnDefinitionStatics.get_MinWidthPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinition.widthproperty)
    public static var widthProperty : WinUI.DependencyProperty! {
        get { try! _IColumnDefinitionStatics.get_WidthPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinition.actualwidth)
    public var actualWidth : Double {
        get { try! _default.get_ActualWidthImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinition.maxwidth)
    public var maxWidth : Double {
        get { try! _default.get_MaxWidthImpl() }
        set { try! _default.put_MaxWidthImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinition.minwidth)
    public var minWidth : Double {
        get { try! _default.get_MinWidthImpl() }
        set { try! _default.put_MinWidthImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinition.width)
    public var width : WinUI.GridLength {
        get { try! _default.get_WidthImpl() }
        set { try! _default.put_WidthImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinitioncollection)
public final class ColumnDefinitionCollection : WinRTClass, IVector, IIterable {
    public typealias T = ColumnDefinition?
    private typealias SwiftABI = WinUI.IVectorColumnDefinition
    private typealias CABI = __x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CControls__CColumnDefinition
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CControls__CColumnDefinition>?) -> ColumnDefinitionCollection? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    // MARK: Collection
    public typealias Element = T
    public var startIndex: Int { 0 }
    public var endIndex: Int { Int(size) }
    public func index(after i: Int) -> Int {
        i+1
    }

    public func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    public var count: Int { Int(size) }


    public subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    public func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinitioncollection.getat)
    public func getAt(_ index: UInt32) -> ColumnDefinition? {
        try! _default.GetAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinitioncollection.getview)
    public func getView() -> WindowsFoundation.AnyIVectorView<ColumnDefinition?>? {
        try! _default.GetViewImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinitioncollection.indexof)
    public func indexOf(_ value: ColumnDefinition?, _ index: inout UInt32) -> Bool {
        try! _default.IndexOfImpl(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinitioncollection.setat)
    public func setAt(_ index: UInt32, _ value: ColumnDefinition?) {
        try! _default.SetAtImpl(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinitioncollection.insertat)
    public func insertAt(_ index: UInt32, _ value: ColumnDefinition?) {
        try! _default.InsertAtImpl(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinitioncollection.removeat)
    public func removeAt(_ index: UInt32) {
        try! _default.RemoveAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinitioncollection.append)
    public func append(_ value: ColumnDefinition?) {
        try! _default.AppendImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinitioncollection.removeatend)
    public func removeAtEnd() {
        try! _default.RemoveAtEndImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinitioncollection.clear)
    public func clear() {
        try! _default.ClearImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinitioncollection.size)
    public var size : UInt32 {
        get { try! _default.get_SizeImpl() }
    }

    private lazy var _IIterable: IIterableColumnDefinition! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinitioncollection.first)
    public func first() -> WindowsFoundation.AnyIIterator<ColumnDefinition?>? {
        try! _IIterable.FirstImpl()
    }

    deinit {
        _default = nil
        _IIterable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox)
open class ComboBox : WinUI.Selector {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IComboBox
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox>?) -> ComboBox? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.IComboBoxOverridesWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.IComboBoxOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IComboBoxFactory : __ABI_Microsoft_UI_Xaml_Controls.IComboBoxFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ComboBox"))

    public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IComboBoxFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IComboBoxStatics: __ABI_Microsoft_UI_Xaml_Controls.IComboBoxStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ComboBox"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.descriptionproperty)
    public class var descriptionProperty : WinUI.DependencyProperty! {
        get { try! _IComboBoxStatics.get_DescriptionPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.headerproperty)
    public class var headerProperty : WinUI.DependencyProperty! {
        get { try! _IComboBoxStatics.get_HeaderPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.headertemplateproperty)
    public class var headerTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IComboBoxStatics.get_HeaderTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.isdropdownopenproperty)
    public class var isDropDownOpenProperty : WinUI.DependencyProperty! {
        get { try! _IComboBoxStatics.get_IsDropDownOpenPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.iseditableproperty)
    public class var isEditableProperty : WinUI.DependencyProperty! {
        get { try! _IComboBoxStatics.get_IsEditablePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.istextsearchenabledproperty)
    public class var isTextSearchEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IComboBoxStatics.get_IsTextSearchEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.lightdismissoverlaymodeproperty)
    public class var lightDismissOverlayModeProperty : WinUI.DependencyProperty! {
        get { try! _IComboBoxStatics.get_LightDismissOverlayModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.maxdropdownheightproperty)
    public class var maxDropDownHeightProperty : WinUI.DependencyProperty! {
        get { try! _IComboBoxStatics.get_MaxDropDownHeightPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.placeholderforegroundproperty)
    public class var placeholderForegroundProperty : WinUI.DependencyProperty! {
        get { try! _IComboBoxStatics.get_PlaceholderForegroundPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.placeholdertextproperty)
    public class var placeholderTextProperty : WinUI.DependencyProperty! {
        get { try! _IComboBoxStatics.get_PlaceholderTextPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.selectionchangedtriggerproperty)
    public class var selectionChangedTriggerProperty : WinUI.DependencyProperty! {
        get { try! _IComboBoxStatics.get_SelectionChangedTriggerPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.textboxstyleproperty)
    public class var textBoxStyleProperty : WinUI.DependencyProperty! {
        get { try! _IComboBoxStatics.get_TextBoxStylePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.textproperty)
    public class var textProperty : WinUI.DependencyProperty! {
        get { try! _IComboBoxStatics.get_TextPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.description)
    public var description : Any! {
        get { try! _default.get_DescriptionImpl() }
        set { try! _default.put_DescriptionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.header)
    public var header : Any! {
        get { try! _default.get_HeaderImpl() }
        set { try! _default.put_HeaderImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.headertemplate)
    public var headerTemplate : WinUI.DataTemplate! {
        get { try! _default.get_HeaderTemplateImpl() }
        set { try! _default.put_HeaderTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.isdropdownopen)
    public var isDropDownOpen : Bool {
        get { try! _default.get_IsDropDownOpenImpl() }
        set { try! _default.put_IsDropDownOpenImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.iseditable)
    public var isEditable : Bool {
        get { try! _default.get_IsEditableImpl() }
        set { try! _default.put_IsEditableImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.isselectionboxhighlighted)
    public var isSelectionBoxHighlighted : Bool {
        get { try! _default.get_IsSelectionBoxHighlightedImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.istextsearchenabled)
    public var isTextSearchEnabled : Bool {
        get { try! _default.get_IsTextSearchEnabledImpl() }
        set { try! _default.put_IsTextSearchEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.lightdismissoverlaymode)
    public var lightDismissOverlayMode : LightDismissOverlayMode {
        get { try! _default.get_LightDismissOverlayModeImpl() }
        set { try! _default.put_LightDismissOverlayModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.maxdropdownheight)
    public var maxDropDownHeight : Double {
        get { try! _default.get_MaxDropDownHeightImpl() }
        set { try! _default.put_MaxDropDownHeightImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.placeholderforeground)
    public var placeholderForeground : WinUI.Brush! {
        get { try! _default.get_PlaceholderForegroundImpl() }
        set { try! _default.put_PlaceholderForegroundImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.placeholdertext)
    public var placeholderText : String {
        get { try! _default.get_PlaceholderTextImpl() }
        set { try! _default.put_PlaceholderTextImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.selectionboxitem)
    public var selectionBoxItem : Any! {
        get { try! _default.get_SelectionBoxItemImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.selectionboxitemtemplate)
    public var selectionBoxItemTemplate : WinUI.DataTemplate! {
        get { try! _default.get_SelectionBoxItemTemplateImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.selectionchangedtrigger)
    public var selectionChangedTrigger : ComboBoxSelectionChangedTrigger {
        get { try! _default.get_SelectionChangedTriggerImpl() }
        set { try! _default.put_SelectionChangedTriggerImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.templatesettings)
    public var templateSettings : WinUI.ComboBoxTemplateSettings! {
        get { try! _default.get_TemplateSettingsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.text)
    public var text : String {
        get { try! _default.get_TextImpl() }
        set { try! _default.put_TextImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.textboxstyle)
    public var textBoxStyle : WinUI.Style! {
        get { try! _default.get_TextBoxStyleImpl() }
        set { try! _default.put_TextBoxStyleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.dropdownclosed)
    public lazy var dropDownClosed : Event<EventHandler<Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_DropDownClosedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_DropDownClosedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.dropdownopened)
    public lazy var dropDownOpened : Event<EventHandler<Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_DropDownOpenedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_DropDownOpenedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.textsubmitted)
    public lazy var textSubmitted : Event<TypedEventHandler<ComboBox?, ComboBoxTextSubmittedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_TextSubmittedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_TextSubmittedImpl($0)
       }
      )
    }()

    private lazy var _IComboBoxOverrides: __ABI_Microsoft_UI_Xaml_Controls.IComboBoxOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.ondropdownclosed)
    open func onDropDownClosed(_ e: Any!) throws {
        try _IComboBoxOverrides.OnDropDownClosedImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.ondropdownopened)
    open func onDropDownOpened(_ e: Any!) throws {
        try _IComboBoxOverrides.OnDropDownOpenedImpl(e)
    }

    internal enum IComboBoxOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IComboBoxOverrides
        internal typealias Class = ComboBox
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IComboBox
        }
    }
    internal typealias Composable = IComboBoxOverrides
    deinit {
        _default = nil
        _IComboBoxOverrides = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.comboboxitem)
open class ComboBoxItem : WinUI.SelectorItem {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IComboBoxItem
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxItem
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxItem>?) -> ComboBoxItem? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IComboBoxItemFactory : __ABI_Microsoft_UI_Xaml_Controls.IComboBoxItemFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ComboBoxItem"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IComboBoxItemFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    internal enum IContentControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
        internal typealias Class = ComboBoxItem
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxItem
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IComboBoxItem
        }
    }
    internal typealias Composable = IContentControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.comboboxtextsubmittedeventargs)
public final class ComboBoxTextSubmittedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IComboBoxTextSubmittedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxTextSubmittedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxTextSubmittedEventArgs>?) -> ComboBoxTextSubmittedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.comboboxtextsubmittedeventargs.handled)
    public var handled : Bool {
        get { try! _default.get_HandledImpl() }
        set { try! _default.put_HandledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.comboboxtextsubmittedeventargs.text)
    public var text : String {
        get { try! _default.get_TextImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.commandbar)
open class CommandBar : WinUI.AppBar {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ICommandBar
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICommandBar
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CICommandBar>?) -> CommandBar? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ICommandBarFactory : __ABI_Microsoft_UI_Xaml_Controls.ICommandBarFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.CommandBar"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._ICommandBarFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _ICommandBarStatics: __ABI_Microsoft_UI_Xaml_Controls.ICommandBarStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.CommandBar"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.commandbar.commandbaroverflowpresenterstyleproperty)
    public class var commandBarOverflowPresenterStyleProperty : WinUI.DependencyProperty! {
        get { try! _ICommandBarStatics.get_CommandBarOverflowPresenterStylePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.commandbar.defaultlabelpositionproperty)
    public class var defaultLabelPositionProperty : WinUI.DependencyProperty! {
        get { try! _ICommandBarStatics.get_DefaultLabelPositionPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.commandbar.isdynamicoverflowenabledproperty)
    public class var isDynamicOverflowEnabledProperty : WinUI.DependencyProperty! {
        get { try! _ICommandBarStatics.get_IsDynamicOverflowEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.commandbar.overflowbuttonvisibilityproperty)
    public class var overflowButtonVisibilityProperty : WinUI.DependencyProperty! {
        get { try! _ICommandBarStatics.get_OverflowButtonVisibilityPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.commandbar.primarycommandsproperty)
    public class var primaryCommandsProperty : WinUI.DependencyProperty! {
        get { try! _ICommandBarStatics.get_PrimaryCommandsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.commandbar.secondarycommandsproperty)
    public class var secondaryCommandsProperty : WinUI.DependencyProperty! {
        get { try! _ICommandBarStatics.get_SecondaryCommandsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.commandbar.commandbaroverflowpresenterstyle)
    public var commandBarOverflowPresenterStyle : WinUI.Style! {
        get { try! _default.get_CommandBarOverflowPresenterStyleImpl() }
        set { try! _default.put_CommandBarOverflowPresenterStyleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.commandbar.commandbartemplatesettings)
    public var commandBarTemplateSettings : WinUI.CommandBarTemplateSettings! {
        get { try! _default.get_CommandBarTemplateSettingsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.commandbar.defaultlabelposition)
    public var defaultLabelPosition : CommandBarDefaultLabelPosition {
        get { try! _default.get_DefaultLabelPositionImpl() }
        set { try! _default.put_DefaultLabelPositionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.commandbar.isdynamicoverflowenabled)
    public var isDynamicOverflowEnabled : Bool {
        get { try! _default.get_IsDynamicOverflowEnabledImpl() }
        set { try! _default.put_IsDynamicOverflowEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.commandbar.overflowbuttonvisibility)
    public var overflowButtonVisibility : CommandBarOverflowButtonVisibility {
        get { try! _default.get_OverflowButtonVisibilityImpl() }
        set { try! _default.put_OverflowButtonVisibilityImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.commandbar.primarycommands)
    public var primaryCommands : WindowsFoundation.AnyIObservableVector<AnyICommandBarElement?>! {
        get { try! _default.get_PrimaryCommandsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.commandbar.secondarycommands)
    public var secondaryCommands : WindowsFoundation.AnyIObservableVector<AnyICommandBarElement?>! {
        get { try! _default.get_SecondaryCommandsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.commandbar.dynamicoverflowitemschanging)
    public lazy var dynamicOverflowItemsChanging : Event<TypedEventHandler<CommandBar?, DynamicOverflowItemsChangingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_DynamicOverflowItemsChangingImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_DynamicOverflowItemsChangingImpl($0)
       }
      )
    }()

    internal enum IAppBarOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAppBarOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IAppBarOverrides
        internal typealias Class = CommandBar
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICommandBar
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ICommandBar
        }
    }
    internal typealias Composable = IAppBarOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.commandbarflyout)
open class CommandBarFlyout : WinUI.FlyoutBase {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ICommandBarFlyout
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICommandBarFlyout
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CICommandBarFlyout>?) -> CommandBarFlyout? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ICommandBarFlyoutFactory : __ABI_Microsoft_UI_Xaml_Controls.ICommandBarFlyoutFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.CommandBarFlyout"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._ICommandBarFlyoutFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.commandbarflyout.primarycommands)
    public var primaryCommands : WindowsFoundation.AnyIObservableVector<AnyICommandBarElement?>! {
        get { try! _default.get_PrimaryCommandsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.commandbarflyout.secondarycommands)
    public var secondaryCommands : WindowsFoundation.AnyIObservableVector<AnyICommandBarElement?>! {
        get { try! _default.get_SecondaryCommandsImpl() }
    }

    private lazy var _ICommandBarFlyout2: __ABI_Microsoft_UI_Xaml_Controls.ICommandBarFlyout2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.commandbarflyout.alwaysexpanded)
    public var alwaysExpanded : Bool {
        get { try! _ICommandBarFlyout2.get_AlwaysExpandedImpl() }
        set { try! _ICommandBarFlyout2.put_AlwaysExpandedImpl(newValue) }
    }

    internal enum IFlyoutBaseOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IFlyoutBaseOverrides
        internal typealias Class = CommandBarFlyout
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICommandBarFlyout
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ICommandBarFlyout
        }
    }
    internal typealias Composable = IFlyoutBaseOverrides
    deinit {
        _default = nil
        _ICommandBarFlyout2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.commandbaroverflowpresenter)
open class CommandBarOverflowPresenter : WinUI.ItemsControl {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ICommandBarOverflowPresenter
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICommandBarOverflowPresenter
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CICommandBarOverflowPresenter>?) -> CommandBarOverflowPresenter? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ICommandBarOverflowPresenterFactory : __ABI_Microsoft_UI_Xaml_Controls.ICommandBarOverflowPresenterFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.CommandBarOverflowPresenter"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._ICommandBarOverflowPresenterFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    internal enum IItemsControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsControlOverrides
        internal typealias Class = CommandBarOverflowPresenter
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICommandBarOverflowPresenter
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ICommandBarOverflowPresenter
        }
    }
    internal typealias Composable = IItemsControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.containercontentchangingeventargs)
public final class ContainerContentChangingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContainerContentChangingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContainerContentChangingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContainerContentChangingEventArgs>?) -> ContainerContentChangingEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public init() {
        super.init(try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.ContainerContentChangingEventArgs")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.containercontentchangingeventargs.registerupdatecallback)
    public func registerUpdateCallback(_ callback: TypedEventHandler<ListViewBase?, ContainerContentChangingEventArgs?>!) throws {
        try _default.RegisterUpdateCallbackImpl(callback)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.containercontentchangingeventargs.registerupdatecallback)
    public func registerUpdateCallback(_ callbackPhase: UInt32, _ callback: TypedEventHandler<ListViewBase?, ContainerContentChangingEventArgs?>!) throws {
        try _default.RegisterUpdateCallbackWithPhaseImpl(callbackPhase, callback)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.containercontentchangingeventargs.handled)
    public var handled : Bool {
        get { try! _default.get_HandledImpl() }
        set { try! _default.put_HandledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.containercontentchangingeventargs.inrecyclequeue)
    public var inRecycleQueue : Bool {
        get { try! _default.get_InRecycleQueueImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.containercontentchangingeventargs.item)
    public var item : Any! {
        get { try! _default.get_ItemImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.containercontentchangingeventargs.itemcontainer)
    public var itemContainer : WinUI.SelectorItem! {
        get { try! _default.get_ItemContainerImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.containercontentchangingeventargs.itemindex)
    public var itemIndex : Int32 {
        get { try! _default.get_ItemIndexImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.containercontentchangingeventargs.phase)
    public var phase : UInt32 {
        get { try! _default.get_PhaseImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentcontrol)
open class ContentControl : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControl
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControl
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControl>?) -> ContentControl? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverridesWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IContentControlFactory : __ABI_Microsoft_UI_Xaml_Controls.IContentControlFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ContentControl"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IContentControlFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IContentControlStatics: __ABI_Microsoft_UI_Xaml_Controls.IContentControlStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ContentControl"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentcontrol.contentproperty)
    public class var contentProperty : WinUI.DependencyProperty! {
        get { try! _IContentControlStatics.get_ContentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentcontrol.contenttemplateproperty)
    public class var contentTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IContentControlStatics.get_ContentTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentcontrol.contenttemplateselectorproperty)
    public class var contentTemplateSelectorProperty : WinUI.DependencyProperty! {
        get { try! _IContentControlStatics.get_ContentTemplateSelectorPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentcontrol.contenttransitionsproperty)
    public class var contentTransitionsProperty : WinUI.DependencyProperty! {
        get { try! _IContentControlStatics.get_ContentTransitionsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentcontrol.content)
    public var content : Any! {
        get { try! _default.get_ContentImpl() }
        set { try! _default.put_ContentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentcontrol.contenttemplate)
    public var contentTemplate : WinUI.DataTemplate! {
        get { try! _default.get_ContentTemplateImpl() }
        set { try! _default.put_ContentTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentcontrol.contenttemplateroot)
    public var contentTemplateRoot : WinUI.UIElement! {
        get { try! _default.get_ContentTemplateRootImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentcontrol.contenttemplateselector)
    public var contentTemplateSelector : DataTemplateSelector! {
        get { try! _default.get_ContentTemplateSelectorImpl() }
        set { try! _default.put_ContentTemplateSelectorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentcontrol.contenttransitions)
    public var contentTransitions : WinUI.TransitionCollection! {
        get { try! _default.get_ContentTransitionsImpl() }
        set { try! _default.put_ContentTransitionsImpl(newValue) }
    }

    private lazy var _IContentControlOverrides: __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentcontrol.oncontentchanged)
    open func onContentChanged(_ oldContent: Any!, _ newContent: Any!) throws {
        try _IContentControlOverrides.OnContentChangedImpl(oldContent, newContent)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentcontrol.oncontenttemplatechanged)
    open func onContentTemplateChanged(_ oldContentTemplate: WinUI.DataTemplate!, _ newContentTemplate: WinUI.DataTemplate!) throws {
        try _IContentControlOverrides.OnContentTemplateChangedImpl(oldContentTemplate, newContentTemplate)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentcontrol.oncontenttemplateselectorchanged)
    open func onContentTemplateSelectorChanged(_ oldContentTemplateSelector: DataTemplateSelector!, _ newContentTemplateSelector: DataTemplateSelector!) throws {
        try _IContentControlOverrides.OnContentTemplateSelectorChangedImpl(oldContentTemplateSelector, newContentTemplateSelector)
    }

    internal enum IContentControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
        internal typealias Class = ContentControl
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControl
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControl
        }
    }
    internal typealias Composable = IContentControlOverrides
    deinit {
        _default = nil
        _IContentControlOverrides = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog)
open class ContentDialog : WinUI.ContentControl {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentDialog
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog>?) -> ContentDialog? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IContentDialogFactory : __ABI_Microsoft_UI_Xaml_Controls.IContentDialogFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ContentDialog"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IContentDialogFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IContentDialogStatics: __ABI_Microsoft_UI_Xaml_Controls.IContentDialogStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ContentDialog"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.closebuttoncommandparameterproperty)
    public class var closeButtonCommandParameterProperty : WinUI.DependencyProperty! {
        get { try! _IContentDialogStatics.get_CloseButtonCommandParameterPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.closebuttoncommandproperty)
    public class var closeButtonCommandProperty : WinUI.DependencyProperty! {
        get { try! _IContentDialogStatics.get_CloseButtonCommandPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.closebuttonstyleproperty)
    public class var closeButtonStyleProperty : WinUI.DependencyProperty! {
        get { try! _IContentDialogStatics.get_CloseButtonStylePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.closebuttontextproperty)
    public class var closeButtonTextProperty : WinUI.DependencyProperty! {
        get { try! _IContentDialogStatics.get_CloseButtonTextPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.defaultbuttonproperty)
    public class var defaultButtonProperty : WinUI.DependencyProperty! {
        get { try! _IContentDialogStatics.get_DefaultButtonPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.fullsizedesiredproperty)
    public class var fullSizeDesiredProperty : WinUI.DependencyProperty! {
        get { try! _IContentDialogStatics.get_FullSizeDesiredPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.isprimarybuttonenabledproperty)
    public class var isPrimaryButtonEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IContentDialogStatics.get_IsPrimaryButtonEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.issecondarybuttonenabledproperty)
    public class var isSecondaryButtonEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IContentDialogStatics.get_IsSecondaryButtonEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.primarybuttoncommandparameterproperty)
    public class var primaryButtonCommandParameterProperty : WinUI.DependencyProperty! {
        get { try! _IContentDialogStatics.get_PrimaryButtonCommandParameterPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.primarybuttoncommandproperty)
    public class var primaryButtonCommandProperty : WinUI.DependencyProperty! {
        get { try! _IContentDialogStatics.get_PrimaryButtonCommandPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.primarybuttonstyleproperty)
    public class var primaryButtonStyleProperty : WinUI.DependencyProperty! {
        get { try! _IContentDialogStatics.get_PrimaryButtonStylePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.primarybuttontextproperty)
    public class var primaryButtonTextProperty : WinUI.DependencyProperty! {
        get { try! _IContentDialogStatics.get_PrimaryButtonTextPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.secondarybuttoncommandparameterproperty)
    public class var secondaryButtonCommandParameterProperty : WinUI.DependencyProperty! {
        get { try! _IContentDialogStatics.get_SecondaryButtonCommandParameterPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.secondarybuttoncommandproperty)
    public class var secondaryButtonCommandProperty : WinUI.DependencyProperty! {
        get { try! _IContentDialogStatics.get_SecondaryButtonCommandPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.secondarybuttonstyleproperty)
    public class var secondaryButtonStyleProperty : WinUI.DependencyProperty! {
        get { try! _IContentDialogStatics.get_SecondaryButtonStylePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.secondarybuttontextproperty)
    public class var secondaryButtonTextProperty : WinUI.DependencyProperty! {
        get { try! _IContentDialogStatics.get_SecondaryButtonTextPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.titleproperty)
    public class var titleProperty : WinUI.DependencyProperty! {
        get { try! _IContentDialogStatics.get_TitlePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.titletemplateproperty)
    public class var titleTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IContentDialogStatics.get_TitleTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.hide)
    public func hide() throws {
        try _default.HideImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.showasync)
    public func showAsync() throws -> WindowsFoundation.AnyIAsyncOperation<ContentDialogResult>! {
        try _default.ShowAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.showasync)
    public func showAsync(_ placement: ContentDialogPlacement) throws -> WindowsFoundation.AnyIAsyncOperation<ContentDialogResult>! {
        try _default.ShowAsyncWithPlacementImpl(placement)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.closebuttoncommand)
    public var closeButtonCommand : WinUI.AnyICommand! {
        get { try! _default.get_CloseButtonCommandImpl() }
        set { try! _default.put_CloseButtonCommandImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.closebuttoncommandparameter)
    public var closeButtonCommandParameter : Any! {
        get { try! _default.get_CloseButtonCommandParameterImpl() }
        set { try! _default.put_CloseButtonCommandParameterImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.closebuttonstyle)
    public var closeButtonStyle : WinUI.Style! {
        get { try! _default.get_CloseButtonStyleImpl() }
        set { try! _default.put_CloseButtonStyleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.closebuttontext)
    public var closeButtonText : String {
        get { try! _default.get_CloseButtonTextImpl() }
        set { try! _default.put_CloseButtonTextImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.defaultbutton)
    public var defaultButton : ContentDialogButton {
        get { try! _default.get_DefaultButtonImpl() }
        set { try! _default.put_DefaultButtonImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.fullsizedesired)
    public var fullSizeDesired : Bool {
        get { try! _default.get_FullSizeDesiredImpl() }
        set { try! _default.put_FullSizeDesiredImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.isprimarybuttonenabled)
    public var isPrimaryButtonEnabled : Bool {
        get { try! _default.get_IsPrimaryButtonEnabledImpl() }
        set { try! _default.put_IsPrimaryButtonEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.issecondarybuttonenabled)
    public var isSecondaryButtonEnabled : Bool {
        get { try! _default.get_IsSecondaryButtonEnabledImpl() }
        set { try! _default.put_IsSecondaryButtonEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.primarybuttoncommand)
    public var primaryButtonCommand : WinUI.AnyICommand! {
        get { try! _default.get_PrimaryButtonCommandImpl() }
        set { try! _default.put_PrimaryButtonCommandImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.primarybuttoncommandparameter)
    public var primaryButtonCommandParameter : Any! {
        get { try! _default.get_PrimaryButtonCommandParameterImpl() }
        set { try! _default.put_PrimaryButtonCommandParameterImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.primarybuttonstyle)
    public var primaryButtonStyle : WinUI.Style! {
        get { try! _default.get_PrimaryButtonStyleImpl() }
        set { try! _default.put_PrimaryButtonStyleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.primarybuttontext)
    public var primaryButtonText : String {
        get { try! _default.get_PrimaryButtonTextImpl() }
        set { try! _default.put_PrimaryButtonTextImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.secondarybuttoncommand)
    public var secondaryButtonCommand : WinUI.AnyICommand! {
        get { try! _default.get_SecondaryButtonCommandImpl() }
        set { try! _default.put_SecondaryButtonCommandImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.secondarybuttoncommandparameter)
    public var secondaryButtonCommandParameter : Any! {
        get { try! _default.get_SecondaryButtonCommandParameterImpl() }
        set { try! _default.put_SecondaryButtonCommandParameterImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.secondarybuttonstyle)
    public var secondaryButtonStyle : WinUI.Style! {
        get { try! _default.get_SecondaryButtonStyleImpl() }
        set { try! _default.put_SecondaryButtonStyleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.secondarybuttontext)
    public var secondaryButtonText : String {
        get { try! _default.get_SecondaryButtonTextImpl() }
        set { try! _default.put_SecondaryButtonTextImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.title)
    public var title : Any! {
        get { try! _default.get_TitleImpl() }
        set { try! _default.put_TitleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.titletemplate)
    public var titleTemplate : WinUI.DataTemplate! {
        get { try! _default.get_TitleTemplateImpl() }
        set { try! _default.put_TitleTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.closebuttonclick)
    public lazy var closeButtonClick : Event<TypedEventHandler<ContentDialog?, ContentDialogButtonClickEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_CloseButtonClickImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_CloseButtonClickImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.closed)
    public lazy var closed : Event<TypedEventHandler<ContentDialog?, ContentDialogClosedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ClosedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ClosedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.closing)
    public lazy var closing : Event<TypedEventHandler<ContentDialog?, ContentDialogClosingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ClosingImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ClosingImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.opened)
    public lazy var opened : Event<TypedEventHandler<ContentDialog?, ContentDialogOpenedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_OpenedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_OpenedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.primarybuttonclick)
    public lazy var primaryButtonClick : Event<TypedEventHandler<ContentDialog?, ContentDialogButtonClickEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PrimaryButtonClickImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PrimaryButtonClickImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.secondarybuttonclick)
    public lazy var secondaryButtonClick : Event<TypedEventHandler<ContentDialog?, ContentDialogButtonClickEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_SecondaryButtonClickImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_SecondaryButtonClickImpl($0)
       }
      )
    }()

    internal enum IContentControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
        internal typealias Class = ContentDialog
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentDialog
        }
    }
    internal typealias Composable = IContentControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialogbuttonclickdeferral)
public final class ContentDialogButtonClickDeferral : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentDialogButtonClickDeferral
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogButtonClickDeferral
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogButtonClickDeferral>?) -> ContentDialogButtonClickDeferral? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialogbuttonclickdeferral.complete)
    public func complete() throws {
        try _default.CompleteImpl()
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialogbuttonclickeventargs)
public final class ContentDialogButtonClickEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentDialogButtonClickEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogButtonClickEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogButtonClickEventArgs>?) -> ContentDialogButtonClickEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialogbuttonclickeventargs.getdeferral)
    public func getDeferral() throws -> ContentDialogButtonClickDeferral! {
        try _default.GetDeferralImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialogbuttonclickeventargs.cancel)
    public var cancel : Bool {
        get { try! _default.get_CancelImpl() }
        set { try! _default.put_CancelImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialogclosedeventargs)
public final class ContentDialogClosedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentDialogClosedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogClosedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogClosedEventArgs>?) -> ContentDialogClosedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialogclosedeventargs.result)
    public var result : ContentDialogResult {
        get { try! _default.get_ResultImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialogclosingdeferral)
public final class ContentDialogClosingDeferral : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentDialogClosingDeferral
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogClosingDeferral
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogClosingDeferral>?) -> ContentDialogClosingDeferral? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialogclosingdeferral.complete)
    public func complete() throws {
        try _default.CompleteImpl()
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialogclosingeventargs)
public final class ContentDialogClosingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentDialogClosingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogClosingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogClosingEventArgs>?) -> ContentDialogClosingEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialogclosingeventargs.getdeferral)
    public func getDeferral() throws -> ContentDialogClosingDeferral! {
        try _default.GetDeferralImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialogclosingeventargs.cancel)
    public var cancel : Bool {
        get { try! _default.get_CancelImpl() }
        set { try! _default.put_CancelImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialogclosingeventargs.result)
    public var result : ContentDialogResult {
        get { try! _default.get_ResultImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialogopenedeventargs)
public final class ContentDialogOpenedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentDialogOpenedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogOpenedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogOpenedEventArgs>?) -> ContentDialogOpenedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter)
open class ContentPresenter : WinUI.FrameworkElement {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentPresenter
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter>?) -> ContentPresenter? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.IContentPresenterOverridesWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.IContentPresenterOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IContentPresenterFactory : __ABI_Microsoft_UI_Xaml_Controls.IContentPresenterFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ContentPresenter"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IContentPresenterFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IContentPresenterStatics: __ABI_Microsoft_UI_Xaml_Controls.IContentPresenterStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ContentPresenter"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.backgroundproperty)
    public class var backgroundProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_BackgroundPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.backgroundsizingproperty)
    public class var backgroundSizingProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_BackgroundSizingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.borderbrushproperty)
    public class var borderBrushProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_BorderBrushPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.borderthicknessproperty)
    public class var borderThicknessProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_BorderThicknessPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.characterspacingproperty)
    public class var characterSpacingProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_CharacterSpacingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.contentproperty)
    public class var contentProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_ContentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.contenttemplateproperty)
    public class var contentTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_ContentTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.contenttemplateselectorproperty)
    public class var contentTemplateSelectorProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_ContentTemplateSelectorPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.contenttransitionsproperty)
    public class var contentTransitionsProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_ContentTransitionsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.cornerradiusproperty)
    public class var cornerRadiusProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_CornerRadiusPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.fontfamilyproperty)
    public class var fontFamilyProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_FontFamilyPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.fontsizeproperty)
    public class var fontSizeProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_FontSizePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.fontstretchproperty)
    public class var fontStretchProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_FontStretchPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.fontstyleproperty)
    public class var fontStyleProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_FontStylePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.fontweightproperty)
    public class var fontWeightProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_FontWeightPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.foregroundproperty)
    public class var foregroundProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_ForegroundPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.horizontalcontentalignmentproperty)
    public class var horizontalContentAlignmentProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_HorizontalContentAlignmentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.istextscalefactorenabledproperty)
    public class var isTextScaleFactorEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_IsTextScaleFactorEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.lineheightproperty)
    public class var lineHeightProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_LineHeightPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.linestackingstrategyproperty)
    public class var lineStackingStrategyProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_LineStackingStrategyPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.maxlinesproperty)
    public class var maxLinesProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_MaxLinesPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.opticalmarginalignmentproperty)
    public class var opticalMarginAlignmentProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_OpticalMarginAlignmentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.paddingproperty)
    public class var paddingProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_PaddingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.textlineboundsproperty)
    public class var textLineBoundsProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_TextLineBoundsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.textwrappingproperty)
    public class var textWrappingProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_TextWrappingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.verticalcontentalignmentproperty)
    public class var verticalContentAlignmentProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_VerticalContentAlignmentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.background)
    public var background : WinUI.Brush! {
        get { try! _default.get_BackgroundImpl() }
        set { try! _default.put_BackgroundImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.backgroundsizing)
    public var backgroundSizing : BackgroundSizing {
        get { try! _default.get_BackgroundSizingImpl() }
        set { try! _default.put_BackgroundSizingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.backgroundtransition)
    public var backgroundTransition : WinUI.BrushTransition! {
        get { try! _default.get_BackgroundTransitionImpl() }
        set { try! _default.put_BackgroundTransitionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.borderbrush)
    public var borderBrush : WinUI.Brush! {
        get { try! _default.get_BorderBrushImpl() }
        set { try! _default.put_BorderBrushImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.borderthickness)
    public var borderThickness : WinUI.Thickness {
        get { try! _default.get_BorderThicknessImpl() }
        set { try! _default.put_BorderThicknessImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.characterspacing)
    public var characterSpacing : Int32 {
        get { try! _default.get_CharacterSpacingImpl() }
        set { try! _default.put_CharacterSpacingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.content)
    public var content : Any! {
        get { try! _default.get_ContentImpl() }
        set { try! _default.put_ContentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.contenttemplate)
    public var contentTemplate : WinUI.DataTemplate! {
        get { try! _default.get_ContentTemplateImpl() }
        set { try! _default.put_ContentTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.contenttemplateselector)
    public var contentTemplateSelector : DataTemplateSelector! {
        get { try! _default.get_ContentTemplateSelectorImpl() }
        set { try! _default.put_ContentTemplateSelectorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.contenttransitions)
    public var contentTransitions : WinUI.TransitionCollection! {
        get { try! _default.get_ContentTransitionsImpl() }
        set { try! _default.put_ContentTransitionsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.cornerradius)
    public var cornerRadius : WinUI.CornerRadius {
        get { try! _default.get_CornerRadiusImpl() }
        set { try! _default.put_CornerRadiusImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.fontfamily)
    public var fontFamily : WinUI.FontFamily! {
        get { try! _default.get_FontFamilyImpl() }
        set { try! _default.put_FontFamilyImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.fontsize)
    public var fontSize : Double {
        get { try! _default.get_FontSizeImpl() }
        set { try! _default.put_FontSizeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.fontstretch)
    public var fontStretch : UWP.FontStretch {
        get { try! _default.get_FontStretchImpl() }
        set { try! _default.put_FontStretchImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.fontstyle)
    public var fontStyle : UWP.FontStyle {
        get { try! _default.get_FontStyleImpl() }
        set { try! _default.put_FontStyleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.fontweight)
    public var fontWeight : UWP.FontWeight {
        get { try! _default.get_FontWeightImpl() }
        set { try! _default.put_FontWeightImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.foreground)
    public var foreground : WinUI.Brush! {
        get { try! _default.get_ForegroundImpl() }
        set { try! _default.put_ForegroundImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.horizontalcontentalignment)
    public var horizontalContentAlignment : WinUI.HorizontalAlignment {
        get { try! _default.get_HorizontalContentAlignmentImpl() }
        set { try! _default.put_HorizontalContentAlignmentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.istextscalefactorenabled)
    public var isTextScaleFactorEnabled : Bool {
        get { try! _default.get_IsTextScaleFactorEnabledImpl() }
        set { try! _default.put_IsTextScaleFactorEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.lineheight)
    public var lineHeight : Double {
        get { try! _default.get_LineHeightImpl() }
        set { try! _default.put_LineHeightImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.linestackingstrategy)
    public var lineStackingStrategy : WinUI.LineStackingStrategy {
        get { try! _default.get_LineStackingStrategyImpl() }
        set { try! _default.put_LineStackingStrategyImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.maxlines)
    public var maxLines : Int32 {
        get { try! _default.get_MaxLinesImpl() }
        set { try! _default.put_MaxLinesImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.opticalmarginalignment)
    public var opticalMarginAlignment : WinUI.OpticalMarginAlignment {
        get { try! _default.get_OpticalMarginAlignmentImpl() }
        set { try! _default.put_OpticalMarginAlignmentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.padding)
    public var padding : WinUI.Thickness {
        get { try! _default.get_PaddingImpl() }
        set { try! _default.put_PaddingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.textlinebounds)
    public var textLineBounds : WinUI.TextLineBounds {
        get { try! _default.get_TextLineBoundsImpl() }
        set { try! _default.put_TextLineBoundsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.textwrapping)
    public var textWrapping : WinUI.TextWrapping {
        get { try! _default.get_TextWrappingImpl() }
        set { try! _default.put_TextWrappingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.verticalcontentalignment)
    public var verticalContentAlignment : WinUI.VerticalAlignment {
        get { try! _default.get_VerticalContentAlignmentImpl() }
        set { try! _default.put_VerticalContentAlignmentImpl(newValue) }
    }

    private lazy var _IContentPresenterOverrides: __ABI_Microsoft_UI_Xaml_Controls.IContentPresenterOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.oncontenttemplatechanged)
    open func onContentTemplateChanged(_ oldContentTemplate: WinUI.DataTemplate!, _ newContentTemplate: WinUI.DataTemplate!) throws {
        try _IContentPresenterOverrides.OnContentTemplateChangedImpl(oldContentTemplate, newContentTemplate)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.oncontenttemplateselectorchanged)
    open func onContentTemplateSelectorChanged(_ oldContentTemplateSelector: DataTemplateSelector!, _ newContentTemplateSelector: DataTemplateSelector!) throws {
        try _IContentPresenterOverrides.OnContentTemplateSelectorChangedImpl(oldContentTemplateSelector, newContentTemplateSelector)
    }

    internal enum IContentPresenterOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentPresenterOverrides
        internal typealias Class = ContentPresenter
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentPresenter
        }
    }
    internal typealias Composable = IContentPresenterOverrides
    deinit {
        _default = nil
        _IContentPresenterOverrides = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contextmenueventargs)
public final class ContextMenuEventArgs : WinUI.RoutedEventArgs {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContextMenuEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContextMenuEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContextMenuEventArgs>?) -> ContextMenuEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contextmenueventargs.cursorleft)
    public var cursorLeft : Double {
        get { try! _default.get_CursorLeftImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contextmenueventargs.cursortop)
    public var cursorTop : Double {
        get { try! _default.get_CursorTopImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contextmenueventargs.handled)
    public var handled : Bool {
        get { try! _default.get_HandledImpl() }
        set { try! _default.put_HandledImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control)
open class Control : WinUI.FrameworkElement {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControl
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl>?) -> Control? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.IControlOverridesWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.IControlOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IControlFactory : __ABI_Microsoft_UI_Xaml_Controls.IControlFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.Control"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IControlFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IControlStatics: __ABI_Microsoft_UI_Xaml_Controls.IControlStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.Control"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.getistemplatefocustarget)
    public class func getIsTemplateFocusTarget(_ element: WinUI.FrameworkElement!) -> Bool {
        return try! _IControlStatics.GetIsTemplateFocusTargetImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.setistemplatefocustarget)
    public class func setIsTemplateFocusTarget(_ element: WinUI.FrameworkElement!, _ value: Bool) {
        try! _IControlStatics.SetIsTemplateFocusTargetImpl(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.getistemplatekeytiptarget)
    public class func getIsTemplateKeyTipTarget(_ element: WinUI.DependencyObject!) -> Bool {
        return try! _IControlStatics.GetIsTemplateKeyTipTargetImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.setistemplatekeytiptarget)
    public class func setIsTemplateKeyTipTarget(_ element: WinUI.DependencyObject!, _ value: Bool) {
        try! _IControlStatics.SetIsTemplateKeyTipTargetImpl(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.backgroundproperty)
    public class var backgroundProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_BackgroundPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.backgroundsizingproperty)
    public class var backgroundSizingProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_BackgroundSizingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.borderbrushproperty)
    public class var borderBrushProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_BorderBrushPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.borderthicknessproperty)
    public class var borderThicknessProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_BorderThicknessPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.characterspacingproperty)
    public class var characterSpacingProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_CharacterSpacingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.cornerradiusproperty)
    public class var cornerRadiusProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_CornerRadiusPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.defaultstylekeyproperty)
    public class var defaultStyleKeyProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_DefaultStyleKeyPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.defaultstyleresourceuriproperty)
    public class var defaultStyleResourceUriProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_DefaultStyleResourceUriPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.elementsoundmodeproperty)
    public class var elementSoundModeProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_ElementSoundModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.fontfamilyproperty)
    public class var fontFamilyProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_FontFamilyPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.fontsizeproperty)
    public class var fontSizeProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_FontSizePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.fontstretchproperty)
    public class var fontStretchProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_FontStretchPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.fontstyleproperty)
    public class var fontStyleProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_FontStylePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.fontweightproperty)
    public class var fontWeightProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_FontWeightPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.foregroundproperty)
    public class var foregroundProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_ForegroundPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.horizontalcontentalignmentproperty)
    public class var horizontalContentAlignmentProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_HorizontalContentAlignmentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.isenabledproperty)
    public class var isEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_IsEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.isfocusengagedproperty)
    public class var isFocusEngagedProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_IsFocusEngagedPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.isfocusengagementenabledproperty)
    public class var isFocusEngagementEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_IsFocusEngagementEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.istemplatefocustargetproperty)
    public class var isTemplateFocusTargetProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_IsTemplateFocusTargetPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.istemplatekeytiptargetproperty)
    public class var isTemplateKeyTipTargetProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_IsTemplateKeyTipTargetPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.istextscalefactorenabledproperty)
    public class var isTextScaleFactorEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_IsTextScaleFactorEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.paddingproperty)
    public class var paddingProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_PaddingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.requirespointerproperty)
    public class var requiresPointerProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_RequiresPointerPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.tabnavigationproperty)
    public class var tabNavigationProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_TabNavigationPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.templateproperty)
    public class var templateProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_TemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.verticalcontentalignmentproperty)
    public class var verticalContentAlignmentProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_VerticalContentAlignmentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.removefocusengagement)
    public func removeFocusEngagement() throws {
        try _default.RemoveFocusEngagementImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.applytemplate)
    public func applyTemplate() throws -> Bool {
        try _default.ApplyTemplateImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.background)
    public var background : WinUI.Brush! {
        get { try! _default.get_BackgroundImpl() }
        set { try! _default.put_BackgroundImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.backgroundsizing)
    public var backgroundSizing : BackgroundSizing {
        get { try! _default.get_BackgroundSizingImpl() }
        set { try! _default.put_BackgroundSizingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.borderbrush)
    public var borderBrush : WinUI.Brush! {
        get { try! _default.get_BorderBrushImpl() }
        set { try! _default.put_BorderBrushImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.borderthickness)
    public var borderThickness : WinUI.Thickness {
        get { try! _default.get_BorderThicknessImpl() }
        set { try! _default.put_BorderThicknessImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.characterspacing)
    public var characterSpacing : Int32 {
        get { try! _default.get_CharacterSpacingImpl() }
        set { try! _default.put_CharacterSpacingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.cornerradius)
    public var cornerRadius : WinUI.CornerRadius {
        get { try! _default.get_CornerRadiusImpl() }
        set { try! _default.put_CornerRadiusImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.defaultstyleresourceuri)
    public var defaultStyleResourceUri : WindowsFoundation.Uri! {
        get { try! _default.get_DefaultStyleResourceUriImpl() }
        set { try! _default.put_DefaultStyleResourceUriImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.elementsoundmode)
    public var elementSoundMode : WinUI.ElementSoundMode {
        get { try! _default.get_ElementSoundModeImpl() }
        set { try! _default.put_ElementSoundModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.fontfamily)
    public var fontFamily : WinUI.FontFamily! {
        get { try! _default.get_FontFamilyImpl() }
        set { try! _default.put_FontFamilyImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.fontsize)
    public var fontSize : Double {
        get { try! _default.get_FontSizeImpl() }
        set { try! _default.put_FontSizeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.fontstretch)
    public var fontStretch : UWP.FontStretch {
        get { try! _default.get_FontStretchImpl() }
        set { try! _default.put_FontStretchImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.fontstyle)
    public var fontStyle : UWP.FontStyle {
        get { try! _default.get_FontStyleImpl() }
        set { try! _default.put_FontStyleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.fontweight)
    public var fontWeight : UWP.FontWeight {
        get { try! _default.get_FontWeightImpl() }
        set { try! _default.put_FontWeightImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.foreground)
    public var foreground : WinUI.Brush! {
        get { try! _default.get_ForegroundImpl() }
        set { try! _default.put_ForegroundImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.horizontalcontentalignment)
    public var horizontalContentAlignment : WinUI.HorizontalAlignment {
        get { try! _default.get_HorizontalContentAlignmentImpl() }
        set { try! _default.put_HorizontalContentAlignmentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.isenabled)
    public var isEnabled : Bool {
        get { try! _default.get_IsEnabledImpl() }
        set { try! _default.put_IsEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.isfocusengaged)
    public var isFocusEngaged : Bool {
        get { try! _default.get_IsFocusEngagedImpl() }
        set { try! _default.put_IsFocusEngagedImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.isfocusengagementenabled)
    public var isFocusEngagementEnabled : Bool {
        get { try! _default.get_IsFocusEngagementEnabledImpl() }
        set { try! _default.put_IsFocusEngagementEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.istextscalefactorenabled)
    public var isTextScaleFactorEnabled : Bool {
        get { try! _default.get_IsTextScaleFactorEnabledImpl() }
        set { try! _default.put_IsTextScaleFactorEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.padding)
    public var padding : WinUI.Thickness {
        get { try! _default.get_PaddingImpl() }
        set { try! _default.put_PaddingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.requirespointer)
    public var requiresPointer : RequiresPointer {
        get { try! _default.get_RequiresPointerImpl() }
        set { try! _default.put_RequiresPointerImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.tabnavigation)
    public var tabNavigation : WinUI.KeyboardNavigationMode {
        get { try! _default.get_TabNavigationImpl() }
        set { try! _default.put_TabNavigationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.template)
    public var template : ControlTemplate! {
        get { try! _default.get_TemplateImpl() }
        set { try! _default.put_TemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.verticalcontentalignment)
    public var verticalContentAlignment : WinUI.VerticalAlignment {
        get { try! _default.get_VerticalContentAlignmentImpl() }
        set { try! _default.put_VerticalContentAlignmentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.focusdisengaged)
    public lazy var focusDisengaged : Event<TypedEventHandler<Control?, FocusDisengagedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_FocusDisengagedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_FocusDisengagedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.focusengaged)
    public lazy var focusEngaged : Event<TypedEventHandler<Control?, FocusEngagedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_FocusEngagedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_FocusEngagedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.isenabledchanged)
    public lazy var isEnabledChanged : Event<WinUI.DependencyPropertyChangedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_IsEnabledChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_IsEnabledChangedImpl($0)
       }
      )
    }()

    private lazy var _IControlProtected: __ABI_Microsoft_UI_Xaml_Controls.IControlProtected! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.gettemplatechild)
    public func getTemplateChild(_ childName: String) throws -> WinUI.DependencyObject! {
        try _IControlProtected.GetTemplateChildImpl(childName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.defaultstylekey)
    public var defaultStyleKey : Any! {
        get { try! _IControlProtected.get_DefaultStyleKeyImpl() }
        set { try! _IControlProtected.put_DefaultStyleKeyImpl(newValue) }
    }

    private lazy var _IControlOverrides: __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onpointerentered)
    open func onPointerEntered(_ e: WinUI.PointerRoutedEventArgs!) throws {
        try _IControlOverrides.OnPointerEnteredImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onpointerpressed)
    open func onPointerPressed(_ e: WinUI.PointerRoutedEventArgs!) throws {
        try _IControlOverrides.OnPointerPressedImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onpointermoved)
    open func onPointerMoved(_ e: WinUI.PointerRoutedEventArgs!) throws {
        try _IControlOverrides.OnPointerMovedImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onpointerreleased)
    open func onPointerReleased(_ e: WinUI.PointerRoutedEventArgs!) throws {
        try _IControlOverrides.OnPointerReleasedImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onpointerexited)
    open func onPointerExited(_ e: WinUI.PointerRoutedEventArgs!) throws {
        try _IControlOverrides.OnPointerExitedImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onpointercapturelost)
    open func onPointerCaptureLost(_ e: WinUI.PointerRoutedEventArgs!) throws {
        try _IControlOverrides.OnPointerCaptureLostImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onpointercanceled)
    open func onPointerCanceled(_ e: WinUI.PointerRoutedEventArgs!) throws {
        try _IControlOverrides.OnPointerCanceledImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onpointerwheelchanged)
    open func onPointerWheelChanged(_ e: WinUI.PointerRoutedEventArgs!) throws {
        try _IControlOverrides.OnPointerWheelChangedImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.ontapped)
    open func onTapped(_ e: WinUI.TappedRoutedEventArgs!) throws {
        try _IControlOverrides.OnTappedImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.ondoubletapped)
    open func onDoubleTapped(_ e: WinUI.DoubleTappedRoutedEventArgs!) throws {
        try _IControlOverrides.OnDoubleTappedImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onholding)
    open func onHolding(_ e: WinUI.HoldingRoutedEventArgs!) throws {
        try _IControlOverrides.OnHoldingImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onrighttapped)
    open func onRightTapped(_ e: WinUI.RightTappedRoutedEventArgs!) throws {
        try _IControlOverrides.OnRightTappedImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onmanipulationstarting)
    open func onManipulationStarting(_ e: WinUI.ManipulationStartingRoutedEventArgs!) throws {
        try _IControlOverrides.OnManipulationStartingImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onmanipulationinertiastarting)
    open func onManipulationInertiaStarting(_ e: WinUI.ManipulationInertiaStartingRoutedEventArgs!) throws {
        try _IControlOverrides.OnManipulationInertiaStartingImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onmanipulationstarted)
    open func onManipulationStarted(_ e: WinUI.ManipulationStartedRoutedEventArgs!) throws {
        try _IControlOverrides.OnManipulationStartedImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onmanipulationdelta)
    open func onManipulationDelta(_ e: WinUI.ManipulationDeltaRoutedEventArgs!) throws {
        try _IControlOverrides.OnManipulationDeltaImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onmanipulationcompleted)
    open func onManipulationCompleted(_ e: WinUI.ManipulationCompletedRoutedEventArgs!) throws {
        try _IControlOverrides.OnManipulationCompletedImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onkeyup)
    open func onKeyUp(_ e: WinUI.KeyRoutedEventArgs!) throws {
        try _IControlOverrides.OnKeyUpImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onkeydown)
    open func onKeyDown(_ e: WinUI.KeyRoutedEventArgs!) throws {
        try _IControlOverrides.OnKeyDownImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onpreviewkeydown)
    open func onPreviewKeyDown(_ e: WinUI.KeyRoutedEventArgs!) throws {
        try _IControlOverrides.OnPreviewKeyDownImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onpreviewkeyup)
    open func onPreviewKeyUp(_ e: WinUI.KeyRoutedEventArgs!) throws {
        try _IControlOverrides.OnPreviewKeyUpImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.ongotfocus)
    open func onGotFocus(_ e: WinUI.RoutedEventArgs!) throws {
        try _IControlOverrides.OnGotFocusImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onlostfocus)
    open func onLostFocus(_ e: WinUI.RoutedEventArgs!) throws {
        try _IControlOverrides.OnLostFocusImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.oncharacterreceived)
    open func onCharacterReceived(_ e: WinUI.CharacterReceivedRoutedEventArgs!) throws {
        try _IControlOverrides.OnCharacterReceivedImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.ondragenter)
    open func onDragEnter(_ e: WinUI.DragEventArgs!) throws {
        try _IControlOverrides.OnDragEnterImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.ondragleave)
    open func onDragLeave(_ e: WinUI.DragEventArgs!) throws {
        try _IControlOverrides.OnDragLeaveImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.ondragover)
    open func onDragOver(_ e: WinUI.DragEventArgs!) throws {
        try _IControlOverrides.OnDragOverImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.ondrop)
    open func onDrop(_ e: WinUI.DragEventArgs!) throws {
        try _IControlOverrides.OnDropImpl(e)
    }

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = Control
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControl
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = nil
        _IControlProtected = nil
        _IControlOverrides = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.controltemplate)
public final class ControlTemplate : WinUI.FrameworkTemplate {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlTemplate
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlTemplate
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlTemplate>?) -> ControlTemplate? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.ControlTemplate")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.controltemplate.targettype)
    public var targetType : WinUI.TypeName {
        get { try! _default.get_TargetTypeImpl() }
        set { try! _default.put_TargetTypeImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.corewebview2initializedeventargs)
public final class CoreWebView2InitializedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ICoreWebView2InitializedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICoreWebView2InitializedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CICoreWebView2InitializedEventArgs>?) -> CoreWebView2InitializedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.corewebview2initializedeventargs.exception)
    public var exception : HRESULT {
        get { try! _default.get_ExceptionImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datatemplateselector)
open class DataTemplateSelector : WinRTClass, WinUI.IElementFactory {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IDataTemplateSelector
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelector
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelector>?) -> DataTemplateSelector? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.IDataTemplateSelectorOverridesWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.IDataTemplateSelectorOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IDataTemplateSelectorFactory : __ABI_Microsoft_UI_Xaml_Controls.IDataTemplateSelectorFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.DataTemplateSelector"))

    override public init() {
        super.init()
        MakeComposed(composing: Self.Composable.self, self) { baseInterface, innerInterface in 
            try! Self._IDataTemplateSelectorFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datatemplateselector.selecttemplate)
    public func selectTemplate(_ item: Any!, _ container: WinUI.DependencyObject!) throws -> WinUI.DataTemplate! {
        try _default.SelectTemplateImpl(item, container)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datatemplateselector.selecttemplate)
    public func selectTemplate(_ item: Any!) throws -> WinUI.DataTemplate! {
        try _default.SelectTemplateForItemImpl(item)
    }

    private lazy var _IDataTemplateSelectorOverrides: __ABI_Microsoft_UI_Xaml_Controls.IDataTemplateSelectorOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datatemplateselector.selecttemplatecore)
    open func selectTemplateCore(_ item: Any!, _ container: WinUI.DependencyObject!) throws -> WinUI.DataTemplate! {
        try _IDataTemplateSelectorOverrides.SelectTemplateCoreImpl(item, container)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datatemplateselector.selecttemplatecore)
    open func selectTemplateCore(_ item: Any!) throws -> WinUI.DataTemplate! {
        try _IDataTemplateSelectorOverrides.SelectTemplateForItemCoreImpl(item)
    }

    internal enum IDataTemplateSelectorOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelectorOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IDataTemplateSelectorOverrides
        internal typealias Class = DataTemplateSelector
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelector
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IDataTemplateSelector
        }
    }
    internal typealias Composable = IDataTemplateSelectorOverrides
    private lazy var _IElementFactory: __ABI_Microsoft_UI_Xaml.IElementFactory! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datatemplateselector.getelement)
    public func getElement(_ args: WinUI.ElementFactoryGetArgs!) throws -> WinUI.UIElement! {
        try _IElementFactory.GetElementImpl(args)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datatemplateselector.recycleelement)
    public func recycleElement(_ args: WinUI.ElementFactoryRecycleArgs!) throws {
        try _IElementFactory.RecycleElementImpl(args)
    }

    deinit {
        _default = nil
        _IDataTemplateSelectorOverrides = nil
        _IElementFactory = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepickedeventargs)
public final class DatePickedEventArgs : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IDatePickedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDatePickedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDatePickedEventArgs>?) -> DatePickedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.DatePickedEventArgs")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepickedeventargs.newdate)
    public var newDate : WindowsFoundation.DateTime {
        get { try! _default.get_NewDateImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepickedeventargs.olddate)
    public var oldDate : WindowsFoundation.DateTime {
        get { try! _default.get_OldDateImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepicker)
open class DatePicker : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IDatePicker
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDatePicker
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDatePicker>?) -> DatePicker? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IDatePickerFactory : __ABI_Microsoft_UI_Xaml_Controls.IDatePickerFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.DatePicker"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IDatePickerFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IDatePickerStatics: __ABI_Microsoft_UI_Xaml_Controls.IDatePickerStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.DatePicker"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepicker.calendaridentifierproperty)
    public class var calendarIdentifierProperty : WinUI.DependencyProperty! {
        get { try! _IDatePickerStatics.get_CalendarIdentifierPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepicker.dateproperty)
    public class var dateProperty : WinUI.DependencyProperty! {
        get { try! _IDatePickerStatics.get_DatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepicker.dayformatproperty)
    public class var dayFormatProperty : WinUI.DependencyProperty! {
        get { try! _IDatePickerStatics.get_DayFormatPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepicker.dayvisibleproperty)
    public class var dayVisibleProperty : WinUI.DependencyProperty! {
        get { try! _IDatePickerStatics.get_DayVisiblePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepicker.headerproperty)
    public class var headerProperty : WinUI.DependencyProperty! {
        get { try! _IDatePickerStatics.get_HeaderPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepicker.headertemplateproperty)
    public class var headerTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IDatePickerStatics.get_HeaderTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepicker.lightdismissoverlaymodeproperty)
    public class var lightDismissOverlayModeProperty : WinUI.DependencyProperty! {
        get { try! _IDatePickerStatics.get_LightDismissOverlayModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepicker.maxyearproperty)
    public class var maxYearProperty : WinUI.DependencyProperty! {
        get { try! _IDatePickerStatics.get_MaxYearPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepicker.minyearproperty)
    public class var minYearProperty : WinUI.DependencyProperty! {
        get { try! _IDatePickerStatics.get_MinYearPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepicker.monthformatproperty)
    public class var monthFormatProperty : WinUI.DependencyProperty! {
        get { try! _IDatePickerStatics.get_MonthFormatPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepicker.monthvisibleproperty)
    public class var monthVisibleProperty : WinUI.DependencyProperty! {
        get { try! _IDatePickerStatics.get_MonthVisiblePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepicker.orientationproperty)
    public class var orientationProperty : WinUI.DependencyProperty! {
        get { try! _IDatePickerStatics.get_OrientationPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepicker.selecteddateproperty)
    public class var selectedDateProperty : WinUI.DependencyProperty! {
        get { try! _IDatePickerStatics.get_SelectedDatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepicker.yearformatproperty)
    public class var yearFormatProperty : WinUI.DependencyProperty! {
        get { try! _IDatePickerStatics.get_YearFormatPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepicker.yearvisibleproperty)
    public class var yearVisibleProperty : WinUI.DependencyProperty! {
        get { try! _IDatePickerStatics.get_YearVisiblePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepicker.calendaridentifier)
    public var calendarIdentifier : String {
        get { try! _default.get_CalendarIdentifierImpl() }
        set { try! _default.put_CalendarIdentifierImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepicker.date)
    public var date : WindowsFoundation.DateTime {
        get { try! _default.get_DateImpl() }
        set { try! _default.put_DateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepicker.dayformat)
    public var dayFormat : String {
        get { try! _default.get_DayFormatImpl() }
        set { try! _default.put_DayFormatImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepicker.dayvisible)
    public var dayVisible : Bool {
        get { try! _default.get_DayVisibleImpl() }
        set { try! _default.put_DayVisibleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepicker.header)
    public var header : Any! {
        get { try! _default.get_HeaderImpl() }
        set { try! _default.put_HeaderImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepicker.headertemplate)
    public var headerTemplate : WinUI.DataTemplate! {
        get { try! _default.get_HeaderTemplateImpl() }
        set { try! _default.put_HeaderTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepicker.lightdismissoverlaymode)
    public var lightDismissOverlayMode : LightDismissOverlayMode {
        get { try! _default.get_LightDismissOverlayModeImpl() }
        set { try! _default.put_LightDismissOverlayModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepicker.maxyear)
    public var maxYear : WindowsFoundation.DateTime {
        get { try! _default.get_MaxYearImpl() }
        set { try! _default.put_MaxYearImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepicker.minyear)
    public var minYear : WindowsFoundation.DateTime {
        get { try! _default.get_MinYearImpl() }
        set { try! _default.put_MinYearImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepicker.monthformat)
    public var monthFormat : String {
        get { try! _default.get_MonthFormatImpl() }
        set { try! _default.put_MonthFormatImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepicker.monthvisible)
    public var monthVisible : Bool {
        get { try! _default.get_MonthVisibleImpl() }
        set { try! _default.put_MonthVisibleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepicker.orientation)
    public var orientation : Orientation {
        get { try! _default.get_OrientationImpl() }
        set { try! _default.put_OrientationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepicker.selecteddate)
    public var selectedDate : WindowsFoundation.DateTime? {
        get { try! _default.get_SelectedDateImpl() }
        set { try! _default.put_SelectedDateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepicker.yearformat)
    public var yearFormat : String {
        get { try! _default.get_YearFormatImpl() }
        set { try! _default.put_YearFormatImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepicker.yearvisible)
    public var yearVisible : Bool {
        get { try! _default.get_YearVisibleImpl() }
        set { try! _default.put_YearVisibleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepicker.datechanged)
    public lazy var dateChanged : Event<EventHandler<DatePickerValueChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_DateChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_DateChangedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepicker.selecteddatechanged)
    public lazy var selectedDateChanged : Event<TypedEventHandler<DatePicker?, DatePickerSelectedValueChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_SelectedDateChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_SelectedDateChangedImpl($0)
       }
      )
    }()

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = DatePicker
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDatePicker
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IDatePicker
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepickerflyout)
public final class DatePickerFlyout : WinUI.PickerFlyoutBase {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IDatePickerFlyout
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDatePickerFlyout
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDatePickerFlyout>?) -> DatePickerFlyout? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.DatePickerFlyout")))
    }

    private static let _IDatePickerFlyoutStatics: __ABI_Microsoft_UI_Xaml_Controls.IDatePickerFlyoutStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.DatePickerFlyout"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepickerflyout.calendaridentifierproperty)
    public static var calendarIdentifierProperty : WinUI.DependencyProperty! {
        get { try! _IDatePickerFlyoutStatics.get_CalendarIdentifierPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepickerflyout.dateproperty)
    public static var dateProperty : WinUI.DependencyProperty! {
        get { try! _IDatePickerFlyoutStatics.get_DatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepickerflyout.dayformatproperty)
    public static var dayFormatProperty : WinUI.DependencyProperty! {
        get { try! _IDatePickerFlyoutStatics.get_DayFormatPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepickerflyout.dayvisibleproperty)
    public static var dayVisibleProperty : WinUI.DependencyProperty! {
        get { try! _IDatePickerFlyoutStatics.get_DayVisiblePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepickerflyout.maxyearproperty)
    public static var maxYearProperty : WinUI.DependencyProperty! {
        get { try! _IDatePickerFlyoutStatics.get_MaxYearPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepickerflyout.minyearproperty)
    public static var minYearProperty : WinUI.DependencyProperty! {
        get { try! _IDatePickerFlyoutStatics.get_MinYearPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepickerflyout.monthformatproperty)
    public static var monthFormatProperty : WinUI.DependencyProperty! {
        get { try! _IDatePickerFlyoutStatics.get_MonthFormatPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepickerflyout.monthvisibleproperty)
    public static var monthVisibleProperty : WinUI.DependencyProperty! {
        get { try! _IDatePickerFlyoutStatics.get_MonthVisiblePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepickerflyout.yearformatproperty)
    public static var yearFormatProperty : WinUI.DependencyProperty! {
        get { try! _IDatePickerFlyoutStatics.get_YearFormatPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepickerflyout.yearvisibleproperty)
    public static var yearVisibleProperty : WinUI.DependencyProperty! {
        get { try! _IDatePickerFlyoutStatics.get_YearVisiblePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepickerflyout.showatasync)
    public func showAtAsync(_ target: WinUI.FrameworkElement!) throws -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.DateTime?>! {
        try _default.ShowAtAsyncImpl(target)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepickerflyout.calendaridentifier)
    public var calendarIdentifier : String {
        get { try! _default.get_CalendarIdentifierImpl() }
        set { try! _default.put_CalendarIdentifierImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepickerflyout.date)
    public var date : WindowsFoundation.DateTime {
        get { try! _default.get_DateImpl() }
        set { try! _default.put_DateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepickerflyout.dayformat)
    public var dayFormat : String {
        get { try! _default.get_DayFormatImpl() }
        set { try! _default.put_DayFormatImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepickerflyout.dayvisible)
    public var dayVisible : Bool {
        get { try! _default.get_DayVisibleImpl() }
        set { try! _default.put_DayVisibleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepickerflyout.maxyear)
    public var maxYear : WindowsFoundation.DateTime {
        get { try! _default.get_MaxYearImpl() }
        set { try! _default.put_MaxYearImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepickerflyout.minyear)
    public var minYear : WindowsFoundation.DateTime {
        get { try! _default.get_MinYearImpl() }
        set { try! _default.put_MinYearImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepickerflyout.monthformat)
    public var monthFormat : String {
        get { try! _default.get_MonthFormatImpl() }
        set { try! _default.put_MonthFormatImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepickerflyout.monthvisible)
    public var monthVisible : Bool {
        get { try! _default.get_MonthVisibleImpl() }
        set { try! _default.put_MonthVisibleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepickerflyout.yearformat)
    public var yearFormat : String {
        get { try! _default.get_YearFormatImpl() }
        set { try! _default.put_YearFormatImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepickerflyout.yearvisible)
    public var yearVisible : Bool {
        get { try! _default.get_YearVisibleImpl() }
        set { try! _default.put_YearVisibleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepickerflyout.datepicked)
    public lazy var datePicked : Event<TypedEventHandler<DatePickerFlyout?, DatePickedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_DatePickedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_DatePickedImpl($0)
       }
      )
    }()

    internal enum IPickerFlyoutBaseOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPickerFlyoutBaseOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IPickerFlyoutBaseOverrides
        internal typealias Class = DatePickerFlyout
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDatePickerFlyout
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IDatePickerFlyout
        }
    }
    internal typealias Composable = IPickerFlyoutBaseOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepickerflyoutitem)
public final class DatePickerFlyoutItem : WinUI.DependencyObject, WinUI.ICustomPropertyProvider {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IDatePickerFlyoutItem
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDatePickerFlyoutItem
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDatePickerFlyoutItem>?) -> DatePickerFlyoutItem? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _IDatePickerFlyoutItemStatics: __ABI_Microsoft_UI_Xaml_Controls.IDatePickerFlyoutItemStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.DatePickerFlyoutItem"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepickerflyoutitem.primarytextproperty)
    public static var primaryTextProperty : WinUI.DependencyProperty! {
        get { try! _IDatePickerFlyoutItemStatics.get_PrimaryTextPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepickerflyoutitem.secondarytextproperty)
    public static var secondaryTextProperty : WinUI.DependencyProperty! {
        get { try! _IDatePickerFlyoutItemStatics.get_SecondaryTextPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepickerflyoutitem.primarytext)
    public var primaryText : String {
        get { try! _default.get_PrimaryTextImpl() }
        set { try! _default.put_PrimaryTextImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepickerflyoutitem.secondarytext)
    public var secondaryText : String {
        get { try! _default.get_SecondaryTextImpl() }
        set { try! _default.put_SecondaryTextImpl(newValue) }
    }

    private lazy var _ICustomPropertyProvider: __ABI_Microsoft_UI_Xaml_Data.ICustomPropertyProvider! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepickerflyoutitem.getcustomproperty)
    public func getCustomProperty(_ name: String) throws -> WinUI.AnyICustomProperty! {
        try _ICustomPropertyProvider.GetCustomPropertyImpl(name)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepickerflyoutitem.getindexedproperty)
    public func getIndexedProperty(_ name: String, _ type: WinUI.TypeName) throws -> WinUI.AnyICustomProperty! {
        try _ICustomPropertyProvider.GetIndexedPropertyImpl(name, type)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepickerflyoutitem.getstringrepresentation)
    public func getStringRepresentation() throws -> String {
        try _ICustomPropertyProvider.GetStringRepresentationImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepickerflyoutitem.type)
    public var type : WinUI.TypeName {
        get { try! _ICustomPropertyProvider.get_TypeImpl() }
    }

    deinit {
        _default = nil
        _ICustomPropertyProvider = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepickerflyoutpresenter)
public final class DatePickerFlyoutPresenter : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IDatePickerFlyoutPresenter
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDatePickerFlyoutPresenter
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDatePickerFlyoutPresenter>?) -> DatePickerFlyoutPresenter? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _IDatePickerFlyoutPresenterStatics: __ABI_Microsoft_UI_Xaml_Controls.IDatePickerFlyoutPresenterStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.DatePickerFlyoutPresenter"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepickerflyoutpresenter.isdefaultshadowenabledproperty)
    public static var isDefaultShadowEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IDatePickerFlyoutPresenterStatics.get_IsDefaultShadowEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepickerflyoutpresenter.isdefaultshadowenabled)
    public var isDefaultShadowEnabled : Bool {
        get { try! _default.get_IsDefaultShadowEnabledImpl() }
        set { try! _default.put_IsDefaultShadowEnabledImpl(newValue) }
    }

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = DatePickerFlyoutPresenter
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDatePickerFlyoutPresenter
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IDatePickerFlyoutPresenter
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepickerselectedvaluechangedeventargs)
public final class DatePickerSelectedValueChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IDatePickerSelectedValueChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDatePickerSelectedValueChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDatePickerSelectedValueChangedEventArgs>?) -> DatePickerSelectedValueChangedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepickerselectedvaluechangedeventargs.newdate)
    public var newDate : WindowsFoundation.DateTime? {
        get { try! _default.get_NewDateImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepickerselectedvaluechangedeventargs.olddate)
    public var oldDate : WindowsFoundation.DateTime? {
        get { try! _default.get_OldDateImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepickervaluechangedeventargs)
public final class DatePickerValueChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IDatePickerValueChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDatePickerValueChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDatePickerValueChangedEventArgs>?) -> DatePickerValueChangedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepickervaluechangedeventargs.newdate)
    public var newDate : WindowsFoundation.DateTime {
        get { try! _default.get_NewDateImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datepickervaluechangedeventargs.olddate)
    public var oldDate : WindowsFoundation.DateTime {
        get { try! _default.get_OldDateImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.dragitemscompletedeventargs)
public final class DragItemsCompletedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IDragItemsCompletedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDragItemsCompletedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDragItemsCompletedEventArgs>?) -> DragItemsCompletedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.dragitemscompletedeventargs.dropresult)
    public var dropResult : UWP.DataPackageOperation {
        get { try! _default.get_DropResultImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.dragitemscompletedeventargs.items)
    public var items : WindowsFoundation.AnyIVectorView<Any?>! {
        get { try! _default.get_ItemsImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.dragitemsstartingeventargs)
public final class DragItemsStartingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IDragItemsStartingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDragItemsStartingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDragItemsStartingEventArgs>?) -> DragItemsStartingEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public init() {
        super.init(try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.DragItemsStartingEventArgs")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.dragitemsstartingeventargs.cancel)
    public var cancel : Bool {
        get { try! _default.get_CancelImpl() }
        set { try! _default.put_CancelImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.dragitemsstartingeventargs.data)
    public var data : UWP.DataPackage! {
        get { try! _default.get_DataImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.dragitemsstartingeventargs.items)
    public var items : WindowsFoundation.AnyIVector<Any?>! {
        get { try! _default.get_ItemsImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.dropdownbutton)
open class DropDownButton : WinUI.Button {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IDropDownButton
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDropDownButton
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDropDownButton>?) -> DropDownButton? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IDropDownButtonFactory : __ABI_Microsoft_UI_Xaml_Controls.IDropDownButtonFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.DropDownButton"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IDropDownButtonFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    internal enum IContentControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
        internal typealias Class = DropDownButton
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDropDownButton
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IDropDownButton
        }
    }
    internal typealias Composable = IContentControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.dynamicoverflowitemschangingeventargs)
public final class DynamicOverflowItemsChangingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IDynamicOverflowItemsChangingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDynamicOverflowItemsChangingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDynamicOverflowItemsChangingEventArgs>?) -> DynamicOverflowItemsChangingEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public init() {
        super.init(try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.DynamicOverflowItemsChangingEventArgs")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.dynamicoverflowitemschangingeventargs.action)
    public var action : CommandBarDynamicOverflowAction {
        get { try! _default.get_ActionImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.expander)
open class Expander : WinUI.ContentControl {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IExpander
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIExpander
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIExpander>?) -> Expander? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IExpanderFactory : __ABI_Microsoft_UI_Xaml_Controls.IExpanderFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.Expander"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IExpanderFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IExpanderStatics: __ABI_Microsoft_UI_Xaml_Controls.IExpanderStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.Expander"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.expander.expanddirectionproperty)
    public class var expandDirectionProperty : WinUI.DependencyProperty! {
        get { try! _IExpanderStatics.get_ExpandDirectionPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.expander.headerproperty)
    public class var headerProperty : WinUI.DependencyProperty! {
        get { try! _IExpanderStatics.get_HeaderPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.expander.headertemplateproperty)
    public class var headerTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IExpanderStatics.get_HeaderTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.expander.headertemplateselectorproperty)
    public class var headerTemplateSelectorProperty : WinUI.DependencyProperty! {
        get { try! _IExpanderStatics.get_HeaderTemplateSelectorPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.expander.isexpandedproperty)
    public class var isExpandedProperty : WinUI.DependencyProperty! {
        get { try! _IExpanderStatics.get_IsExpandedPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.expander.expanddirection)
    public var expandDirection : ExpandDirection {
        get { try! _default.get_ExpandDirectionImpl() }
        set { try! _default.put_ExpandDirectionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.expander.header)
    public var header : Any! {
        get { try! _default.get_HeaderImpl() }
        set { try! _default.put_HeaderImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.expander.headertemplate)
    public var headerTemplate : WinUI.DataTemplate! {
        get { try! _default.get_HeaderTemplateImpl() }
        set { try! _default.put_HeaderTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.expander.headertemplateselector)
    public var headerTemplateSelector : DataTemplateSelector! {
        get { try! _default.get_HeaderTemplateSelectorImpl() }
        set { try! _default.put_HeaderTemplateSelectorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.expander.isexpanded)
    public var isExpanded : Bool {
        get { try! _default.get_IsExpandedImpl() }
        set { try! _default.put_IsExpandedImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.expander.templatesettings)
    public var templateSettings : ExpanderTemplateSettings! {
        get { try! _default.get_TemplateSettingsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.expander.collapsed)
    public lazy var collapsed : Event<TypedEventHandler<Expander?, ExpanderCollapsedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_CollapsedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_CollapsedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.expander.expanding)
    public lazy var expanding : Event<TypedEventHandler<Expander?, ExpanderExpandingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ExpandingImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ExpandingImpl($0)
       }
      )
    }()

    internal enum IContentControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
        internal typealias Class = Expander
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIExpander
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IExpander
        }
    }
    internal typealias Composable = IContentControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.expandercollapsedeventargs)
public final class ExpanderCollapsedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IExpanderCollapsedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIExpanderCollapsedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIExpanderCollapsedEventArgs>?) -> ExpanderCollapsedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.expanderexpandingeventargs)
public final class ExpanderExpandingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IExpanderExpandingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIExpanderExpandingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIExpanderExpandingEventArgs>?) -> ExpanderExpandingEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.expandertemplatesettings)
public final class ExpanderTemplateSettings : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IExpanderTemplateSettings
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIExpanderTemplateSettings
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIExpanderTemplateSettings>?) -> ExpanderTemplateSettings? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.expandertemplatesettings.contentheight)
    public var contentHeight : Double {
        get { try! _default.get_ContentHeightImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.expandertemplatesettings.negativecontentheight)
    public var negativeContentHeight : Double {
        get { try! _default.get_NegativeContentHeightImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.flipview)
open class FlipView : WinUI.Selector {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IFlipView
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlipView
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlipView>?) -> FlipView? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IFlipViewFactory : __ABI_Microsoft_UI_Xaml_Controls.IFlipViewFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.FlipView"))

    public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IFlipViewFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IFlipViewStatics: __ABI_Microsoft_UI_Xaml_Controls.IFlipViewStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.FlipView"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.flipview.usetouchanimationsforallnavigationproperty)
    public class var useTouchAnimationsForAllNavigationProperty : WinUI.DependencyProperty! {
        get { try! _IFlipViewStatics.get_UseTouchAnimationsForAllNavigationPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.flipview.usetouchanimationsforallnavigation)
    public var useTouchAnimationsForAllNavigation : Bool {
        get { try! _default.get_UseTouchAnimationsForAllNavigationImpl() }
        set { try! _default.put_UseTouchAnimationsForAllNavigationImpl(newValue) }
    }

    internal enum IItemsControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsControlOverrides
        internal typealias Class = FlipView
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlipView
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IFlipView
        }
    }
    internal typealias Composable = IItemsControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.flipviewitem)
open class FlipViewItem : WinUI.SelectorItem {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IFlipViewItem
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlipViewItem
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlipViewItem>?) -> FlipViewItem? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IFlipViewItemFactory : __ABI_Microsoft_UI_Xaml_Controls.IFlipViewItemFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.FlipViewItem"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IFlipViewItemFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    internal enum IContentControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
        internal typealias Class = FlipViewItem
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlipViewItem
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IFlipViewItem
        }
    }
    internal typealias Composable = IContentControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.flyout)
open class Flyout : WinUI.FlyoutBase {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IFlyout
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyout
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyout>?) -> Flyout? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IFlyoutFactory : __ABI_Microsoft_UI_Xaml_Controls.IFlyoutFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.Flyout"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IFlyoutFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IFlyoutStatics: __ABI_Microsoft_UI_Xaml_Controls.IFlyoutStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.Flyout"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.flyout.contentproperty)
    public class var contentProperty : WinUI.DependencyProperty! {
        get { try! _IFlyoutStatics.get_ContentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.flyout.flyoutpresenterstyleproperty)
    public class var flyoutPresenterStyleProperty : WinUI.DependencyProperty! {
        get { try! _IFlyoutStatics.get_FlyoutPresenterStylePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.flyout.content)
    public var content : WinUI.UIElement! {
        get { try! _default.get_ContentImpl() }
        set { try! _default.put_ContentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.flyout.flyoutpresenterstyle)
    public var flyoutPresenterStyle : WinUI.Style! {
        get { try! _default.get_FlyoutPresenterStyleImpl() }
        set { try! _default.put_FlyoutPresenterStyleImpl(newValue) }
    }

    internal enum IFlyoutBaseOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IFlyoutBaseOverrides
        internal typealias Class = Flyout
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyout
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IFlyout
        }
    }
    internal typealias Composable = IFlyoutBaseOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.flyoutpresenter)
open class FlyoutPresenter : WinUI.ContentControl {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IFlyoutPresenter
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyoutPresenter
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyoutPresenter>?) -> FlyoutPresenter? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IFlyoutPresenterFactory : __ABI_Microsoft_UI_Xaml_Controls.IFlyoutPresenterFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.FlyoutPresenter"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IFlyoutPresenterFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IFlyoutPresenterStatics: __ABI_Microsoft_UI_Xaml_Controls.IFlyoutPresenterStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.FlyoutPresenter"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.flyoutpresenter.isdefaultshadowenabledproperty)
    public class var isDefaultShadowEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IFlyoutPresenterStatics.get_IsDefaultShadowEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.flyoutpresenter.isdefaultshadowenabled)
    public var isDefaultShadowEnabled : Bool {
        get { try! _default.get_IsDefaultShadowEnabledImpl() }
        set { try! _default.put_IsDefaultShadowEnabledImpl(newValue) }
    }

    internal enum IContentControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
        internal typealias Class = FlyoutPresenter
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyoutPresenter
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IFlyoutPresenter
        }
    }
    internal typealias Composable = IContentControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.focusdisengagedeventargs)
public final class FocusDisengagedEventArgs : WinUI.RoutedEventArgs {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IFocusDisengagedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFocusDisengagedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFocusDisengagedEventArgs>?) -> FocusDisengagedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.focusengagedeventargs)
public final class FocusEngagedEventArgs : WinUI.RoutedEventArgs {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IFocusEngagedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFocusEngagedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFocusEngagedEventArgs>?) -> FocusEngagedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.focusengagedeventargs.handled)
    public var handled : Bool {
        get { try! _default.get_HandledImpl() }
        set { try! _default.put_HandledImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticon)
open class FontIcon : WinUI.IconElement {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IFontIcon
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIcon
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIcon>?) -> FontIcon? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IFontIconFactory : __ABI_Microsoft_UI_Xaml_Controls.IFontIconFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.FontIcon"))

    public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IFontIconFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IFontIconStatics: __ABI_Microsoft_UI_Xaml_Controls.IFontIconStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.FontIcon"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticon.fontfamilyproperty)
    public class var fontFamilyProperty : WinUI.DependencyProperty! {
        get { try! _IFontIconStatics.get_FontFamilyPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticon.fontsizeproperty)
    public class var fontSizeProperty : WinUI.DependencyProperty! {
        get { try! _IFontIconStatics.get_FontSizePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticon.fontstyleproperty)
    public class var fontStyleProperty : WinUI.DependencyProperty! {
        get { try! _IFontIconStatics.get_FontStylePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticon.fontweightproperty)
    public class var fontWeightProperty : WinUI.DependencyProperty! {
        get { try! _IFontIconStatics.get_FontWeightPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticon.glyphproperty)
    public class var glyphProperty : WinUI.DependencyProperty! {
        get { try! _IFontIconStatics.get_GlyphPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticon.istextscalefactorenabledproperty)
    public class var isTextScaleFactorEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IFontIconStatics.get_IsTextScaleFactorEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticon.mirroredwhenrighttoleftproperty)
    public class var mirroredWhenRightToLeftProperty : WinUI.DependencyProperty! {
        get { try! _IFontIconStatics.get_MirroredWhenRightToLeftPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticon.fontfamily)
    public var fontFamily : WinUI.FontFamily! {
        get { try! _default.get_FontFamilyImpl() }
        set { try! _default.put_FontFamilyImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticon.fontsize)
    public var fontSize : Double {
        get { try! _default.get_FontSizeImpl() }
        set { try! _default.put_FontSizeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticon.fontstyle)
    public var fontStyle : UWP.FontStyle {
        get { try! _default.get_FontStyleImpl() }
        set { try! _default.put_FontStyleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticon.fontweight)
    public var fontWeight : UWP.FontWeight {
        get { try! _default.get_FontWeightImpl() }
        set { try! _default.put_FontWeightImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticon.glyph)
    public var glyph : String {
        get { try! _default.get_GlyphImpl() }
        set { try! _default.put_GlyphImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticon.istextscalefactorenabled)
    public var isTextScaleFactorEnabled : Bool {
        get { try! _default.get_IsTextScaleFactorEnabledImpl() }
        set { try! _default.put_IsTextScaleFactorEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticon.mirroredwhenrighttoleft)
    public var mirroredWhenRightToLeft : Bool {
        get { try! _default.get_MirroredWhenRightToLeftImpl() }
        set { try! _default.put_MirroredWhenRightToLeftImpl(newValue) }
    }

    internal enum IFrameworkElementOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
        internal typealias Class = FontIcon
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIcon
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IFontIcon
        }
    }
    internal typealias Composable = IFrameworkElementOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticonsource)
open class FontIconSource : WinUI.IconSource {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IFontIconSource
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIconSource
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIconSource>?) -> FontIconSource? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IFontIconSourceFactory : __ABI_Microsoft_UI_Xaml_Controls.IFontIconSourceFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.FontIconSource"))

    public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IFontIconSourceFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IFontIconSourceStatics: __ABI_Microsoft_UI_Xaml_Controls.IFontIconSourceStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.FontIconSource"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticonsource.fontfamilyproperty)
    public class var fontFamilyProperty : WinUI.DependencyProperty! {
        get { try! _IFontIconSourceStatics.get_FontFamilyPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticonsource.fontsizeproperty)
    public class var fontSizeProperty : WinUI.DependencyProperty! {
        get { try! _IFontIconSourceStatics.get_FontSizePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticonsource.fontstyleproperty)
    public class var fontStyleProperty : WinUI.DependencyProperty! {
        get { try! _IFontIconSourceStatics.get_FontStylePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticonsource.fontweightproperty)
    public class var fontWeightProperty : WinUI.DependencyProperty! {
        get { try! _IFontIconSourceStatics.get_FontWeightPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticonsource.glyphproperty)
    public class var glyphProperty : WinUI.DependencyProperty! {
        get { try! _IFontIconSourceStatics.get_GlyphPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticonsource.istextscalefactorenabledproperty)
    public class var isTextScaleFactorEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IFontIconSourceStatics.get_IsTextScaleFactorEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticonsource.mirroredwhenrighttoleftproperty)
    public class var mirroredWhenRightToLeftProperty : WinUI.DependencyProperty! {
        get { try! _IFontIconSourceStatics.get_MirroredWhenRightToLeftPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticonsource.fontfamily)
    public var fontFamily : WinUI.FontFamily! {
        get { try! _default.get_FontFamilyImpl() }
        set { try! _default.put_FontFamilyImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticonsource.fontsize)
    public var fontSize : Double {
        get { try! _default.get_FontSizeImpl() }
        set { try! _default.put_FontSizeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticonsource.fontstyle)
    public var fontStyle : UWP.FontStyle {
        get { try! _default.get_FontStyleImpl() }
        set { try! _default.put_FontStyleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticonsource.fontweight)
    public var fontWeight : UWP.FontWeight {
        get { try! _default.get_FontWeightImpl() }
        set { try! _default.put_FontWeightImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticonsource.glyph)
    public var glyph : String {
        get { try! _default.get_GlyphImpl() }
        set { try! _default.put_GlyphImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticonsource.istextscalefactorenabled)
    public var isTextScaleFactorEnabled : Bool {
        get { try! _default.get_IsTextScaleFactorEnabledImpl() }
        set { try! _default.put_IsTextScaleFactorEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.fonticonsource.mirroredwhenrighttoleft)
    public var mirroredWhenRightToLeft : Bool {
        get { try! _default.get_MirroredWhenRightToLeftImpl() }
        set { try! _default.put_MirroredWhenRightToLeftImpl(newValue) }
    }

    internal enum IIconSourceOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSourceOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IIconSourceOverrides
        internal typealias Class = FontIconSource
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFontIconSource
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IFontIconSource
        }
    }
    internal typealias Composable = IIconSourceOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame)
open class Frame : WinUI.ContentControl, INavigate {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IFrame
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFrame
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFrame>?) -> Frame? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IFrameFactory : __ABI_Microsoft_UI_Xaml_Controls.IFrameFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.Frame"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IFrameFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IFrameStatics: __ABI_Microsoft_UI_Xaml_Controls.IFrameStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.Frame"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.backstackdepthproperty)
    public class var backStackDepthProperty : WinUI.DependencyProperty! {
        get { try! _IFrameStatics.get_BackStackDepthPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.backstackproperty)
    public class var backStackProperty : WinUI.DependencyProperty! {
        get { try! _IFrameStatics.get_BackStackPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.cachesizeproperty)
    public class var cacheSizeProperty : WinUI.DependencyProperty! {
        get { try! _IFrameStatics.get_CacheSizePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.cangobackproperty)
    public class var canGoBackProperty : WinUI.DependencyProperty! {
        get { try! _IFrameStatics.get_CanGoBackPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.cangoforwardproperty)
    public class var canGoForwardProperty : WinUI.DependencyProperty! {
        get { try! _IFrameStatics.get_CanGoForwardPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.currentsourcepagetypeproperty)
    public class var currentSourcePageTypeProperty : WinUI.DependencyProperty! {
        get { try! _IFrameStatics.get_CurrentSourcePageTypePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.forwardstackproperty)
    public class var forwardStackProperty : WinUI.DependencyProperty! {
        get { try! _IFrameStatics.get_ForwardStackPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.isnavigationstackenabledproperty)
    public class var isNavigationStackEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IFrameStatics.get_IsNavigationStackEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.sourcepagetypeproperty)
    public class var sourcePageTypeProperty : WinUI.DependencyProperty! {
        get { try! _IFrameStatics.get_SourcePageTypePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.goback)
    public func goBack() throws {
        try _default.GoBackImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.goback)
    public func goBack(_ transitionInfoOverride: WinUI.NavigationTransitionInfo!) throws {
        try _default.GoBackWithTransitionInfoImpl(transitionInfoOverride)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.goforward)
    public func goForward() throws {
        try _default.GoForwardImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.navigate)
    public func navigate(_ sourcePageType: WinUI.TypeName, _ parameter: Any!) throws -> Bool {
        try _default.NavigateImpl(sourcePageType, parameter)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.navigate)
    public func navigate(_ sourcePageType: WinUI.TypeName, _ parameter: Any!, _ infoOverride: WinUI.NavigationTransitionInfo!) throws -> Bool {
        try _default.NavigateWithTransitionInfoImpl(sourcePageType, parameter, infoOverride)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.navigatetotype)
    public func navigateToType(_ sourcePageType: WinUI.TypeName, _ parameter: Any!, _ navigationOptions: WinUI.FrameNavigationOptions!) throws -> Bool {
        try _default.NavigateToTypeImpl(sourcePageType, parameter, navigationOptions)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.getnavigationstate)
    public func getNavigationState() throws -> String {
        try _default.GetNavigationStateImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.setnavigationstate)
    public func setNavigationState(_ navigationState: String) throws {
        try _default.SetNavigationStateImpl(navigationState)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.setnavigationstate)
    public func setNavigationState(_ navigationState: String, _ suppressNavigate: Bool) throws {
        try _default.SetNavigationStateWithNavigationControlImpl(navigationState, suppressNavigate)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.backstack)
    public var backStack : WindowsFoundation.AnyIVector<WinUI.PageStackEntry?>! {
        get { try! _default.get_BackStackImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.backstackdepth)
    public var backStackDepth : Int32 {
        get { try! _default.get_BackStackDepthImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.cachesize)
    public var cacheSize : Int32 {
        get { try! _default.get_CacheSizeImpl() }
        set { try! _default.put_CacheSizeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.cangoback)
    public var canGoBack : Bool {
        get { try! _default.get_CanGoBackImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.cangoforward)
    public var canGoForward : Bool {
        get { try! _default.get_CanGoForwardImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.currentsourcepagetype)
    public var currentSourcePageType : WinUI.TypeName {
        get { try! _default.get_CurrentSourcePageTypeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.forwardstack)
    public var forwardStack : WindowsFoundation.AnyIVector<WinUI.PageStackEntry?>! {
        get { try! _default.get_ForwardStackImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.isnavigationstackenabled)
    public var isNavigationStackEnabled : Bool {
        get { try! _default.get_IsNavigationStackEnabledImpl() }
        set { try! _default.put_IsNavigationStackEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.sourcepagetype)
    public var sourcePageType : WinUI.TypeName {
        get { try! _default.get_SourcePageTypeImpl() }
        set { try! _default.put_SourcePageTypeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.navigated)
    public lazy var navigated : Event<WinUI.NavigatedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_NavigatedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_NavigatedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.navigating)
    public lazy var navigating : Event<WinUI.NavigatingCancelEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_NavigatingImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_NavigatingImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.navigationfailed)
    public lazy var navigationFailed : Event<WinUI.NavigationFailedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_NavigationFailedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_NavigationFailedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.navigationstopped)
    public lazy var navigationStopped : Event<WinUI.NavigationStoppedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_NavigationStoppedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_NavigationStoppedImpl($0)
       }
      )
    }()

    private lazy var _INavigate: __ABI_Microsoft_UI_Xaml_Controls.INavigate! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.frame.navigate)
    public func navigate(_ sourcePageType: WinUI.TypeName) throws -> Bool {
        try _INavigate.NavigateImpl(sourcePageType)
    }

    internal enum IContentControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
        internal typealias Class = Frame
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFrame
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IFrame
        }
    }
    internal typealias Composable = IContentControlOverrides
    deinit {
        _default = nil
        _INavigate = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid)
open class Grid : WinUI.Panel {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IGrid
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGrid
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGrid>?) -> Grid? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IGridFactory : __ABI_Microsoft_UI_Xaml_Controls.IGridFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.Grid"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IGridFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IGridStatics: __ABI_Microsoft_UI_Xaml_Controls.IGridStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.Grid"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.getrow)
    public class func getRow(_ element: WinUI.FrameworkElement!) -> Int32 {
        return try! _IGridStatics.GetRowImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.setrow)
    public class func setRow(_ element: WinUI.FrameworkElement!, _ value: Int32) {
        try! _IGridStatics.SetRowImpl(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.getcolumn)
    public class func getColumn(_ element: WinUI.FrameworkElement!) -> Int32 {
        return try! _IGridStatics.GetColumnImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.setcolumn)
    public class func setColumn(_ element: WinUI.FrameworkElement!, _ value: Int32) {
        try! _IGridStatics.SetColumnImpl(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.getrowspan)
    public class func getRowSpan(_ element: WinUI.FrameworkElement!) -> Int32 {
        return try! _IGridStatics.GetRowSpanImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.setrowspan)
    public class func setRowSpan(_ element: WinUI.FrameworkElement!, _ value: Int32) {
        try! _IGridStatics.SetRowSpanImpl(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.getcolumnspan)
    public class func getColumnSpan(_ element: WinUI.FrameworkElement!) -> Int32 {
        return try! _IGridStatics.GetColumnSpanImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.setcolumnspan)
    public class func setColumnSpan(_ element: WinUI.FrameworkElement!, _ value: Int32) {
        try! _IGridStatics.SetColumnSpanImpl(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.backgroundsizingproperty)
    public class var backgroundSizingProperty : WinUI.DependencyProperty! {
        get { try! _IGridStatics.get_BackgroundSizingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.borderbrushproperty)
    public class var borderBrushProperty : WinUI.DependencyProperty! {
        get { try! _IGridStatics.get_BorderBrushPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.borderthicknessproperty)
    public class var borderThicknessProperty : WinUI.DependencyProperty! {
        get { try! _IGridStatics.get_BorderThicknessPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.columnproperty)
    public class var columnProperty : WinUI.DependencyProperty! {
        get { try! _IGridStatics.get_ColumnPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.columnspacingproperty)
    public class var columnSpacingProperty : WinUI.DependencyProperty! {
        get { try! _IGridStatics.get_ColumnSpacingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.columnspanproperty)
    public class var columnSpanProperty : WinUI.DependencyProperty! {
        get { try! _IGridStatics.get_ColumnSpanPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.cornerradiusproperty)
    public class var cornerRadiusProperty : WinUI.DependencyProperty! {
        get { try! _IGridStatics.get_CornerRadiusPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.paddingproperty)
    public class var paddingProperty : WinUI.DependencyProperty! {
        get { try! _IGridStatics.get_PaddingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.rowproperty)
    public class var rowProperty : WinUI.DependencyProperty! {
        get { try! _IGridStatics.get_RowPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.rowspacingproperty)
    public class var rowSpacingProperty : WinUI.DependencyProperty! {
        get { try! _IGridStatics.get_RowSpacingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.rowspanproperty)
    public class var rowSpanProperty : WinUI.DependencyProperty! {
        get { try! _IGridStatics.get_RowSpanPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.backgroundsizing)
    public var backgroundSizing : BackgroundSizing {
        get { try! _default.get_BackgroundSizingImpl() }
        set { try! _default.put_BackgroundSizingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.borderbrush)
    public var borderBrush : WinUI.Brush! {
        get { try! _default.get_BorderBrushImpl() }
        set { try! _default.put_BorderBrushImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.borderthickness)
    public var borderThickness : WinUI.Thickness {
        get { try! _default.get_BorderThicknessImpl() }
        set { try! _default.put_BorderThicknessImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.columndefinitions)
    public var columnDefinitions : ColumnDefinitionCollection! {
        get { try! _default.get_ColumnDefinitionsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.columnspacing)
    public var columnSpacing : Double {
        get { try! _default.get_ColumnSpacingImpl() }
        set { try! _default.put_ColumnSpacingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.cornerradius)
    public var cornerRadius : WinUI.CornerRadius {
        get { try! _default.get_CornerRadiusImpl() }
        set { try! _default.put_CornerRadiusImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.padding)
    public var padding : WinUI.Thickness {
        get { try! _default.get_PaddingImpl() }
        set { try! _default.put_PaddingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.rowdefinitions)
    public var rowDefinitions : RowDefinitionCollection! {
        get { try! _default.get_RowDefinitionsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.rowspacing)
    public var rowSpacing : Double {
        get { try! _default.get_RowSpacingImpl() }
        set { try! _default.put_RowSpacingImpl(newValue) }
    }

    internal enum IFrameworkElementOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
        internal typealias Class = Grid
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGrid
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IGrid
        }
    }
    internal typealias Composable = IFrameworkElementOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.gridview)
open class GridView : WinUI.ListViewBase {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IGridView
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridView
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridView>?) -> GridView? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IGridViewFactory : __ABI_Microsoft_UI_Xaml_Controls.IGridViewFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.GridView"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IGridViewFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    internal enum IItemsControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsControlOverrides
        internal typealias Class = GridView
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridView
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IGridView
        }
    }
    internal typealias Composable = IItemsControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.gridviewheaderitem)
open class GridViewHeaderItem : WinUI.ListViewBaseHeaderItem {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IGridViewHeaderItem
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridViewHeaderItem
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridViewHeaderItem>?) -> GridViewHeaderItem? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IGridViewHeaderItemFactory : __ABI_Microsoft_UI_Xaml_Controls.IGridViewHeaderItemFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.GridViewHeaderItem"))

    public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IGridViewHeaderItemFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    internal enum IContentControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
        internal typealias Class = GridViewHeaderItem
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridViewHeaderItem
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IGridViewHeaderItem
        }
    }
    internal typealias Composable = IContentControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.gridviewitem)
open class GridViewItem : WinUI.SelectorItem {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IGridViewItem
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridViewItem
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridViewItem>?) -> GridViewItem? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IGridViewItemFactory : __ABI_Microsoft_UI_Xaml_Controls.IGridViewItemFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.GridViewItem"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IGridViewItemFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.gridviewitem.templatesettings)
    public var templateSettings : WinUI.GridViewItemTemplateSettings! {
        get { try! _default.get_TemplateSettingsImpl() }
    }

    internal enum IContentControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
        internal typealias Class = GridViewItem
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridViewItem
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IGridViewItem
        }
    }
    internal typealias Composable = IContentControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.groupitem)
open class GroupItem : WinUI.ContentControl {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IGroupItem
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupItem
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupItem>?) -> GroupItem? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IGroupItemFactory : __ABI_Microsoft_UI_Xaml_Controls.IGroupItemFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.GroupItem"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IGroupItemFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    internal enum IContentControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
        internal typealias Class = GroupItem
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupItem
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IGroupItem
        }
    }
    internal typealias Composable = IContentControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.groupstyle)
open class GroupStyle : WinRTClass, WinUI.INotifyPropertyChanged {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IGroupStyle
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyle
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyle>?) -> GroupStyle? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IGroupStyleFactory : __ABI_Microsoft_UI_Xaml_Controls.IGroupStyleFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.GroupStyle"))

    override public init() {
        super.init()
        MakeComposed(composing: Self.Composable.self, self) { baseInterface, innerInterface in 
            try! Self._IGroupStyleFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.groupstyle.containerstyle)
    public var containerStyle : WinUI.Style! {
        get { try! _default.get_ContainerStyleImpl() }
        set { try! _default.put_ContainerStyleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.groupstyle.containerstyleselector)
    public var containerStyleSelector : StyleSelector! {
        get { try! _default.get_ContainerStyleSelectorImpl() }
        set { try! _default.put_ContainerStyleSelectorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.groupstyle.headercontainerstyle)
    public var headerContainerStyle : WinUI.Style! {
        get { try! _default.get_HeaderContainerStyleImpl() }
        set { try! _default.put_HeaderContainerStyleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.groupstyle.headertemplate)
    public var headerTemplate : WinUI.DataTemplate! {
        get { try! _default.get_HeaderTemplateImpl() }
        set { try! _default.put_HeaderTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.groupstyle.headertemplateselector)
    public var headerTemplateSelector : DataTemplateSelector! {
        get { try! _default.get_HeaderTemplateSelectorImpl() }
        set { try! _default.put_HeaderTemplateSelectorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.groupstyle.hidesifempty)
    public var hidesIfEmpty : Bool {
        get { try! _default.get_HidesIfEmptyImpl() }
        set { try! _default.put_HidesIfEmptyImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.groupstyle.panel)
    public var panel : ItemsPanelTemplate! {
        get { try! _default.get_PanelImpl() }
        set { try! _default.put_PanelImpl(newValue) }
    }

    private lazy var _INotifyPropertyChanged: __ABI_Microsoft_UI_Xaml_Data.INotifyPropertyChanged! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.groupstyle.propertychanged)
    public lazy var propertyChanged : Event<WinUI.PropertyChangedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._INotifyPropertyChanged else { return .init() }
          return try! this.add_PropertyChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._INotifyPropertyChanged.remove_PropertyChangedImpl($0)
       }
      )
    }()

    internal enum IGroupStyle : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = GroupStyle
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyle
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IGroupStyle
        }
    }
    internal typealias Composable = IGroupStyle
    deinit {
        _default = nil
        _INotifyPropertyChanged = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.groupstyleselector)
open class GroupStyleSelector : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IGroupStyleSelector
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyleSelector
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyleSelector>?) -> GroupStyleSelector? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.IGroupStyleSelectorOverridesWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.IGroupStyleSelectorOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IGroupStyleSelectorFactory : __ABI_Microsoft_UI_Xaml_Controls.IGroupStyleSelectorFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.GroupStyleSelector"))

    override public init() {
        super.init()
        MakeComposed(composing: Self.Composable.self, self) { baseInterface, innerInterface in 
            try! Self._IGroupStyleSelectorFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.groupstyleselector.selectgroupstyle)
    public func selectGroupStyle(_ group: Any!, _ level: UInt32) throws -> GroupStyle! {
        try _default.SelectGroupStyleImpl(group, level)
    }

    private lazy var _IGroupStyleSelectorOverrides: __ABI_Microsoft_UI_Xaml_Controls.IGroupStyleSelectorOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.groupstyleselector.selectgroupstylecore)
    open func selectGroupStyleCore(_ group: Any!, _ level: UInt32) throws -> GroupStyle! {
        try _IGroupStyleSelectorOverrides.SelectGroupStyleCoreImpl(group, level)
    }

    internal enum IGroupStyleSelectorOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyleSelectorOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IGroupStyleSelectorOverrides
        internal typealias Class = GroupStyleSelector
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyleSelector
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IGroupStyleSelector
        }
    }
    internal typealias Composable = IGroupStyleSelectorOverrides
    deinit {
        _default = nil
        _IGroupStyleSelectorOverrides = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hasvalidationerrorschangedeventargs)
public final class HasValidationErrorsChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IHasValidationErrorsChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIHasValidationErrorsChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIHasValidationErrorsChangedEventArgs>?) -> HasValidationErrorsChangedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hasvalidationerrorschangedeventargs.newvalue)
    public var newValue : Bool {
        get { try! _default.get_NewValueImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hub)
open class Hub : WinUI.Control, ISemanticZoomInformation {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IHub
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIHub
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIHub>?) -> Hub? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IHubFactory : __ABI_Microsoft_UI_Xaml_Controls.IHubFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.Hub"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IHubFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IHubStatics: __ABI_Microsoft_UI_Xaml_Controls.IHubStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.Hub"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hub.defaultsectionindexproperty)
    public class var defaultSectionIndexProperty : WinUI.DependencyProperty! {
        get { try! _IHubStatics.get_DefaultSectionIndexPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hub.headerproperty)
    public class var headerProperty : WinUI.DependencyProperty! {
        get { try! _IHubStatics.get_HeaderPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hub.headertemplateproperty)
    public class var headerTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IHubStatics.get_HeaderTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hub.isactiveviewproperty)
    public class var isActiveViewProperty : WinUI.DependencyProperty! {
        get { try! _IHubStatics.get_IsActiveViewPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hub.iszoomedinviewproperty)
    public class var isZoomedInViewProperty : WinUI.DependencyProperty! {
        get { try! _IHubStatics.get_IsZoomedInViewPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hub.orientationproperty)
    public class var orientationProperty : WinUI.DependencyProperty! {
        get { try! _IHubStatics.get_OrientationPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hub.semanticzoomownerproperty)
    public class var semanticZoomOwnerProperty : WinUI.DependencyProperty! {
        get { try! _IHubStatics.get_SemanticZoomOwnerPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hub.scrolltosection)
    public func scrollToSection(_ section: HubSection!) throws {
        try _default.ScrollToSectionImpl(section)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hub.defaultsectionindex)
    public var defaultSectionIndex : Int32 {
        get { try! _default.get_DefaultSectionIndexImpl() }
        set { try! _default.put_DefaultSectionIndexImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hub.header)
    public var header : Any! {
        get { try! _default.get_HeaderImpl() }
        set { try! _default.put_HeaderImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hub.headertemplate)
    public var headerTemplate : WinUI.DataTemplate! {
        get { try! _default.get_HeaderTemplateImpl() }
        set { try! _default.put_HeaderTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hub.orientation)
    public var orientation : Orientation {
        get { try! _default.get_OrientationImpl() }
        set { try! _default.put_OrientationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hub.sectionheaders)
    public var sectionHeaders : WindowsFoundation.AnyIObservableVector<Any?>! {
        get { try! _default.get_SectionHeadersImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hub.sections)
    public var sections : WindowsFoundation.AnyIVector<HubSection?>! {
        get { try! _default.get_SectionsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hub.sectionsinview)
    public var sectionsInView : WindowsFoundation.AnyIVector<HubSection?>! {
        get { try! _default.get_SectionsInViewImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hub.sectionheaderclick)
    public lazy var sectionHeaderClick : Event<HubSectionHeaderClickEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_SectionHeaderClickImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_SectionHeaderClickImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hub.sectionsinviewchanged)
    public lazy var sectionsInViewChanged : Event<SectionsInViewChangedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_SectionsInViewChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_SectionsInViewChangedImpl($0)
       }
      )
    }()

    private lazy var _ISemanticZoomInformation: __ABI_Microsoft_UI_Xaml_Controls.ISemanticZoomInformation! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hub.initializeviewchange)
    public func initializeViewChange() throws {
        try _ISemanticZoomInformation.InitializeViewChangeImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hub.completeviewchange)
    public func completeViewChange() throws {
        try _ISemanticZoomInformation.CompleteViewChangeImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hub.makevisible)
    public func makeVisible(_ item: SemanticZoomLocation!) throws {
        try _ISemanticZoomInformation.MakeVisibleImpl(item)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hub.startviewchangefrom)
    public func startViewChangeFrom(_ source: SemanticZoomLocation!, _ destination: SemanticZoomLocation!) throws {
        try _ISemanticZoomInformation.StartViewChangeFromImpl(source, destination)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hub.startviewchangeto)
    public func startViewChangeTo(_ source: SemanticZoomLocation!, _ destination: SemanticZoomLocation!) throws {
        try _ISemanticZoomInformation.StartViewChangeToImpl(source, destination)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hub.completeviewchangefrom)
    public func completeViewChangeFrom(_ source: SemanticZoomLocation!, _ destination: SemanticZoomLocation!) throws {
        try _ISemanticZoomInformation.CompleteViewChangeFromImpl(source, destination)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hub.completeviewchangeto)
    public func completeViewChangeTo(_ source: SemanticZoomLocation!, _ destination: SemanticZoomLocation!) throws {
        try _ISemanticZoomInformation.CompleteViewChangeToImpl(source, destination)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hub.isactiveview)
    public var isActiveView : Bool {
        get { try! _ISemanticZoomInformation.get_IsActiveViewImpl() }
        set { try! _ISemanticZoomInformation.put_IsActiveViewImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hub.iszoomedinview)
    public var isZoomedInView : Bool {
        get { try! _ISemanticZoomInformation.get_IsZoomedInViewImpl() }
        set { try! _ISemanticZoomInformation.put_IsZoomedInViewImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hub.semanticzoomowner)
    public var semanticZoomOwner : SemanticZoom! {
        get { try! _ISemanticZoomInformation.get_SemanticZoomOwnerImpl() }
        set { try! _ISemanticZoomInformation.put_SemanticZoomOwnerImpl(newValue) }
    }

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = Hub
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIHub
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IHub
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = nil
        _ISemanticZoomInformation = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hubsection)
open class HubSection : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IHubSection
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIHubSection
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIHubSection>?) -> HubSection? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IHubSectionFactory : __ABI_Microsoft_UI_Xaml_Controls.IHubSectionFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.HubSection"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IHubSectionFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IHubSectionStatics: __ABI_Microsoft_UI_Xaml_Controls.IHubSectionStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.HubSection"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hubsection.contenttemplateproperty)
    public class var contentTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IHubSectionStatics.get_ContentTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hubsection.headerproperty)
    public class var headerProperty : WinUI.DependencyProperty! {
        get { try! _IHubSectionStatics.get_HeaderPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hubsection.headertemplateproperty)
    public class var headerTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IHubSectionStatics.get_HeaderTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hubsection.isheaderinteractiveproperty)
    public class var isHeaderInteractiveProperty : WinUI.DependencyProperty! {
        get { try! _IHubSectionStatics.get_IsHeaderInteractivePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hubsection.contenttemplate)
    public var contentTemplate : WinUI.DataTemplate! {
        get { try! _default.get_ContentTemplateImpl() }
        set { try! _default.put_ContentTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hubsection.header)
    public var header : Any! {
        get { try! _default.get_HeaderImpl() }
        set { try! _default.put_HeaderImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hubsection.headertemplate)
    public var headerTemplate : WinUI.DataTemplate! {
        get { try! _default.get_HeaderTemplateImpl() }
        set { try! _default.put_HeaderTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hubsection.isheaderinteractive)
    public var isHeaderInteractive : Bool {
        get { try! _default.get_IsHeaderInteractiveImpl() }
        set { try! _default.put_IsHeaderInteractiveImpl(newValue) }
    }

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = HubSection
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIHubSection
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IHubSection
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hubsectioncollection)
public final class HubSectionCollection : WinRTClass, IVector, IIterable {
    public typealias T = HubSection?
    private typealias SwiftABI = WinUI.IVectorHubSection
    private typealias CABI = __x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CControls__CHubSection
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CControls__CHubSection>?) -> HubSectionCollection? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    // MARK: Collection
    public typealias Element = T
    public var startIndex: Int { 0 }
    public var endIndex: Int { Int(size) }
    public func index(after i: Int) -> Int {
        i+1
    }

    public func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    public var count: Int { Int(size) }


    public subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    public func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hubsectioncollection.getat)
    public func getAt(_ index: UInt32) -> HubSection? {
        try! _default.GetAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hubsectioncollection.getview)
    public func getView() -> WindowsFoundation.AnyIVectorView<HubSection?>? {
        try! _default.GetViewImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hubsectioncollection.indexof)
    public func indexOf(_ value: HubSection?, _ index: inout UInt32) -> Bool {
        try! _default.IndexOfImpl(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hubsectioncollection.setat)
    public func setAt(_ index: UInt32, _ value: HubSection?) {
        try! _default.SetAtImpl(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hubsectioncollection.insertat)
    public func insertAt(_ index: UInt32, _ value: HubSection?) {
        try! _default.InsertAtImpl(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hubsectioncollection.removeat)
    public func removeAt(_ index: UInt32) {
        try! _default.RemoveAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hubsectioncollection.append)
    public func append(_ value: HubSection?) {
        try! _default.AppendImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hubsectioncollection.removeatend)
    public func removeAtEnd() {
        try! _default.RemoveAtEndImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hubsectioncollection.clear)
    public func clear() {
        try! _default.ClearImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hubsectioncollection.size)
    public var size : UInt32 {
        get { try! _default.get_SizeImpl() }
    }

    private lazy var _IIterable: IIterableHubSection! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hubsectioncollection.first)
    public func first() -> WindowsFoundation.AnyIIterator<HubSection?>? {
        try! _IIterable.FirstImpl()
    }

    deinit {
        _default = nil
        _IIterable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hubsectionheaderclickeventargs)
public final class HubSectionHeaderClickEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IHubSectionHeaderClickEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIHubSectionHeaderClickEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIHubSectionHeaderClickEventArgs>?) -> HubSectionHeaderClickEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public init() {
        super.init(try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.HubSectionHeaderClickEventArgs")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hubsectionheaderclickeventargs.section)
    public var section : HubSection! {
        get { try! _default.get_SectionImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hyperlinkbutton)
open class HyperlinkButton : WinUI.ButtonBase {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IHyperlinkButton
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIHyperlinkButton
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIHyperlinkButton>?) -> HyperlinkButton? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IHyperlinkButtonFactory : __ABI_Microsoft_UI_Xaml_Controls.IHyperlinkButtonFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.HyperlinkButton"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IHyperlinkButtonFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IHyperlinkButtonStatics: __ABI_Microsoft_UI_Xaml_Controls.IHyperlinkButtonStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.HyperlinkButton"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hyperlinkbutton.navigateuriproperty)
    public class var navigateUriProperty : WinUI.DependencyProperty! {
        get { try! _IHyperlinkButtonStatics.get_NavigateUriPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hyperlinkbutton.navigateuri)
    public var navigateUri : WindowsFoundation.Uri! {
        get { try! _default.get_NavigateUriImpl() }
        set { try! _default.put_NavigateUriImpl(newValue) }
    }

    internal enum IContentControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
        internal typealias Class = HyperlinkButton
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIHyperlinkButton
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IHyperlinkButton
        }
    }
    internal typealias Composable = IContentControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iconelement)
open class IconElement : WinUI.FrameworkElement {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IIconElement
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconElement
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconElement>?) -> IconElement? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IIconElementFactory : __ABI_Microsoft_UI_Xaml_Controls.IIconElementFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.IconElement"))

    private static let _IIconElementStatics: __ABI_Microsoft_UI_Xaml_Controls.IIconElementStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.IconElement"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iconelement.foregroundproperty)
    public class var foregroundProperty : WinUI.DependencyProperty! {
        get { try! _IIconElementStatics.get_ForegroundPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iconelement.foreground)
    public var foreground : WinUI.Brush! {
        get { try! _default.get_ForegroundImpl() }
        set { try! _default.put_ForegroundImpl(newValue) }
    }

    internal enum IFrameworkElementOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
        internal typealias Class = IconElement
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconElement
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IIconElement
        }
    }
    internal typealias Composable = IFrameworkElementOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iconsource)
open class IconSource : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IIconSource
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSource
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSource>?) -> IconSource? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.IIconSourceOverridesWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.IIconSourceOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IIconSourceFactory : __ABI_Microsoft_UI_Xaml_Controls.IIconSourceFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.IconSource"))

    private static let _IIconSourceStatics: __ABI_Microsoft_UI_Xaml_Controls.IIconSourceStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.IconSource"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iconsource.foregroundproperty)
    public class var foregroundProperty : WinUI.DependencyProperty! {
        get { try! _IIconSourceStatics.get_ForegroundPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iconsource.createiconelement)
    public func createIconElement() throws -> IconElement! {
        try _default.CreateIconElementImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iconsource.foreground)
    public var foreground : WinUI.Brush! {
        get { try! _default.get_ForegroundImpl() }
        set { try! _default.put_ForegroundImpl(newValue) }
    }

    private lazy var _IIconSourceOverrides: __ABI_Microsoft_UI_Xaml_Controls.IIconSourceOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iconsource.createiconelementcore)
    open func createIconElementCore() throws -> IconElement! {
        try _IIconSourceOverrides.CreateIconElementCoreImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iconsource.geticonelementpropertycore)
    open func getIconElementPropertyCore(_ iconSourceProperty: WinUI.DependencyProperty!) throws -> WinUI.DependencyProperty! {
        try _IIconSourceOverrides.GetIconElementPropertyCoreImpl(iconSourceProperty)
    }

    internal enum IIconSourceOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSourceOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IIconSourceOverrides
        internal typealias Class = IconSource
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSource
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IIconSource
        }
    }
    internal typealias Composable = IIconSourceOverrides
    deinit {
        _default = nil
        _IIconSourceOverrides = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iconsourceelement)
open class IconSourceElement : WinUI.IconElement {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IIconSourceElement
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSourceElement
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSourceElement>?) -> IconSourceElement? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IIconSourceElementFactory : __ABI_Microsoft_UI_Xaml_Controls.IIconSourceElementFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.IconSourceElement"))

    public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IIconSourceElementFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IIconSourceElementStatics: __ABI_Microsoft_UI_Xaml_Controls.IIconSourceElementStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.IconSourceElement"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iconsourceelement.iconsourceproperty)
    public class var iconSourceProperty : WinUI.DependencyProperty! {
        get { try! _IIconSourceElementStatics.get_IconSourcePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iconsourceelement.iconsource)
    public var iconSource : IconSource! {
        get { try! _default.get_IconSourceImpl() }
        set { try! _default.put_IconSourceImpl(newValue) }
    }

    internal enum IFrameworkElementOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
        internal typealias Class = IconSourceElement
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSourceElement
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IIconSourceElement
        }
    }
    internal typealias Composable = IFrameworkElementOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.image)
public final class Image : WinUI.FrameworkElement {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IImage
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImage
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImage>?) -> Image? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.Image")))
    }

    private static let _IImageStatics: __ABI_Microsoft_UI_Xaml_Controls.IImageStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.Image"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.image.ninegridproperty)
    public static var nineGridProperty : WinUI.DependencyProperty! {
        get { try! _IImageStatics.get_NineGridPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.image.sourceproperty)
    public static var sourceProperty : WinUI.DependencyProperty! {
        get { try! _IImageStatics.get_SourcePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.image.stretchproperty)
    public static var stretchProperty : WinUI.DependencyProperty! {
        get { try! _IImageStatics.get_StretchPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.image.getascastingsource)
    public func getAsCastingSource() throws -> UWP.CastingSource! {
        try _default.GetAsCastingSourceImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.image.getalphamask)
    public func getAlphaMask() throws -> WinAppSDK.CompositionBrush! {
        try _default.GetAlphaMaskImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.image.ninegrid)
    public var nineGrid : WinUI.Thickness {
        get { try! _default.get_NineGridImpl() }
        set { try! _default.put_NineGridImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.image.source)
    public var source : WinUI.ImageSource! {
        get { try! _default.get_SourceImpl() }
        set { try! _default.put_SourceImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.image.stretch)
    public var stretch : WinUI.Stretch {
        get { try! _default.get_StretchImpl() }
        set { try! _default.put_StretchImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.image.imagefailed)
    public lazy var imageFailed : Event<WinUI.ExceptionRoutedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ImageFailedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ImageFailedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.image.imageopened)
    public lazy var imageOpened : Event<WinUI.RoutedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ImageOpenedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ImageOpenedImpl($0)
       }
      )
    }()

    internal enum IFrameworkElementOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
        internal typealias Class = Image
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImage
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IImage
        }
    }
    internal typealias Composable = IFrameworkElementOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.imageicon)
open class ImageIcon : WinUI.IconElement {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IImageIcon
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImageIcon
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImageIcon>?) -> ImageIcon? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IImageIconFactory : __ABI_Microsoft_UI_Xaml_Controls.IImageIconFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ImageIcon"))

    public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IImageIconFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IImageIconStatics: __ABI_Microsoft_UI_Xaml_Controls.IImageIconStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ImageIcon"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.imageicon.sourceproperty)
    public class var sourceProperty : WinUI.DependencyProperty! {
        get { try! _IImageIconStatics.get_SourcePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.imageicon.source)
    public var source : WinUI.ImageSource! {
        get { try! _default.get_SourceImpl() }
        set { try! _default.put_SourceImpl(newValue) }
    }

    internal enum IFrameworkElementOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
        internal typealias Class = ImageIcon
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImageIcon
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IImageIcon
        }
    }
    internal typealias Composable = IFrameworkElementOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.imageiconsource)
open class ImageIconSource : WinUI.IconSource {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IImageIconSource
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImageIconSource
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImageIconSource>?) -> ImageIconSource? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IImageIconSourceFactory : __ABI_Microsoft_UI_Xaml_Controls.IImageIconSourceFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ImageIconSource"))

    public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IImageIconSourceFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IImageIconSourceStatics: __ABI_Microsoft_UI_Xaml_Controls.IImageIconSourceStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ImageIconSource"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.imageiconsource.imagesourceproperty)
    public class var imageSourceProperty : WinUI.DependencyProperty! {
        get { try! _IImageIconSourceStatics.get_ImageSourcePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.imageiconsource.imagesource)
    public var imageSource : WinUI.ImageSource! {
        get { try! _default.get_ImageSourceImpl() }
        set { try! _default.put_ImageSourceImpl(newValue) }
    }

    internal enum IIconSourceOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSourceOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IIconSourceOverrides
        internal typealias Class = ImageIconSource
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImageIconSource
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IImageIconSource
        }
    }
    internal typealias Composable = IIconSourceOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobadge)
open class InfoBadge : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IInfoBadge
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBadge
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBadge>?) -> InfoBadge? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IInfoBadgeFactory : __ABI_Microsoft_UI_Xaml_Controls.IInfoBadgeFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.InfoBadge"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IInfoBadgeFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IInfoBadgeStatics: __ABI_Microsoft_UI_Xaml_Controls.IInfoBadgeStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.InfoBadge"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobadge.iconsourceproperty)
    public class var iconSourceProperty : WinUI.DependencyProperty! {
        get { try! _IInfoBadgeStatics.get_IconSourcePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobadge.templatesettingsproperty)
    public class var templateSettingsProperty : WinUI.DependencyProperty! {
        get { try! _IInfoBadgeStatics.get_TemplateSettingsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobadge.valueproperty)
    public class var valueProperty : WinUI.DependencyProperty! {
        get { try! _IInfoBadgeStatics.get_ValuePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobadge.iconsource)
    public var iconSource : IconSource! {
        get { try! _default.get_IconSourceImpl() }
        set { try! _default.put_IconSourceImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobadge.templatesettings)
    public var templateSettings : InfoBadgeTemplateSettings! {
        get { try! _default.get_TemplateSettingsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobadge.value)
    public var value : Int32 {
        get { try! _default.get_ValueImpl() }
        set { try! _default.put_ValueImpl(newValue) }
    }

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = InfoBadge
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBadge
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IInfoBadge
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobadgetemplatesettings)
open class InfoBadgeTemplateSettings : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IInfoBadgeTemplateSettings
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBadgeTemplateSettings
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBadgeTemplateSettings>?) -> InfoBadgeTemplateSettings? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IInfoBadgeTemplateSettingsFactory : __ABI_Microsoft_UI_Xaml_Controls.IInfoBadgeTemplateSettingsFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.InfoBadgeTemplateSettings"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IInfoBadgeTemplateSettingsFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IInfoBadgeTemplateSettingsStatics: __ABI_Microsoft_UI_Xaml_Controls.IInfoBadgeTemplateSettingsStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.InfoBadgeTemplateSettings"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobadgetemplatesettings.iconelementproperty)
    public class var iconElementProperty : WinUI.DependencyProperty! {
        get { try! _IInfoBadgeTemplateSettingsStatics.get_IconElementPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobadgetemplatesettings.infobadgecornerradiusproperty)
    public class var infoBadgeCornerRadiusProperty : WinUI.DependencyProperty! {
        get { try! _IInfoBadgeTemplateSettingsStatics.get_InfoBadgeCornerRadiusPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobadgetemplatesettings.iconelement)
    public var iconElement : IconElement! {
        get { try! _default.get_IconElementImpl() }
        set { try! _default.put_IconElementImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobadgetemplatesettings.infobadgecornerradius)
    public var infoBadgeCornerRadius : WinUI.CornerRadius {
        get { try! _default.get_InfoBadgeCornerRadiusImpl() }
        set { try! _default.put_InfoBadgeCornerRadiusImpl(newValue) }
    }

    internal enum IInfoBadgeTemplateSettings : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = InfoBadgeTemplateSettings
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBadgeTemplateSettings
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IInfoBadgeTemplateSettings
        }
    }
    internal typealias Composable = IInfoBadgeTemplateSettings
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar)
open class InfoBar : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IInfoBar
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBar
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBar>?) -> InfoBar? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IInfoBarFactory : __ABI_Microsoft_UI_Xaml_Controls.IInfoBarFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.InfoBar"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IInfoBarFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IInfoBarStatics: __ABI_Microsoft_UI_Xaml_Controls.IInfoBarStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.InfoBar"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.actionbuttonproperty)
    public class var actionButtonProperty : WinUI.DependencyProperty! {
        get { try! _IInfoBarStatics.get_ActionButtonPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.closebuttoncommandparameterproperty)
    public class var closeButtonCommandParameterProperty : WinUI.DependencyProperty! {
        get { try! _IInfoBarStatics.get_CloseButtonCommandParameterPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.closebuttoncommandproperty)
    public class var closeButtonCommandProperty : WinUI.DependencyProperty! {
        get { try! _IInfoBarStatics.get_CloseButtonCommandPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.closebuttonstyleproperty)
    public class var closeButtonStyleProperty : WinUI.DependencyProperty! {
        get { try! _IInfoBarStatics.get_CloseButtonStylePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.contentproperty)
    public class var contentProperty : WinUI.DependencyProperty! {
        get { try! _IInfoBarStatics.get_ContentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.contenttemplateproperty)
    public class var contentTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IInfoBarStatics.get_ContentTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.iconsourceproperty)
    public class var iconSourceProperty : WinUI.DependencyProperty! {
        get { try! _IInfoBarStatics.get_IconSourcePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.isclosableproperty)
    public class var isClosableProperty : WinUI.DependencyProperty! {
        get { try! _IInfoBarStatics.get_IsClosablePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.isiconvisibleproperty)
    public class var isIconVisibleProperty : WinUI.DependencyProperty! {
        get { try! _IInfoBarStatics.get_IsIconVisiblePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.isopenproperty)
    public class var isOpenProperty : WinUI.DependencyProperty! {
        get { try! _IInfoBarStatics.get_IsOpenPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.messageproperty)
    public class var messageProperty : WinUI.DependencyProperty! {
        get { try! _IInfoBarStatics.get_MessagePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.severityproperty)
    public class var severityProperty : WinUI.DependencyProperty! {
        get { try! _IInfoBarStatics.get_SeverityPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.templatesettingsproperty)
    public class var templateSettingsProperty : WinUI.DependencyProperty! {
        get { try! _IInfoBarStatics.get_TemplateSettingsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.titleproperty)
    public class var titleProperty : WinUI.DependencyProperty! {
        get { try! _IInfoBarStatics.get_TitlePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.actionbutton)
    public var actionButton : WinUI.ButtonBase! {
        get { try! _default.get_ActionButtonImpl() }
        set { try! _default.put_ActionButtonImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.closebuttoncommand)
    public var closeButtonCommand : WinUI.AnyICommand! {
        get { try! _default.get_CloseButtonCommandImpl() }
        set { try! _default.put_CloseButtonCommandImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.closebuttoncommandparameter)
    public var closeButtonCommandParameter : Any! {
        get { try! _default.get_CloseButtonCommandParameterImpl() }
        set { try! _default.put_CloseButtonCommandParameterImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.closebuttonstyle)
    public var closeButtonStyle : WinUI.Style! {
        get { try! _default.get_CloseButtonStyleImpl() }
        set { try! _default.put_CloseButtonStyleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.content)
    public var content : Any! {
        get { try! _default.get_ContentImpl() }
        set { try! _default.put_ContentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.contenttemplate)
    public var contentTemplate : WinUI.DataTemplate! {
        get { try! _default.get_ContentTemplateImpl() }
        set { try! _default.put_ContentTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.iconsource)
    public var iconSource : IconSource! {
        get { try! _default.get_IconSourceImpl() }
        set { try! _default.put_IconSourceImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.isclosable)
    public var isClosable : Bool {
        get { try! _default.get_IsClosableImpl() }
        set { try! _default.put_IsClosableImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.isiconvisible)
    public var isIconVisible : Bool {
        get { try! _default.get_IsIconVisibleImpl() }
        set { try! _default.put_IsIconVisibleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.isopen)
    public var isOpen : Bool {
        get { try! _default.get_IsOpenImpl() }
        set { try! _default.put_IsOpenImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.message)
    public var message : String {
        get { try! _default.get_MessageImpl() }
        set { try! _default.put_MessageImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.severity)
    public var severity : InfoBarSeverity {
        get { try! _default.get_SeverityImpl() }
        set { try! _default.put_SeverityImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.templatesettings)
    public var templateSettings : InfoBarTemplateSettings! {
        get { try! _default.get_TemplateSettingsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.title)
    public var title : String {
        get { try! _default.get_TitleImpl() }
        set { try! _default.put_TitleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.closebuttonclick)
    public lazy var closeButtonClick : Event<TypedEventHandler<InfoBar?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_CloseButtonClickImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_CloseButtonClickImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.closed)
    public lazy var closed : Event<TypedEventHandler<InfoBar?, InfoBarClosedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ClosedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ClosedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobar.closing)
    public lazy var closing : Event<TypedEventHandler<InfoBar?, InfoBarClosingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ClosingImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ClosingImpl($0)
       }
      )
    }()

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = InfoBar
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBar
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IInfoBar
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobarclosedeventargs)
open class InfoBarClosedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IInfoBarClosedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarClosedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarClosedEventArgs>?) -> InfoBarClosedEventArgs? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IInfoBarClosedEventArgsFactory : __ABI_Microsoft_UI_Xaml_Controls.IInfoBarClosedEventArgsFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.InfoBarClosedEventArgs"))

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobarclosedeventargs.reason)
    public var reason : InfoBarCloseReason {
        get { try! _default.get_ReasonImpl() }
    }

    internal enum IInfoBarClosedEventArgs : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = InfoBarClosedEventArgs
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarClosedEventArgs
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IInfoBarClosedEventArgs
        }
    }
    internal typealias Composable = IInfoBarClosedEventArgs
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobarclosingeventargs)
open class InfoBarClosingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IInfoBarClosingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarClosingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarClosingEventArgs>?) -> InfoBarClosingEventArgs? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IInfoBarClosingEventArgsFactory : __ABI_Microsoft_UI_Xaml_Controls.IInfoBarClosingEventArgsFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.InfoBarClosingEventArgs"))

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobarclosingeventargs.cancel)
    public var cancel : Bool {
        get { try! _default.get_CancelImpl() }
        set { try! _default.put_CancelImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobarclosingeventargs.reason)
    public var reason : InfoBarCloseReason {
        get { try! _default.get_ReasonImpl() }
    }

    internal enum IInfoBarClosingEventArgs : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = InfoBarClosingEventArgs
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarClosingEventArgs
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IInfoBarClosingEventArgs
        }
    }
    internal typealias Composable = IInfoBarClosingEventArgs
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobartemplatesettings)
open class InfoBarTemplateSettings : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IInfoBarTemplateSettings
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarTemplateSettings
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarTemplateSettings>?) -> InfoBarTemplateSettings? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IInfoBarTemplateSettingsFactory : __ABI_Microsoft_UI_Xaml_Controls.IInfoBarTemplateSettingsFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.InfoBarTemplateSettings"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IInfoBarTemplateSettingsFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IInfoBarTemplateSettingsStatics: __ABI_Microsoft_UI_Xaml_Controls.IInfoBarTemplateSettingsStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.InfoBarTemplateSettings"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobartemplatesettings.iconelementproperty)
    public class var iconElementProperty : WinUI.DependencyProperty! {
        get { try! _IInfoBarTemplateSettingsStatics.get_IconElementPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobartemplatesettings.iconelement)
    public var iconElement : IconElement! {
        get { try! _default.get_IconElementImpl() }
        set { try! _default.put_IconElementImpl(newValue) }
    }

    internal enum IInfoBarTemplateSettings : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = InfoBarTemplateSettings
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBarTemplateSettings
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IInfoBarTemplateSettings
        }
    }
    internal typealias Composable = IInfoBarTemplateSettings
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.istexttrimmedchangedeventargs)
public final class IsTextTrimmedChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IIsTextTrimmedChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIsTextTrimmedChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIsTextTrimmedChangedEventArgs>?) -> IsTextTrimmedChangedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemclickeventargs)
public final class ItemClickEventArgs : WinUI.RoutedEventArgs {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemClickEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemClickEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemClickEventArgs>?) -> ItemClickEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.ItemClickEventArgs")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemclickeventargs.clickeditem)
    public var clickedItem : Any! {
        get { try! _default.get_ClickedItemImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollection)
public final class ItemCollection : WinRTClass, IObservableVector, IVector, IIterable {
    public typealias T = Any?
    private typealias SwiftABI = WinUI.IObservableVectorAny
    private typealias CABI = __x_ABI_C__FIObservableVector_1_IInspectable
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_C__FIObservableVector_1_IInspectable>?) -> ItemCollection? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    // MARK: Collection
    public typealias Element = T
    public var startIndex: Int { 0 }
    public var endIndex: Int { Int(size) }
    public func index(after i: Int) -> Int {
        i+1
    }

    public func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    public var count: Int { Int(size) }


    public subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    public func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollection.vectorchanged)
    public lazy var vectorChanged : Event<VectorChangedEventHandler<Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_VectorChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_VectorChangedImpl($0)
       }
      )
    }()

    private lazy var _IVector: IVectorAny! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollection.getat)
    public func getAt(_ index: UInt32) -> Any? {
        try! _IVector.GetAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollection.getview)
    public func getView() -> WindowsFoundation.AnyIVectorView<Any?>? {
        try! _IVector.GetViewImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollection.indexof)
    public func indexOf(_ value: Any?, _ index: inout UInt32) -> Bool {
        try! _IVector.IndexOfImpl(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollection.setat)
    public func setAt(_ index: UInt32, _ value: Any?) {
        try! _IVector.SetAtImpl(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollection.insertat)
    public func insertAt(_ index: UInt32, _ value: Any?) {
        try! _IVector.InsertAtImpl(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollection.removeat)
    public func removeAt(_ index: UInt32) {
        try! _IVector.RemoveAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollection.append)
    public func append(_ value: Any?) {
        try! _IVector.AppendImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollection.removeatend)
    public func removeAtEnd() {
        try! _IVector.RemoveAtEndImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollection.clear)
    public func clear() {
        try! _IVector.ClearImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollection.size)
    public var size : UInt32 {
        get { try! _IVector.get_SizeImpl() }
    }

    private lazy var _IIterable: IIterableAny! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollection.first)
    public func first() -> WindowsFoundation.AnyIIterator<Any?>? {
        try! _IIterable.FirstImpl()
    }

    deinit {
        _default = nil
        _IVector = nil
        _IIterable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollectiontransition)
public final class ItemCollectionTransition : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemCollectionTransition
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemCollectionTransition
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemCollectionTransition>?) -> ItemCollectionTransition? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollectiontransition.start)
    public func start() throws -> ItemCollectionTransitionProgress! {
        try _default.StartImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollectiontransition.hasstarted)
    public var hasStarted : Bool {
        get { try! _default.get_HasStartedImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollectiontransition.newbounds)
    public var newBounds : WindowsFoundation.Rect {
        get { try! _default.get_NewBoundsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollectiontransition.oldbounds)
    public var oldBounds : WindowsFoundation.Rect {
        get { try! _default.get_OldBoundsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollectiontransition.operation)
    public var operation : ItemCollectionTransitionOperation {
        get { try! _default.get_OperationImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollectiontransition.triggers)
    public var triggers : ItemCollectionTransitionTriggers {
        get { try! _default.get_TriggersImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollectiontransitioncompletedeventargs)
public final class ItemCollectionTransitionCompletedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemCollectionTransitionCompletedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemCollectionTransitionCompletedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemCollectionTransitionCompletedEventArgs>?) -> ItemCollectionTransitionCompletedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollectiontransitioncompletedeventargs.element)
    public var element : WinUI.UIElement! {
        get { try! _default.get_ElementImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollectiontransitioncompletedeventargs.transition)
    public var transition : ItemCollectionTransition! {
        get { try! _default.get_TransitionImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollectiontransitionprogress)
public final class ItemCollectionTransitionProgress : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemCollectionTransitionProgress
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemCollectionTransitionProgress
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemCollectionTransitionProgress>?) -> ItemCollectionTransitionProgress? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollectiontransitionprogress.complete)
    public func complete() throws {
        try _default.CompleteImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollectiontransitionprogress.element)
    public var element : WinUI.UIElement! {
        get { try! _default.get_ElementImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollectiontransitionprogress.transition)
    public var transition : ItemCollectionTransition! {
        get { try! _default.get_TransitionImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollectiontransitionprovider)
open class ItemCollectionTransitionProvider : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemCollectionTransitionProvider
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemCollectionTransitionProvider
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemCollectionTransitionProvider>?) -> ItemCollectionTransitionProvider? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.IItemCollectionTransitionProviderOverridesWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.IItemCollectionTransitionProviderOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IItemCollectionTransitionProviderFactory : __ABI_Microsoft_UI_Xaml_Controls.IItemCollectionTransitionProviderFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ItemCollectionTransitionProvider"))

    override public init() {
        super.init()
        MakeComposed(composing: Self.Composable.self, self) { baseInterface, innerInterface in 
            try! Self._IItemCollectionTransitionProviderFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollectiontransitionprovider.shouldanimate)
    public func shouldAnimate(_ transition: ItemCollectionTransition!) throws -> Bool {
        try _default.ShouldAnimateImpl(transition)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollectiontransitionprovider.queuetransition)
    public func queueTransition(_ transition: ItemCollectionTransition!) throws {
        try _default.QueueTransitionImpl(transition)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollectiontransitionprovider.transitioncompleted)
    public lazy var transitionCompleted : Event<TypedEventHandler<ItemCollectionTransitionProvider?, ItemCollectionTransitionCompletedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_TransitionCompletedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_TransitionCompletedImpl($0)
       }
      )
    }()

    private lazy var _IItemCollectionTransitionProviderOverrides: __ABI_Microsoft_UI_Xaml_Controls.IItemCollectionTransitionProviderOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollectiontransitionprovider.shouldanimatecore)
    open func shouldAnimateCore(_ transition: ItemCollectionTransition!) throws -> Bool {
        try _IItemCollectionTransitionProviderOverrides.ShouldAnimateCoreImpl(transition)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollectiontransitionprovider.starttransitions)
    open func startTransitions(_ transitions: WindowsFoundation.AnyIVector<ItemCollectionTransition?>!) throws {
        try _IItemCollectionTransitionProviderOverrides.StartTransitionsImpl(transitions)
    }

    internal enum IItemCollectionTransitionProviderOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemCollectionTransitionProviderOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemCollectionTransitionProviderOverrides
        internal typealias Class = ItemCollectionTransitionProvider
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemCollectionTransitionProvider
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemCollectionTransitionProvider
        }
    }
    internal typealias Composable = IItemCollectionTransitionProviderOverrides
    deinit {
        _default = nil
        _IItemCollectionTransitionProviderOverrides = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcontainer)
open class ItemContainer : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemContainer
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainer
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainer>?) -> ItemContainer? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IItemContainerFactory : __ABI_Microsoft_UI_Xaml_Controls.IItemContainerFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ItemContainer"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IItemContainerFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IItemContainerStatics: __ABI_Microsoft_UI_Xaml_Controls.IItemContainerStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ItemContainer"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcontainer.childproperty)
    public class var childProperty : WinUI.DependencyProperty! {
        get { try! _IItemContainerStatics.get_ChildPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcontainer.isselectedproperty)
    public class var isSelectedProperty : WinUI.DependencyProperty! {
        get { try! _IItemContainerStatics.get_IsSelectedPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcontainer.child)
    public var child : WinUI.UIElement! {
        get { try! _default.get_ChildImpl() }
        set { try! _default.put_ChildImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcontainer.isselected)
    public var isSelected : Bool {
        get { try! _default.get_IsSelectedImpl() }
        set { try! _default.put_IsSelectedImpl(newValue) }
    }

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = ItemContainer
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainer
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemContainer
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcontainergenerator)
public final class ItemContainerGenerator : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemContainerGenerator
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainerGenerator
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainerGenerator>?) -> ItemContainerGenerator? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcontainergenerator.itemfromcontainer)
    public func itemFromContainer(_ container: WinUI.DependencyObject!) throws -> Any! {
        try _default.ItemFromContainerImpl(container)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcontainergenerator.containerfromitem)
    public func containerFromItem(_ item: Any!) throws -> WinUI.DependencyObject! {
        try _default.ContainerFromItemImpl(item)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcontainergenerator.indexfromcontainer)
    public func indexFromContainer(_ container: WinUI.DependencyObject!) throws -> Int32 {
        try _default.IndexFromContainerImpl(container)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcontainergenerator.containerfromindex)
    public func containerFromIndex(_ index: Int32) throws -> WinUI.DependencyObject! {
        try _default.ContainerFromIndexImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcontainergenerator.getitemcontainergeneratorforpanel)
    public func getItemContainerGeneratorForPanel(_ panel: Panel!) throws -> ItemContainerGenerator! {
        try _default.GetItemContainerGeneratorForPanelImpl(panel)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcontainergenerator.startat)
    public func startAt(_ position: WinUI.GeneratorPosition, _ direction: WinUI.GeneratorDirection, _ allowStartAtRealizedItem: Bool) throws {
        try _default.StartAtImpl(position, direction, allowStartAtRealizedItem)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcontainergenerator.stop)
    public func stop() throws {
        try _default.StopImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcontainergenerator.generatenext)
    public func generateNext(_ isNewlyRealized: inout Bool) throws -> WinUI.DependencyObject! {
        try _default.GenerateNextImpl(&isNewlyRealized)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcontainergenerator.prepareitemcontainer)
    public func prepareItemContainer(_ container: WinUI.DependencyObject!) throws {
        try _default.PrepareItemContainerImpl(container)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcontainergenerator.removeall)
    public func removeAll() throws {
        try _default.RemoveAllImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcontainergenerator.remove)
    public func remove(_ position: WinUI.GeneratorPosition, _ count: Int32) throws {
        try _default.RemoveImpl(position, count)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcontainergenerator.generatorpositionfromindex)
    public func generatorPositionFromIndex(_ itemIndex: Int32) throws -> WinUI.GeneratorPosition {
        try _default.GeneratorPositionFromIndexImpl(itemIndex)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcontainergenerator.indexfromgeneratorposition)
    public func indexFromGeneratorPosition(_ position: WinUI.GeneratorPosition) throws -> Int32 {
        try _default.IndexFromGeneratorPositionImpl(position)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcontainergenerator.recycle)
    public func recycle(_ position: WinUI.GeneratorPosition, _ count: Int32) throws {
        try _default.RecycleImpl(position, count)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcontainergenerator.itemschanged)
    public lazy var itemsChanged : Event<WinUI.ItemsChangedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ItemsChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ItemsChangedImpl($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol)
open class ItemsControl : WinUI.Control, IItemContainerMapping {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsControl
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl>?) -> ItemsControl? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.IItemsControlOverridesWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.IItemsControlOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IItemsControlFactory : __ABI_Microsoft_UI_Xaml_Controls.IItemsControlFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ItemsControl"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IItemsControlFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IItemsControlStatics: __ABI_Microsoft_UI_Xaml_Controls.IItemsControlStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ItemsControl"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.getitemsowner)
    public class func getItemsOwner(_ element: WinUI.DependencyObject!) -> ItemsControl! {
        return try! _IItemsControlStatics.GetItemsOwnerImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.itemscontrolfromitemcontainer)
    public class func itemsControlFromItemContainer(_ container: WinUI.DependencyObject!) -> ItemsControl! {
        return try! _IItemsControlStatics.ItemsControlFromItemContainerImpl(container)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.displaymemberpathproperty)
    public class var displayMemberPathProperty : WinUI.DependencyProperty! {
        get { try! _IItemsControlStatics.get_DisplayMemberPathPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.groupstyleselectorproperty)
    public class var groupStyleSelectorProperty : WinUI.DependencyProperty! {
        get { try! _IItemsControlStatics.get_GroupStyleSelectorPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.isgroupingproperty)
    public class var isGroupingProperty : WinUI.DependencyProperty! {
        get { try! _IItemsControlStatics.get_IsGroupingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.itemcontainerstyleproperty)
    public class var itemContainerStyleProperty : WinUI.DependencyProperty! {
        get { try! _IItemsControlStatics.get_ItemContainerStylePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.itemcontainerstyleselectorproperty)
    public class var itemContainerStyleSelectorProperty : WinUI.DependencyProperty! {
        get { try! _IItemsControlStatics.get_ItemContainerStyleSelectorPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.itemcontainertransitionsproperty)
    public class var itemContainerTransitionsProperty : WinUI.DependencyProperty! {
        get { try! _IItemsControlStatics.get_ItemContainerTransitionsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.itemtemplateproperty)
    public class var itemTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IItemsControlStatics.get_ItemTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.itemtemplateselectorproperty)
    public class var itemTemplateSelectorProperty : WinUI.DependencyProperty! {
        get { try! _IItemsControlStatics.get_ItemTemplateSelectorPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.itemspanelproperty)
    public class var itemsPanelProperty : WinUI.DependencyProperty! {
        get { try! _IItemsControlStatics.get_ItemsPanelPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.itemssourceproperty)
    public class var itemsSourceProperty : WinUI.DependencyProperty! {
        get { try! _IItemsControlStatics.get_ItemsSourcePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.groupheadercontainerfromitemcontainer)
    public func groupHeaderContainerFromItemContainer(_ itemContainer: WinUI.DependencyObject!) throws -> WinUI.DependencyObject! {
        try _default.GroupHeaderContainerFromItemContainerImpl(itemContainer)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.displaymemberpath)
    public var displayMemberPath : String {
        get { try! _default.get_DisplayMemberPathImpl() }
        set { try! _default.put_DisplayMemberPathImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.groupstyle)
    public var groupStyle : WindowsFoundation.AnyIObservableVector<GroupStyle?>! {
        get { try! _default.get_GroupStyleImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.groupstyleselector)
    public var groupStyleSelector : GroupStyleSelector! {
        get { try! _default.get_GroupStyleSelectorImpl() }
        set { try! _default.put_GroupStyleSelectorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.isgrouping)
    public var isGrouping : Bool {
        get { try! _default.get_IsGroupingImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.itemcontainergenerator)
    public var itemContainerGenerator : ItemContainerGenerator! {
        get { try! _default.get_ItemContainerGeneratorImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.itemcontainerstyle)
    public var itemContainerStyle : WinUI.Style! {
        get { try! _default.get_ItemContainerStyleImpl() }
        set { try! _default.put_ItemContainerStyleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.itemcontainerstyleselector)
    public var itemContainerStyleSelector : StyleSelector! {
        get { try! _default.get_ItemContainerStyleSelectorImpl() }
        set { try! _default.put_ItemContainerStyleSelectorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.itemcontainertransitions)
    public var itemContainerTransitions : WinUI.TransitionCollection! {
        get { try! _default.get_ItemContainerTransitionsImpl() }
        set { try! _default.put_ItemContainerTransitionsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.itemtemplate)
    public var itemTemplate : WinUI.DataTemplate! {
        get { try! _default.get_ItemTemplateImpl() }
        set { try! _default.put_ItemTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.itemtemplateselector)
    public var itemTemplateSelector : DataTemplateSelector! {
        get { try! _default.get_ItemTemplateSelectorImpl() }
        set { try! _default.put_ItemTemplateSelectorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.items)
    public var items : ItemCollection! {
        get { try! _default.get_ItemsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.itemspanel)
    public var itemsPanel : ItemsPanelTemplate! {
        get { try! _default.get_ItemsPanelImpl() }
        set { try! _default.put_ItemsPanelImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.itemspanelroot)
    public var itemsPanelRoot : Panel! {
        get { try! _default.get_ItemsPanelRootImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.itemssource)
    public var itemsSource : Any! {
        get { try! _default.get_ItemsSourceImpl() }
        set { try! _default.put_ItemsSourceImpl(newValue) }
    }

    private lazy var _IItemsControlOverrides: __ABI_Microsoft_UI_Xaml_Controls.IItemsControlOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.isitemitsowncontaineroverride)
    open func isItemItsOwnContainerOverride(_ item: Any!) throws -> Bool {
        try _IItemsControlOverrides.IsItemItsOwnContainerOverrideImpl(item)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.getcontainerforitemoverride)
    open func getContainerForItemOverride() throws -> WinUI.DependencyObject! {
        try _IItemsControlOverrides.GetContainerForItemOverrideImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.clearcontainerforitemoverride)
    open func clearContainerForItemOverride(_ element: WinUI.DependencyObject!, _ item: Any!) throws {
        try _IItemsControlOverrides.ClearContainerForItemOverrideImpl(element, item)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.preparecontainerforitemoverride)
    open func prepareContainerForItemOverride(_ element: WinUI.DependencyObject!, _ item: Any!) throws {
        try _IItemsControlOverrides.PrepareContainerForItemOverrideImpl(element, item)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.onitemschanged)
    open func onItemsChanged(_ e: Any!) throws {
        try _IItemsControlOverrides.OnItemsChangedImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.onitemcontainerstylechanged)
    open func onItemContainerStyleChanged(_ oldItemContainerStyle: WinUI.Style!, _ newItemContainerStyle: WinUI.Style!) throws {
        try _IItemsControlOverrides.OnItemContainerStyleChangedImpl(oldItemContainerStyle, newItemContainerStyle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.onitemcontainerstyleselectorchanged)
    open func onItemContainerStyleSelectorChanged(_ oldItemContainerStyleSelector: StyleSelector!, _ newItemContainerStyleSelector: StyleSelector!) throws {
        try _IItemsControlOverrides.OnItemContainerStyleSelectorChangedImpl(oldItemContainerStyleSelector, newItemContainerStyleSelector)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.onitemtemplatechanged)
    open func onItemTemplateChanged(_ oldItemTemplate: WinUI.DataTemplate!, _ newItemTemplate: WinUI.DataTemplate!) throws {
        try _IItemsControlOverrides.OnItemTemplateChangedImpl(oldItemTemplate, newItemTemplate)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.onitemtemplateselectorchanged)
    open func onItemTemplateSelectorChanged(_ oldItemTemplateSelector: DataTemplateSelector!, _ newItemTemplateSelector: DataTemplateSelector!) throws {
        try _IItemsControlOverrides.OnItemTemplateSelectorChangedImpl(oldItemTemplateSelector, newItemTemplateSelector)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.ongroupstyleselectorchanged)
    open func onGroupStyleSelectorChanged(_ oldGroupStyleSelector: GroupStyleSelector!, _ newGroupStyleSelector: GroupStyleSelector!) throws {
        try _IItemsControlOverrides.OnGroupStyleSelectorChangedImpl(oldGroupStyleSelector, newGroupStyleSelector)
    }

    internal enum IItemsControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsControlOverrides
        internal typealias Class = ItemsControl
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsControl
        }
    }
    internal typealias Composable = IItemsControlOverrides
    private lazy var _IItemContainerMapping: __ABI_Microsoft_UI_Xaml_Controls.IItemContainerMapping! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.itemfromcontainer)
    public func itemFromContainer(_ container: WinUI.DependencyObject!) throws -> Any! {
        try _IItemContainerMapping.ItemFromContainerImpl(container)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.containerfromitem)
    public func containerFromItem(_ item: Any!) throws -> WinUI.DependencyObject! {
        try _IItemContainerMapping.ContainerFromItemImpl(item)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.indexfromcontainer)
    public func indexFromContainer(_ container: WinUI.DependencyObject!) throws -> Int32 {
        try _IItemContainerMapping.IndexFromContainerImpl(container)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.containerfromindex)
    public func containerFromIndex(_ index: Int32) throws -> WinUI.DependencyObject! {
        try _IItemContainerMapping.ContainerFromIndexImpl(index)
    }

    deinit {
        _default = nil
        _IItemsControlOverrides = nil
        _IItemContainerMapping = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemspaneltemplate)
public final class ItemsPanelTemplate : WinUI.FrameworkTemplate {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsPanelTemplate
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsPanelTemplate
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsPanelTemplate>?) -> ItemsPanelTemplate? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.ItemsPanelTemplate")))
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemspickedeventargs)
public final class ItemsPickedEventArgs : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsPickedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsPickedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsPickedEventArgs>?) -> ItemsPickedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.ItemsPickedEventArgs")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemspickedeventargs.addeditems)
    public var addedItems : WindowsFoundation.AnyIVector<Any?>! {
        get { try! _default.get_AddedItemsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemspickedeventargs.removeditems)
    public var removedItems : WindowsFoundation.AnyIVector<Any?>! {
        get { try! _default.get_RemovedItemsImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemspresenter)
public final class ItemsPresenter : WinUI.FrameworkElement, WinUI.IScrollSnapPointsInfo {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsPresenter
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsPresenter
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsPresenter>?) -> ItemsPresenter? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.ItemsPresenter")))
    }

    private static let _IItemsPresenterStatics: __ABI_Microsoft_UI_Xaml_Controls.IItemsPresenterStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ItemsPresenter"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemspresenter.footerproperty)
    public static var footerProperty : WinUI.DependencyProperty! {
        get { try! _IItemsPresenterStatics.get_FooterPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemspresenter.footertemplateproperty)
    public static var footerTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IItemsPresenterStatics.get_FooterTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemspresenter.footertransitionsproperty)
    public static var footerTransitionsProperty : WinUI.DependencyProperty! {
        get { try! _IItemsPresenterStatics.get_FooterTransitionsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemspresenter.headerproperty)
    public static var headerProperty : WinUI.DependencyProperty! {
        get { try! _IItemsPresenterStatics.get_HeaderPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemspresenter.headertemplateproperty)
    public static var headerTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IItemsPresenterStatics.get_HeaderTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemspresenter.headertransitionsproperty)
    public static var headerTransitionsProperty : WinUI.DependencyProperty! {
        get { try! _IItemsPresenterStatics.get_HeaderTransitionsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemspresenter.paddingproperty)
    public static var paddingProperty : WinUI.DependencyProperty! {
        get { try! _IItemsPresenterStatics.get_PaddingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemspresenter.footer)
    public var footer : Any! {
        get { try! _default.get_FooterImpl() }
        set { try! _default.put_FooterImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemspresenter.footertemplate)
    public var footerTemplate : WinUI.DataTemplate! {
        get { try! _default.get_FooterTemplateImpl() }
        set { try! _default.put_FooterTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemspresenter.footertransitions)
    public var footerTransitions : WinUI.TransitionCollection! {
        get { try! _default.get_FooterTransitionsImpl() }
        set { try! _default.put_FooterTransitionsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemspresenter.header)
    public var header : Any! {
        get { try! _default.get_HeaderImpl() }
        set { try! _default.put_HeaderImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemspresenter.headertemplate)
    public var headerTemplate : WinUI.DataTemplate! {
        get { try! _default.get_HeaderTemplateImpl() }
        set { try! _default.put_HeaderTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemspresenter.headertransitions)
    public var headerTransitions : WinUI.TransitionCollection! {
        get { try! _default.get_HeaderTransitionsImpl() }
        set { try! _default.put_HeaderTransitionsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemspresenter.padding)
    public var padding : WinUI.Thickness {
        get { try! _default.get_PaddingImpl() }
        set { try! _default.put_PaddingImpl(newValue) }
    }

    private lazy var _IScrollSnapPointsInfo: __ABI_Microsoft_UI_Xaml_Controls_Primitives.IScrollSnapPointsInfo! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemspresenter.getirregularsnappoints)
    public func getIrregularSnapPoints(_ orientation: Orientation, _ alignment: WinUI.SnapPointsAlignment) throws -> WindowsFoundation.AnyIVectorView<Float>! {
        try _IScrollSnapPointsInfo.GetIrregularSnapPointsImpl(orientation, alignment)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemspresenter.getregularsnappoints)
    public func getRegularSnapPoints(_ orientation: Orientation, _ alignment: WinUI.SnapPointsAlignment, _ offset: inout Float) throws -> Float {
        try _IScrollSnapPointsInfo.GetRegularSnapPointsImpl(orientation, alignment, &offset)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemspresenter.arehorizontalsnappointsregular)
    public var areHorizontalSnapPointsRegular : Bool {
        get { try! _IScrollSnapPointsInfo.get_AreHorizontalSnapPointsRegularImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemspresenter.areverticalsnappointsregular)
    public var areVerticalSnapPointsRegular : Bool {
        get { try! _IScrollSnapPointsInfo.get_AreVerticalSnapPointsRegularImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemspresenter.horizontalsnappointschanged)
    public lazy var horizontalSnapPointsChanged : Event<EventHandler<Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._IScrollSnapPointsInfo else { return .init() }
          return try! this.add_HorizontalSnapPointsChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._IScrollSnapPointsInfo.remove_HorizontalSnapPointsChangedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemspresenter.verticalsnappointschanged)
    public lazy var verticalSnapPointsChanged : Event<EventHandler<Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._IScrollSnapPointsInfo else { return .init() }
          return try! this.add_VerticalSnapPointsChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._IScrollSnapPointsInfo.remove_VerticalSnapPointsChangedImpl($0)
       }
      )
    }()

    internal enum IFrameworkElementOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
        internal typealias Class = ItemsPresenter
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsPresenter
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsPresenter
        }
    }
    internal typealias Composable = IFrameworkElementOverrides
    deinit {
        _default = nil
        _IScrollSnapPointsInfo = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeater)
open class ItemsRepeater : WinUI.FrameworkElement {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsRepeater
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeater
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeater>?) -> ItemsRepeater? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IItemsRepeaterFactory : __ABI_Microsoft_UI_Xaml_Controls.IItemsRepeaterFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ItemsRepeater"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IItemsRepeaterFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IItemsRepeaterStatics: __ABI_Microsoft_UI_Xaml_Controls.IItemsRepeaterStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ItemsRepeater"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeater.backgroundproperty)
    public class var backgroundProperty : WinUI.DependencyProperty! {
        get { try! _IItemsRepeaterStatics.get_BackgroundPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeater.horizontalcachelengthproperty)
    public class var horizontalCacheLengthProperty : WinUI.DependencyProperty! {
        get { try! _IItemsRepeaterStatics.get_HorizontalCacheLengthPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeater.itemtemplateproperty)
    public class var itemTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IItemsRepeaterStatics.get_ItemTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeater.itemssourceproperty)
    public class var itemsSourceProperty : WinUI.DependencyProperty! {
        get { try! _IItemsRepeaterStatics.get_ItemsSourcePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeater.layoutproperty)
    public class var layoutProperty : WinUI.DependencyProperty! {
        get { try! _IItemsRepeaterStatics.get_LayoutPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeater.verticalcachelengthproperty)
    public class var verticalCacheLengthProperty : WinUI.DependencyProperty! {
        get { try! _IItemsRepeaterStatics.get_VerticalCacheLengthPropertyImpl() }
    }

    private static let _IItemsRepeaterStatics2: __ABI_Microsoft_UI_Xaml_Controls.IItemsRepeaterStatics2 = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ItemsRepeater"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeater.itemtransitionproviderproperty)
    public class var itemTransitionProviderProperty : WinUI.DependencyProperty! {
        get { try! _IItemsRepeaterStatics2.get_ItemTransitionProviderPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeater.getelementindex)
    public func getElementIndex(_ element: WinUI.UIElement!) throws -> Int32 {
        try _default.GetElementIndexImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeater.trygetelement)
    public func tryGetElement(_ index: Int32) throws -> WinUI.UIElement! {
        try _default.TryGetElementImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeater.getorcreateelement)
    public func getOrCreateElement(_ index: Int32) throws -> WinUI.UIElement! {
        try _default.GetOrCreateElementImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeater.background)
    public var background : WinUI.Brush! {
        get { try! _default.get_BackgroundImpl() }
        set { try! _default.put_BackgroundImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeater.horizontalcachelength)
    public var horizontalCacheLength : Double {
        get { try! _default.get_HorizontalCacheLengthImpl() }
        set { try! _default.put_HorizontalCacheLengthImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeater.itemtemplate)
    public var itemTemplate : Any! {
        get { try! _default.get_ItemTemplateImpl() }
        set { try! _default.put_ItemTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeater.itemssource)
    public var itemsSource : Any! {
        get { try! _default.get_ItemsSourceImpl() }
        set { try! _default.put_ItemsSourceImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeater.itemssourceview)
    public var itemsSourceView : ItemsSourceView! {
        get { try! _default.get_ItemsSourceViewImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeater.layout)
    public var layout : Layout! {
        get { try! _default.get_LayoutImpl() }
        set { try! _default.put_LayoutImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeater.verticalcachelength)
    public var verticalCacheLength : Double {
        get { try! _default.get_VerticalCacheLengthImpl() }
        set { try! _default.put_VerticalCacheLengthImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeater.elementclearing)
    public lazy var elementClearing : Event<TypedEventHandler<ItemsRepeater?, ItemsRepeaterElementClearingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ElementClearingImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ElementClearingImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeater.elementindexchanged)
    public lazy var elementIndexChanged : Event<TypedEventHandler<ItemsRepeater?, ItemsRepeaterElementIndexChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ElementIndexChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ElementIndexChangedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeater.elementprepared)
    public lazy var elementPrepared : Event<TypedEventHandler<ItemsRepeater?, ItemsRepeaterElementPreparedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ElementPreparedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ElementPreparedImpl($0)
       }
      )
    }()

    private lazy var _IItemsRepeater2: __ABI_Microsoft_UI_Xaml_Controls.IItemsRepeater2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeater.itemtransitionprovider)
    public var itemTransitionProvider : ItemCollectionTransitionProvider! {
        get { try! _IItemsRepeater2.get_ItemTransitionProviderImpl() }
        set { try! _IItemsRepeater2.put_ItemTransitionProviderImpl(newValue) }
    }

    internal enum IFrameworkElementOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
        internal typealias Class = ItemsRepeater
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeater
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsRepeater
        }
    }
    internal typealias Composable = IFrameworkElementOverrides
    deinit {
        _default = nil
        _IItemsRepeater2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeaterelementclearingeventargs)
public final class ItemsRepeaterElementClearingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsRepeaterElementClearingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeaterElementClearingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeaterElementClearingEventArgs>?) -> ItemsRepeaterElementClearingEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeaterelementclearingeventargs.element)
    public var element : WinUI.UIElement! {
        get { try! _default.get_ElementImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeaterelementindexchangedeventargs)
public final class ItemsRepeaterElementIndexChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsRepeaterElementIndexChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeaterElementIndexChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeaterElementIndexChangedEventArgs>?) -> ItemsRepeaterElementIndexChangedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeaterelementindexchangedeventargs.element)
    public var element : WinUI.UIElement! {
        get { try! _default.get_ElementImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeaterelementindexchangedeventargs.newindex)
    public var newIndex : Int32 {
        get { try! _default.get_NewIndexImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeaterelementindexchangedeventargs.oldindex)
    public var oldIndex : Int32 {
        get { try! _default.get_OldIndexImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeaterelementpreparedeventargs)
public final class ItemsRepeaterElementPreparedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsRepeaterElementPreparedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeaterElementPreparedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeaterElementPreparedEventArgs>?) -> ItemsRepeaterElementPreparedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeaterelementpreparedeventargs.element)
    public var element : WinUI.UIElement! {
        get { try! _default.get_ElementImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeaterelementpreparedeventargs.index)
    public var index : Int32 {
        get { try! _default.get_IndexImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeaterscrollhost)
public final class ItemsRepeaterScrollHost : WinUI.FrameworkElement {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsRepeaterScrollHost
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeaterScrollHost
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeaterScrollHost>?) -> ItemsRepeaterScrollHost? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.ItemsRepeaterScrollHost")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeaterscrollhost.currentanchor)
    public var currentAnchor : WinUI.UIElement! {
        get { try! _default.get_CurrentAnchorImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeaterscrollhost.horizontalanchorratio)
    public var horizontalAnchorRatio : Double {
        get { try! _default.get_HorizontalAnchorRatioImpl() }
        set { try! _default.put_HorizontalAnchorRatioImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeaterscrollhost.scrollviewer)
    public var scrollViewer : ScrollViewer! {
        get { try! _default.get_ScrollViewerImpl() }
        set { try! _default.put_ScrollViewerImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsrepeaterscrollhost.verticalanchorratio)
    public var verticalAnchorRatio : Double {
        get { try! _default.get_VerticalAnchorRatioImpl() }
        set { try! _default.put_VerticalAnchorRatioImpl(newValue) }
    }

    internal enum IFrameworkElementOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
        internal typealias Class = ItemsRepeaterScrollHost
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsRepeaterScrollHost
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsRepeaterScrollHost
        }
    }
    internal typealias Composable = IFrameworkElementOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemssourceview)
open class ItemsSourceView : WinRTClass, WinUI.INotifyCollectionChanged {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsSourceView
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsSourceView
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsSourceView>?) -> ItemsSourceView? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IItemsSourceViewFactory : __ABI_Microsoft_UI_Xaml_Controls.IItemsSourceViewFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ItemsSourceView"))

    public init(_ source: Any!) {
        super.init()
        MakeComposed(composing: Self.Composable.self, self) { baseInterface, innerInterface in 
            try! Self._IItemsSourceViewFactory.CreateInstanceImpl(source, baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemssourceview.getat)
    public func getAt(_ index: Int32) throws -> Any! {
        try _default.GetAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemssourceview.keyfromindex)
    public func keyFromIndex(_ index: Int32) throws -> String {
        try _default.KeyFromIndexImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemssourceview.indexfromkey)
    public func indexFromKey(_ key: String) throws -> Int32 {
        try _default.IndexFromKeyImpl(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemssourceview.indexof)
    public func indexOf(_ item: Any!) throws -> Int32 {
        try _default.IndexOfImpl(item)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemssourceview.count)
    public var count : Int32 {
        get { try! _default.get_CountImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemssourceview.haskeyindexmapping)
    public var hasKeyIndexMapping : Bool {
        get { try! _default.get_HasKeyIndexMappingImpl() }
    }

    private lazy var _INotifyCollectionChanged: __ABI_Microsoft_UI_Xaml_Interop.INotifyCollectionChanged! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemssourceview.collectionchanged)
    public lazy var collectionChanged : Event<WinUI.NotifyCollectionChangedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._INotifyCollectionChanged else { return .init() }
          return try! this.add_CollectionChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._INotifyCollectionChanged.remove_CollectionChangedImpl($0)
       }
      )
    }()

    internal enum IItemsSourceView : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = ItemsSourceView
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsSourceView
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsSourceView
        }
    }
    internal typealias Composable = IItemsSourceView
    deinit {
        _default = nil
        _INotifyCollectionChanged = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsstackpanel)
public final class ItemsStackPanel : WinUI.Panel {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsStackPanel
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsStackPanel
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsStackPanel>?) -> ItemsStackPanel? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.ItemsStackPanel")))
    }

    private static let _IItemsStackPanelStatics: __ABI_Microsoft_UI_Xaml_Controls.IItemsStackPanelStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ItemsStackPanel"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsstackpanel.arestickygroupheadersenabledproperty)
    public static var areStickyGroupHeadersEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IItemsStackPanelStatics.get_AreStickyGroupHeadersEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsstackpanel.cachelengthproperty)
    public static var cacheLengthProperty : WinUI.DependencyProperty! {
        get { try! _IItemsStackPanelStatics.get_CacheLengthPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsstackpanel.groupheaderplacementproperty)
    public static var groupHeaderPlacementProperty : WinUI.DependencyProperty! {
        get { try! _IItemsStackPanelStatics.get_GroupHeaderPlacementPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsstackpanel.grouppaddingproperty)
    public static var groupPaddingProperty : WinUI.DependencyProperty! {
        get { try! _IItemsStackPanelStatics.get_GroupPaddingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsstackpanel.orientationproperty)
    public static var orientationProperty : WinUI.DependencyProperty! {
        get { try! _IItemsStackPanelStatics.get_OrientationPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsstackpanel.arestickygroupheadersenabled)
    public var areStickyGroupHeadersEnabled : Bool {
        get { try! _default.get_AreStickyGroupHeadersEnabledImpl() }
        set { try! _default.put_AreStickyGroupHeadersEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsstackpanel.cachelength)
    public var cacheLength : Double {
        get { try! _default.get_CacheLengthImpl() }
        set { try! _default.put_CacheLengthImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsstackpanel.firstcacheindex)
    public var firstCacheIndex : Int32 {
        get { try! _default.get_FirstCacheIndexImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsstackpanel.firstvisibleindex)
    public var firstVisibleIndex : Int32 {
        get { try! _default.get_FirstVisibleIndexImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsstackpanel.groupheaderplacement)
    public var groupHeaderPlacement : WinUI.GroupHeaderPlacement {
        get { try! _default.get_GroupHeaderPlacementImpl() }
        set { try! _default.put_GroupHeaderPlacementImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsstackpanel.grouppadding)
    public var groupPadding : WinUI.Thickness {
        get { try! _default.get_GroupPaddingImpl() }
        set { try! _default.put_GroupPaddingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsstackpanel.itemsupdatingscrollmode)
    public var itemsUpdatingScrollMode : ItemsUpdatingScrollMode {
        get { try! _default.get_ItemsUpdatingScrollModeImpl() }
        set { try! _default.put_ItemsUpdatingScrollModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsstackpanel.lastcacheindex)
    public var lastCacheIndex : Int32 {
        get { try! _default.get_LastCacheIndexImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsstackpanel.lastvisibleindex)
    public var lastVisibleIndex : Int32 {
        get { try! _default.get_LastVisibleIndexImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsstackpanel.orientation)
    public var orientation : Orientation {
        get { try! _default.get_OrientationImpl() }
        set { try! _default.put_OrientationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsstackpanel.scrollingdirection)
    public var scrollingDirection : PanelScrollingDirection {
        get { try! _default.get_ScrollingDirectionImpl() }
    }

    internal enum IFrameworkElementOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
        internal typealias Class = ItemsStackPanel
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsStackPanel
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsStackPanel
        }
    }
    internal typealias Composable = IFrameworkElementOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsview)
open class ItemsView : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsView
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsView
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsView>?) -> ItemsView? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IItemsViewFactory : __ABI_Microsoft_UI_Xaml_Controls.IItemsViewFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ItemsView"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IItemsViewFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IItemsViewStatics: __ABI_Microsoft_UI_Xaml_Controls.IItemsViewStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ItemsView"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsview.currentitemindexproperty)
    public class var currentItemIndexProperty : WinUI.DependencyProperty! {
        get { try! _IItemsViewStatics.get_CurrentItemIndexPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsview.isiteminvokedenabledproperty)
    public class var isItemInvokedEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IItemsViewStatics.get_IsItemInvokedEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsview.itemtemplateproperty)
    public class var itemTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IItemsViewStatics.get_ItemTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsview.itemtransitionproviderproperty)
    public class var itemTransitionProviderProperty : WinUI.DependencyProperty! {
        get { try! _IItemsViewStatics.get_ItemTransitionProviderPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsview.itemssourceproperty)
    public class var itemsSourceProperty : WinUI.DependencyProperty! {
        get { try! _IItemsViewStatics.get_ItemsSourcePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsview.layoutproperty)
    public class var layoutProperty : WinUI.DependencyProperty! {
        get { try! _IItemsViewStatics.get_LayoutPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsview.scrollviewproperty)
    public class var scrollViewProperty : WinUI.DependencyProperty! {
        get { try! _IItemsViewStatics.get_ScrollViewPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsview.selecteditemproperty)
    public class var selectedItemProperty : WinUI.DependencyProperty! {
        get { try! _IItemsViewStatics.get_SelectedItemPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsview.selectionmodeproperty)
    public class var selectionModeProperty : WinUI.DependencyProperty! {
        get { try! _IItemsViewStatics.get_SelectionModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsview.verticalscrollcontrollerproperty)
    public class var verticalScrollControllerProperty : WinUI.DependencyProperty! {
        get { try! _IItemsViewStatics.get_VerticalScrollControllerPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsview.trygetitemindex)
    public func tryGetItemIndex(_ horizontalViewportRatio: Double, _ verticalViewportRatio: Double, _ index: inout Int32) throws -> Bool {
        try _default.TryGetItemIndexImpl(horizontalViewportRatio, verticalViewportRatio, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsview.startbringitemintoview)
    public func startBringItemIntoView(_ index: Int32, _ options: WinUI.BringIntoViewOptions!) throws {
        try _default.StartBringItemIntoViewImpl(index, options)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsview.select)
    public func select(_ itemIndex: Int32) throws {
        try _default.SelectImpl(itemIndex)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsview.deselect)
    public func deselect(_ itemIndex: Int32) throws {
        try _default.DeselectImpl(itemIndex)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsview.isselected)
    public func isSelected(_ itemIndex: Int32) throws -> Bool {
        try _default.IsSelectedImpl(itemIndex)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsview.selectall)
    public func selectAll() throws {
        try _default.SelectAllImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsview.deselectall)
    public func deselectAll() throws {
        try _default.DeselectAllImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsview.invertselection)
    public func invertSelection() throws {
        try _default.InvertSelectionImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsview.currentitemindex)
    public var currentItemIndex : Int32 {
        get { try! _default.get_CurrentItemIndexImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsview.isiteminvokedenabled)
    public var isItemInvokedEnabled : Bool {
        get { try! _default.get_IsItemInvokedEnabledImpl() }
        set { try! _default.put_IsItemInvokedEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsview.itemtemplate)
    public var itemTemplate : WinUI.AnyIElementFactory! {
        get { try! _default.get_ItemTemplateImpl() }
        set { try! _default.put_ItemTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsview.itemtransitionprovider)
    public var itemTransitionProvider : ItemCollectionTransitionProvider! {
        get { try! _default.get_ItemTransitionProviderImpl() }
        set { try! _default.put_ItemTransitionProviderImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsview.itemssource)
    public var itemsSource : Any! {
        get { try! _default.get_ItemsSourceImpl() }
        set { try! _default.put_ItemsSourceImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsview.layout)
    public var layout : Layout! {
        get { try! _default.get_LayoutImpl() }
        set { try! _default.put_LayoutImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsview.scrollview)
    public var scrollView : ScrollView! {
        get { try! _default.get_ScrollViewImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsview.selecteditem)
    public var selectedItem : Any! {
        get { try! _default.get_SelectedItemImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsview.selecteditems)
    public var selectedItems : WindowsFoundation.AnyIVectorView<Any?>! {
        get { try! _default.get_SelectedItemsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsview.selectionmode)
    public var selectionMode : ItemsViewSelectionMode {
        get { try! _default.get_SelectionModeImpl() }
        set { try! _default.put_SelectionModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsview.verticalscrollcontroller)
    public var verticalScrollController : WinUI.AnyIScrollController! {
        get { try! _default.get_VerticalScrollControllerImpl() }
        set { try! _default.put_VerticalScrollControllerImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsview.iteminvoked)
    public lazy var itemInvoked : Event<TypedEventHandler<ItemsView?, ItemsViewItemInvokedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ItemInvokedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ItemInvokedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsview.selectionchanged)
    public lazy var selectionChanged : Event<TypedEventHandler<ItemsView?, ItemsViewSelectionChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_SelectionChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_SelectionChangedImpl($0)
       }
      )
    }()

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = ItemsView
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsView
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsView
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsviewiteminvokedeventargs)
public final class ItemsViewItemInvokedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsViewItemInvokedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsViewItemInvokedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsViewItemInvokedEventArgs>?) -> ItemsViewItemInvokedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsviewiteminvokedeventargs.invokeditem)
    public var invokedItem : Any! {
        get { try! _default.get_InvokedItemImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemsviewselectionchangedeventargs)
public final class ItemsViewSelectionChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsViewSelectionChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsViewSelectionChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsViewSelectionChangedEventArgs>?) -> ItemsViewSelectionChangedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemswrapgrid)
public final class ItemsWrapGrid : WinUI.Panel {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsWrapGrid
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsWrapGrid
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsWrapGrid>?) -> ItemsWrapGrid? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.ItemsWrapGrid")))
    }

    private static let _IItemsWrapGridStatics: __ABI_Microsoft_UI_Xaml_Controls.IItemsWrapGridStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ItemsWrapGrid"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemswrapgrid.arestickygroupheadersenabledproperty)
    public static var areStickyGroupHeadersEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IItemsWrapGridStatics.get_AreStickyGroupHeadersEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemswrapgrid.cachelengthproperty)
    public static var cacheLengthProperty : WinUI.DependencyProperty! {
        get { try! _IItemsWrapGridStatics.get_CacheLengthPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemswrapgrid.groupheaderplacementproperty)
    public static var groupHeaderPlacementProperty : WinUI.DependencyProperty! {
        get { try! _IItemsWrapGridStatics.get_GroupHeaderPlacementPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemswrapgrid.grouppaddingproperty)
    public static var groupPaddingProperty : WinUI.DependencyProperty! {
        get { try! _IItemsWrapGridStatics.get_GroupPaddingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemswrapgrid.itemheightproperty)
    public static var itemHeightProperty : WinUI.DependencyProperty! {
        get { try! _IItemsWrapGridStatics.get_ItemHeightPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemswrapgrid.itemwidthproperty)
    public static var itemWidthProperty : WinUI.DependencyProperty! {
        get { try! _IItemsWrapGridStatics.get_ItemWidthPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemswrapgrid.maximumrowsorcolumnsproperty)
    public static var maximumRowsOrColumnsProperty : WinUI.DependencyProperty! {
        get { try! _IItemsWrapGridStatics.get_MaximumRowsOrColumnsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemswrapgrid.orientationproperty)
    public static var orientationProperty : WinUI.DependencyProperty! {
        get { try! _IItemsWrapGridStatics.get_OrientationPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemswrapgrid.arestickygroupheadersenabled)
    public var areStickyGroupHeadersEnabled : Bool {
        get { try! _default.get_AreStickyGroupHeadersEnabledImpl() }
        set { try! _default.put_AreStickyGroupHeadersEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemswrapgrid.cachelength)
    public var cacheLength : Double {
        get { try! _default.get_CacheLengthImpl() }
        set { try! _default.put_CacheLengthImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemswrapgrid.firstcacheindex)
    public var firstCacheIndex : Int32 {
        get { try! _default.get_FirstCacheIndexImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemswrapgrid.firstvisibleindex)
    public var firstVisibleIndex : Int32 {
        get { try! _default.get_FirstVisibleIndexImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemswrapgrid.groupheaderplacement)
    public var groupHeaderPlacement : WinUI.GroupHeaderPlacement {
        get { try! _default.get_GroupHeaderPlacementImpl() }
        set { try! _default.put_GroupHeaderPlacementImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemswrapgrid.grouppadding)
    public var groupPadding : WinUI.Thickness {
        get { try! _default.get_GroupPaddingImpl() }
        set { try! _default.put_GroupPaddingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemswrapgrid.itemheight)
    public var itemHeight : Double {
        get { try! _default.get_ItemHeightImpl() }
        set { try! _default.put_ItemHeightImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemswrapgrid.itemwidth)
    public var itemWidth : Double {
        get { try! _default.get_ItemWidthImpl() }
        set { try! _default.put_ItemWidthImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemswrapgrid.lastcacheindex)
    public var lastCacheIndex : Int32 {
        get { try! _default.get_LastCacheIndexImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemswrapgrid.lastvisibleindex)
    public var lastVisibleIndex : Int32 {
        get { try! _default.get_LastVisibleIndexImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemswrapgrid.maximumrowsorcolumns)
    public var maximumRowsOrColumns : Int32 {
        get { try! _default.get_MaximumRowsOrColumnsImpl() }
        set { try! _default.put_MaximumRowsOrColumnsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemswrapgrid.orientation)
    public var orientation : Orientation {
        get { try! _default.get_OrientationImpl() }
        set { try! _default.put_OrientationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemswrapgrid.scrollingdirection)
    public var scrollingDirection : PanelScrollingDirection {
        get { try! _default.get_ScrollingDirectionImpl() }
    }

    internal enum IFrameworkElementOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
        internal typealias Class = ItemsWrapGrid
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsWrapGrid
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsWrapGrid
        }
    }
    internal typealias Composable = IFrameworkElementOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.layout)
open class Layout : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ILayout
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CILayout
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CILayout>?) -> Layout? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.ILayoutOverridesWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.ILayoutOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _ILayoutFactory : __ABI_Microsoft_UI_Xaml_Controls.ILayoutFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.Layout"))

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.layout.initializeforcontext)
    public func initializeForContext(_ context: LayoutContext!) throws {
        try _default.InitializeForContextImpl(context)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.layout.uninitializeforcontext)
    public func uninitializeForContext(_ context: LayoutContext!) throws {
        try _default.UninitializeForContextImpl(context)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.layout.measure)
    public func measure(_ context: LayoutContext!, _ availableSize: WindowsFoundation.Size) throws -> WindowsFoundation.Size {
        try _default.MeasureImpl(context, availableSize)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.layout.arrange)
    public func arrange(_ context: LayoutContext!, _ finalSize: WindowsFoundation.Size) throws -> WindowsFoundation.Size {
        try _default.ArrangeImpl(context, finalSize)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.layout.arrangeinvalidated)
    public lazy var arrangeInvalidated : Event<TypedEventHandler<Layout?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ArrangeInvalidatedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ArrangeInvalidatedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.layout.measureinvalidated)
    public lazy var measureInvalidated : Event<TypedEventHandler<Layout?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_MeasureInvalidatedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_MeasureInvalidatedImpl($0)
       }
      )
    }()

    private lazy var _ILayout2: __ABI_Microsoft_UI_Xaml_Controls.ILayout2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.layout.indexbasedlayoutorientation)
    public var indexBasedLayoutOrientation : IndexBasedLayoutOrientation {
        get { try! _ILayout2.get_IndexBasedLayoutOrientationImpl() }
    }

    private lazy var _ILayoutProtected: __ABI_Microsoft_UI_Xaml_Controls.ILayoutProtected! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.layout.invalidatemeasure)
    public func invalidateMeasure() throws {
        try _ILayoutProtected.InvalidateMeasureImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.layout.invalidatearrange)
    public func invalidateArrange() throws {
        try _ILayoutProtected.InvalidateArrangeImpl()
    }

    private lazy var _ILayoutProtected2: __ABI_Microsoft_UI_Xaml_Controls.ILayoutProtected2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.layout.setindexbasedlayoutorientation)
    public func setIndexBasedLayoutOrientation(_ orientation: IndexBasedLayoutOrientation) throws {
        try _ILayoutProtected2.SetIndexBasedLayoutOrientationImpl(orientation)
    }

    private lazy var _ILayoutOverrides: __ABI_Microsoft_UI_Xaml_Controls.ILayoutOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.layout.createdefaultitemtransitionprovider)
    open func createDefaultItemTransitionProvider() throws -> ItemCollectionTransitionProvider! {
        try _ILayoutOverrides.CreateDefaultItemTransitionProviderImpl()
    }

    internal enum ILayoutOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CILayoutOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ILayoutOverrides
        internal typealias Class = Layout
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CILayout
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ILayout
        }
    }
    internal typealias Composable = ILayoutOverrides
    deinit {
        _default = nil
        _ILayout2 = nil
        _ILayoutProtected = nil
        _ILayoutProtected2 = nil
        _ILayoutOverrides = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.layoutcontext)
open class LayoutContext : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ILayoutContext
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CILayoutContext
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CILayoutContext>?) -> LayoutContext? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.ILayoutContextOverridesWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.ILayoutContextOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _ILayoutContextFactory : __ABI_Microsoft_UI_Xaml_Controls.ILayoutContextFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.LayoutContext"))

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.layoutcontext.layoutstate)
    public var layoutState : Any! {
        get { try! _default.get_LayoutStateImpl() }
        set { try! _default.put_LayoutStateImpl(newValue) }
    }

    private lazy var _ILayoutContextOverrides: __ABI_Microsoft_UI_Xaml_Controls.ILayoutContextOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.layoutcontext.layoutstatecore)
    open var layoutStateCore : Any! {
        get { try! _ILayoutContextOverrides.get_LayoutStateCoreImpl() }
        set { try! _ILayoutContextOverrides.put_LayoutStateCoreImpl(newValue) }
    }

    internal enum ILayoutContextOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CILayoutContextOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ILayoutContextOverrides
        internal typealias Class = LayoutContext
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CILayoutContext
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ILayoutContext
        }
    }
    internal typealias Composable = ILayoutContextOverrides
    deinit {
        _default = nil
        _ILayoutContextOverrides = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.linedflowlayout)
open class LinedFlowLayout : WinUI.VirtualizingLayout {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ILinedFlowLayout
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CILinedFlowLayout
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CILinedFlowLayout>?) -> LinedFlowLayout? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ILinedFlowLayoutFactory : __ABI_Microsoft_UI_Xaml_Controls.ILinedFlowLayoutFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.LinedFlowLayout"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._ILinedFlowLayoutFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _ILinedFlowLayoutStatics: __ABI_Microsoft_UI_Xaml_Controls.ILinedFlowLayoutStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.LinedFlowLayout"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.linedflowlayout.actuallineheightproperty)
    public class var actualLineHeightProperty : WinUI.DependencyProperty! {
        get { try! _ILinedFlowLayoutStatics.get_ActualLineHeightPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.linedflowlayout.itemsjustificationproperty)
    public class var itemsJustificationProperty : WinUI.DependencyProperty! {
        get { try! _ILinedFlowLayoutStatics.get_ItemsJustificationPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.linedflowlayout.itemsstretchproperty)
    public class var itemsStretchProperty : WinUI.DependencyProperty! {
        get { try! _ILinedFlowLayoutStatics.get_ItemsStretchPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.linedflowlayout.lineheightproperty)
    public class var lineHeightProperty : WinUI.DependencyProperty! {
        get { try! _ILinedFlowLayoutStatics.get_LineHeightPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.linedflowlayout.linespacingproperty)
    public class var lineSpacingProperty : WinUI.DependencyProperty! {
        get { try! _ILinedFlowLayoutStatics.get_LineSpacingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.linedflowlayout.minitemspacingproperty)
    public class var minItemSpacingProperty : WinUI.DependencyProperty! {
        get { try! _ILinedFlowLayoutStatics.get_MinItemSpacingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.linedflowlayout.invalidateitemsinfo)
    public func invalidateItemsInfo() throws {
        try _default.InvalidateItemsInfoImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.linedflowlayout.lockitemtoline)
    public func lockItemToLine(_ itemIndex: Int32) throws -> Int32 {
        try _default.LockItemToLineImpl(itemIndex)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.linedflowlayout.actuallineheight)
    public var actualLineHeight : Double {
        get { try! _default.get_ActualLineHeightImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.linedflowlayout.itemsjustification)
    public var itemsJustification : LinedFlowLayoutItemsJustification {
        get { try! _default.get_ItemsJustificationImpl() }
        set { try! _default.put_ItemsJustificationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.linedflowlayout.itemsstretch)
    public var itemsStretch : LinedFlowLayoutItemsStretch {
        get { try! _default.get_ItemsStretchImpl() }
        set { try! _default.put_ItemsStretchImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.linedflowlayout.lineheight)
    public var lineHeight : Double {
        get { try! _default.get_LineHeightImpl() }
        set { try! _default.put_LineHeightImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.linedflowlayout.linespacing)
    public var lineSpacing : Double {
        get { try! _default.get_LineSpacingImpl() }
        set { try! _default.put_LineSpacingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.linedflowlayout.minitemspacing)
    public var minItemSpacing : Double {
        get { try! _default.get_MinItemSpacingImpl() }
        set { try! _default.put_MinItemSpacingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.linedflowlayout.requestedrangelength)
    public var requestedRangeLength : Int32 {
        get { try! _default.get_RequestedRangeLengthImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.linedflowlayout.requestedrangestartindex)
    public var requestedRangeStartIndex : Int32 {
        get { try! _default.get_RequestedRangeStartIndexImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.linedflowlayout.itemsinforequested)
    public lazy var itemsInfoRequested : Event<TypedEventHandler<LinedFlowLayout?, LinedFlowLayoutItemsInfoRequestedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ItemsInfoRequestedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ItemsInfoRequestedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.linedflowlayout.itemsunlocked)
    public lazy var itemsUnlocked : Event<TypedEventHandler<LinedFlowLayout?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ItemsUnlockedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ItemsUnlockedImpl($0)
       }
      )
    }()

    internal enum IVirtualizingLayoutOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingLayoutOverrides
        internal typealias Class = LinedFlowLayout
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CILinedFlowLayout
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ILinedFlowLayout
        }
    }
    internal typealias Composable = IVirtualizingLayoutOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.linedflowlayoutitemcollectiontransitionprovider)
open class LinedFlowLayoutItemCollectionTransitionProvider : WinUI.ItemCollectionTransitionProvider {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ILinedFlowLayoutItemCollectionTransitionProvider
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CILinedFlowLayoutItemCollectionTransitionProvider
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CILinedFlowLayoutItemCollectionTransitionProvider>?) -> LinedFlowLayoutItemCollectionTransitionProvider? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ILinedFlowLayoutItemCollectionTransitionProviderFactory : __ABI_Microsoft_UI_Xaml_Controls.ILinedFlowLayoutItemCollectionTransitionProviderFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.LinedFlowLayoutItemCollectionTransitionProvider"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._ILinedFlowLayoutItemCollectionTransitionProviderFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    internal enum IItemCollectionTransitionProviderOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemCollectionTransitionProviderOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemCollectionTransitionProviderOverrides
        internal typealias Class = LinedFlowLayoutItemCollectionTransitionProvider
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CILinedFlowLayoutItemCollectionTransitionProvider
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ILinedFlowLayoutItemCollectionTransitionProvider
        }
    }
    internal typealias Composable = IItemCollectionTransitionProviderOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.linedflowlayoutitemsinforequestedeventargs)
public final class LinedFlowLayoutItemsInfoRequestedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ILinedFlowLayoutItemsInfoRequestedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CILinedFlowLayoutItemsInfoRequestedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CILinedFlowLayoutItemsInfoRequestedEventArgs>?) -> LinedFlowLayoutItemsInfoRequestedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.linedflowlayoutitemsinforequestedeventargs.itemsrangerequestedlength)
    public var itemsRangeRequestedLength : Int32 {
        get { try! _default.get_ItemsRangeRequestedLengthImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.linedflowlayoutitemsinforequestedeventargs.itemsrangestartindex)
    public var itemsRangeStartIndex : Int32 {
        get { try! _default.get_ItemsRangeStartIndexImpl() }
        set { try! _default.put_ItemsRangeStartIndexImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.linedflowlayoutitemsinforequestedeventargs.maxwidth)
    public var maxWidth : Double {
        get { try! _default.get_MaxWidthImpl() }
        set { try! _default.put_MaxWidthImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.linedflowlayoutitemsinforequestedeventargs.minwidth)
    public var minWidth : Double {
        get { try! _default.get_MinWidthImpl() }
        set { try! _default.put_MinWidthImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listbox)
open class ListBox : WinUI.Selector {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IListBox
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListBox
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListBox>?) -> ListBox? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IListBoxFactory : __ABI_Microsoft_UI_Xaml_Controls.IListBoxFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ListBox"))

    public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IListBoxFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IListBoxStatics: __ABI_Microsoft_UI_Xaml_Controls.IListBoxStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ListBox"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listbox.selectionmodeproperty)
    public class var selectionModeProperty : WinUI.DependencyProperty! {
        get { try! _IListBoxStatics.get_SelectionModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listbox.singleselectionfollowsfocusproperty)
    public class var singleSelectionFollowsFocusProperty : WinUI.DependencyProperty! {
        get { try! _IListBoxStatics.get_SingleSelectionFollowsFocusPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listbox.scrollintoview)
    public func scrollIntoView(_ item: Any!) throws {
        try _default.ScrollIntoViewImpl(item)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listbox.selectall)
    public func selectAll() throws {
        try _default.SelectAllImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listbox.selecteditems)
    public var selectedItems : WindowsFoundation.AnyIVector<Any?>! {
        get { try! _default.get_SelectedItemsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listbox.selectionmode)
    public var selectionMode : SelectionMode {
        get { try! _default.get_SelectionModeImpl() }
        set { try! _default.put_SelectionModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listbox.singleselectionfollowsfocus)
    public var singleSelectionFollowsFocus : Bool {
        get { try! _default.get_SingleSelectionFollowsFocusImpl() }
        set { try! _default.put_SingleSelectionFollowsFocusImpl(newValue) }
    }

    internal enum IItemsControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsControlOverrides
        internal typealias Class = ListBox
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListBox
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IListBox
        }
    }
    internal typealias Composable = IItemsControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listboxitem)
open class ListBoxItem : WinUI.SelectorItem {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IListBoxItem
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListBoxItem
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListBoxItem>?) -> ListBoxItem? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IListBoxItemFactory : __ABI_Microsoft_UI_Xaml_Controls.IListBoxItemFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ListBoxItem"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IListBoxItemFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    internal enum IContentControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
        internal typealias Class = ListBoxItem
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListBoxItem
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IListBoxItem
        }
    }
    internal typealias Composable = IContentControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listpickerflyout)
public final class ListPickerFlyout : WinUI.PickerFlyoutBase {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IListPickerFlyout
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListPickerFlyout
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListPickerFlyout>?) -> ListPickerFlyout? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.ListPickerFlyout")))
    }

    private static let _IListPickerFlyoutStatics: __ABI_Microsoft_UI_Xaml_Controls.IListPickerFlyoutStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ListPickerFlyout"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listpickerflyout.displaymemberpathproperty)
    public static var displayMemberPathProperty : WinUI.DependencyProperty! {
        get { try! _IListPickerFlyoutStatics.get_DisplayMemberPathPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listpickerflyout.itemtemplateproperty)
    public static var itemTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IListPickerFlyoutStatics.get_ItemTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listpickerflyout.itemssourceproperty)
    public static var itemsSourceProperty : WinUI.DependencyProperty! {
        get { try! _IListPickerFlyoutStatics.get_ItemsSourcePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listpickerflyout.selectedindexproperty)
    public static var selectedIndexProperty : WinUI.DependencyProperty! {
        get { try! _IListPickerFlyoutStatics.get_SelectedIndexPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listpickerflyout.selecteditemproperty)
    public static var selectedItemProperty : WinUI.DependencyProperty! {
        get { try! _IListPickerFlyoutStatics.get_SelectedItemPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listpickerflyout.selectedvaluepathproperty)
    public static var selectedValuePathProperty : WinUI.DependencyProperty! {
        get { try! _IListPickerFlyoutStatics.get_SelectedValuePathPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listpickerflyout.selectedvalueproperty)
    public static var selectedValueProperty : WinUI.DependencyProperty! {
        get { try! _IListPickerFlyoutStatics.get_SelectedValuePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listpickerflyout.selectionmodeproperty)
    public static var selectionModeProperty : WinUI.DependencyProperty! {
        get { try! _IListPickerFlyoutStatics.get_SelectionModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listpickerflyout.showatasync)
    public func showAtAsync(_ target: WinUI.FrameworkElement!) throws -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<Any?>?>! {
        try _default.ShowAtAsyncImpl(target)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listpickerflyout.displaymemberpath)
    public var displayMemberPath : String {
        get { try! _default.get_DisplayMemberPathImpl() }
        set { try! _default.put_DisplayMemberPathImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listpickerflyout.itemtemplate)
    public var itemTemplate : WinUI.DataTemplate! {
        get { try! _default.get_ItemTemplateImpl() }
        set { try! _default.put_ItemTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listpickerflyout.itemssource)
    public var itemsSource : Any! {
        get { try! _default.get_ItemsSourceImpl() }
        set { try! _default.put_ItemsSourceImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listpickerflyout.selectedindex)
    public var selectedIndex : Int32 {
        get { try! _default.get_SelectedIndexImpl() }
        set { try! _default.put_SelectedIndexImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listpickerflyout.selecteditem)
    public var selectedItem : Any! {
        get { try! _default.get_SelectedItemImpl() }
        set { try! _default.put_SelectedItemImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listpickerflyout.selecteditems)
    public var selectedItems : WindowsFoundation.AnyIVector<Any?>! {
        get { try! _default.get_SelectedItemsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listpickerflyout.selectedvalue)
    public var selectedValue : Any! {
        get { try! _default.get_SelectedValueImpl() }
        set { try! _default.put_SelectedValueImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listpickerflyout.selectedvaluepath)
    public var selectedValuePath : String {
        get { try! _default.get_SelectedValuePathImpl() }
        set { try! _default.put_SelectedValuePathImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listpickerflyout.selectionmode)
    public var selectionMode : ListPickerFlyoutSelectionMode {
        get { try! _default.get_SelectionModeImpl() }
        set { try! _default.put_SelectionModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listpickerflyout.itemspicked)
    public lazy var itemsPicked : Event<TypedEventHandler<ListPickerFlyout?, ItemsPickedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ItemsPickedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ItemsPickedImpl($0)
       }
      )
    }()

    internal enum IPickerFlyoutBaseOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPickerFlyoutBaseOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IPickerFlyoutBaseOverrides
        internal typealias Class = ListPickerFlyout
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListPickerFlyout
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IListPickerFlyout
        }
    }
    internal typealias Composable = IPickerFlyoutBaseOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listpickerflyoutpresenter)
public final class ListPickerFlyoutPresenter : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IListPickerFlyoutPresenter
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListPickerFlyoutPresenter
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListPickerFlyoutPresenter>?) -> ListPickerFlyoutPresenter? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = ListPickerFlyoutPresenter
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListPickerFlyoutPresenter
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IListPickerFlyoutPresenter
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listview)
open class ListView : WinUI.ListViewBase {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IListView
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListView
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListView>?) -> ListView? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IListViewFactory : __ABI_Microsoft_UI_Xaml_Controls.IListViewFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ListView"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IListViewFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    internal enum IItemsControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsControlOverrides
        internal typealias Class = ListView
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListView
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IListView
        }
    }
    internal typealias Composable = IItemsControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase)
open class ListViewBase : WinUI.Selector, ISemanticZoomInformation {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IListViewBase
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase>?) -> ListViewBase? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IListViewBaseFactory : __ABI_Microsoft_UI_Xaml_Controls.IListViewBaseFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ListViewBase"))

    public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IListViewBaseFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IListViewBaseStatics: __ABI_Microsoft_UI_Xaml_Controls.IListViewBaseStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ListViewBase"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.candragitemsproperty)
    public class var canDragItemsProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_CanDragItemsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.canreorderitemsproperty)
    public class var canReorderItemsProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_CanReorderItemsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.datafetchsizeproperty)
    public class var dataFetchSizeProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_DataFetchSizePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.footerproperty)
    public class var footerProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_FooterPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.footertemplateproperty)
    public class var footerTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_FooterTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.footertransitionsproperty)
    public class var footerTransitionsProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_FooterTransitionsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.headerproperty)
    public class var headerProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_HeaderPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.headertemplateproperty)
    public class var headerTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_HeaderTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.headertransitionsproperty)
    public class var headerTransitionsProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_HeaderTransitionsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.incrementalloadingthresholdproperty)
    public class var incrementalLoadingThresholdProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_IncrementalLoadingThresholdPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.incrementalloadingtriggerproperty)
    public class var incrementalLoadingTriggerProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_IncrementalLoadingTriggerPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.isactiveviewproperty)
    public class var isActiveViewProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_IsActiveViewPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.isitemclickenabledproperty)
    public class var isItemClickEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_IsItemClickEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.ismultiselectcheckboxenabledproperty)
    public class var isMultiSelectCheckBoxEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_IsMultiSelectCheckBoxEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.isswipeenabledproperty)
    public class var isSwipeEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_IsSwipeEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.iszoomedinviewproperty)
    public class var isZoomedInViewProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_IsZoomedInViewPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.reordermodeproperty)
    public class var reorderModeProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_ReorderModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.selectionmodeproperty)
    public class var selectionModeProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_SelectionModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.semanticzoomownerproperty)
    public class var semanticZoomOwnerProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_SemanticZoomOwnerPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.showsscrollingplaceholdersproperty)
    public class var showsScrollingPlaceholdersProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_ShowsScrollingPlaceholdersPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.singleselectionfollowsfocusproperty)
    public class var singleSelectionFollowsFocusProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_SingleSelectionFollowsFocusPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.scrollintoview)
    public func scrollIntoView(_ item: Any!) throws {
        try _default.ScrollIntoViewImpl(item)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.selectall)
    public func selectAll() throws {
        try _default.SelectAllImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.loadmoreitemsasync)
    public func loadMoreItemsAsync() throws -> WindowsFoundation.AnyIAsyncOperation<WinUI.LoadMoreItemsResult>! {
        try _default.LoadMoreItemsAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.scrollintoview)
    public func scrollIntoView(_ item: Any!, _ alignment: ScrollIntoViewAlignment) throws {
        try _default.ScrollIntoViewWithAlignmentImpl(item, alignment)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.setdesiredcontainerupdateduration)
    public func setDesiredContainerUpdateDuration(_ duration: WindowsFoundation.TimeSpan) throws {
        try _default.SetDesiredContainerUpdateDurationImpl(duration)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.selectrange)
    public func selectRange(_ itemIndexRange: WinUI.ItemIndexRange!) throws {
        try _default.SelectRangeImpl(itemIndexRange)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.deselectrange)
    public func deselectRange(_ itemIndexRange: WinUI.ItemIndexRange!) throws {
        try _default.DeselectRangeImpl(itemIndexRange)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.isdragsource)
    public func isDragSource() throws -> Bool {
        try _default.IsDragSourceImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.trystartconnectedanimationasync)
    public func tryStartConnectedAnimationAsync(_ animation: WinUI.ConnectedAnimation!, _ item: Any!, _ elementName: String) throws -> WindowsFoundation.AnyIAsyncOperation<Bool>! {
        try _default.TryStartConnectedAnimationAsyncImpl(animation, item, elementName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.prepareconnectedanimation)
    public func prepareConnectedAnimation(_ key: String, _ item: Any!, _ elementName: String) throws -> WinUI.ConnectedAnimation! {
        try _default.PrepareConnectedAnimationImpl(key, item, elementName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.candragitems)
    public var canDragItems : Bool {
        get { try! _default.get_CanDragItemsImpl() }
        set { try! _default.put_CanDragItemsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.canreorderitems)
    public var canReorderItems : Bool {
        get { try! _default.get_CanReorderItemsImpl() }
        set { try! _default.put_CanReorderItemsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.datafetchsize)
    public var dataFetchSize : Double {
        get { try! _default.get_DataFetchSizeImpl() }
        set { try! _default.put_DataFetchSizeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.footer)
    public var footer : Any! {
        get { try! _default.get_FooterImpl() }
        set { try! _default.put_FooterImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.footertemplate)
    public var footerTemplate : WinUI.DataTemplate! {
        get { try! _default.get_FooterTemplateImpl() }
        set { try! _default.put_FooterTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.footertransitions)
    public var footerTransitions : WinUI.TransitionCollection! {
        get { try! _default.get_FooterTransitionsImpl() }
        set { try! _default.put_FooterTransitionsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.header)
    public var header : Any! {
        get { try! _default.get_HeaderImpl() }
        set { try! _default.put_HeaderImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.headertemplate)
    public var headerTemplate : WinUI.DataTemplate! {
        get { try! _default.get_HeaderTemplateImpl() }
        set { try! _default.put_HeaderTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.headertransitions)
    public var headerTransitions : WinUI.TransitionCollection! {
        get { try! _default.get_HeaderTransitionsImpl() }
        set { try! _default.put_HeaderTransitionsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.incrementalloadingthreshold)
    public var incrementalLoadingThreshold : Double {
        get { try! _default.get_IncrementalLoadingThresholdImpl() }
        set { try! _default.put_IncrementalLoadingThresholdImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.incrementalloadingtrigger)
    public var incrementalLoadingTrigger : IncrementalLoadingTrigger {
        get { try! _default.get_IncrementalLoadingTriggerImpl() }
        set { try! _default.put_IncrementalLoadingTriggerImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.isitemclickenabled)
    public var isItemClickEnabled : Bool {
        get { try! _default.get_IsItemClickEnabledImpl() }
        set { try! _default.put_IsItemClickEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.ismultiselectcheckboxenabled)
    public var isMultiSelectCheckBoxEnabled : Bool {
        get { try! _default.get_IsMultiSelectCheckBoxEnabledImpl() }
        set { try! _default.put_IsMultiSelectCheckBoxEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.isswipeenabled)
    public var isSwipeEnabled : Bool {
        get { try! _default.get_IsSwipeEnabledImpl() }
        set { try! _default.put_IsSwipeEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.reordermode)
    public var reorderMode : ListViewReorderMode {
        get { try! _default.get_ReorderModeImpl() }
        set { try! _default.put_ReorderModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.selecteditems)
    public var selectedItems : WindowsFoundation.AnyIVector<Any?>! {
        get { try! _default.get_SelectedItemsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.selectedranges)
    public var selectedRanges : WindowsFoundation.AnyIVectorView<WinUI.ItemIndexRange?>! {
        get { try! _default.get_SelectedRangesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.selectionmode)
    public var selectionMode : ListViewSelectionMode {
        get { try! _default.get_SelectionModeImpl() }
        set { try! _default.put_SelectionModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.showsscrollingplaceholders)
    public var showsScrollingPlaceholders : Bool {
        get { try! _default.get_ShowsScrollingPlaceholdersImpl() }
        set { try! _default.put_ShowsScrollingPlaceholdersImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.singleselectionfollowsfocus)
    public var singleSelectionFollowsFocus : Bool {
        get { try! _default.get_SingleSelectionFollowsFocusImpl() }
        set { try! _default.put_SingleSelectionFollowsFocusImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.choosinggroupheadercontainer)
    public lazy var choosingGroupHeaderContainer : Event<TypedEventHandler<ListViewBase?, ChoosingGroupHeaderContainerEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ChoosingGroupHeaderContainerImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ChoosingGroupHeaderContainerImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.choosingitemcontainer)
    public lazy var choosingItemContainer : Event<TypedEventHandler<ListViewBase?, ChoosingItemContainerEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ChoosingItemContainerImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ChoosingItemContainerImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.containercontentchanging)
    public lazy var containerContentChanging : Event<TypedEventHandler<ListViewBase?, ContainerContentChangingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ContainerContentChangingImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ContainerContentChangingImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.dragitemscompleted)
    public lazy var dragItemsCompleted : Event<TypedEventHandler<ListViewBase?, DragItemsCompletedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_DragItemsCompletedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_DragItemsCompletedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.dragitemsstarting)
    public lazy var dragItemsStarting : Event<DragItemsStartingEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_DragItemsStartingImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_DragItemsStartingImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.itemclick)
    public lazy var itemClick : Event<ItemClickEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ItemClickImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ItemClickImpl($0)
       }
      )
    }()

    private lazy var _ISemanticZoomInformation: __ABI_Microsoft_UI_Xaml_Controls.ISemanticZoomInformation! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.initializeviewchange)
    public func initializeViewChange() throws {
        try _ISemanticZoomInformation.InitializeViewChangeImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.completeviewchange)
    public func completeViewChange() throws {
        try _ISemanticZoomInformation.CompleteViewChangeImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.makevisible)
    public func makeVisible(_ item: SemanticZoomLocation!) throws {
        try _ISemanticZoomInformation.MakeVisibleImpl(item)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.startviewchangefrom)
    public func startViewChangeFrom(_ source: SemanticZoomLocation!, _ destination: SemanticZoomLocation!) throws {
        try _ISemanticZoomInformation.StartViewChangeFromImpl(source, destination)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.startviewchangeto)
    public func startViewChangeTo(_ source: SemanticZoomLocation!, _ destination: SemanticZoomLocation!) throws {
        try _ISemanticZoomInformation.StartViewChangeToImpl(source, destination)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.completeviewchangefrom)
    public func completeViewChangeFrom(_ source: SemanticZoomLocation!, _ destination: SemanticZoomLocation!) throws {
        try _ISemanticZoomInformation.CompleteViewChangeFromImpl(source, destination)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.completeviewchangeto)
    public func completeViewChangeTo(_ source: SemanticZoomLocation!, _ destination: SemanticZoomLocation!) throws {
        try _ISemanticZoomInformation.CompleteViewChangeToImpl(source, destination)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.isactiveview)
    public var isActiveView : Bool {
        get { try! _ISemanticZoomInformation.get_IsActiveViewImpl() }
        set { try! _ISemanticZoomInformation.put_IsActiveViewImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.iszoomedinview)
    public var isZoomedInView : Bool {
        get { try! _ISemanticZoomInformation.get_IsZoomedInViewImpl() }
        set { try! _ISemanticZoomInformation.put_IsZoomedInViewImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.semanticzoomowner)
    public var semanticZoomOwner : SemanticZoom! {
        get { try! _ISemanticZoomInformation.get_SemanticZoomOwnerImpl() }
        set { try! _ISemanticZoomInformation.put_SemanticZoomOwnerImpl(newValue) }
    }

    internal enum IItemsControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsControlOverrides
        internal typealias Class = ListViewBase
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IListViewBase
        }
    }
    internal typealias Composable = IItemsControlOverrides
    deinit {
        _default = nil
        _ISemanticZoomInformation = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbaseheaderitem)
open class ListViewBaseHeaderItem : WinUI.ContentControl {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IListViewBaseHeaderItem
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseHeaderItem
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseHeaderItem>?) -> ListViewBaseHeaderItem? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IListViewBaseHeaderItemFactory : __ABI_Microsoft_UI_Xaml_Controls.IListViewBaseHeaderItemFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ListViewBaseHeaderItem"))

    internal enum IContentControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
        internal typealias Class = ListViewBaseHeaderItem
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseHeaderItem
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IListViewBaseHeaderItem
        }
    }
    internal typealias Composable = IContentControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewheaderitem)
open class ListViewHeaderItem : WinUI.ListViewBaseHeaderItem {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IListViewHeaderItem
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewHeaderItem
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewHeaderItem>?) -> ListViewHeaderItem? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IListViewHeaderItemFactory : __ABI_Microsoft_UI_Xaml_Controls.IListViewHeaderItemFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ListViewHeaderItem"))

    public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IListViewHeaderItemFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    internal enum IContentControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
        internal typealias Class = ListViewHeaderItem
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewHeaderItem
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IListViewHeaderItem
        }
    }
    internal typealias Composable = IContentControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewitem)
open class ListViewItem : WinUI.SelectorItem {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IListViewItem
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewItem
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewItem>?) -> ListViewItem? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IListViewItemFactory : __ABI_Microsoft_UI_Xaml_Controls.IListViewItemFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ListViewItem"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IListViewItemFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewitem.templatesettings)
    public var templateSettings : WinUI.ListViewItemTemplateSettings! {
        get { try! _default.get_TemplateSettingsImpl() }
    }

    internal enum IContentControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
        internal typealias Class = ListViewItem
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewItem
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IListViewItem
        }
    }
    internal typealias Composable = IContentControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewpersistencehelper)
public final class ListViewPersistenceHelper : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IListViewPersistenceHelper
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewPersistenceHelper
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewPersistenceHelper>?) -> ListViewPersistenceHelper? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IListViewPersistenceHelperStatics: __ABI_Microsoft_UI_Xaml_Controls.IListViewPersistenceHelperStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ListViewPersistenceHelper"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewpersistencehelper.getrelativescrollposition)
    public static func getRelativeScrollPosition(_ listViewBase: ListViewBase!, _ itemToKeyHandler: ListViewItemToKeyHandler!) -> String {
        return try! _IListViewPersistenceHelperStatics.GetRelativeScrollPositionImpl(listViewBase, itemToKeyHandler)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewpersistencehelper.setrelativescrollpositionasync)
    public static func setRelativeScrollPositionAsync(_ listViewBase: ListViewBase!, _ relativeScrollPosition: String, _ keyToItemHandler: ListViewKeyToItemHandler!) -> WindowsFoundation.AnyIAsyncAction! {
        return try! _IListViewPersistenceHelperStatics.SetRelativeScrollPositionAsyncImpl(listViewBase, relativeScrollPosition, keyToItemHandler)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mapcontrol)
open class MapControl : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IMapControl
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMapControl
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMapControl>?) -> MapControl? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IMapControlFactory : __ABI_Microsoft_UI_Xaml_Controls.IMapControlFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.MapControl"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IMapControlFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IMapControlStatics: __ABI_Microsoft_UI_Xaml_Controls.IMapControlStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.MapControl"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mapcontrol.centerproperty)
    public class var centerProperty : WinUI.DependencyProperty! {
        get { try! _IMapControlStatics.get_CenterPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mapcontrol.interactivecontrolsvisibleproperty)
    public class var interactiveControlsVisibleProperty : WinUI.DependencyProperty! {
        get { try! _IMapControlStatics.get_InteractiveControlsVisiblePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mapcontrol.layersproperty)
    public class var layersProperty : WinUI.DependencyProperty! {
        get { try! _IMapControlStatics.get_LayersPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mapcontrol.mapservicetokenproperty)
    public class var mapServiceTokenProperty : WinUI.DependencyProperty! {
        get { try! _IMapControlStatics.get_MapServiceTokenPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mapcontrol.zoomlevelproperty)
    public class var zoomLevelProperty : WinUI.DependencyProperty! {
        get { try! _IMapControlStatics.get_ZoomLevelPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mapcontrol.center)
    public var center : UWP.Geopoint! {
        get { try! _default.get_CenterImpl() }
        set { try! _default.put_CenterImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mapcontrol.interactivecontrolsvisible)
    public var interactiveControlsVisible : Bool {
        get { try! _default.get_InteractiveControlsVisibleImpl() }
        set { try! _default.put_InteractiveControlsVisibleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mapcontrol.layers)
    public var layers : WindowsFoundation.AnyIVector<MapLayer?>! {
        get { try! _default.get_LayersImpl() }
        set { try! _default.put_LayersImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mapcontrol.mapservicetoken)
    public var mapServiceToken : String {
        get { try! _default.get_MapServiceTokenImpl() }
        set { try! _default.put_MapServiceTokenImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mapcontrol.zoomlevel)
    public var zoomLevel : Double {
        get { try! _default.get_ZoomLevelImpl() }
        set { try! _default.put_ZoomLevelImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mapcontrol.mapelementclick)
    public lazy var mapElementClick : Event<TypedEventHandler<MapControl?, MapElementClickEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_MapElementClickImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_MapElementClickImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mapcontrol.mapserviceerroroccurred)
    public lazy var mapServiceErrorOccurred : Event<TypedEventHandler<MapControl?, MapControlMapServiceErrorOccurredEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_MapServiceErrorOccurredImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_MapServiceErrorOccurredImpl($0)
       }
      )
    }()

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = MapControl
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMapControl
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IMapControl
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mapcontrolmapserviceerroroccurredeventargs)
public final class MapControlMapServiceErrorOccurredEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IMapControlMapServiceErrorOccurredEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMapControlMapServiceErrorOccurredEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMapControlMapServiceErrorOccurredEventArgs>?) -> MapControlMapServiceErrorOccurredEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mapcontrolmapserviceerroroccurredeventargs.diagnosticmessage)
    public var diagnosticMessage : String {
        get { try! _default.get_DiagnosticMessageImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mapelement)
open class MapElement : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IMapElement
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMapElement
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMapElement>?) -> MapElement? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IMapElementFactory : __ABI_Microsoft_UI_Xaml_Controls.IMapElementFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.MapElement"))

    internal enum IMapElement : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = MapElement
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMapElement
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IMapElement
        }
    }
    internal typealias Composable = IMapElement
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mapelementclickeventargs)
public final class MapElementClickEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IMapElementClickEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMapElementClickEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMapElementClickEventArgs>?) -> MapElementClickEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mapelementclickeventargs.element)
    public var element : MapElement! {
        get { try! _default.get_ElementImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mapelementclickeventargs.location)
    public var location : UWP.Geopoint! {
        get { try! _default.get_LocationImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mapelementslayer)
open class MapElementsLayer : WinUI.MapLayer {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IMapElementsLayer
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMapElementsLayer
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMapElementsLayer>?) -> MapElementsLayer? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IMapElementsLayerFactory : __ABI_Microsoft_UI_Xaml_Controls.IMapElementsLayerFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.MapElementsLayer"))

    public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IMapElementsLayerFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IMapElementsLayerStatics: __ABI_Microsoft_UI_Xaml_Controls.IMapElementsLayerStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.MapElementsLayer"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mapelementslayer.mapelementsproperty)
    public class var mapElementsProperty : WinUI.DependencyProperty! {
        get { try! _IMapElementsLayerStatics.get_MapElementsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mapelementslayer.mapelements)
    public var mapElements : WindowsFoundation.AnyIVector<MapElement?>! {
        get { try! _default.get_MapElementsImpl() }
        set { try! _default.put_MapElementsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mapelementslayer.mapelementclick)
    public lazy var mapElementClick : Event<TypedEventHandler<MapElementsLayer?, MapElementClickEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_MapElementClickImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_MapElementClickImpl($0)
       }
      )
    }()

    internal enum IMapElementsLayer : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = MapElementsLayer
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMapElementsLayer
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IMapElementsLayer
        }
    }
    internal typealias Composable = IMapElementsLayer
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mapicon)
open class MapIcon : WinUI.MapElement {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IMapIcon
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMapIcon
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMapIcon>?) -> MapIcon? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IMapIconFactory : __ABI_Microsoft_UI_Xaml_Controls.IMapIconFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.MapIcon"))

    public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IMapIconFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IMapIconStatics: __ABI_Microsoft_UI_Xaml_Controls.IMapIconStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.MapIcon"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mapicon.locationproperty)
    public class var locationProperty : WinUI.DependencyProperty! {
        get { try! _IMapIconStatics.get_LocationPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mapicon.location)
    public var location : UWP.Geopoint! {
        get { try! _default.get_LocationImpl() }
        set { try! _default.put_LocationImpl(newValue) }
    }

    internal enum IMapIcon : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = MapIcon
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMapIcon
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IMapIcon
        }
    }
    internal typealias Composable = IMapIcon
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.maplayer)
open class MapLayer : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IMapLayer
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMapLayer
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMapLayer>?) -> MapLayer? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IMapLayerFactory : __ABI_Microsoft_UI_Xaml_Controls.IMapLayerFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.MapLayer"))

    internal enum IMapLayer : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = MapLayer
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMapLayer
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IMapLayer
        }
    }
    internal typealias Composable = IMapLayer
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediaplayerelement)
open class MediaPlayerElement : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IMediaPlayerElement
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaPlayerElement
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaPlayerElement>?) -> MediaPlayerElement? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IMediaPlayerElementFactory : __ABI_Microsoft_UI_Xaml_Controls.IMediaPlayerElementFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.MediaPlayerElement"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IMediaPlayerElementFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IMediaPlayerElementStatics: __ABI_Microsoft_UI_Xaml_Controls.IMediaPlayerElementStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.MediaPlayerElement"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediaplayerelement.aretransportcontrolsenabledproperty)
    public class var areTransportControlsEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IMediaPlayerElementStatics.get_AreTransportControlsEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediaplayerelement.autoplayproperty)
    public class var autoPlayProperty : WinUI.DependencyProperty! {
        get { try! _IMediaPlayerElementStatics.get_AutoPlayPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediaplayerelement.isfullwindowproperty)
    public class var isFullWindowProperty : WinUI.DependencyProperty! {
        get { try! _IMediaPlayerElementStatics.get_IsFullWindowPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediaplayerelement.mediaplayerproperty)
    public class var mediaPlayerProperty : WinUI.DependencyProperty! {
        get { try! _IMediaPlayerElementStatics.get_MediaPlayerPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediaplayerelement.postersourceproperty)
    public class var posterSourceProperty : WinUI.DependencyProperty! {
        get { try! _IMediaPlayerElementStatics.get_PosterSourcePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediaplayerelement.sourceproperty)
    public class var sourceProperty : WinUI.DependencyProperty! {
        get { try! _IMediaPlayerElementStatics.get_SourcePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediaplayerelement.stretchproperty)
    public class var stretchProperty : WinUI.DependencyProperty! {
        get { try! _IMediaPlayerElementStatics.get_StretchPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediaplayerelement.setmediaplayer)
    public func setMediaPlayer(_ mediaPlayer: UWP.MediaPlayer!) throws {
        try _default.SetMediaPlayerImpl(mediaPlayer)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediaplayerelement.aretransportcontrolsenabled)
    public var areTransportControlsEnabled : Bool {
        get { try! _default.get_AreTransportControlsEnabledImpl() }
        set { try! _default.put_AreTransportControlsEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediaplayerelement.autoplay)
    public var autoPlay : Bool {
        get { try! _default.get_AutoPlayImpl() }
        set { try! _default.put_AutoPlayImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediaplayerelement.isfullwindow)
    public var isFullWindow : Bool {
        get { try! _default.get_IsFullWindowImpl() }
        set { try! _default.put_IsFullWindowImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediaplayerelement.mediaplayer)
    public var mediaPlayer : UWP.MediaPlayer! {
        get { try! _default.get_MediaPlayerImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediaplayerelement.postersource)
    public var posterSource : WinUI.ImageSource! {
        get { try! _default.get_PosterSourceImpl() }
        set { try! _default.put_PosterSourceImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediaplayerelement.source)
    public var source : UWP.AnyIMediaPlaybackSource! {
        get { try! _default.get_SourceImpl() }
        set { try! _default.put_SourceImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediaplayerelement.stretch)
    public var stretch : WinUI.Stretch {
        get { try! _default.get_StretchImpl() }
        set { try! _default.put_StretchImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediaplayerelement.transportcontrols)
    public var transportControls : MediaTransportControls! {
        get { try! _default.get_TransportControlsImpl() }
        set { try! _default.put_TransportControlsImpl(newValue) }
    }

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = MediaPlayerElement
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaPlayerElement
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IMediaPlayerElement
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediaplayerpresenter)
open class MediaPlayerPresenter : WinUI.FrameworkElement {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IMediaPlayerPresenter
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaPlayerPresenter
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaPlayerPresenter>?) -> MediaPlayerPresenter? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IMediaPlayerPresenterFactory : __ABI_Microsoft_UI_Xaml_Controls.IMediaPlayerPresenterFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.MediaPlayerPresenter"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IMediaPlayerPresenterFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IMediaPlayerPresenterStatics: __ABI_Microsoft_UI_Xaml_Controls.IMediaPlayerPresenterStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.MediaPlayerPresenter"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediaplayerpresenter.isfullwindowproperty)
    public class var isFullWindowProperty : WinUI.DependencyProperty! {
        get { try! _IMediaPlayerPresenterStatics.get_IsFullWindowPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediaplayerpresenter.mediaplayerproperty)
    public class var mediaPlayerProperty : WinUI.DependencyProperty! {
        get { try! _IMediaPlayerPresenterStatics.get_MediaPlayerPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediaplayerpresenter.stretchproperty)
    public class var stretchProperty : WinUI.DependencyProperty! {
        get { try! _IMediaPlayerPresenterStatics.get_StretchPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediaplayerpresenter.isfullwindow)
    public var isFullWindow : Bool {
        get { try! _default.get_IsFullWindowImpl() }
        set { try! _default.put_IsFullWindowImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediaplayerpresenter.mediaplayer)
    public var mediaPlayer : UWP.MediaPlayer! {
        get { try! _default.get_MediaPlayerImpl() }
        set { try! _default.put_MediaPlayerImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediaplayerpresenter.stretch)
    public var stretch : WinUI.Stretch {
        get { try! _default.get_StretchImpl() }
        set { try! _default.put_StretchImpl(newValue) }
    }

    internal enum IFrameworkElementOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
        internal typealias Class = MediaPlayerPresenter
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaPlayerPresenter
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IMediaPlayerPresenter
        }
    }
    internal typealias Composable = IFrameworkElementOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols)
open class MediaTransportControls : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IMediaTransportControls
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls>?) -> MediaTransportControls? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IMediaTransportControlsFactory : __ABI_Microsoft_UI_Xaml_Controls.IMediaTransportControlsFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.MediaTransportControls"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IMediaTransportControlsFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IMediaTransportControlsStatics: __ABI_Microsoft_UI_Xaml_Controls.IMediaTransportControlsStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.MediaTransportControls"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.fastplayfallbackbehaviourproperty)
    public class var fastPlayFallbackBehaviourProperty : WinUI.DependencyProperty! {
        get { try! _IMediaTransportControlsStatics.get_FastPlayFallbackBehaviourPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.iscompactproperty)
    public class var isCompactProperty : WinUI.DependencyProperty! {
        get { try! _IMediaTransportControlsStatics.get_IsCompactPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isfastforwardbuttonvisibleproperty)
    public class var isFastForwardButtonVisibleProperty : WinUI.DependencyProperty! {
        get { try! _IMediaTransportControlsStatics.get_IsFastForwardButtonVisiblePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isfastforwardenabledproperty)
    public class var isFastForwardEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IMediaTransportControlsStatics.get_IsFastForwardEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isfastrewindbuttonvisibleproperty)
    public class var isFastRewindButtonVisibleProperty : WinUI.DependencyProperty! {
        get { try! _IMediaTransportControlsStatics.get_IsFastRewindButtonVisiblePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isfastrewindenabledproperty)
    public class var isFastRewindEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IMediaTransportControlsStatics.get_IsFastRewindEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isnexttrackbuttonvisibleproperty)
    public class var isNextTrackButtonVisibleProperty : WinUI.DependencyProperty! {
        get { try! _IMediaTransportControlsStatics.get_IsNextTrackButtonVisiblePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isplaybackratebuttonvisibleproperty)
    public class var isPlaybackRateButtonVisibleProperty : WinUI.DependencyProperty! {
        get { try! _IMediaTransportControlsStatics.get_IsPlaybackRateButtonVisiblePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isplaybackrateenabledproperty)
    public class var isPlaybackRateEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IMediaTransportControlsStatics.get_IsPlaybackRateEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isprevioustrackbuttonvisibleproperty)
    public class var isPreviousTrackButtonVisibleProperty : WinUI.DependencyProperty! {
        get { try! _IMediaTransportControlsStatics.get_IsPreviousTrackButtonVisiblePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isrepeatbuttonvisibleproperty)
    public class var isRepeatButtonVisibleProperty : WinUI.DependencyProperty! {
        get { try! _IMediaTransportControlsStatics.get_IsRepeatButtonVisiblePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isrepeatenabledproperty)
    public class var isRepeatEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IMediaTransportControlsStatics.get_IsRepeatEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isseekbarvisibleproperty)
    public class var isSeekBarVisibleProperty : WinUI.DependencyProperty! {
        get { try! _IMediaTransportControlsStatics.get_IsSeekBarVisiblePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isseekenabledproperty)
    public class var isSeekEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IMediaTransportControlsStatics.get_IsSeekEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isskipbackwardbuttonvisibleproperty)
    public class var isSkipBackwardButtonVisibleProperty : WinUI.DependencyProperty! {
        get { try! _IMediaTransportControlsStatics.get_IsSkipBackwardButtonVisiblePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isskipbackwardenabledproperty)
    public class var isSkipBackwardEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IMediaTransportControlsStatics.get_IsSkipBackwardEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isskipforwardbuttonvisibleproperty)
    public class var isSkipForwardButtonVisibleProperty : WinUI.DependencyProperty! {
        get { try! _IMediaTransportControlsStatics.get_IsSkipForwardButtonVisiblePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isskipforwardenabledproperty)
    public class var isSkipForwardEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IMediaTransportControlsStatics.get_IsSkipForwardEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isstopbuttonvisibleproperty)
    public class var isStopButtonVisibleProperty : WinUI.DependencyProperty! {
        get { try! _IMediaTransportControlsStatics.get_IsStopButtonVisiblePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isstopenabledproperty)
    public class var isStopEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IMediaTransportControlsStatics.get_IsStopEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isvolumebuttonvisibleproperty)
    public class var isVolumeButtonVisibleProperty : WinUI.DependencyProperty! {
        get { try! _IMediaTransportControlsStatics.get_IsVolumeButtonVisiblePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isvolumeenabledproperty)
    public class var isVolumeEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IMediaTransportControlsStatics.get_IsVolumeEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.iszoombuttonvisibleproperty)
    public class var isZoomButtonVisibleProperty : WinUI.DependencyProperty! {
        get { try! _IMediaTransportControlsStatics.get_IsZoomButtonVisiblePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.iszoomenabledproperty)
    public class var isZoomEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IMediaTransportControlsStatics.get_IsZoomEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.showandhideautomaticallyproperty)
    public class var showAndHideAutomaticallyProperty : WinUI.DependencyProperty! {
        get { try! _IMediaTransportControlsStatics.get_ShowAndHideAutomaticallyPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.show)
    public func show() throws {
        try _default.ShowImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.hide)
    public func hide() throws {
        try _default.HideImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.fastplayfallbackbehaviour)
    public var fastPlayFallbackBehaviour : WinUI.FastPlayFallbackBehaviour {
        get { try! _default.get_FastPlayFallbackBehaviourImpl() }
        set { try! _default.put_FastPlayFallbackBehaviourImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.iscompact)
    public var isCompact : Bool {
        get { try! _default.get_IsCompactImpl() }
        set { try! _default.put_IsCompactImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isfastforwardbuttonvisible)
    public var isFastForwardButtonVisible : Bool {
        get { try! _default.get_IsFastForwardButtonVisibleImpl() }
        set { try! _default.put_IsFastForwardButtonVisibleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isfastforwardenabled)
    public var isFastForwardEnabled : Bool {
        get { try! _default.get_IsFastForwardEnabledImpl() }
        set { try! _default.put_IsFastForwardEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isfastrewindbuttonvisible)
    public var isFastRewindButtonVisible : Bool {
        get { try! _default.get_IsFastRewindButtonVisibleImpl() }
        set { try! _default.put_IsFastRewindButtonVisibleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isfastrewindenabled)
    public var isFastRewindEnabled : Bool {
        get { try! _default.get_IsFastRewindEnabledImpl() }
        set { try! _default.put_IsFastRewindEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isnexttrackbuttonvisible)
    public var isNextTrackButtonVisible : Bool {
        get { try! _default.get_IsNextTrackButtonVisibleImpl() }
        set { try! _default.put_IsNextTrackButtonVisibleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isplaybackratebuttonvisible)
    public var isPlaybackRateButtonVisible : Bool {
        get { try! _default.get_IsPlaybackRateButtonVisibleImpl() }
        set { try! _default.put_IsPlaybackRateButtonVisibleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isplaybackrateenabled)
    public var isPlaybackRateEnabled : Bool {
        get { try! _default.get_IsPlaybackRateEnabledImpl() }
        set { try! _default.put_IsPlaybackRateEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isprevioustrackbuttonvisible)
    public var isPreviousTrackButtonVisible : Bool {
        get { try! _default.get_IsPreviousTrackButtonVisibleImpl() }
        set { try! _default.put_IsPreviousTrackButtonVisibleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isrepeatbuttonvisible)
    public var isRepeatButtonVisible : Bool {
        get { try! _default.get_IsRepeatButtonVisibleImpl() }
        set { try! _default.put_IsRepeatButtonVisibleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isrepeatenabled)
    public var isRepeatEnabled : Bool {
        get { try! _default.get_IsRepeatEnabledImpl() }
        set { try! _default.put_IsRepeatEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isseekbarvisible)
    public var isSeekBarVisible : Bool {
        get { try! _default.get_IsSeekBarVisibleImpl() }
        set { try! _default.put_IsSeekBarVisibleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isseekenabled)
    public var isSeekEnabled : Bool {
        get { try! _default.get_IsSeekEnabledImpl() }
        set { try! _default.put_IsSeekEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isskipbackwardbuttonvisible)
    public var isSkipBackwardButtonVisible : Bool {
        get { try! _default.get_IsSkipBackwardButtonVisibleImpl() }
        set { try! _default.put_IsSkipBackwardButtonVisibleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isskipbackwardenabled)
    public var isSkipBackwardEnabled : Bool {
        get { try! _default.get_IsSkipBackwardEnabledImpl() }
        set { try! _default.put_IsSkipBackwardEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isskipforwardbuttonvisible)
    public var isSkipForwardButtonVisible : Bool {
        get { try! _default.get_IsSkipForwardButtonVisibleImpl() }
        set { try! _default.put_IsSkipForwardButtonVisibleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isskipforwardenabled)
    public var isSkipForwardEnabled : Bool {
        get { try! _default.get_IsSkipForwardEnabledImpl() }
        set { try! _default.put_IsSkipForwardEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isstopbuttonvisible)
    public var isStopButtonVisible : Bool {
        get { try! _default.get_IsStopButtonVisibleImpl() }
        set { try! _default.put_IsStopButtonVisibleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isstopenabled)
    public var isStopEnabled : Bool {
        get { try! _default.get_IsStopEnabledImpl() }
        set { try! _default.put_IsStopEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isvolumebuttonvisible)
    public var isVolumeButtonVisible : Bool {
        get { try! _default.get_IsVolumeButtonVisibleImpl() }
        set { try! _default.put_IsVolumeButtonVisibleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.isvolumeenabled)
    public var isVolumeEnabled : Bool {
        get { try! _default.get_IsVolumeEnabledImpl() }
        set { try! _default.put_IsVolumeEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.iszoombuttonvisible)
    public var isZoomButtonVisible : Bool {
        get { try! _default.get_IsZoomButtonVisibleImpl() }
        set { try! _default.put_IsZoomButtonVisibleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.iszoomenabled)
    public var isZoomEnabled : Bool {
        get { try! _default.get_IsZoomEnabledImpl() }
        set { try! _default.put_IsZoomEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.showandhideautomatically)
    public var showAndHideAutomatically : Bool {
        get { try! _default.get_ShowAndHideAutomaticallyImpl() }
        set { try! _default.put_ShowAndHideAutomaticallyImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrols.thumbnailrequested)
    public lazy var thumbnailRequested : Event<TypedEventHandler<MediaTransportControls?, MediaTransportControlsThumbnailRequestedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ThumbnailRequestedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ThumbnailRequestedImpl($0)
       }
      )
    }()

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = MediaTransportControls
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControls
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IMediaTransportControls
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrolshelper)
public final class MediaTransportControlsHelper : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IMediaTransportControlsHelper
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControlsHelper
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMediaTransportControlsHelper>?) -> MediaTransportControlsHelper? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IMediaTransportControlsHelperStatics: __ABI_Microsoft_UI_Xaml_Controls.IMediaTransportControlsHelperStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.MediaTransportControlsHelper"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrolshelper.getdropoutorder)
    public static func getDropoutOrder(_ element: WinUI.UIElement!) -> Int32? {
        return try! _IMediaTransportControlsHelperStatics.GetDropoutOrderImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrolshelper.setdropoutorder)
    public static func setDropoutOrder(_ element: WinUI.UIElement!, _ value: Int32?) {
        try! _IMediaTransportControlsHelperStatics.SetDropoutOrderImpl(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.mediatransportcontrolshelper.dropoutorderproperty)
    public static var dropoutOrderProperty : WinUI.DependencyProperty! {
        get { try! _IMediaTransportControlsHelperStatics.get_DropoutOrderPropertyImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menubar)
open class MenuBar : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IMenuBar
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBar
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBar>?) -> MenuBar? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IMenuBarFactory : __ABI_Microsoft_UI_Xaml_Controls.IMenuBarFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.MenuBar"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IMenuBarFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IMenuBarStatics: __ABI_Microsoft_UI_Xaml_Controls.IMenuBarStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.MenuBar"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menubar.itemsproperty)
    public class var itemsProperty : WinUI.DependencyProperty! {
        get { try! _IMenuBarStatics.get_ItemsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menubar.items)
    public var items : WindowsFoundation.AnyIVector<MenuBarItem?>! {
        get { try! _default.get_ItemsImpl() }
    }

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = MenuBar
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBar
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IMenuBar
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menubaritem)
open class MenuBarItem : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IMenuBarItem
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBarItem
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBarItem>?) -> MenuBarItem? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IMenuBarItemFactory : __ABI_Microsoft_UI_Xaml_Controls.IMenuBarItemFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.MenuBarItem"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IMenuBarItemFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IMenuBarItemStatics: __ABI_Microsoft_UI_Xaml_Controls.IMenuBarItemStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.MenuBarItem"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menubaritem.itemsproperty)
    public class var itemsProperty : WinUI.DependencyProperty! {
        get { try! _IMenuBarItemStatics.get_ItemsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menubaritem.titleproperty)
    public class var titleProperty : WinUI.DependencyProperty! {
        get { try! _IMenuBarItemStatics.get_TitlePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menubaritem.items)
    public var items : WindowsFoundation.AnyIVector<MenuFlyoutItemBase?>! {
        get { try! _default.get_ItemsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menubaritem.title)
    public var title : String {
        get { try! _default.get_TitleImpl() }
        set { try! _default.put_TitleImpl(newValue) }
    }

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = MenuBarItem
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBarItem
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IMenuBarItem
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menubaritemflyout)
open class MenuBarItemFlyout : WinUI.MenuFlyout {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IMenuBarItemFlyout
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBarItemFlyout
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBarItemFlyout>?) -> MenuBarItemFlyout? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IMenuBarItemFlyoutFactory : __ABI_Microsoft_UI_Xaml_Controls.IMenuBarItemFlyoutFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.MenuBarItemFlyout"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IMenuBarItemFlyoutFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    internal enum IFlyoutBaseOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IFlyoutBaseOverrides
        internal typealias Class = MenuBarItemFlyout
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBarItemFlyout
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IMenuBarItemFlyout
        }
    }
    internal typealias Composable = IFlyoutBaseOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyout)
open class MenuFlyout : WinUI.FlyoutBase {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IMenuFlyout
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyout
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyout>?) -> MenuFlyout? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IMenuFlyoutFactory : __ABI_Microsoft_UI_Xaml_Controls.IMenuFlyoutFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.MenuFlyout"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IMenuFlyoutFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IMenuFlyoutStatics: __ABI_Microsoft_UI_Xaml_Controls.IMenuFlyoutStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.MenuFlyout"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyout.menuflyoutpresenterstyleproperty)
    public class var menuFlyoutPresenterStyleProperty : WinUI.DependencyProperty! {
        get { try! _IMenuFlyoutStatics.get_MenuFlyoutPresenterStylePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyout.showat)
    public func showAt(_ targetElement: WinUI.UIElement!, _ point: WindowsFoundation.Point) throws {
        try _default.ShowAtImpl(targetElement, point)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyout.items)
    public var items : WindowsFoundation.AnyIVector<MenuFlyoutItemBase?>! {
        get { try! _default.get_ItemsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyout.menuflyoutpresenterstyle)
    public var menuFlyoutPresenterStyle : WinUI.Style! {
        get { try! _default.get_MenuFlyoutPresenterStyleImpl() }
        set { try! _default.put_MenuFlyoutPresenterStyleImpl(newValue) }
    }

    internal enum IFlyoutBaseOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IFlyoutBaseOverrides
        internal typealias Class = MenuFlyout
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyout
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IMenuFlyout
        }
    }
    internal typealias Composable = IFlyoutBaseOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutitem)
open class MenuFlyoutItem : WinUI.MenuFlyoutItemBase {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IMenuFlyoutItem
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItem
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItem>?) -> MenuFlyoutItem? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IMenuFlyoutItemFactory : __ABI_Microsoft_UI_Xaml_Controls.IMenuFlyoutItemFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.MenuFlyoutItem"))

    public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IMenuFlyoutItemFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IMenuFlyoutItemStatics: __ABI_Microsoft_UI_Xaml_Controls.IMenuFlyoutItemStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.MenuFlyoutItem"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutitem.commandparameterproperty)
    public class var commandParameterProperty : WinUI.DependencyProperty! {
        get { try! _IMenuFlyoutItemStatics.get_CommandParameterPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutitem.commandproperty)
    public class var commandProperty : WinUI.DependencyProperty! {
        get { try! _IMenuFlyoutItemStatics.get_CommandPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutitem.iconproperty)
    public class var iconProperty : WinUI.DependencyProperty! {
        get { try! _IMenuFlyoutItemStatics.get_IconPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutitem.keyboardacceleratortextoverrideproperty)
    public class var keyboardAcceleratorTextOverrideProperty : WinUI.DependencyProperty! {
        get { try! _IMenuFlyoutItemStatics.get_KeyboardAcceleratorTextOverridePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutitem.textproperty)
    public class var textProperty : WinUI.DependencyProperty! {
        get { try! _IMenuFlyoutItemStatics.get_TextPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutitem.command)
    public var command : WinUI.AnyICommand! {
        get { try! _default.get_CommandImpl() }
        set { try! _default.put_CommandImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutitem.commandparameter)
    public var commandParameter : Any! {
        get { try! _default.get_CommandParameterImpl() }
        set { try! _default.put_CommandParameterImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutitem.icon)
    public var icon : IconElement! {
        get { try! _default.get_IconImpl() }
        set { try! _default.put_IconImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutitem.keyboardacceleratortextoverride)
    public var keyboardAcceleratorTextOverride : String {
        get { try! _default.get_KeyboardAcceleratorTextOverrideImpl() }
        set { try! _default.put_KeyboardAcceleratorTextOverrideImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutitem.templatesettings)
    public var templateSettings : WinUI.MenuFlyoutItemTemplateSettings! {
        get { try! _default.get_TemplateSettingsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutitem.text)
    public var text : String {
        get { try! _default.get_TextImpl() }
        set { try! _default.put_TextImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutitem.click)
    public lazy var click : Event<WinUI.RoutedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ClickImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ClickImpl($0)
       }
      )
    }()

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = MenuFlyoutItem
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItem
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IMenuFlyoutItem
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutitembase)
open class MenuFlyoutItemBase : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IMenuFlyoutItemBase
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItemBase
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItemBase>?) -> MenuFlyoutItemBase? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IMenuFlyoutItemBaseFactory : __ABI_Microsoft_UI_Xaml_Controls.IMenuFlyoutItemBaseFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.MenuFlyoutItemBase"))

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = MenuFlyoutItemBase
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItemBase
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IMenuFlyoutItemBase
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutpresenter)
open class MenuFlyoutPresenter : WinUI.ItemsControl {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IMenuFlyoutPresenter
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutPresenter
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutPresenter>?) -> MenuFlyoutPresenter? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IMenuFlyoutPresenterFactory : __ABI_Microsoft_UI_Xaml_Controls.IMenuFlyoutPresenterFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.MenuFlyoutPresenter"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IMenuFlyoutPresenterFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IMenuFlyoutPresenterStatics: __ABI_Microsoft_UI_Xaml_Controls.IMenuFlyoutPresenterStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.MenuFlyoutPresenter"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutpresenter.isdefaultshadowenabledproperty)
    public class var isDefaultShadowEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IMenuFlyoutPresenterStatics.get_IsDefaultShadowEnabledPropertyImpl() }
    }

    private static let _IMenuFlyoutPresenterStatics2: __ABI_Microsoft_UI_Xaml_Controls.IMenuFlyoutPresenterStatics2 = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.MenuFlyoutPresenter"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutpresenter.systembackdropproperty)
    public class var systemBackdropProperty : WinUI.DependencyProperty! {
        get { try! _IMenuFlyoutPresenterStatics2.get_SystemBackdropPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutpresenter.isdefaultshadowenabled)
    public var isDefaultShadowEnabled : Bool {
        get { try! _default.get_IsDefaultShadowEnabledImpl() }
        set { try! _default.put_IsDefaultShadowEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutpresenter.templatesettings)
    public var templateSettings : WinUI.MenuFlyoutPresenterTemplateSettings! {
        get { try! _default.get_TemplateSettingsImpl() }
    }

    private lazy var _IMenuFlyoutPresenter2: __ABI_Microsoft_UI_Xaml_Controls.IMenuFlyoutPresenter2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutpresenter.systembackdrop)
    public var systemBackdrop : WinUI.SystemBackdrop! {
        get { try! _IMenuFlyoutPresenter2.get_SystemBackdropImpl() }
        set { try! _IMenuFlyoutPresenter2.put_SystemBackdropImpl(newValue) }
    }

    internal enum IItemsControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsControlOverrides
        internal typealias Class = MenuFlyoutPresenter
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutPresenter
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IMenuFlyoutPresenter
        }
    }
    internal typealias Composable = IItemsControlOverrides
    deinit {
        _default = nil
        _IMenuFlyoutPresenter2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutseparator)
open class MenuFlyoutSeparator : WinUI.MenuFlyoutItemBase {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IMenuFlyoutSeparator
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutSeparator
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutSeparator>?) -> MenuFlyoutSeparator? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IMenuFlyoutSeparatorFactory : __ABI_Microsoft_UI_Xaml_Controls.IMenuFlyoutSeparatorFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.MenuFlyoutSeparator"))

    public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IMenuFlyoutSeparatorFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = MenuFlyoutSeparator
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutSeparator
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IMenuFlyoutSeparator
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutsubitem)
public final class MenuFlyoutSubItem : WinUI.MenuFlyoutItemBase {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IMenuFlyoutSubItem
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutSubItem
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutSubItem>?) -> MenuFlyoutSubItem? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.MenuFlyoutSubItem")))
    }

    private static let _IMenuFlyoutSubItemStatics: __ABI_Microsoft_UI_Xaml_Controls.IMenuFlyoutSubItemStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.MenuFlyoutSubItem"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutsubitem.iconproperty)
    public static var iconProperty : WinUI.DependencyProperty! {
        get { try! _IMenuFlyoutSubItemStatics.get_IconPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutsubitem.textproperty)
    public static var textProperty : WinUI.DependencyProperty! {
        get { try! _IMenuFlyoutSubItemStatics.get_TextPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutsubitem.icon)
    public var icon : IconElement! {
        get { try! _default.get_IconImpl() }
        set { try! _default.put_IconImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutsubitem.items)
    public var items : WindowsFoundation.AnyIVector<MenuFlyoutItemBase?>! {
        get { try! _default.get_ItemsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutsubitem.text)
    public var text : String {
        get { try! _default.get_TextImpl() }
        set { try! _default.put_TextImpl(newValue) }
    }

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = MenuFlyoutSubItem
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutSubItem
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IMenuFlyoutSubItem
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview)
open class NavigationView : WinUI.ContentControl {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.INavigationView
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView>?) -> NavigationView? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _INavigationViewFactory : __ABI_Microsoft_UI_Xaml_Controls.INavigationViewFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.NavigationView"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._INavigationViewFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _INavigationViewStatics: __ABI_Microsoft_UI_Xaml_Controls.INavigationViewStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.NavigationView"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.alwaysshowheaderproperty)
    public class var alwaysShowHeaderProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_AlwaysShowHeaderPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.autosuggestboxproperty)
    public class var autoSuggestBoxProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_AutoSuggestBoxPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.compactmodethresholdwidthproperty)
    public class var compactModeThresholdWidthProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_CompactModeThresholdWidthPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.compactpanelengthproperty)
    public class var compactPaneLengthProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_CompactPaneLengthPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.displaymodeproperty)
    public class var displayModeProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_DisplayModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.expandedmodethresholdwidthproperty)
    public class var expandedModeThresholdWidthProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_ExpandedModeThresholdWidthPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.footermenuitemsproperty)
    public class var footerMenuItemsProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_FooterMenuItemsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.footermenuitemssourceproperty)
    public class var footerMenuItemsSourceProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_FooterMenuItemsSourcePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.headerproperty)
    public class var headerProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_HeaderPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.headertemplateproperty)
    public class var headerTemplateProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_HeaderTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.ispaneopenproperty)
    public class var isPaneOpenProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_IsPaneOpenPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.ispanetogglebuttonvisibleproperty)
    public class var isPaneToggleButtonVisibleProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_IsPaneToggleButtonVisiblePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.issettingsvisibleproperty)
    public class var isSettingsVisibleProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_IsSettingsVisiblePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.istitlebarautopaddingenabledproperty)
    public class var isTitleBarAutoPaddingEnabledProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_IsTitleBarAutoPaddingEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.menuitemcontainerstyleproperty)
    public class var menuItemContainerStyleProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_MenuItemContainerStylePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.menuitemcontainerstyleselectorproperty)
    public class var menuItemContainerStyleSelectorProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_MenuItemContainerStyleSelectorPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.menuitemtemplateproperty)
    public class var menuItemTemplateProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_MenuItemTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.menuitemtemplateselectorproperty)
    public class var menuItemTemplateSelectorProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_MenuItemTemplateSelectorPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.menuitemsproperty)
    public class var menuItemsProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_MenuItemsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.menuitemssourceproperty)
    public class var menuItemsSourceProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_MenuItemsSourcePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.openpanelengthproperty)
    public class var openPaneLengthProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_OpenPaneLengthPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.panefooterproperty)
    public class var paneFooterProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_PaneFooterPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.panetogglebuttonstyleproperty)
    public class var paneToggleButtonStyleProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_PaneToggleButtonStylePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.selecteditemproperty)
    public class var selectedItemProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_SelectedItemPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.settingsitemproperty)
    public class var settingsItemProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_SettingsItemPropertyImpl() }
    }

    private static let _INavigationViewStatics2: __ABI_Microsoft_UI_Xaml_Controls.INavigationViewStatics2 = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.NavigationView"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.contentoverlayproperty)
    public class var contentOverlayProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics2.get_ContentOverlayPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.isbackbuttonvisibleproperty)
    public class var isBackButtonVisibleProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics2.get_IsBackButtonVisiblePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.isbackenabledproperty)
    public class var isBackEnabledProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics2.get_IsBackEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.ispanevisibleproperty)
    public class var isPaneVisibleProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics2.get_IsPaneVisiblePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.overflowlabelmodeproperty)
    public class var overflowLabelModeProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics2.get_OverflowLabelModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.panecustomcontentproperty)
    public class var paneCustomContentProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics2.get_PaneCustomContentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.panedisplaymodeproperty)
    public class var paneDisplayModeProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics2.get_PaneDisplayModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.paneheaderproperty)
    public class var paneHeaderProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics2.get_PaneHeaderPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.panetitleproperty)
    public class var paneTitleProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics2.get_PaneTitlePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.selectionfollowsfocusproperty)
    public class var selectionFollowsFocusProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics2.get_SelectionFollowsFocusPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.shouldernavigationenabledproperty)
    public class var shoulderNavigationEnabledProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics2.get_ShoulderNavigationEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.templatesettingsproperty)
    public class var templateSettingsProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics2.get_TemplateSettingsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.menuitemfromcontainer)
    public func menuItemFromContainer(_ container: WinUI.DependencyObject!) throws -> Any! {
        try _default.MenuItemFromContainerImpl(container)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.containerfrommenuitem)
    public func containerFromMenuItem(_ item: Any!) throws -> WinUI.DependencyObject! {
        try _default.ContainerFromMenuItemImpl(item)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.alwaysshowheader)
    public var alwaysShowHeader : Bool {
        get { try! _default.get_AlwaysShowHeaderImpl() }
        set { try! _default.put_AlwaysShowHeaderImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.autosuggestbox)
    public var autoSuggestBox : AutoSuggestBox! {
        get { try! _default.get_AutoSuggestBoxImpl() }
        set { try! _default.put_AutoSuggestBoxImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.compactmodethresholdwidth)
    public var compactModeThresholdWidth : Double {
        get { try! _default.get_CompactModeThresholdWidthImpl() }
        set { try! _default.put_CompactModeThresholdWidthImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.compactpanelength)
    public var compactPaneLength : Double {
        get { try! _default.get_CompactPaneLengthImpl() }
        set { try! _default.put_CompactPaneLengthImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.displaymode)
    public var displayMode : NavigationViewDisplayMode {
        get { try! _default.get_DisplayModeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.expandedmodethresholdwidth)
    public var expandedModeThresholdWidth : Double {
        get { try! _default.get_ExpandedModeThresholdWidthImpl() }
        set { try! _default.put_ExpandedModeThresholdWidthImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.footermenuitems)
    public var footerMenuItems : WindowsFoundation.AnyIVector<Any?>! {
        get { try! _default.get_FooterMenuItemsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.footermenuitemssource)
    public var footerMenuItemsSource : Any! {
        get { try! _default.get_FooterMenuItemsSourceImpl() }
        set { try! _default.put_FooterMenuItemsSourceImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.header)
    public var header : Any! {
        get { try! _default.get_HeaderImpl() }
        set { try! _default.put_HeaderImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.headertemplate)
    public var headerTemplate : WinUI.DataTemplate! {
        get { try! _default.get_HeaderTemplateImpl() }
        set { try! _default.put_HeaderTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.ispaneopen)
    public var isPaneOpen : Bool {
        get { try! _default.get_IsPaneOpenImpl() }
        set { try! _default.put_IsPaneOpenImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.ispanetogglebuttonvisible)
    public var isPaneToggleButtonVisible : Bool {
        get { try! _default.get_IsPaneToggleButtonVisibleImpl() }
        set { try! _default.put_IsPaneToggleButtonVisibleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.issettingsvisible)
    public var isSettingsVisible : Bool {
        get { try! _default.get_IsSettingsVisibleImpl() }
        set { try! _default.put_IsSettingsVisibleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.istitlebarautopaddingenabled)
    public var isTitleBarAutoPaddingEnabled : Bool {
        get { try! _default.get_IsTitleBarAutoPaddingEnabledImpl() }
        set { try! _default.put_IsTitleBarAutoPaddingEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.menuitemcontainerstyle)
    public var menuItemContainerStyle : WinUI.Style! {
        get { try! _default.get_MenuItemContainerStyleImpl() }
        set { try! _default.put_MenuItemContainerStyleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.menuitemcontainerstyleselector)
    public var menuItemContainerStyleSelector : StyleSelector! {
        get { try! _default.get_MenuItemContainerStyleSelectorImpl() }
        set { try! _default.put_MenuItemContainerStyleSelectorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.menuitemtemplate)
    public var menuItemTemplate : WinUI.DataTemplate! {
        get { try! _default.get_MenuItemTemplateImpl() }
        set { try! _default.put_MenuItemTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.menuitemtemplateselector)
    public var menuItemTemplateSelector : DataTemplateSelector! {
        get { try! _default.get_MenuItemTemplateSelectorImpl() }
        set { try! _default.put_MenuItemTemplateSelectorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.menuitems)
    public var menuItems : WindowsFoundation.AnyIVector<Any?>! {
        get { try! _default.get_MenuItemsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.menuitemssource)
    public var menuItemsSource : Any! {
        get { try! _default.get_MenuItemsSourceImpl() }
        set { try! _default.put_MenuItemsSourceImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.openpanelength)
    public var openPaneLength : Double {
        get { try! _default.get_OpenPaneLengthImpl() }
        set { try! _default.put_OpenPaneLengthImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.panefooter)
    public var paneFooter : WinUI.UIElement! {
        get { try! _default.get_PaneFooterImpl() }
        set { try! _default.put_PaneFooterImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.panetogglebuttonstyle)
    public var paneToggleButtonStyle : WinUI.Style! {
        get { try! _default.get_PaneToggleButtonStyleImpl() }
        set { try! _default.put_PaneToggleButtonStyleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.selecteditem)
    public var selectedItem : Any! {
        get { try! _default.get_SelectedItemImpl() }
        set { try! _default.put_SelectedItemImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.settingsitem)
    public var settingsItem : Any! {
        get { try! _default.get_SettingsItemImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.displaymodechanged)
    public lazy var displayModeChanged : Event<TypedEventHandler<NavigationView?, NavigationViewDisplayModeChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_DisplayModeChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_DisplayModeChangedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.iteminvoked)
    public lazy var itemInvoked : Event<TypedEventHandler<NavigationView?, NavigationViewItemInvokedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ItemInvokedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ItemInvokedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.selectionchanged)
    public lazy var selectionChanged : Event<TypedEventHandler<NavigationView?, NavigationViewSelectionChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_SelectionChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_SelectionChangedImpl($0)
       }
      )
    }()

    private lazy var _INavigationView2: __ABI_Microsoft_UI_Xaml_Controls.INavigationView2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.expand)
    public func expand(_ item: NavigationViewItem!) throws {
        try _INavigationView2.ExpandImpl(item)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.collapse)
    public func collapse(_ item: NavigationViewItem!) throws {
        try _INavigationView2.CollapseImpl(item)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.contentoverlay)
    public var contentOverlay : WinUI.UIElement! {
        get { try! _INavigationView2.get_ContentOverlayImpl() }
        set { try! _INavigationView2.put_ContentOverlayImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.isbackbuttonvisible)
    public var isBackButtonVisible : NavigationViewBackButtonVisible {
        get { try! _INavigationView2.get_IsBackButtonVisibleImpl() }
        set { try! _INavigationView2.put_IsBackButtonVisibleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.isbackenabled)
    public var isBackEnabled : Bool {
        get { try! _INavigationView2.get_IsBackEnabledImpl() }
        set { try! _INavigationView2.put_IsBackEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.ispanevisible)
    public var isPaneVisible : Bool {
        get { try! _INavigationView2.get_IsPaneVisibleImpl() }
        set { try! _INavigationView2.put_IsPaneVisibleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.overflowlabelmode)
    public var overflowLabelMode : NavigationViewOverflowLabelMode {
        get { try! _INavigationView2.get_OverflowLabelModeImpl() }
        set { try! _INavigationView2.put_OverflowLabelModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.panecustomcontent)
    public var paneCustomContent : WinUI.UIElement! {
        get { try! _INavigationView2.get_PaneCustomContentImpl() }
        set { try! _INavigationView2.put_PaneCustomContentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.panedisplaymode)
    public var paneDisplayMode : NavigationViewPaneDisplayMode {
        get { try! _INavigationView2.get_PaneDisplayModeImpl() }
        set { try! _INavigationView2.put_PaneDisplayModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.paneheader)
    public var paneHeader : WinUI.UIElement! {
        get { try! _INavigationView2.get_PaneHeaderImpl() }
        set { try! _INavigationView2.put_PaneHeaderImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.panetitle)
    public var paneTitle : String {
        get { try! _INavigationView2.get_PaneTitleImpl() }
        set { try! _INavigationView2.put_PaneTitleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.selectionfollowsfocus)
    public var selectionFollowsFocus : NavigationViewSelectionFollowsFocus {
        get { try! _INavigationView2.get_SelectionFollowsFocusImpl() }
        set { try! _INavigationView2.put_SelectionFollowsFocusImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.shouldernavigationenabled)
    public var shoulderNavigationEnabled : NavigationViewShoulderNavigationEnabled {
        get { try! _INavigationView2.get_ShoulderNavigationEnabledImpl() }
        set { try! _INavigationView2.put_ShoulderNavigationEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.templatesettings)
    public var templateSettings : NavigationViewTemplateSettings! {
        get { try! _INavigationView2.get_TemplateSettingsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.backrequested)
    public lazy var backRequested : Event<TypedEventHandler<NavigationView?, NavigationViewBackRequestedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._INavigationView2 else { return .init() }
          return try! this.add_BackRequestedImpl($0)
        },
        remove: { [weak self] in
         try? self?._INavigationView2.remove_BackRequestedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.collapsed)
    public lazy var collapsed : Event<TypedEventHandler<NavigationView?, NavigationViewItemCollapsedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._INavigationView2 else { return .init() }
          return try! this.add_CollapsedImpl($0)
        },
        remove: { [weak self] in
         try? self?._INavigationView2.remove_CollapsedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.expanding)
    public lazy var expanding : Event<TypedEventHandler<NavigationView?, NavigationViewItemExpandingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._INavigationView2 else { return .init() }
          return try! this.add_ExpandingImpl($0)
        },
        remove: { [weak self] in
         try? self?._INavigationView2.remove_ExpandingImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.paneclosed)
    public lazy var paneClosed : Event<TypedEventHandler<NavigationView?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._INavigationView2 else { return .init() }
          return try! this.add_PaneClosedImpl($0)
        },
        remove: { [weak self] in
         try? self?._INavigationView2.remove_PaneClosedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.paneclosing)
    public lazy var paneClosing : Event<TypedEventHandler<NavigationView?, NavigationViewPaneClosingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._INavigationView2 else { return .init() }
          return try! this.add_PaneClosingImpl($0)
        },
        remove: { [weak self] in
         try? self?._INavigationView2.remove_PaneClosingImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.paneopened)
    public lazy var paneOpened : Event<TypedEventHandler<NavigationView?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._INavigationView2 else { return .init() }
          return try! this.add_PaneOpenedImpl($0)
        },
        remove: { [weak self] in
         try? self?._INavigationView2.remove_PaneOpenedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.paneopening)
    public lazy var paneOpening : Event<TypedEventHandler<NavigationView?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._INavigationView2 else { return .init() }
          return try! this.add_PaneOpeningImpl($0)
        },
        remove: { [weak self] in
         try? self?._INavigationView2.remove_PaneOpeningImpl($0)
       }
      )
    }()

    internal enum IContentControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
        internal typealias Class = NavigationView
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.INavigationView
        }
    }
    internal typealias Composable = IContentControlOverrides
    deinit {
        _default = nil
        _INavigationView2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewbackrequestedeventargs)
public final class NavigationViewBackRequestedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.INavigationViewBackRequestedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewBackRequestedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewBackRequestedEventArgs>?) -> NavigationViewBackRequestedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewdisplaymodechangedeventargs)
public final class NavigationViewDisplayModeChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.INavigationViewDisplayModeChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewDisplayModeChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewDisplayModeChangedEventArgs>?) -> NavigationViewDisplayModeChangedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewdisplaymodechangedeventargs.displaymode)
    public var displayMode : NavigationViewDisplayMode {
        get { try! _default.get_DisplayModeImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitem)
open class NavigationViewItem : WinUI.NavigationViewItemBase {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.INavigationViewItem
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItem
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItem>?) -> NavigationViewItem? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _INavigationViewItemFactory : __ABI_Microsoft_UI_Xaml_Controls.INavigationViewItemFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.NavigationViewItem"))

    public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._INavigationViewItemFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _INavigationViewItemStatics: __ABI_Microsoft_UI_Xaml_Controls.INavigationViewItemStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.NavigationViewItem"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitem.compactpanelengthproperty)
    public class var compactPaneLengthProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewItemStatics.get_CompactPaneLengthPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitem.iconproperty)
    public class var iconProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewItemStatics.get_IconPropertyImpl() }
    }

    private static let _INavigationViewItemStatics2: __ABI_Microsoft_UI_Xaml_Controls.INavigationViewItemStatics2 = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.NavigationViewItem"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitem.hasunrealizedchildrenproperty)
    public class var hasUnrealizedChildrenProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewItemStatics2.get_HasUnrealizedChildrenPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitem.ischildselectedproperty)
    public class var isChildSelectedProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewItemStatics2.get_IsChildSelectedPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitem.isexpandedproperty)
    public class var isExpandedProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewItemStatics2.get_IsExpandedPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitem.menuitemsproperty)
    public class var menuItemsProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewItemStatics2.get_MenuItemsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitem.menuitemssourceproperty)
    public class var menuItemsSourceProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewItemStatics2.get_MenuItemsSourcePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitem.selectsoninvokedproperty)
    public class var selectsOnInvokedProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewItemStatics2.get_SelectsOnInvokedPropertyImpl() }
    }

    private static let _INavigationViewItemStatics3: __ABI_Microsoft_UI_Xaml_Controls.INavigationViewItemStatics3 = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.NavigationViewItem"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitem.infobadgeproperty)
    public class var infoBadgeProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewItemStatics3.get_InfoBadgePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitem.compactpanelength)
    public var compactPaneLength : Double {
        get { try! _default.get_CompactPaneLengthImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitem.icon)
    public var icon : IconElement! {
        get { try! _default.get_IconImpl() }
        set { try! _default.put_IconImpl(newValue) }
    }

    private lazy var _INavigationViewItem2: __ABI_Microsoft_UI_Xaml_Controls.INavigationViewItem2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitem.hasunrealizedchildren)
    public var hasUnrealizedChildren : Bool {
        get { try! _INavigationViewItem2.get_HasUnrealizedChildrenImpl() }
        set { try! _INavigationViewItem2.put_HasUnrealizedChildrenImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitem.ischildselected)
    public var isChildSelected : Bool {
        get { try! _INavigationViewItem2.get_IsChildSelectedImpl() }
        set { try! _INavigationViewItem2.put_IsChildSelectedImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitem.isexpanded)
    public var isExpanded : Bool {
        get { try! _INavigationViewItem2.get_IsExpandedImpl() }
        set { try! _INavigationViewItem2.put_IsExpandedImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitem.menuitems)
    public var menuItems : WindowsFoundation.AnyIVector<Any?>! {
        get { try! _INavigationViewItem2.get_MenuItemsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitem.menuitemssource)
    public var menuItemsSource : Any! {
        get { try! _INavigationViewItem2.get_MenuItemsSourceImpl() }
        set { try! _INavigationViewItem2.put_MenuItemsSourceImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitem.selectsoninvoked)
    public var selectsOnInvoked : Bool {
        get { try! _INavigationViewItem2.get_SelectsOnInvokedImpl() }
        set { try! _INavigationViewItem2.put_SelectsOnInvokedImpl(newValue) }
    }

    private lazy var _INavigationViewItem3: __ABI_Microsoft_UI_Xaml_Controls.INavigationViewItem3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitem.infobadge)
    public var infoBadge : InfoBadge! {
        get { try! _INavigationViewItem3.get_InfoBadgeImpl() }
        set { try! _INavigationViewItem3.put_InfoBadgeImpl(newValue) }
    }

    internal enum IContentControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
        internal typealias Class = NavigationViewItem
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItem
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.INavigationViewItem
        }
    }
    internal typealias Composable = IContentControlOverrides
    deinit {
        _default = nil
        _INavigationViewItem2 = nil
        _INavigationViewItem3 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitembase)
open class NavigationViewItemBase : WinUI.ContentControl {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.INavigationViewItemBase
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemBase
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemBase>?) -> NavigationViewItemBase? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _INavigationViewItemBaseFactory : __ABI_Microsoft_UI_Xaml_Controls.INavigationViewItemBaseFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.NavigationViewItemBase"))

    private static let _INavigationViewItemBaseStatics: __ABI_Microsoft_UI_Xaml_Controls.INavigationViewItemBaseStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.NavigationViewItemBase"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitembase.isselectedproperty)
    public class var isSelectedProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewItemBaseStatics.get_IsSelectedPropertyImpl() }
    }

    private lazy var _INavigationViewItemBase2: __ABI_Microsoft_UI_Xaml_Controls.INavigationViewItemBase2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitembase.isselected)
    public var isSelected : Bool {
        get { try! _INavigationViewItemBase2.get_IsSelectedImpl() }
        set { try! _INavigationViewItemBase2.put_IsSelectedImpl(newValue) }
    }

    internal enum IContentControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
        internal typealias Class = NavigationViewItemBase
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemBase
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.INavigationViewItemBase
        }
    }
    internal typealias Composable = IContentControlOverrides
    deinit {
        _default = nil
        _INavigationViewItemBase2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitemcollapsedeventargs)
public final class NavigationViewItemCollapsedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.INavigationViewItemCollapsedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemCollapsedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemCollapsedEventArgs>?) -> NavigationViewItemCollapsedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitemcollapsedeventargs.collapseditem)
    public var collapsedItem : Any! {
        get { try! _default.get_CollapsedItemImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitemcollapsedeventargs.collapseditemcontainer)
    public var collapsedItemContainer : NavigationViewItemBase! {
        get { try! _default.get_CollapsedItemContainerImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitemexpandingeventargs)
public final class NavigationViewItemExpandingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.INavigationViewItemExpandingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemExpandingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemExpandingEventArgs>?) -> NavigationViewItemExpandingEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitemexpandingeventargs.expandingitem)
    public var expandingItem : Any! {
        get { try! _default.get_ExpandingItemImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitemexpandingeventargs.expandingitemcontainer)
    public var expandingItemContainer : NavigationViewItemBase! {
        get { try! _default.get_ExpandingItemContainerImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitemheader)
open class NavigationViewItemHeader : WinUI.NavigationViewItemBase {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.INavigationViewItemHeader
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemHeader
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemHeader>?) -> NavigationViewItemHeader? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _INavigationViewItemHeaderFactory : __ABI_Microsoft_UI_Xaml_Controls.INavigationViewItemHeaderFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.NavigationViewItemHeader"))

    public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._INavigationViewItemHeaderFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    internal enum IContentControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
        internal typealias Class = NavigationViewItemHeader
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemHeader
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.INavigationViewItemHeader
        }
    }
    internal typealias Composable = IContentControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewiteminvokedeventargs)
public final class NavigationViewItemInvokedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.INavigationViewItemInvokedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemInvokedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemInvokedEventArgs>?) -> NavigationViewItemInvokedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public init() {
        super.init(try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.NavigationViewItemInvokedEventArgs")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewiteminvokedeventargs.invokeditem)
    public var invokedItem : Any! {
        get { try! _default.get_InvokedItemImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewiteminvokedeventargs.issettingsinvoked)
    public var isSettingsInvoked : Bool {
        get { try! _default.get_IsSettingsInvokedImpl() }
    }

    private lazy var _INavigationViewItemInvokedEventArgs2: __ABI_Microsoft_UI_Xaml_Controls.INavigationViewItemInvokedEventArgs2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewiteminvokedeventargs.invokeditemcontainer)
    public var invokedItemContainer : NavigationViewItemBase! {
        get { try! _INavigationViewItemInvokedEventArgs2.get_InvokedItemContainerImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewiteminvokedeventargs.recommendednavigationtransitioninfo)
    public var recommendedNavigationTransitionInfo : WinUI.NavigationTransitionInfo! {
        get { try! _INavigationViewItemInvokedEventArgs2.get_RecommendedNavigationTransitionInfoImpl() }
    }

    deinit {
        _default = nil
        _INavigationViewItemInvokedEventArgs2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitemseparator)
open class NavigationViewItemSeparator : WinUI.NavigationViewItemBase {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.INavigationViewItemSeparator
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemSeparator
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemSeparator>?) -> NavigationViewItemSeparator? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _INavigationViewItemSeparatorFactory : __ABI_Microsoft_UI_Xaml_Controls.INavigationViewItemSeparatorFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.NavigationViewItemSeparator"))

    public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._INavigationViewItemSeparatorFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    internal enum IContentControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
        internal typealias Class = NavigationViewItemSeparator
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemSeparator
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.INavigationViewItemSeparator
        }
    }
    internal typealias Composable = IContentControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewpaneclosingeventargs)
public final class NavigationViewPaneClosingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.INavigationViewPaneClosingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewPaneClosingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewPaneClosingEventArgs>?) -> NavigationViewPaneClosingEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewpaneclosingeventargs.cancel)
    public var cancel : Bool {
        get { try! _default.get_CancelImpl() }
        set { try! _default.put_CancelImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewselectionchangedeventargs)
public final class NavigationViewSelectionChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.INavigationViewSelectionChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewSelectionChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewSelectionChangedEventArgs>?) -> NavigationViewSelectionChangedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewselectionchangedeventargs.issettingsselected)
    public var isSettingsSelected : Bool {
        get { try! _default.get_IsSettingsSelectedImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewselectionchangedeventargs.selecteditem)
    public var selectedItem : Any! {
        get { try! _default.get_SelectedItemImpl() }
    }

    private lazy var _INavigationViewSelectionChangedEventArgs2: __ABI_Microsoft_UI_Xaml_Controls.INavigationViewSelectionChangedEventArgs2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewselectionchangedeventargs.recommendednavigationtransitioninfo)
    public var recommendedNavigationTransitionInfo : WinUI.NavigationTransitionInfo! {
        get { try! _INavigationViewSelectionChangedEventArgs2.get_RecommendedNavigationTransitionInfoImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewselectionchangedeventargs.selecteditemcontainer)
    public var selectedItemContainer : NavigationViewItemBase! {
        get { try! _INavigationViewSelectionChangedEventArgs2.get_SelectedItemContainerImpl() }
    }

    deinit {
        _default = nil
        _INavigationViewSelectionChangedEventArgs2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings)
open class NavigationViewTemplateSettings : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.INavigationViewTemplateSettings
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewTemplateSettings
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewTemplateSettings>?) -> NavigationViewTemplateSettings? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _INavigationViewTemplateSettingsFactory : __ABI_Microsoft_UI_Xaml_Controls.INavigationViewTemplateSettingsFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._INavigationViewTemplateSettingsFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _INavigationViewTemplateSettingsStatics: __ABI_Microsoft_UI_Xaml_Controls.INavigationViewTemplateSettingsStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.backbuttonvisibilityproperty)
    public class var backButtonVisibilityProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewTemplateSettingsStatics.get_BackButtonVisibilityPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.leftpanevisibilityproperty)
    public class var leftPaneVisibilityProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewTemplateSettingsStatics.get_LeftPaneVisibilityPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.overflowbuttonvisibilityproperty)
    public class var overflowButtonVisibilityProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewTemplateSettingsStatics.get_OverflowButtonVisibilityPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.panetogglebuttonvisibilityproperty)
    public class var paneToggleButtonVisibilityProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewTemplateSettingsStatics.get_PaneToggleButtonVisibilityPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.panetogglebuttonwidthproperty)
    public class var paneToggleButtonWidthProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewTemplateSettingsStatics.get_PaneToggleButtonWidthPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.singleselectionfollowsfocusproperty)
    public class var singleSelectionFollowsFocusProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewTemplateSettingsStatics.get_SingleSelectionFollowsFocusPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.smallerpanetogglebuttonwidthproperty)
    public class var smallerPaneToggleButtonWidthProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewTemplateSettingsStatics.get_SmallerPaneToggleButtonWidthPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.toppaddingproperty)
    public class var topPaddingProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewTemplateSettingsStatics.get_TopPaddingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.toppanevisibilityproperty)
    public class var topPaneVisibilityProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewTemplateSettingsStatics.get_TopPaneVisibilityPropertyImpl() }
    }

    private static let _INavigationViewTemplateSettingsStatics2: __ABI_Microsoft_UI_Xaml_Controls.INavigationViewTemplateSettingsStatics2 = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.openpanelengthproperty)
    public class var openPaneLengthProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewTemplateSettingsStatics2.get_OpenPaneLengthPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.backbuttonvisibility)
    public var backButtonVisibility : WinUI.Visibility {
        get { try! _default.get_BackButtonVisibilityImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.leftpanevisibility)
    public var leftPaneVisibility : WinUI.Visibility {
        get { try! _default.get_LeftPaneVisibilityImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.overflowbuttonvisibility)
    public var overflowButtonVisibility : WinUI.Visibility {
        get { try! _default.get_OverflowButtonVisibilityImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.panetogglebuttonvisibility)
    public var paneToggleButtonVisibility : WinUI.Visibility {
        get { try! _default.get_PaneToggleButtonVisibilityImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.panetogglebuttonwidth)
    public var paneToggleButtonWidth : Double {
        get { try! _default.get_PaneToggleButtonWidthImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.singleselectionfollowsfocus)
    public var singleSelectionFollowsFocus : Bool {
        get { try! _default.get_SingleSelectionFollowsFocusImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.smallerpanetogglebuttonwidth)
    public var smallerPaneToggleButtonWidth : Double {
        get { try! _default.get_SmallerPaneToggleButtonWidthImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.toppadding)
    public var topPadding : Double {
        get { try! _default.get_TopPaddingImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.toppanevisibility)
    public var topPaneVisibility : WinUI.Visibility {
        get { try! _default.get_TopPaneVisibilityImpl() }
    }

    private lazy var _INavigationViewTemplateSettings2: __ABI_Microsoft_UI_Xaml_Controls.INavigationViewTemplateSettings2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.openpanelength)
    public var openPaneLength : Double {
        get { try! _INavigationViewTemplateSettings2.get_OpenPaneLengthImpl() }
    }

    internal enum INavigationViewTemplateSettings : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = NavigationViewTemplateSettings
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewTemplateSettings
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.INavigationViewTemplateSettings
        }
    }
    internal typealias Composable = INavigationViewTemplateSettings
    deinit {
        _default = nil
        _INavigationViewTemplateSettings2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.nonvirtualizinglayout)
open class NonVirtualizingLayout : WinUI.Layout {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.INonVirtualizingLayout
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINonVirtualizingLayout
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CINonVirtualizingLayout>?) -> NonVirtualizingLayout? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.INonVirtualizingLayoutOverridesWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.INonVirtualizingLayoutOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _INonVirtualizingLayoutFactory : __ABI_Microsoft_UI_Xaml_Controls.INonVirtualizingLayoutFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.NonVirtualizingLayout"))

    public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._INonVirtualizingLayoutFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private lazy var _INonVirtualizingLayoutOverrides: __ABI_Microsoft_UI_Xaml_Controls.INonVirtualizingLayoutOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.nonvirtualizinglayout.initializeforcontextcore)
    open func initializeForContextCore(_ context: NonVirtualizingLayoutContext!) throws {
        try _INonVirtualizingLayoutOverrides.InitializeForContextCoreImpl(context)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.nonvirtualizinglayout.uninitializeforcontextcore)
    open func uninitializeForContextCore(_ context: NonVirtualizingLayoutContext!) throws {
        try _INonVirtualizingLayoutOverrides.UninitializeForContextCoreImpl(context)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.nonvirtualizinglayout.measureoverride)
    open func measureOverride(_ context: NonVirtualizingLayoutContext!, _ availableSize: WindowsFoundation.Size) throws -> WindowsFoundation.Size {
        try _INonVirtualizingLayoutOverrides.MeasureOverrideImpl(context, availableSize)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.nonvirtualizinglayout.arrangeoverride)
    open func arrangeOverride(_ context: NonVirtualizingLayoutContext!, _ finalSize: WindowsFoundation.Size) throws -> WindowsFoundation.Size {
        try _INonVirtualizingLayoutOverrides.ArrangeOverrideImpl(context, finalSize)
    }

    internal enum INonVirtualizingLayoutOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINonVirtualizingLayoutOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.INonVirtualizingLayoutOverrides
        internal typealias Class = NonVirtualizingLayout
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINonVirtualizingLayout
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.INonVirtualizingLayout
        }
    }
    internal typealias Composable = INonVirtualizingLayoutOverrides
    deinit {
        _default = nil
        _INonVirtualizingLayoutOverrides = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.nonvirtualizinglayoutcontext)
open class NonVirtualizingLayoutContext : WinUI.LayoutContext {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.INonVirtualizingLayoutContext
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINonVirtualizingLayoutContext
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CINonVirtualizingLayoutContext>?) -> NonVirtualizingLayoutContext? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.INonVirtualizingLayoutContextOverridesWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.INonVirtualizingLayoutContextOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _INonVirtualizingLayoutContextFactory : __ABI_Microsoft_UI_Xaml_Controls.INonVirtualizingLayoutContextFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.NonVirtualizingLayoutContext"))

    public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._INonVirtualizingLayoutContextFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.nonvirtualizinglayoutcontext.children)
    public var children : WindowsFoundation.AnyIVectorView<WinUI.UIElement?>! {
        get { try! _default.get_ChildrenImpl() }
    }

    private lazy var _INonVirtualizingLayoutContextOverrides: __ABI_Microsoft_UI_Xaml_Controls.INonVirtualizingLayoutContextOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.nonvirtualizinglayoutcontext.childrencore)
    open var childrenCore : WindowsFoundation.AnyIVectorView<WinUI.UIElement?>! {
        get { try! _INonVirtualizingLayoutContextOverrides.get_ChildrenCoreImpl() }
    }

    internal enum INonVirtualizingLayoutContextOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINonVirtualizingLayoutContextOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.INonVirtualizingLayoutContextOverrides
        internal typealias Class = NonVirtualizingLayoutContext
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINonVirtualizingLayoutContext
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.INonVirtualizingLayoutContext
        }
    }
    internal typealias Composable = INonVirtualizingLayoutContextOverrides
    deinit {
        _default = nil
        _INonVirtualizingLayoutContextOverrides = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.numberbox)
open class NumberBox : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.INumberBox
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINumberBox
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CINumberBox>?) -> NumberBox? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _INumberBoxFactory : __ABI_Microsoft_UI_Xaml_Controls.INumberBoxFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.NumberBox"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._INumberBoxFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _INumberBoxStatics: __ABI_Microsoft_UI_Xaml_Controls.INumberBoxStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.NumberBox"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.numberbox.acceptsexpressionproperty)
    public class var acceptsExpressionProperty : WinUI.DependencyProperty! {
        get { try! _INumberBoxStatics.get_AcceptsExpressionPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.numberbox.descriptionproperty)
    public class var descriptionProperty : WinUI.DependencyProperty! {
        get { try! _INumberBoxStatics.get_DescriptionPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.numberbox.headerproperty)
    public class var headerProperty : WinUI.DependencyProperty! {
        get { try! _INumberBoxStatics.get_HeaderPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.numberbox.headertemplateproperty)
    public class var headerTemplateProperty : WinUI.DependencyProperty! {
        get { try! _INumberBoxStatics.get_HeaderTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.numberbox.iswrapenabledproperty)
    public class var isWrapEnabledProperty : WinUI.DependencyProperty! {
        get { try! _INumberBoxStatics.get_IsWrapEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.numberbox.largechangeproperty)
    public class var largeChangeProperty : WinUI.DependencyProperty! {
        get { try! _INumberBoxStatics.get_LargeChangePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.numberbox.maximumproperty)
    public class var maximumProperty : WinUI.DependencyProperty! {
        get { try! _INumberBoxStatics.get_MaximumPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.numberbox.minimumproperty)
    public class var minimumProperty : WinUI.DependencyProperty! {
        get { try! _INumberBoxStatics.get_MinimumPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.numberbox.numberformatterproperty)
    public class var numberFormatterProperty : WinUI.DependencyProperty! {
        get { try! _INumberBoxStatics.get_NumberFormatterPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.numberbox.placeholdertextproperty)
    public class var placeholderTextProperty : WinUI.DependencyProperty! {
        get { try! _INumberBoxStatics.get_PlaceholderTextPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.numberbox.preventkeyboarddisplayonprogrammaticfocusproperty)
    public class var preventKeyboardDisplayOnProgrammaticFocusProperty : WinUI.DependencyProperty! {
        get { try! _INumberBoxStatics.get_PreventKeyboardDisplayOnProgrammaticFocusPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.numberbox.selectionflyoutproperty)
    public class var selectionFlyoutProperty : WinUI.DependencyProperty! {
        get { try! _INumberBoxStatics.get_SelectionFlyoutPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.numberbox.selectionhighlightcolorproperty)
    public class var selectionHighlightColorProperty : WinUI.DependencyProperty! {
        get { try! _INumberBoxStatics.get_SelectionHighlightColorPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.numberbox.smallchangeproperty)
    public class var smallChangeProperty : WinUI.DependencyProperty! {
        get { try! _INumberBoxStatics.get_SmallChangePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.numberbox.spinbuttonplacementmodeproperty)
    public class var spinButtonPlacementModeProperty : WinUI.DependencyProperty! {
        get { try! _INumberBoxStatics.get_SpinButtonPlacementModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.numberbox.textproperty)
    public class var textProperty : WinUI.DependencyProperty! {
        get { try! _INumberBoxStatics.get_TextPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.numberbox.textreadingorderproperty)
    public class var textReadingOrderProperty : WinUI.DependencyProperty! {
        get { try! _INumberBoxStatics.get_TextReadingOrderPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.numberbox.validationmodeproperty)
    public class var validationModeProperty : WinUI.DependencyProperty! {
        get { try! _INumberBoxStatics.get_ValidationModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.numberbox.valueproperty)
    public class var valueProperty : WinUI.DependencyProperty! {
        get { try! _INumberBoxStatics.get_ValuePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.numberbox.acceptsexpression)
    public var acceptsExpression : Bool {
        get { try! _default.get_AcceptsExpressionImpl() }
        set { try! _default.put_AcceptsExpressionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.numberbox.description)
    public var description : Any! {
        get { try! _default.get_DescriptionImpl() }
        set { try! _default.put_DescriptionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.numberbox.header)
    public var header : Any! {
        get { try! _default.get_HeaderImpl() }
        set { try! _default.put_HeaderImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.numberbox.headertemplate)
    public var headerTemplate : WinUI.DataTemplate! {
        get { try! _default.get_HeaderTemplateImpl() }
        set { try! _default.put_HeaderTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.numberbox.iswrapenabled)
    public var isWrapEnabled : Bool {
        get { try! _default.get_IsWrapEnabledImpl() }
        set { try! _default.put_IsWrapEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.numberbox.largechange)
    public var largeChange : Double {
        get { try! _default.get_LargeChangeImpl() }
        set { try! _default.put_LargeChangeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.numberbox.maximum)
    public var maximum : Double {
        get { try! _default.get_MaximumImpl() }
        set { try! _default.put_MaximumImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.numberbox.minimum)
    public var minimum : Double {
        get { try! _default.get_MinimumImpl() }
        set { try! _default.put_MinimumImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.numberbox.numberformatter)
    public var numberFormatter : UWP.AnyINumberFormatter2! {
        get { try! _default.get_NumberFormatterImpl() }
        set { try! _default.put_NumberFormatterImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.numberbox.placeholdertext)
    public var placeholderText : String {
        get { try! _default.get_PlaceholderTextImpl() }
        set { try! _default.put_PlaceholderTextImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.numberbox.preventkeyboarddisplayonprogrammaticfocus)
    public var preventKeyboardDisplayOnProgrammaticFocus : Bool {
        get { try! _default.get_PreventKeyboardDisplayOnProgrammaticFocusImpl() }
        set { try! _default.put_PreventKeyboardDisplayOnProgrammaticFocusImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.numberbox.selectionflyout)
    public var selectionFlyout : WinUI.FlyoutBase! {
        get { try! _default.get_SelectionFlyoutImpl() }
        set { try! _default.put_SelectionFlyoutImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.numberbox.selectionhighlightcolor)
    public var selectionHighlightColor : WinUI.SolidColorBrush! {
        get { try! _default.get_SelectionHighlightColorImpl() }
        set { try! _default.put_SelectionHighlightColorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.numberbox.smallchange)
    public var smallChange : Double {
        get { try! _default.get_SmallChangeImpl() }
        set { try! _default.put_SmallChangeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.numberbox.spinbuttonplacementmode)
    public var spinButtonPlacementMode : NumberBoxSpinButtonPlacementMode {
        get { try! _default.get_SpinButtonPlacementModeImpl() }
        set { try! _default.put_SpinButtonPlacementModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.numberbox.text)
    public var text : String {
        get { try! _default.get_TextImpl() }
        set { try! _default.put_TextImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.numberbox.textreadingorder)
    public var textReadingOrder : WinUI.TextReadingOrder {
        get { try! _default.get_TextReadingOrderImpl() }
        set { try! _default.put_TextReadingOrderImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.numberbox.validationmode)
    public var validationMode : NumberBoxValidationMode {
        get { try! _default.get_ValidationModeImpl() }
        set { try! _default.put_ValidationModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.numberbox.value)
    public var value : Double {
        get { try! _default.get_ValueImpl() }
        set { try! _default.put_ValueImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.numberbox.valuechanged)
    public lazy var valueChanged : Event<TypedEventHandler<NumberBox?, NumberBoxValueChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ValueChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ValueChangedImpl($0)
       }
      )
    }()

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = NumberBox
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINumberBox
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.INumberBox
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.numberboxvaluechangedeventargs)
public final class NumberBoxValueChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.INumberBoxValueChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINumberBoxValueChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CINumberBoxValueChangedEventArgs>?) -> NumberBoxValueChangedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.numberboxvaluechangedeventargs.newvalue)
    public var newValue : Double {
        get { try! _default.get_NewValueImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.numberboxvaluechangedeventargs.oldvalue)
    public var oldValue : Double {
        get { try! _default.get_OldValueImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.page)
open class Page : WinUI.UserControl {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IPage
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPage
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPage>?) -> Page? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.IPageOverridesWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.IPageOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IPageFactory : __ABI_Microsoft_UI_Xaml_Controls.IPageFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.Page"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IPageFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IPageStatics: __ABI_Microsoft_UI_Xaml_Controls.IPageStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.Page"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.page.bottomappbarproperty)
    public class var bottomAppBarProperty : WinUI.DependencyProperty! {
        get { try! _IPageStatics.get_BottomAppBarPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.page.frameproperty)
    public class var frameProperty : WinUI.DependencyProperty! {
        get { try! _IPageStatics.get_FramePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.page.topappbarproperty)
    public class var topAppBarProperty : WinUI.DependencyProperty! {
        get { try! _IPageStatics.get_TopAppBarPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.page.bottomappbar)
    public var bottomAppBar : AppBar! {
        get { try! _default.get_BottomAppBarImpl() }
        set { try! _default.put_BottomAppBarImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.page.frame)
    public var frame : Frame! {
        get { try! _default.get_FrameImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.page.navigationcachemode)
    public var navigationCacheMode : WinUI.NavigationCacheMode {
        get { try! _default.get_NavigationCacheModeImpl() }
        set { try! _default.put_NavigationCacheModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.page.topappbar)
    public var topAppBar : AppBar! {
        get { try! _default.get_TopAppBarImpl() }
        set { try! _default.put_TopAppBarImpl(newValue) }
    }

    private lazy var _IPageOverrides: __ABI_Microsoft_UI_Xaml_Controls.IPageOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.page.onnavigatedfrom)
    open func onNavigatedFrom(_ e: WinUI.NavigationEventArgs!) throws {
        try _IPageOverrides.OnNavigatedFromImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.page.onnavigatedto)
    open func onNavigatedTo(_ e: WinUI.NavigationEventArgs!) throws {
        try _IPageOverrides.OnNavigatedToImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.page.onnavigatingfrom)
    open func onNavigatingFrom(_ e: WinUI.NavigatingCancelEventArgs!) throws {
        try _IPageOverrides.OnNavigatingFromImpl(e)
    }

    internal enum IPageOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPageOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IPageOverrides
        internal typealias Class = Page
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPage
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IPage
        }
    }
    internal typealias Composable = IPageOverrides
    deinit {
        _default = nil
        _IPageOverrides = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.panel)
open class Panel : WinUI.FrameworkElement {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IPanel
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPanel
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPanel>?) -> Panel? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IPanelFactory : __ABI_Microsoft_UI_Xaml_Controls.IPanelFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.Panel"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IPanelFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IPanelStatics: __ABI_Microsoft_UI_Xaml_Controls.IPanelStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.Panel"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.panel.backgroundproperty)
    public class var backgroundProperty : WinUI.DependencyProperty! {
        get { try! _IPanelStatics.get_BackgroundPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.panel.childrentransitionsproperty)
    public class var childrenTransitionsProperty : WinUI.DependencyProperty! {
        get { try! _IPanelStatics.get_ChildrenTransitionsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.panel.isitemshostproperty)
    public class var isItemsHostProperty : WinUI.DependencyProperty! {
        get { try! _IPanelStatics.get_IsItemsHostPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.panel.background)
    public var background : WinUI.Brush! {
        get { try! _default.get_BackgroundImpl() }
        set { try! _default.put_BackgroundImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.panel.backgroundtransition)
    public var backgroundTransition : WinUI.BrushTransition! {
        get { try! _default.get_BackgroundTransitionImpl() }
        set { try! _default.put_BackgroundTransitionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.panel.children)
    public var children : UIElementCollection! {
        get { try! _default.get_ChildrenImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.panel.childrentransitions)
    public var childrenTransitions : WinUI.TransitionCollection! {
        get { try! _default.get_ChildrenTransitionsImpl() }
        set { try! _default.put_ChildrenTransitionsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.panel.isitemshost)
    public var isItemsHost : Bool {
        get { try! _default.get_IsItemsHostImpl() }
    }

    internal enum IFrameworkElementOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
        internal typealias Class = Panel
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPanel
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IPanel
        }
    }
    internal typealias Composable = IFrameworkElementOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.parallaxview)
open class ParallaxView : WinUI.FrameworkElement {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IParallaxView
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIParallaxView
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIParallaxView>?) -> ParallaxView? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IParallaxViewFactory : __ABI_Microsoft_UI_Xaml_Controls.IParallaxViewFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ParallaxView"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IParallaxViewFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IParallaxViewStatics: __ABI_Microsoft_UI_Xaml_Controls.IParallaxViewStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ParallaxView"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.parallaxview.childproperty)
    public class var childProperty : WinUI.DependencyProperty! {
        get { try! _IParallaxViewStatics.get_ChildPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.parallaxview.horizontalshiftproperty)
    public class var horizontalShiftProperty : WinUI.DependencyProperty! {
        get { try! _IParallaxViewStatics.get_HorizontalShiftPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.parallaxview.horizontalsourceendoffsetproperty)
    public class var horizontalSourceEndOffsetProperty : WinUI.DependencyProperty! {
        get { try! _IParallaxViewStatics.get_HorizontalSourceEndOffsetPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.parallaxview.horizontalsourceoffsetkindproperty)
    public class var horizontalSourceOffsetKindProperty : WinUI.DependencyProperty! {
        get { try! _IParallaxViewStatics.get_HorizontalSourceOffsetKindPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.parallaxview.horizontalsourcestartoffsetproperty)
    public class var horizontalSourceStartOffsetProperty : WinUI.DependencyProperty! {
        get { try! _IParallaxViewStatics.get_HorizontalSourceStartOffsetPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.parallaxview.ishorizontalshiftclampedproperty)
    public class var isHorizontalShiftClampedProperty : WinUI.DependencyProperty! {
        get { try! _IParallaxViewStatics.get_IsHorizontalShiftClampedPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.parallaxview.isverticalshiftclampedproperty)
    public class var isVerticalShiftClampedProperty : WinUI.DependencyProperty! {
        get { try! _IParallaxViewStatics.get_IsVerticalShiftClampedPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.parallaxview.maxhorizontalshiftratioproperty)
    public class var maxHorizontalShiftRatioProperty : WinUI.DependencyProperty! {
        get { try! _IParallaxViewStatics.get_MaxHorizontalShiftRatioPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.parallaxview.maxverticalshiftratioproperty)
    public class var maxVerticalShiftRatioProperty : WinUI.DependencyProperty! {
        get { try! _IParallaxViewStatics.get_MaxVerticalShiftRatioPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.parallaxview.sourceproperty)
    public class var sourceProperty : WinUI.DependencyProperty! {
        get { try! _IParallaxViewStatics.get_SourcePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.parallaxview.verticalshiftproperty)
    public class var verticalShiftProperty : WinUI.DependencyProperty! {
        get { try! _IParallaxViewStatics.get_VerticalShiftPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.parallaxview.verticalsourceendoffsetproperty)
    public class var verticalSourceEndOffsetProperty : WinUI.DependencyProperty! {
        get { try! _IParallaxViewStatics.get_VerticalSourceEndOffsetPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.parallaxview.verticalsourceoffsetkindproperty)
    public class var verticalSourceOffsetKindProperty : WinUI.DependencyProperty! {
        get { try! _IParallaxViewStatics.get_VerticalSourceOffsetKindPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.parallaxview.verticalsourcestartoffsetproperty)
    public class var verticalSourceStartOffsetProperty : WinUI.DependencyProperty! {
        get { try! _IParallaxViewStatics.get_VerticalSourceStartOffsetPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.parallaxview.refreshautomatichorizontaloffsets)
    public func refreshAutomaticHorizontalOffsets() throws {
        try _default.RefreshAutomaticHorizontalOffsetsImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.parallaxview.refreshautomaticverticaloffsets)
    public func refreshAutomaticVerticalOffsets() throws {
        try _default.RefreshAutomaticVerticalOffsetsImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.parallaxview.child)
    public var child : WinUI.UIElement! {
        get { try! _default.get_ChildImpl() }
        set { try! _default.put_ChildImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.parallaxview.horizontalshift)
    public var horizontalShift : Double {
        get { try! _default.get_HorizontalShiftImpl() }
        set { try! _default.put_HorizontalShiftImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.parallaxview.horizontalsourceendoffset)
    public var horizontalSourceEndOffset : Double {
        get { try! _default.get_HorizontalSourceEndOffsetImpl() }
        set { try! _default.put_HorizontalSourceEndOffsetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.parallaxview.horizontalsourceoffsetkind)
    public var horizontalSourceOffsetKind : ParallaxSourceOffsetKind {
        get { try! _default.get_HorizontalSourceOffsetKindImpl() }
        set { try! _default.put_HorizontalSourceOffsetKindImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.parallaxview.horizontalsourcestartoffset)
    public var horizontalSourceStartOffset : Double {
        get { try! _default.get_HorizontalSourceStartOffsetImpl() }
        set { try! _default.put_HorizontalSourceStartOffsetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.parallaxview.ishorizontalshiftclamped)
    public var isHorizontalShiftClamped : Bool {
        get { try! _default.get_IsHorizontalShiftClampedImpl() }
        set { try! _default.put_IsHorizontalShiftClampedImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.parallaxview.isverticalshiftclamped)
    public var isVerticalShiftClamped : Bool {
        get { try! _default.get_IsVerticalShiftClampedImpl() }
        set { try! _default.put_IsVerticalShiftClampedImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.parallaxview.maxhorizontalshiftratio)
    public var maxHorizontalShiftRatio : Double {
        get { try! _default.get_MaxHorizontalShiftRatioImpl() }
        set { try! _default.put_MaxHorizontalShiftRatioImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.parallaxview.maxverticalshiftratio)
    public var maxVerticalShiftRatio : Double {
        get { try! _default.get_MaxVerticalShiftRatioImpl() }
        set { try! _default.put_MaxVerticalShiftRatioImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.parallaxview.source)
    public var source : WinUI.UIElement! {
        get { try! _default.get_SourceImpl() }
        set { try! _default.put_SourceImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.parallaxview.verticalshift)
    public var verticalShift : Double {
        get { try! _default.get_VerticalShiftImpl() }
        set { try! _default.put_VerticalShiftImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.parallaxview.verticalsourceendoffset)
    public var verticalSourceEndOffset : Double {
        get { try! _default.get_VerticalSourceEndOffsetImpl() }
        set { try! _default.put_VerticalSourceEndOffsetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.parallaxview.verticalsourceoffsetkind)
    public var verticalSourceOffsetKind : ParallaxSourceOffsetKind {
        get { try! _default.get_VerticalSourceOffsetKindImpl() }
        set { try! _default.put_VerticalSourceOffsetKindImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.parallaxview.verticalsourcestartoffset)
    public var verticalSourceStartOffset : Double {
        get { try! _default.get_VerticalSourceStartOffsetImpl() }
        set { try! _default.put_VerticalSourceStartOffsetImpl(newValue) }
    }

    internal enum IFrameworkElementOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
        internal typealias Class = ParallaxView
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIParallaxView
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IParallaxView
        }
    }
    internal typealias Composable = IFrameworkElementOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox)
public final class PasswordBox : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IPasswordBox
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox>?) -> PasswordBox? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.PasswordBox")))
    }

    private static let _IPasswordBoxStatics: __ABI_Microsoft_UI_Xaml_Controls.IPasswordBoxStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.PasswordBox"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.canpasteclipboardcontentproperty)
    public static var canPasteClipboardContentProperty : WinUI.DependencyProperty! {
        get { try! _IPasswordBoxStatics.get_CanPasteClipboardContentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.descriptionproperty)
    public static var descriptionProperty : WinUI.DependencyProperty! {
        get { try! _IPasswordBoxStatics.get_DescriptionPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.headerproperty)
    public static var headerProperty : WinUI.DependencyProperty! {
        get { try! _IPasswordBoxStatics.get_HeaderPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.headertemplateproperty)
    public static var headerTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IPasswordBoxStatics.get_HeaderTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.inputscopeproperty)
    public static var inputScopeProperty : WinUI.DependencyProperty! {
        get { try! _IPasswordBoxStatics.get_InputScopePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.ispasswordrevealbuttonenabledproperty)
    public static var isPasswordRevealButtonEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IPasswordBoxStatics.get_IsPasswordRevealButtonEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.maxlengthproperty)
    public static var maxLengthProperty : WinUI.DependencyProperty! {
        get { try! _IPasswordBoxStatics.get_MaxLengthPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.passwordcharproperty)
    public static var passwordCharProperty : WinUI.DependencyProperty! {
        get { try! _IPasswordBoxStatics.get_PasswordCharPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.passwordproperty)
    public static var passwordProperty : WinUI.DependencyProperty! {
        get { try! _IPasswordBoxStatics.get_PasswordPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.passwordrevealmodeproperty)
    public static var passwordRevealModeProperty : WinUI.DependencyProperty! {
        get { try! _IPasswordBoxStatics.get_PasswordRevealModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.placeholdertextproperty)
    public static var placeholderTextProperty : WinUI.DependencyProperty! {
        get { try! _IPasswordBoxStatics.get_PlaceholderTextPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.preventkeyboarddisplayonprogrammaticfocusproperty)
    public static var preventKeyboardDisplayOnProgrammaticFocusProperty : WinUI.DependencyProperty! {
        get { try! _IPasswordBoxStatics.get_PreventKeyboardDisplayOnProgrammaticFocusPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.selectionflyoutproperty)
    public static var selectionFlyoutProperty : WinUI.DependencyProperty! {
        get { try! _IPasswordBoxStatics.get_SelectionFlyoutPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.selectionhighlightcolorproperty)
    public static var selectionHighlightColorProperty : WinUI.DependencyProperty! {
        get { try! _IPasswordBoxStatics.get_SelectionHighlightColorPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.textreadingorderproperty)
    public static var textReadingOrderProperty : WinUI.DependencyProperty! {
        get { try! _IPasswordBoxStatics.get_TextReadingOrderPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.selectall)
    public func selectAll() throws {
        try _default.SelectAllImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.pastefromclipboard)
    public func pasteFromClipboard() throws {
        try _default.PasteFromClipboardImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.canpasteclipboardcontent)
    public var canPasteClipboardContent : Bool {
        get { try! _default.get_CanPasteClipboardContentImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.description)
    public var description : Any! {
        get { try! _default.get_DescriptionImpl() }
        set { try! _default.put_DescriptionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.header)
    public var header : Any! {
        get { try! _default.get_HeaderImpl() }
        set { try! _default.put_HeaderImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.headertemplate)
    public var headerTemplate : WinUI.DataTemplate! {
        get { try! _default.get_HeaderTemplateImpl() }
        set { try! _default.put_HeaderTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.inputscope)
    public var inputScope : WinUI.InputScope! {
        get { try! _default.get_InputScopeImpl() }
        set { try! _default.put_InputScopeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.ispasswordrevealbuttonenabled)
    public var isPasswordRevealButtonEnabled : Bool {
        get { try! _default.get_IsPasswordRevealButtonEnabledImpl() }
        set { try! _default.put_IsPasswordRevealButtonEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.maxlength)
    public var maxLength : Int32 {
        get { try! _default.get_MaxLengthImpl() }
        set { try! _default.put_MaxLengthImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.password)
    public var password : String {
        get { try! _default.get_PasswordImpl() }
        set { try! _default.put_PasswordImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.passwordchar)
    public var passwordChar : String {
        get { try! _default.get_PasswordCharImpl() }
        set { try! _default.put_PasswordCharImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.passwordrevealmode)
    public var passwordRevealMode : PasswordRevealMode {
        get { try! _default.get_PasswordRevealModeImpl() }
        set { try! _default.put_PasswordRevealModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.placeholdertext)
    public var placeholderText : String {
        get { try! _default.get_PlaceholderTextImpl() }
        set { try! _default.put_PlaceholderTextImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.preventkeyboarddisplayonprogrammaticfocus)
    public var preventKeyboardDisplayOnProgrammaticFocus : Bool {
        get { try! _default.get_PreventKeyboardDisplayOnProgrammaticFocusImpl() }
        set { try! _default.put_PreventKeyboardDisplayOnProgrammaticFocusImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.selectionflyout)
    public var selectionFlyout : WinUI.FlyoutBase! {
        get { try! _default.get_SelectionFlyoutImpl() }
        set { try! _default.put_SelectionFlyoutImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.selectionhighlightcolor)
    public var selectionHighlightColor : WinUI.SolidColorBrush! {
        get { try! _default.get_SelectionHighlightColorImpl() }
        set { try! _default.put_SelectionHighlightColorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.textreadingorder)
    public var textReadingOrder : WinUI.TextReadingOrder {
        get { try! _default.get_TextReadingOrderImpl() }
        set { try! _default.put_TextReadingOrderImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.contextmenuopening)
    public lazy var contextMenuOpening : Event<ContextMenuOpeningEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ContextMenuOpeningImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ContextMenuOpeningImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.passwordchanged)
    public lazy var passwordChanged : Event<WinUI.RoutedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PasswordChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PasswordChangedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.passwordchanging)
    public lazy var passwordChanging : Event<TypedEventHandler<PasswordBox?, PasswordBoxPasswordChangingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PasswordChangingImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PasswordChangingImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.paste)
    public lazy var paste : Event<TextControlPasteEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PasteImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PasteImpl($0)
       }
      )
    }()

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = PasswordBox
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IPasswordBox
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordboxpasswordchangingeventargs)
public final class PasswordBoxPasswordChangingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IPasswordBoxPasswordChangingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBoxPasswordChangingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBoxPasswordChangingEventArgs>?) -> PasswordBoxPasswordChangingEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordboxpasswordchangingeventargs.iscontentchanging)
    public var isContentChanging : Bool {
        get { try! _default.get_IsContentChangingImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pathicon)
open class PathIcon : WinUI.IconElement {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IPathIcon
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPathIcon
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPathIcon>?) -> PathIcon? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IPathIconFactory : __ABI_Microsoft_UI_Xaml_Controls.IPathIconFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.PathIcon"))

    public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IPathIconFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IPathIconStatics: __ABI_Microsoft_UI_Xaml_Controls.IPathIconStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.PathIcon"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pathicon.dataproperty)
    public class var dataProperty : WinUI.DependencyProperty! {
        get { try! _IPathIconStatics.get_DataPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pathicon.data)
    public var data : WinUI.Geometry! {
        get { try! _default.get_DataImpl() }
        set { try! _default.put_DataImpl(newValue) }
    }

    internal enum IFrameworkElementOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
        internal typealias Class = PathIcon
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPathIcon
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IPathIcon
        }
    }
    internal typealias Composable = IFrameworkElementOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pathiconsource)
open class PathIconSource : WinUI.IconSource {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IPathIconSource
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPathIconSource
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPathIconSource>?) -> PathIconSource? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IPathIconSourceFactory : __ABI_Microsoft_UI_Xaml_Controls.IPathIconSourceFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.PathIconSource"))

    public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IPathIconSourceFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IPathIconSourceStatics: __ABI_Microsoft_UI_Xaml_Controls.IPathIconSourceStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.PathIconSource"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pathiconsource.dataproperty)
    public class var dataProperty : WinUI.DependencyProperty! {
        get { try! _IPathIconSourceStatics.get_DataPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pathiconsource.data)
    public var data : WinUI.Geometry! {
        get { try! _default.get_DataImpl() }
        set { try! _default.put_DataImpl(newValue) }
    }

    internal enum IIconSourceOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSourceOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IIconSourceOverrides
        internal typealias Class = PathIconSource
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPathIconSource
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IPathIconSource
        }
    }
    internal typealias Composable = IIconSourceOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.personpicture)
open class PersonPicture : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IPersonPicture
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPersonPicture
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPersonPicture>?) -> PersonPicture? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IPersonPictureFactory : __ABI_Microsoft_UI_Xaml_Controls.IPersonPictureFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.PersonPicture"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IPersonPictureFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IPersonPictureStatics: __ABI_Microsoft_UI_Xaml_Controls.IPersonPictureStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.PersonPicture"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.personpicture.badgeglyphproperty)
    public class var badgeGlyphProperty : WinUI.DependencyProperty! {
        get { try! _IPersonPictureStatics.get_BadgeGlyphPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.personpicture.badgeimagesourceproperty)
    public class var badgeImageSourceProperty : WinUI.DependencyProperty! {
        get { try! _IPersonPictureStatics.get_BadgeImageSourcePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.personpicture.badgenumberproperty)
    public class var badgeNumberProperty : WinUI.DependencyProperty! {
        get { try! _IPersonPictureStatics.get_BadgeNumberPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.personpicture.badgetextproperty)
    public class var badgeTextProperty : WinUI.DependencyProperty! {
        get { try! _IPersonPictureStatics.get_BadgeTextPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.personpicture.contactproperty)
    public class var contactProperty : WinUI.DependencyProperty! {
        get { try! _IPersonPictureStatics.get_ContactPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.personpicture.displaynameproperty)
    public class var displayNameProperty : WinUI.DependencyProperty! {
        get { try! _IPersonPictureStatics.get_DisplayNamePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.personpicture.initialsproperty)
    public class var initialsProperty : WinUI.DependencyProperty! {
        get { try! _IPersonPictureStatics.get_InitialsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.personpicture.isgroupproperty)
    public class var isGroupProperty : WinUI.DependencyProperty! {
        get { try! _IPersonPictureStatics.get_IsGroupPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.personpicture.prefersmallimageproperty)
    public class var preferSmallImageProperty : WinUI.DependencyProperty! {
        get { try! _IPersonPictureStatics.get_PreferSmallImagePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.personpicture.profilepictureproperty)
    public class var profilePictureProperty : WinUI.DependencyProperty! {
        get { try! _IPersonPictureStatics.get_ProfilePicturePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.personpicture.badgeglyph)
    public var badgeGlyph : String {
        get { try! _default.get_BadgeGlyphImpl() }
        set { try! _default.put_BadgeGlyphImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.personpicture.badgeimagesource)
    public var badgeImageSource : WinUI.ImageSource! {
        get { try! _default.get_BadgeImageSourceImpl() }
        set { try! _default.put_BadgeImageSourceImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.personpicture.badgenumber)
    public var badgeNumber : Int32 {
        get { try! _default.get_BadgeNumberImpl() }
        set { try! _default.put_BadgeNumberImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.personpicture.badgetext)
    public var badgeText : String {
        get { try! _default.get_BadgeTextImpl() }
        set { try! _default.put_BadgeTextImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.personpicture.contact)
    public var contact : UWP.Contact! {
        get { try! _default.get_ContactImpl() }
        set { try! _default.put_ContactImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.personpicture.displayname)
    public var displayName : String {
        get { try! _default.get_DisplayNameImpl() }
        set { try! _default.put_DisplayNameImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.personpicture.initials)
    public var initials : String {
        get { try! _default.get_InitialsImpl() }
        set { try! _default.put_InitialsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.personpicture.isgroup)
    public var isGroup : Bool {
        get { try! _default.get_IsGroupImpl() }
        set { try! _default.put_IsGroupImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.personpicture.prefersmallimage)
    public var preferSmallImage : Bool {
        get { try! _default.get_PreferSmallImageImpl() }
        set { try! _default.put_PreferSmallImageImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.personpicture.profilepicture)
    public var profilePicture : WinUI.ImageSource! {
        get { try! _default.get_ProfilePictureImpl() }
        set { try! _default.put_ProfilePictureImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.personpicture.templatesettings)
    public var templateSettings : PersonPictureTemplateSettings! {
        get { try! _default.get_TemplateSettingsImpl() }
    }

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = PersonPicture
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPersonPicture
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IPersonPicture
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.personpicturetemplatesettings)
public final class PersonPictureTemplateSettings : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IPersonPictureTemplateSettings
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPersonPictureTemplateSettings
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPersonPictureTemplateSettings>?) -> PersonPictureTemplateSettings? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.personpicturetemplatesettings.actualimagebrush)
    public var actualImageBrush : WinUI.ImageBrush! {
        get { try! _default.get_ActualImageBrushImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.personpicturetemplatesettings.actualinitials)
    public var actualInitials : String {
        get { try! _default.get_ActualInitialsImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pickerconfirmedeventargs)
public final class PickerConfirmedEventArgs : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IPickerConfirmedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPickerConfirmedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPickerConfirmedEventArgs>?) -> PickerConfirmedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.PickerConfirmedEventArgs")))
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pickerflyout)
public final class PickerFlyout : WinUI.PickerFlyoutBase {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IPickerFlyout
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPickerFlyout
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPickerFlyout>?) -> PickerFlyout? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.PickerFlyout")))
    }

    private static let _IPickerFlyoutStatics: __ABI_Microsoft_UI_Xaml_Controls.IPickerFlyoutStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.PickerFlyout"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pickerflyout.confirmationbuttonsvisibleproperty)
    public static var confirmationButtonsVisibleProperty : WinUI.DependencyProperty! {
        get { try! _IPickerFlyoutStatics.get_ConfirmationButtonsVisiblePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pickerflyout.contentproperty)
    public static var contentProperty : WinUI.DependencyProperty! {
        get { try! _IPickerFlyoutStatics.get_ContentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pickerflyout.showatasync)
    public func showAtAsync(_ target: WinUI.FrameworkElement!) throws -> WindowsFoundation.AnyIAsyncOperation<Bool>! {
        try _default.ShowAtAsyncImpl(target)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pickerflyout.confirmationbuttonsvisible)
    public var confirmationButtonsVisible : Bool {
        get { try! _default.get_ConfirmationButtonsVisibleImpl() }
        set { try! _default.put_ConfirmationButtonsVisibleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pickerflyout.content)
    public var content : WinUI.UIElement! {
        get { try! _default.get_ContentImpl() }
        set { try! _default.put_ContentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pickerflyout.confirmed)
    public lazy var confirmed : Event<TypedEventHandler<PickerFlyout?, PickerConfirmedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ConfirmedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ConfirmedImpl($0)
       }
      )
    }()

    internal enum IPickerFlyoutBaseOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPickerFlyoutBaseOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IPickerFlyoutBaseOverrides
        internal typealias Class = PickerFlyout
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPickerFlyout
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IPickerFlyout
        }
    }
    internal typealias Composable = IPickerFlyoutBaseOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pickerflyoutpresenter)
public final class PickerFlyoutPresenter : WinUI.ContentControl {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IPickerFlyoutPresenter
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPickerFlyoutPresenter
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPickerFlyoutPresenter>?) -> PickerFlyoutPresenter? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    internal enum IContentControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
        internal typealias Class = PickerFlyoutPresenter
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPickerFlyoutPresenter
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IPickerFlyoutPresenter
        }
    }
    internal typealias Composable = IContentControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pipspager)
open class PipsPager : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IPipsPager
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPager
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPager>?) -> PipsPager? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IPipsPagerFactory : __ABI_Microsoft_UI_Xaml_Controls.IPipsPagerFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.PipsPager"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IPipsPagerFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IPipsPagerStatics: __ABI_Microsoft_UI_Xaml_Controls.IPipsPagerStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.PipsPager"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pipspager.maxvisiblepipsproperty)
    public class var maxVisiblePipsProperty : WinUI.DependencyProperty! {
        get { try! _IPipsPagerStatics.get_MaxVisiblePipsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pipspager.nextbuttonstyleproperty)
    public class var nextButtonStyleProperty : WinUI.DependencyProperty! {
        get { try! _IPipsPagerStatics.get_NextButtonStylePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pipspager.nextbuttonvisibilityproperty)
    public class var nextButtonVisibilityProperty : WinUI.DependencyProperty! {
        get { try! _IPipsPagerStatics.get_NextButtonVisibilityPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pipspager.normalpipstyleproperty)
    public class var normalPipStyleProperty : WinUI.DependencyProperty! {
        get { try! _IPipsPagerStatics.get_NormalPipStylePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pipspager.numberofpagesproperty)
    public class var numberOfPagesProperty : WinUI.DependencyProperty! {
        get { try! _IPipsPagerStatics.get_NumberOfPagesPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pipspager.orientationproperty)
    public class var orientationProperty : WinUI.DependencyProperty! {
        get { try! _IPipsPagerStatics.get_OrientationPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pipspager.previousbuttonstyleproperty)
    public class var previousButtonStyleProperty : WinUI.DependencyProperty! {
        get { try! _IPipsPagerStatics.get_PreviousButtonStylePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pipspager.previousbuttonvisibilityproperty)
    public class var previousButtonVisibilityProperty : WinUI.DependencyProperty! {
        get { try! _IPipsPagerStatics.get_PreviousButtonVisibilityPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pipspager.selectedpageindexproperty)
    public class var selectedPageIndexProperty : WinUI.DependencyProperty! {
        get { try! _IPipsPagerStatics.get_SelectedPageIndexPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pipspager.selectedpipstyleproperty)
    public class var selectedPipStyleProperty : WinUI.DependencyProperty! {
        get { try! _IPipsPagerStatics.get_SelectedPipStylePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pipspager.maxvisiblepips)
    public var maxVisiblePips : Int32 {
        get { try! _default.get_MaxVisiblePipsImpl() }
        set { try! _default.put_MaxVisiblePipsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pipspager.nextbuttonstyle)
    public var nextButtonStyle : WinUI.Style! {
        get { try! _default.get_NextButtonStyleImpl() }
        set { try! _default.put_NextButtonStyleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pipspager.nextbuttonvisibility)
    public var nextButtonVisibility : PipsPagerButtonVisibility {
        get { try! _default.get_NextButtonVisibilityImpl() }
        set { try! _default.put_NextButtonVisibilityImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pipspager.normalpipstyle)
    public var normalPipStyle : WinUI.Style! {
        get { try! _default.get_NormalPipStyleImpl() }
        set { try! _default.put_NormalPipStyleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pipspager.numberofpages)
    public var numberOfPages : Int32 {
        get { try! _default.get_NumberOfPagesImpl() }
        set { try! _default.put_NumberOfPagesImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pipspager.orientation)
    public var orientation : Orientation {
        get { try! _default.get_OrientationImpl() }
        set { try! _default.put_OrientationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pipspager.previousbuttonstyle)
    public var previousButtonStyle : WinUI.Style! {
        get { try! _default.get_PreviousButtonStyleImpl() }
        set { try! _default.put_PreviousButtonStyleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pipspager.previousbuttonvisibility)
    public var previousButtonVisibility : PipsPagerButtonVisibility {
        get { try! _default.get_PreviousButtonVisibilityImpl() }
        set { try! _default.put_PreviousButtonVisibilityImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pipspager.selectedpageindex)
    public var selectedPageIndex : Int32 {
        get { try! _default.get_SelectedPageIndexImpl() }
        set { try! _default.put_SelectedPageIndexImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pipspager.selectedpipstyle)
    public var selectedPipStyle : WinUI.Style! {
        get { try! _default.get_SelectedPipStyleImpl() }
        set { try! _default.put_SelectedPipStyleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pipspager.templatesettings)
    public var templateSettings : PipsPagerTemplateSettings! {
        get { try! _default.get_TemplateSettingsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pipspager.selectedindexchanged)
    public lazy var selectedIndexChanged : Event<TypedEventHandler<PipsPager?, PipsPagerSelectedIndexChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_SelectedIndexChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_SelectedIndexChangedImpl($0)
       }
      )
    }()

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = PipsPager
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPager
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IPipsPager
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pipspagerselectedindexchangedeventargs)
public final class PipsPagerSelectedIndexChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IPipsPagerSelectedIndexChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPagerSelectedIndexChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPagerSelectedIndexChangedEventArgs>?) -> PipsPagerSelectedIndexChangedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pipspagertemplatesettings)
public final class PipsPagerTemplateSettings : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IPipsPagerTemplateSettings
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPagerTemplateSettings
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPipsPagerTemplateSettings>?) -> PipsPagerTemplateSettings? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pipspagertemplatesettings.pipspageritems)
    public var pipsPagerItems : WindowsFoundation.AnyIVector<Int32>! {
        get { try! _default.get_PipsPagerItemsImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pivot)
open class Pivot : WinUI.ItemsControl {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IPivot
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPivot
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPivot>?) -> Pivot? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IPivotFactory : __ABI_Microsoft_UI_Xaml_Controls.IPivotFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.Pivot"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IPivotFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IPivotStatics: __ABI_Microsoft_UI_Xaml_Controls.IPivotStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.Pivot"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pivot.getslideinanimationgroup)
    public class func getSlideInAnimationGroup(_ element: WinUI.FrameworkElement!) -> PivotSlideInAnimationGroup {
        return try! _IPivotStatics.GetSlideInAnimationGroupImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pivot.setslideinanimationgroup)
    public class func setSlideInAnimationGroup(_ element: WinUI.FrameworkElement!, _ value: PivotSlideInAnimationGroup) {
        try! _IPivotStatics.SetSlideInAnimationGroupImpl(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pivot.headerfocusvisualplacementproperty)
    public class var headerFocusVisualPlacementProperty : WinUI.DependencyProperty! {
        get { try! _IPivotStatics.get_HeaderFocusVisualPlacementPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pivot.headertemplateproperty)
    public class var headerTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IPivotStatics.get_HeaderTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pivot.isheaderitemscarouselenabledproperty)
    public class var isHeaderItemsCarouselEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IPivotStatics.get_IsHeaderItemsCarouselEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pivot.islockedproperty)
    public class var isLockedProperty : WinUI.DependencyProperty! {
        get { try! _IPivotStatics.get_IsLockedPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pivot.leftheaderproperty)
    public class var leftHeaderProperty : WinUI.DependencyProperty! {
        get { try! _IPivotStatics.get_LeftHeaderPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pivot.leftheadertemplateproperty)
    public class var leftHeaderTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IPivotStatics.get_LeftHeaderTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pivot.rightheaderproperty)
    public class var rightHeaderProperty : WinUI.DependencyProperty! {
        get { try! _IPivotStatics.get_RightHeaderPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pivot.rightheadertemplateproperty)
    public class var rightHeaderTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IPivotStatics.get_RightHeaderTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pivot.selectedindexproperty)
    public class var selectedIndexProperty : WinUI.DependencyProperty! {
        get { try! _IPivotStatics.get_SelectedIndexPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pivot.selecteditemproperty)
    public class var selectedItemProperty : WinUI.DependencyProperty! {
        get { try! _IPivotStatics.get_SelectedItemPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pivot.slideinanimationgroupproperty)
    public class var slideInAnimationGroupProperty : WinUI.DependencyProperty! {
        get { try! _IPivotStatics.get_SlideInAnimationGroupPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pivot.titleproperty)
    public class var titleProperty : WinUI.DependencyProperty! {
        get { try! _IPivotStatics.get_TitlePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pivot.titletemplateproperty)
    public class var titleTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IPivotStatics.get_TitleTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pivot.headerfocusvisualplacement)
    public var headerFocusVisualPlacement : PivotHeaderFocusVisualPlacement {
        get { try! _default.get_HeaderFocusVisualPlacementImpl() }
        set { try! _default.put_HeaderFocusVisualPlacementImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pivot.headertemplate)
    public var headerTemplate : WinUI.DataTemplate! {
        get { try! _default.get_HeaderTemplateImpl() }
        set { try! _default.put_HeaderTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pivot.isheaderitemscarouselenabled)
    public var isHeaderItemsCarouselEnabled : Bool {
        get { try! _default.get_IsHeaderItemsCarouselEnabledImpl() }
        set { try! _default.put_IsHeaderItemsCarouselEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pivot.islocked)
    public var isLocked : Bool {
        get { try! _default.get_IsLockedImpl() }
        set { try! _default.put_IsLockedImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pivot.leftheader)
    public var leftHeader : Any! {
        get { try! _default.get_LeftHeaderImpl() }
        set { try! _default.put_LeftHeaderImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pivot.leftheadertemplate)
    public var leftHeaderTemplate : WinUI.DataTemplate! {
        get { try! _default.get_LeftHeaderTemplateImpl() }
        set { try! _default.put_LeftHeaderTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pivot.rightheader)
    public var rightHeader : Any! {
        get { try! _default.get_RightHeaderImpl() }
        set { try! _default.put_RightHeaderImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pivot.rightheadertemplate)
    public var rightHeaderTemplate : WinUI.DataTemplate! {
        get { try! _default.get_RightHeaderTemplateImpl() }
        set { try! _default.put_RightHeaderTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pivot.selectedindex)
    public var selectedIndex : Int32 {
        get { try! _default.get_SelectedIndexImpl() }
        set { try! _default.put_SelectedIndexImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pivot.selecteditem)
    public var selectedItem : Any! {
        get { try! _default.get_SelectedItemImpl() }
        set { try! _default.put_SelectedItemImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pivot.title)
    public var title : Any! {
        get { try! _default.get_TitleImpl() }
        set { try! _default.put_TitleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pivot.titletemplate)
    public var titleTemplate : WinUI.DataTemplate! {
        get { try! _default.get_TitleTemplateImpl() }
        set { try! _default.put_TitleTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pivot.pivotitemloaded)
    public lazy var pivotItemLoaded : Event<TypedEventHandler<Pivot?, PivotItemEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PivotItemLoadedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PivotItemLoadedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pivot.pivotitemloading)
    public lazy var pivotItemLoading : Event<TypedEventHandler<Pivot?, PivotItemEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PivotItemLoadingImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PivotItemLoadingImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pivot.pivotitemunloaded)
    public lazy var pivotItemUnloaded : Event<TypedEventHandler<Pivot?, PivotItemEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PivotItemUnloadedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PivotItemUnloadedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pivot.pivotitemunloading)
    public lazy var pivotItemUnloading : Event<TypedEventHandler<Pivot?, PivotItemEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PivotItemUnloadingImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PivotItemUnloadingImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pivot.selectionchanged)
    public lazy var selectionChanged : Event<SelectionChangedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_SelectionChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_SelectionChangedImpl($0)
       }
      )
    }()

    internal enum IItemsControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsControlOverrides
        internal typealias Class = Pivot
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPivot
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IPivot
        }
    }
    internal typealias Composable = IItemsControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pivotitem)
open class PivotItem : WinUI.ContentControl {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IPivotItem
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPivotItem
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPivotItem>?) -> PivotItem? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IPivotItemFactory : __ABI_Microsoft_UI_Xaml_Controls.IPivotItemFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.PivotItem"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IPivotItemFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IPivotItemStatics: __ABI_Microsoft_UI_Xaml_Controls.IPivotItemStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.PivotItem"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pivotitem.headerproperty)
    public class var headerProperty : WinUI.DependencyProperty! {
        get { try! _IPivotItemStatics.get_HeaderPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pivotitem.header)
    public var header : Any! {
        get { try! _default.get_HeaderImpl() }
        set { try! _default.put_HeaderImpl(newValue) }
    }

    internal enum IContentControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
        internal typealias Class = PivotItem
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPivotItem
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IPivotItem
        }
    }
    internal typealias Composable = IContentControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pivotitemeventargs)
public final class PivotItemEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IPivotItemEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPivotItemEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPivotItemEventArgs>?) -> PivotItemEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public init() {
        super.init(try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.PivotItemEventArgs")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.pivotitemeventargs.item)
    public var item : PivotItem! {
        get { try! _default.get_ItemImpl() }
        set { try! _default.put_ItemImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbar)
open class ProgressBar : WinUI.RangeBase {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IProgressBar
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBar
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBar>?) -> ProgressBar? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IProgressBarFactory : __ABI_Microsoft_UI_Xaml_Controls.IProgressBarFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ProgressBar"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IProgressBarFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IProgressBarStatics: __ABI_Microsoft_UI_Xaml_Controls.IProgressBarStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ProgressBar"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbar.isindeterminateproperty)
    public class var isIndeterminateProperty : WinUI.DependencyProperty! {
        get { try! _IProgressBarStatics.get_IsIndeterminatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbar.showerrorproperty)
    public class var showErrorProperty : WinUI.DependencyProperty! {
        get { try! _IProgressBarStatics.get_ShowErrorPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbar.showpausedproperty)
    public class var showPausedProperty : WinUI.DependencyProperty! {
        get { try! _IProgressBarStatics.get_ShowPausedPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbar.isindeterminate)
    public var isIndeterminate : Bool {
        get { try! _default.get_IsIndeterminateImpl() }
        set { try! _default.put_IsIndeterminateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbar.showerror)
    public var showError : Bool {
        get { try! _default.get_ShowErrorImpl() }
        set { try! _default.put_ShowErrorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbar.showpaused)
    public var showPaused : Bool {
        get { try! _default.get_ShowPausedImpl() }
        set { try! _default.put_ShowPausedImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbar.templatesettings)
    public var templateSettings : ProgressBarTemplateSettings! {
        get { try! _default.get_TemplateSettingsImpl() }
    }

    internal enum IRangeBaseOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IRangeBaseOverrides
        internal typealias Class = ProgressBar
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBar
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IProgressBar
        }
    }
    internal typealias Composable = IRangeBaseOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbartemplatesettings)
public final class ProgressBarTemplateSettings : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IProgressBarTemplateSettings
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBarTemplateSettings
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBarTemplateSettings>?) -> ProgressBarTemplateSettings? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbartemplatesettings.cliprect)
    public var clipRect : WinUI.RectangleGeometry! {
        get { try! _default.get_ClipRectImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbartemplatesettings.container2animationendposition)
    public var container2AnimationEndPosition : Double {
        get { try! _default.get_Container2AnimationEndPositionImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbartemplatesettings.container2animationstartposition)
    public var container2AnimationStartPosition : Double {
        get { try! _default.get_Container2AnimationStartPositionImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbartemplatesettings.containeranimationendposition)
    public var containerAnimationEndPosition : Double {
        get { try! _default.get_ContainerAnimationEndPositionImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbartemplatesettings.containeranimationmidposition)
    public var containerAnimationMidPosition : Double {
        get { try! _default.get_ContainerAnimationMidPositionImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbartemplatesettings.containeranimationstartposition)
    public var containerAnimationStartPosition : Double {
        get { try! _default.get_ContainerAnimationStartPositionImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbartemplatesettings.ellipseanimationendposition)
    public var ellipseAnimationEndPosition : Double {
        get { try! _default.get_EllipseAnimationEndPositionImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbartemplatesettings.ellipseanimationwellposition)
    public var ellipseAnimationWellPosition : Double {
        get { try! _default.get_EllipseAnimationWellPositionImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbartemplatesettings.ellipsediameter)
    public var ellipseDiameter : Double {
        get { try! _default.get_EllipseDiameterImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbartemplatesettings.ellipseoffset)
    public var ellipseOffset : Double {
        get { try! _default.get_EllipseOffsetImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbartemplatesettings.indicatorlengthdelta)
    public var indicatorLengthDelta : Double {
        get { try! _default.get_IndicatorLengthDeltaImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressring)
open class ProgressRing : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IProgressRing
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRing
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRing>?) -> ProgressRing? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IProgressRingFactory : __ABI_Microsoft_UI_Xaml_Controls.IProgressRingFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ProgressRing"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IProgressRingFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IProgressRingStatics: __ABI_Microsoft_UI_Xaml_Controls.IProgressRingStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ProgressRing"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressring.isactiveproperty)
    public class var isActiveProperty : WinUI.DependencyProperty! {
        get { try! _IProgressRingStatics.get_IsActivePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressring.isindeterminateproperty)
    public class var isIndeterminateProperty : WinUI.DependencyProperty! {
        get { try! _IProgressRingStatics.get_IsIndeterminatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressring.maximumproperty)
    public class var maximumProperty : WinUI.DependencyProperty! {
        get { try! _IProgressRingStatics.get_MaximumPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressring.minimumproperty)
    public class var minimumProperty : WinUI.DependencyProperty! {
        get { try! _IProgressRingStatics.get_MinimumPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressring.valueproperty)
    public class var valueProperty : WinUI.DependencyProperty! {
        get { try! _IProgressRingStatics.get_ValuePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressring.isactive)
    public var isActive : Bool {
        get { try! _default.get_IsActiveImpl() }
        set { try! _default.put_IsActiveImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressring.isindeterminate)
    public var isIndeterminate : Bool {
        get { try! _default.get_IsIndeterminateImpl() }
        set { try! _default.put_IsIndeterminateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressring.maximum)
    public var maximum : Double {
        get { try! _default.get_MaximumImpl() }
        set { try! _default.put_MaximumImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressring.minimum)
    public var minimum : Double {
        get { try! _default.get_MinimumImpl() }
        set { try! _default.put_MinimumImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressring.templatesettings)
    public var templateSettings : ProgressRingTemplateSettings! {
        get { try! _default.get_TemplateSettingsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressring.value)
    public var value : Double {
        get { try! _default.get_ValueImpl() }
        set { try! _default.put_ValueImpl(newValue) }
    }

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = ProgressRing
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRing
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IProgressRing
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressringtemplatesettings)
public final class ProgressRingTemplateSettings : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IProgressRingTemplateSettings
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRingTemplateSettings
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRingTemplateSettings>?) -> ProgressRingTemplateSettings? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressringtemplatesettings.ellipsediameter)
    public var ellipseDiameter : Double {
        get { try! _default.get_EllipseDiameterImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressringtemplatesettings.ellipseoffset)
    public var ellipseOffset : WinUI.Thickness {
        get { try! _default.get_EllipseOffsetImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressringtemplatesettings.maxsidelength)
    public var maxSideLength : Double {
        get { try! _default.get_MaxSideLengthImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobutton)
open class RadioButton : WinUI.ToggleButton {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IRadioButton
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButton
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButton>?) -> RadioButton? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IRadioButtonFactory : __ABI_Microsoft_UI_Xaml_Controls.IRadioButtonFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.RadioButton"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IRadioButtonFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IRadioButtonStatics: __ABI_Microsoft_UI_Xaml_Controls.IRadioButtonStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.RadioButton"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobutton.groupnameproperty)
    public class var groupNameProperty : WinUI.DependencyProperty! {
        get { try! _IRadioButtonStatics.get_GroupNamePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobutton.groupname)
    public var groupName : String {
        get { try! _default.get_GroupNameImpl() }
        set { try! _default.put_GroupNameImpl(newValue) }
    }

    internal enum IToggleButtonOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIToggleButtonOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IToggleButtonOverrides
        internal typealias Class = RadioButton
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButton
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IRadioButton
        }
    }
    internal typealias Composable = IToggleButtonOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobuttons)
open class RadioButtons : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IRadioButtons
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtons
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtons>?) -> RadioButtons? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IRadioButtonsFactory : __ABI_Microsoft_UI_Xaml_Controls.IRadioButtonsFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.RadioButtons"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IRadioButtonsFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IRadioButtonsStatics: __ABI_Microsoft_UI_Xaml_Controls.IRadioButtonsStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.RadioButtons"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobuttons.headerproperty)
    public class var headerProperty : WinUI.DependencyProperty! {
        get { try! _IRadioButtonsStatics.get_HeaderPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobuttons.headertemplateproperty)
    public class var headerTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IRadioButtonsStatics.get_HeaderTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobuttons.itemtemplateproperty)
    public class var itemTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IRadioButtonsStatics.get_ItemTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobuttons.itemsproperty)
    public class var itemsProperty : WinUI.DependencyProperty! {
        get { try! _IRadioButtonsStatics.get_ItemsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobuttons.itemssourceproperty)
    public class var itemsSourceProperty : WinUI.DependencyProperty! {
        get { try! _IRadioButtonsStatics.get_ItemsSourcePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobuttons.maxcolumnsproperty)
    public class var maxColumnsProperty : WinUI.DependencyProperty! {
        get { try! _IRadioButtonsStatics.get_MaxColumnsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobuttons.selectedindexproperty)
    public class var selectedIndexProperty : WinUI.DependencyProperty! {
        get { try! _IRadioButtonsStatics.get_SelectedIndexPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobuttons.selecteditemproperty)
    public class var selectedItemProperty : WinUI.DependencyProperty! {
        get { try! _IRadioButtonsStatics.get_SelectedItemPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobuttons.containerfromindex)
    public func containerFromIndex(_ index: Int32) throws -> WinUI.UIElement! {
        try _default.ContainerFromIndexImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobuttons.header)
    public var header : Any! {
        get { try! _default.get_HeaderImpl() }
        set { try! _default.put_HeaderImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobuttons.headertemplate)
    public var headerTemplate : WinUI.DataTemplate! {
        get { try! _default.get_HeaderTemplateImpl() }
        set { try! _default.put_HeaderTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobuttons.itemtemplate)
    public var itemTemplate : Any! {
        get { try! _default.get_ItemTemplateImpl() }
        set { try! _default.put_ItemTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobuttons.items)
    public var items : WindowsFoundation.AnyIVector<Any?>! {
        get { try! _default.get_ItemsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobuttons.itemssource)
    public var itemsSource : Any! {
        get { try! _default.get_ItemsSourceImpl() }
        set { try! _default.put_ItemsSourceImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobuttons.maxcolumns)
    public var maxColumns : Int32 {
        get { try! _default.get_MaxColumnsImpl() }
        set { try! _default.put_MaxColumnsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobuttons.selectedindex)
    public var selectedIndex : Int32 {
        get { try! _default.get_SelectedIndexImpl() }
        set { try! _default.put_SelectedIndexImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobuttons.selecteditem)
    public var selectedItem : Any! {
        get { try! _default.get_SelectedItemImpl() }
        set { try! _default.put_SelectedItemImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobuttons.selectionchanged)
    public lazy var selectionChanged : Event<SelectionChangedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_SelectionChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_SelectionChangedImpl($0)
       }
      )
    }()

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = RadioButtons
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtons
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IRadioButtons
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiomenuflyoutitem)
open class RadioMenuFlyoutItem : WinUI.MenuFlyoutItem {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IRadioMenuFlyoutItem
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioMenuFlyoutItem
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioMenuFlyoutItem>?) -> RadioMenuFlyoutItem? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IRadioMenuFlyoutItemFactory : __ABI_Microsoft_UI_Xaml_Controls.IRadioMenuFlyoutItemFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.RadioMenuFlyoutItem"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IRadioMenuFlyoutItemFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IRadioMenuFlyoutItemStatics: __ABI_Microsoft_UI_Xaml_Controls.IRadioMenuFlyoutItemStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.RadioMenuFlyoutItem"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiomenuflyoutitem.groupnameproperty)
    public class var groupNameProperty : WinUI.DependencyProperty! {
        get { try! _IRadioMenuFlyoutItemStatics.get_GroupNamePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiomenuflyoutitem.ischeckedproperty)
    public class var isCheckedProperty : WinUI.DependencyProperty! {
        get { try! _IRadioMenuFlyoutItemStatics.get_IsCheckedPropertyImpl() }
    }

    private static let _IRadioMenuFlyoutItemStatics2: __ABI_Microsoft_UI_Xaml_Controls.IRadioMenuFlyoutItemStatics2 = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.RadioMenuFlyoutItem"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiomenuflyoutitem.setarecheckstatesenabled)
    public class func setAreCheckStatesEnabled(_ object: MenuFlyoutSubItem!, _ value: Bool) {
        try! _IRadioMenuFlyoutItemStatics2.SetAreCheckStatesEnabledImpl(object, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiomenuflyoutitem.getarecheckstatesenabled)
    public class func getAreCheckStatesEnabled(_ object: MenuFlyoutSubItem!) -> Bool {
        return try! _IRadioMenuFlyoutItemStatics2.GetAreCheckStatesEnabledImpl(object)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiomenuflyoutitem.arecheckstatesenabledproperty)
    public class var areCheckStatesEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IRadioMenuFlyoutItemStatics2.get_AreCheckStatesEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiomenuflyoutitem.groupname)
    public var groupName : String {
        get { try! _default.get_GroupNameImpl() }
        set { try! _default.put_GroupNameImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiomenuflyoutitem.ischecked)
    public var isChecked : Bool {
        get { try! _default.get_IsCheckedImpl() }
        set { try! _default.put_IsCheckedImpl(newValue) }
    }

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = RadioMenuFlyoutItem
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioMenuFlyoutItem
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IRadioMenuFlyoutItem
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ratingcontrol)
open class RatingControl : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IRatingControl
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRatingControl
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRatingControl>?) -> RatingControl? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IRatingControlFactory : __ABI_Microsoft_UI_Xaml_Controls.IRatingControlFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.RatingControl"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IRatingControlFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IRatingControlStatics: __ABI_Microsoft_UI_Xaml_Controls.IRatingControlStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.RatingControl"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ratingcontrol.captionproperty)
    public class var captionProperty : WinUI.DependencyProperty! {
        get { try! _IRatingControlStatics.get_CaptionPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ratingcontrol.initialsetvalueproperty)
    public class var initialSetValueProperty : WinUI.DependencyProperty! {
        get { try! _IRatingControlStatics.get_InitialSetValuePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ratingcontrol.isclearenabledproperty)
    public class var isClearEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IRatingControlStatics.get_IsClearEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ratingcontrol.isreadonlyproperty)
    public class var isReadOnlyProperty : WinUI.DependencyProperty! {
        get { try! _IRatingControlStatics.get_IsReadOnlyPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ratingcontrol.iteminfoproperty)
    public class var itemInfoProperty : WinUI.DependencyProperty! {
        get { try! _IRatingControlStatics.get_ItemInfoPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ratingcontrol.maxratingproperty)
    public class var maxRatingProperty : WinUI.DependencyProperty! {
        get { try! _IRatingControlStatics.get_MaxRatingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ratingcontrol.placeholdervalueproperty)
    public class var placeholderValueProperty : WinUI.DependencyProperty! {
        get { try! _IRatingControlStatics.get_PlaceholderValuePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ratingcontrol.valueproperty)
    public class var valueProperty : WinUI.DependencyProperty! {
        get { try! _IRatingControlStatics.get_ValuePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ratingcontrol.caption)
    public var caption : String {
        get { try! _default.get_CaptionImpl() }
        set { try! _default.put_CaptionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ratingcontrol.initialsetvalue)
    public var initialSetValue : Int32 {
        get { try! _default.get_InitialSetValueImpl() }
        set { try! _default.put_InitialSetValueImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ratingcontrol.isclearenabled)
    public var isClearEnabled : Bool {
        get { try! _default.get_IsClearEnabledImpl() }
        set { try! _default.put_IsClearEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ratingcontrol.isreadonly)
    public var isReadOnly : Bool {
        get { try! _default.get_IsReadOnlyImpl() }
        set { try! _default.put_IsReadOnlyImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ratingcontrol.iteminfo)
    public var itemInfo : RatingItemInfo! {
        get { try! _default.get_ItemInfoImpl() }
        set { try! _default.put_ItemInfoImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ratingcontrol.maxrating)
    public var maxRating : Int32 {
        get { try! _default.get_MaxRatingImpl() }
        set { try! _default.put_MaxRatingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ratingcontrol.placeholdervalue)
    public var placeholderValue : Double {
        get { try! _default.get_PlaceholderValueImpl() }
        set { try! _default.put_PlaceholderValueImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ratingcontrol.value)
    public var value : Double {
        get { try! _default.get_ValueImpl() }
        set { try! _default.put_ValueImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ratingcontrol.valuechanged)
    public lazy var valueChanged : Event<TypedEventHandler<RatingControl?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ValueChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ValueChangedImpl($0)
       }
      )
    }()

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = RatingControl
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRatingControl
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IRatingControl
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ratingitemfontinfo)
open class RatingItemFontInfo : WinUI.RatingItemInfo {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IRatingItemFontInfo
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRatingItemFontInfo
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRatingItemFontInfo>?) -> RatingItemFontInfo? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IRatingItemFontInfoFactory : __ABI_Microsoft_UI_Xaml_Controls.IRatingItemFontInfoFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.RatingItemFontInfo"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IRatingItemFontInfoFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IRatingItemFontInfoStatics: __ABI_Microsoft_UI_Xaml_Controls.IRatingItemFontInfoStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.RatingItemFontInfo"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ratingitemfontinfo.disabledglyphproperty)
    public class var disabledGlyphProperty : WinUI.DependencyProperty! {
        get { try! _IRatingItemFontInfoStatics.get_DisabledGlyphPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ratingitemfontinfo.glyphproperty)
    public class var glyphProperty : WinUI.DependencyProperty! {
        get { try! _IRatingItemFontInfoStatics.get_GlyphPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ratingitemfontinfo.placeholderglyphproperty)
    public class var placeholderGlyphProperty : WinUI.DependencyProperty! {
        get { try! _IRatingItemFontInfoStatics.get_PlaceholderGlyphPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ratingitemfontinfo.pointeroverglyphproperty)
    public class var pointerOverGlyphProperty : WinUI.DependencyProperty! {
        get { try! _IRatingItemFontInfoStatics.get_PointerOverGlyphPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ratingitemfontinfo.pointeroverplaceholderglyphproperty)
    public class var pointerOverPlaceholderGlyphProperty : WinUI.DependencyProperty! {
        get { try! _IRatingItemFontInfoStatics.get_PointerOverPlaceholderGlyphPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ratingitemfontinfo.unsetglyphproperty)
    public class var unsetGlyphProperty : WinUI.DependencyProperty! {
        get { try! _IRatingItemFontInfoStatics.get_UnsetGlyphPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ratingitemfontinfo.disabledglyph)
    public var disabledGlyph : String {
        get { try! _default.get_DisabledGlyphImpl() }
        set { try! _default.put_DisabledGlyphImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ratingitemfontinfo.glyph)
    public var glyph : String {
        get { try! _default.get_GlyphImpl() }
        set { try! _default.put_GlyphImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ratingitemfontinfo.placeholderglyph)
    public var placeholderGlyph : String {
        get { try! _default.get_PlaceholderGlyphImpl() }
        set { try! _default.put_PlaceholderGlyphImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ratingitemfontinfo.pointeroverglyph)
    public var pointerOverGlyph : String {
        get { try! _default.get_PointerOverGlyphImpl() }
        set { try! _default.put_PointerOverGlyphImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ratingitemfontinfo.pointeroverplaceholderglyph)
    public var pointerOverPlaceholderGlyph : String {
        get { try! _default.get_PointerOverPlaceholderGlyphImpl() }
        set { try! _default.put_PointerOverPlaceholderGlyphImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ratingitemfontinfo.unsetglyph)
    public var unsetGlyph : String {
        get { try! _default.get_UnsetGlyphImpl() }
        set { try! _default.put_UnsetGlyphImpl(newValue) }
    }

    internal enum IRatingItemFontInfo : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = RatingItemFontInfo
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRatingItemFontInfo
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IRatingItemFontInfo
        }
    }
    internal typealias Composable = IRatingItemFontInfo
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ratingitemimageinfo)
open class RatingItemImageInfo : WinUI.RatingItemInfo {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IRatingItemImageInfo
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRatingItemImageInfo
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRatingItemImageInfo>?) -> RatingItemImageInfo? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IRatingItemImageInfoFactory : __ABI_Microsoft_UI_Xaml_Controls.IRatingItemImageInfoFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.RatingItemImageInfo"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IRatingItemImageInfoFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IRatingItemImageInfoStatics: __ABI_Microsoft_UI_Xaml_Controls.IRatingItemImageInfoStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.RatingItemImageInfo"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ratingitemimageinfo.disabledimageproperty)
    public class var disabledImageProperty : WinUI.DependencyProperty! {
        get { try! _IRatingItemImageInfoStatics.get_DisabledImagePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ratingitemimageinfo.imageproperty)
    public class var imageProperty : WinUI.DependencyProperty! {
        get { try! _IRatingItemImageInfoStatics.get_ImagePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ratingitemimageinfo.placeholderimageproperty)
    public class var placeholderImageProperty : WinUI.DependencyProperty! {
        get { try! _IRatingItemImageInfoStatics.get_PlaceholderImagePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ratingitemimageinfo.pointeroverimageproperty)
    public class var pointerOverImageProperty : WinUI.DependencyProperty! {
        get { try! _IRatingItemImageInfoStatics.get_PointerOverImagePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ratingitemimageinfo.pointeroverplaceholderimageproperty)
    public class var pointerOverPlaceholderImageProperty : WinUI.DependencyProperty! {
        get { try! _IRatingItemImageInfoStatics.get_PointerOverPlaceholderImagePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ratingitemimageinfo.unsetimageproperty)
    public class var unsetImageProperty : WinUI.DependencyProperty! {
        get { try! _IRatingItemImageInfoStatics.get_UnsetImagePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ratingitemimageinfo.disabledimage)
    public var disabledImage : WinUI.ImageSource! {
        get { try! _default.get_DisabledImageImpl() }
        set { try! _default.put_DisabledImageImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ratingitemimageinfo.image)
    public var image : WinUI.ImageSource! {
        get { try! _default.get_ImageImpl() }
        set { try! _default.put_ImageImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ratingitemimageinfo.placeholderimage)
    public var placeholderImage : WinUI.ImageSource! {
        get { try! _default.get_PlaceholderImageImpl() }
        set { try! _default.put_PlaceholderImageImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ratingitemimageinfo.pointeroverimage)
    public var pointerOverImage : WinUI.ImageSource! {
        get { try! _default.get_PointerOverImageImpl() }
        set { try! _default.put_PointerOverImageImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ratingitemimageinfo.pointeroverplaceholderimage)
    public var pointerOverPlaceholderImage : WinUI.ImageSource! {
        get { try! _default.get_PointerOverPlaceholderImageImpl() }
        set { try! _default.put_PointerOverPlaceholderImageImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ratingitemimageinfo.unsetimage)
    public var unsetImage : WinUI.ImageSource! {
        get { try! _default.get_UnsetImageImpl() }
        set { try! _default.put_UnsetImageImpl(newValue) }
    }

    internal enum IRatingItemImageInfo : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = RatingItemImageInfo
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRatingItemImageInfo
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IRatingItemImageInfo
        }
    }
    internal typealias Composable = IRatingItemImageInfo
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ratingiteminfo)
open class RatingItemInfo : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IRatingItemInfo
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRatingItemInfo
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRatingItemInfo>?) -> RatingItemInfo? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IRatingItemInfoFactory : __ABI_Microsoft_UI_Xaml_Controls.IRatingItemInfoFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.RatingItemInfo"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IRatingItemInfoFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    internal enum IRatingItemInfo : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = RatingItemInfo
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRatingItemInfo
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IRatingItemInfo
        }
    }
    internal typealias Composable = IRatingItemInfo
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.refreshcontainer)
open class RefreshContainer : WinUI.ContentControl {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IRefreshContainer
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRefreshContainer
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRefreshContainer>?) -> RefreshContainer? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IRefreshContainerFactory : __ABI_Microsoft_UI_Xaml_Controls.IRefreshContainerFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.RefreshContainer"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IRefreshContainerFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IRefreshContainerStatics: __ABI_Microsoft_UI_Xaml_Controls.IRefreshContainerStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.RefreshContainer"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.refreshcontainer.pulldirectionproperty)
    public class var pullDirectionProperty : WinUI.DependencyProperty! {
        get { try! _IRefreshContainerStatics.get_PullDirectionPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.refreshcontainer.visualizerproperty)
    public class var visualizerProperty : WinUI.DependencyProperty! {
        get { try! _IRefreshContainerStatics.get_VisualizerPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.refreshcontainer.requestrefresh)
    public func requestRefresh() throws {
        try _default.RequestRefreshImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.refreshcontainer.pulldirection)
    public var pullDirection : RefreshPullDirection {
        get { try! _default.get_PullDirectionImpl() }
        set { try! _default.put_PullDirectionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.refreshcontainer.visualizer)
    public var visualizer : RefreshVisualizer! {
        get { try! _default.get_VisualizerImpl() }
        set { try! _default.put_VisualizerImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.refreshcontainer.refreshrequested)
    public lazy var refreshRequested : Event<TypedEventHandler<RefreshContainer?, RefreshRequestedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_RefreshRequestedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_RefreshRequestedImpl($0)
       }
      )
    }()

    internal enum IContentControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
        internal typealias Class = RefreshContainer
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRefreshContainer
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IRefreshContainer
        }
    }
    internal typealias Composable = IContentControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.refreshinteractionratiochangedeventargs)
public final class RefreshInteractionRatioChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IRefreshInteractionRatioChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRefreshInteractionRatioChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRefreshInteractionRatioChangedEventArgs>?) -> RefreshInteractionRatioChangedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.refreshinteractionratiochangedeventargs.interactionratio)
    public var interactionRatio : Double {
        get { try! _default.get_InteractionRatioImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.refreshrequestedeventargs)
public final class RefreshRequestedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IRefreshRequestedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRefreshRequestedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRefreshRequestedEventArgs>?) -> RefreshRequestedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.refreshrequestedeventargs.getdeferral)
    public func getDeferral() throws -> WindowsFoundation.Deferral! {
        try _default.GetDeferralImpl()
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.refreshstatechangedeventargs)
public final class RefreshStateChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IRefreshStateChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRefreshStateChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRefreshStateChangedEventArgs>?) -> RefreshStateChangedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.refreshstatechangedeventargs.newstate)
    public var newState : RefreshVisualizerState {
        get { try! _default.get_NewStateImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.refreshstatechangedeventargs.oldstate)
    public var oldState : RefreshVisualizerState {
        get { try! _default.get_OldStateImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.refreshvisualizer)
open class RefreshVisualizer : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IRefreshVisualizer
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRefreshVisualizer
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRefreshVisualizer>?) -> RefreshVisualizer? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IRefreshVisualizerFactory : __ABI_Microsoft_UI_Xaml_Controls.IRefreshVisualizerFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.RefreshVisualizer"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IRefreshVisualizerFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IRefreshVisualizerStatics: __ABI_Microsoft_UI_Xaml_Controls.IRefreshVisualizerStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.RefreshVisualizer"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.refreshvisualizer.contentproperty)
    public class var contentProperty : WinUI.DependencyProperty! {
        get { try! _IRefreshVisualizerStatics.get_ContentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.refreshvisualizer.infoproviderproperty)
    public class var infoProviderProperty : WinUI.DependencyProperty! {
        get { try! _IRefreshVisualizerStatics.get_InfoProviderPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.refreshvisualizer.orientationproperty)
    public class var orientationProperty : WinUI.DependencyProperty! {
        get { try! _IRefreshVisualizerStatics.get_OrientationPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.refreshvisualizer.stateproperty)
    public class var stateProperty : WinUI.DependencyProperty! {
        get { try! _IRefreshVisualizerStatics.get_StatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.refreshvisualizer.requestrefresh)
    public func requestRefresh() throws {
        try _default.RequestRefreshImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.refreshvisualizer.content)
    public var content : WinUI.UIElement! {
        get { try! _default.get_ContentImpl() }
        set { try! _default.put_ContentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.refreshvisualizer.orientation)
    public var orientation : RefreshVisualizerOrientation {
        get { try! _default.get_OrientationImpl() }
        set { try! _default.put_OrientationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.refreshvisualizer.state)
    public var state : RefreshVisualizerState {
        get { try! _default.get_StateImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.refreshvisualizer.refreshrequested)
    public lazy var refreshRequested : Event<TypedEventHandler<RefreshVisualizer?, RefreshRequestedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_RefreshRequestedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_RefreshRequestedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.refreshvisualizer.refreshstatechanged)
    public lazy var refreshStateChanged : Event<TypedEventHandler<RefreshVisualizer?, RefreshStateChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_RefreshStateChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_RefreshStateChangedImpl($0)
       }
      )
    }()

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = RefreshVisualizer
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRefreshVisualizer
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IRefreshVisualizer
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel)
open class RelativePanel : WinUI.Panel {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IRelativePanel
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanel
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanel>?) -> RelativePanel? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IRelativePanelFactory : __ABI_Microsoft_UI_Xaml_Controls.IRelativePanelFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.RelativePanel"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IRelativePanelFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IRelativePanelStatics: __ABI_Microsoft_UI_Xaml_Controls.IRelativePanelStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.RelativePanel"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.getleftof)
    public class func getLeftOf(_ element: WinUI.UIElement!) -> Any! {
        return try! _IRelativePanelStatics.GetLeftOfImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.setleftof)
    public class func setLeftOf(_ element: WinUI.UIElement!, _ value: Any!) {
        try! _IRelativePanelStatics.SetLeftOfImpl(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.getabove)
    public class func getAbove(_ element: WinUI.UIElement!) -> Any! {
        return try! _IRelativePanelStatics.GetAboveImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.setabove)
    public class func setAbove(_ element: WinUI.UIElement!, _ value: Any!) {
        try! _IRelativePanelStatics.SetAboveImpl(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.getrightof)
    public class func getRightOf(_ element: WinUI.UIElement!) -> Any! {
        return try! _IRelativePanelStatics.GetRightOfImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.setrightof)
    public class func setRightOf(_ element: WinUI.UIElement!, _ value: Any!) {
        try! _IRelativePanelStatics.SetRightOfImpl(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.getbelow)
    public class func getBelow(_ element: WinUI.UIElement!) -> Any! {
        return try! _IRelativePanelStatics.GetBelowImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.setbelow)
    public class func setBelow(_ element: WinUI.UIElement!, _ value: Any!) {
        try! _IRelativePanelStatics.SetBelowImpl(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.getalignhorizontalcenterwith)
    public class func getAlignHorizontalCenterWith(_ element: WinUI.UIElement!) -> Any! {
        return try! _IRelativePanelStatics.GetAlignHorizontalCenterWithImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.setalignhorizontalcenterwith)
    public class func setAlignHorizontalCenterWith(_ element: WinUI.UIElement!, _ value: Any!) {
        try! _IRelativePanelStatics.SetAlignHorizontalCenterWithImpl(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.getalignverticalcenterwith)
    public class func getAlignVerticalCenterWith(_ element: WinUI.UIElement!) -> Any! {
        return try! _IRelativePanelStatics.GetAlignVerticalCenterWithImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.setalignverticalcenterwith)
    public class func setAlignVerticalCenterWith(_ element: WinUI.UIElement!, _ value: Any!) {
        try! _IRelativePanelStatics.SetAlignVerticalCenterWithImpl(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.getalignleftwith)
    public class func getAlignLeftWith(_ element: WinUI.UIElement!) -> Any! {
        return try! _IRelativePanelStatics.GetAlignLeftWithImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.setalignleftwith)
    public class func setAlignLeftWith(_ element: WinUI.UIElement!, _ value: Any!) {
        try! _IRelativePanelStatics.SetAlignLeftWithImpl(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.getaligntopwith)
    public class func getAlignTopWith(_ element: WinUI.UIElement!) -> Any! {
        return try! _IRelativePanelStatics.GetAlignTopWithImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.setaligntopwith)
    public class func setAlignTopWith(_ element: WinUI.UIElement!, _ value: Any!) {
        try! _IRelativePanelStatics.SetAlignTopWithImpl(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.getalignrightwith)
    public class func getAlignRightWith(_ element: WinUI.UIElement!) -> Any! {
        return try! _IRelativePanelStatics.GetAlignRightWithImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.setalignrightwith)
    public class func setAlignRightWith(_ element: WinUI.UIElement!, _ value: Any!) {
        try! _IRelativePanelStatics.SetAlignRightWithImpl(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.getalignbottomwith)
    public class func getAlignBottomWith(_ element: WinUI.UIElement!) -> Any! {
        return try! _IRelativePanelStatics.GetAlignBottomWithImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.setalignbottomwith)
    public class func setAlignBottomWith(_ element: WinUI.UIElement!, _ value: Any!) {
        try! _IRelativePanelStatics.SetAlignBottomWithImpl(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.getalignleftwithpanel)
    public class func getAlignLeftWithPanel(_ element: WinUI.UIElement!) -> Bool {
        return try! _IRelativePanelStatics.GetAlignLeftWithPanelImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.setalignleftwithpanel)
    public class func setAlignLeftWithPanel(_ element: WinUI.UIElement!, _ value: Bool) {
        try! _IRelativePanelStatics.SetAlignLeftWithPanelImpl(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.getaligntopwithpanel)
    public class func getAlignTopWithPanel(_ element: WinUI.UIElement!) -> Bool {
        return try! _IRelativePanelStatics.GetAlignTopWithPanelImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.setaligntopwithpanel)
    public class func setAlignTopWithPanel(_ element: WinUI.UIElement!, _ value: Bool) {
        try! _IRelativePanelStatics.SetAlignTopWithPanelImpl(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.getalignrightwithpanel)
    public class func getAlignRightWithPanel(_ element: WinUI.UIElement!) -> Bool {
        return try! _IRelativePanelStatics.GetAlignRightWithPanelImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.setalignrightwithpanel)
    public class func setAlignRightWithPanel(_ element: WinUI.UIElement!, _ value: Bool) {
        try! _IRelativePanelStatics.SetAlignRightWithPanelImpl(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.getalignbottomwithpanel)
    public class func getAlignBottomWithPanel(_ element: WinUI.UIElement!) -> Bool {
        return try! _IRelativePanelStatics.GetAlignBottomWithPanelImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.setalignbottomwithpanel)
    public class func setAlignBottomWithPanel(_ element: WinUI.UIElement!, _ value: Bool) {
        try! _IRelativePanelStatics.SetAlignBottomWithPanelImpl(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.getalignhorizontalcenterwithpanel)
    public class func getAlignHorizontalCenterWithPanel(_ element: WinUI.UIElement!) -> Bool {
        return try! _IRelativePanelStatics.GetAlignHorizontalCenterWithPanelImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.setalignhorizontalcenterwithpanel)
    public class func setAlignHorizontalCenterWithPanel(_ element: WinUI.UIElement!, _ value: Bool) {
        try! _IRelativePanelStatics.SetAlignHorizontalCenterWithPanelImpl(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.getalignverticalcenterwithpanel)
    public class func getAlignVerticalCenterWithPanel(_ element: WinUI.UIElement!) -> Bool {
        return try! _IRelativePanelStatics.GetAlignVerticalCenterWithPanelImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.setalignverticalcenterwithpanel)
    public class func setAlignVerticalCenterWithPanel(_ element: WinUI.UIElement!, _ value: Bool) {
        try! _IRelativePanelStatics.SetAlignVerticalCenterWithPanelImpl(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.aboveproperty)
    public class var aboveProperty : WinUI.DependencyProperty! {
        get { try! _IRelativePanelStatics.get_AbovePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.alignbottomwithpanelproperty)
    public class var alignBottomWithPanelProperty : WinUI.DependencyProperty! {
        get { try! _IRelativePanelStatics.get_AlignBottomWithPanelPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.alignbottomwithproperty)
    public class var alignBottomWithProperty : WinUI.DependencyProperty! {
        get { try! _IRelativePanelStatics.get_AlignBottomWithPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.alignhorizontalcenterwithpanelproperty)
    public class var alignHorizontalCenterWithPanelProperty : WinUI.DependencyProperty! {
        get { try! _IRelativePanelStatics.get_AlignHorizontalCenterWithPanelPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.alignhorizontalcenterwithproperty)
    public class var alignHorizontalCenterWithProperty : WinUI.DependencyProperty! {
        get { try! _IRelativePanelStatics.get_AlignHorizontalCenterWithPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.alignleftwithpanelproperty)
    public class var alignLeftWithPanelProperty : WinUI.DependencyProperty! {
        get { try! _IRelativePanelStatics.get_AlignLeftWithPanelPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.alignleftwithproperty)
    public class var alignLeftWithProperty : WinUI.DependencyProperty! {
        get { try! _IRelativePanelStatics.get_AlignLeftWithPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.alignrightwithpanelproperty)
    public class var alignRightWithPanelProperty : WinUI.DependencyProperty! {
        get { try! _IRelativePanelStatics.get_AlignRightWithPanelPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.alignrightwithproperty)
    public class var alignRightWithProperty : WinUI.DependencyProperty! {
        get { try! _IRelativePanelStatics.get_AlignRightWithPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.aligntopwithpanelproperty)
    public class var alignTopWithPanelProperty : WinUI.DependencyProperty! {
        get { try! _IRelativePanelStatics.get_AlignTopWithPanelPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.aligntopwithproperty)
    public class var alignTopWithProperty : WinUI.DependencyProperty! {
        get { try! _IRelativePanelStatics.get_AlignTopWithPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.alignverticalcenterwithpanelproperty)
    public class var alignVerticalCenterWithPanelProperty : WinUI.DependencyProperty! {
        get { try! _IRelativePanelStatics.get_AlignVerticalCenterWithPanelPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.alignverticalcenterwithproperty)
    public class var alignVerticalCenterWithProperty : WinUI.DependencyProperty! {
        get { try! _IRelativePanelStatics.get_AlignVerticalCenterWithPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.backgroundsizingproperty)
    public class var backgroundSizingProperty : WinUI.DependencyProperty! {
        get { try! _IRelativePanelStatics.get_BackgroundSizingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.belowproperty)
    public class var belowProperty : WinUI.DependencyProperty! {
        get { try! _IRelativePanelStatics.get_BelowPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.borderbrushproperty)
    public class var borderBrushProperty : WinUI.DependencyProperty! {
        get { try! _IRelativePanelStatics.get_BorderBrushPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.borderthicknessproperty)
    public class var borderThicknessProperty : WinUI.DependencyProperty! {
        get { try! _IRelativePanelStatics.get_BorderThicknessPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.cornerradiusproperty)
    public class var cornerRadiusProperty : WinUI.DependencyProperty! {
        get { try! _IRelativePanelStatics.get_CornerRadiusPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.leftofproperty)
    public class var leftOfProperty : WinUI.DependencyProperty! {
        get { try! _IRelativePanelStatics.get_LeftOfPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.paddingproperty)
    public class var paddingProperty : WinUI.DependencyProperty! {
        get { try! _IRelativePanelStatics.get_PaddingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.rightofproperty)
    public class var rightOfProperty : WinUI.DependencyProperty! {
        get { try! _IRelativePanelStatics.get_RightOfPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.backgroundsizing)
    public var backgroundSizing : BackgroundSizing {
        get { try! _default.get_BackgroundSizingImpl() }
        set { try! _default.put_BackgroundSizingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.borderbrush)
    public var borderBrush : WinUI.Brush! {
        get { try! _default.get_BorderBrushImpl() }
        set { try! _default.put_BorderBrushImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.borderthickness)
    public var borderThickness : WinUI.Thickness {
        get { try! _default.get_BorderThicknessImpl() }
        set { try! _default.put_BorderThicknessImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.cornerradius)
    public var cornerRadius : WinUI.CornerRadius {
        get { try! _default.get_CornerRadiusImpl() }
        set { try! _default.put_CornerRadiusImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.relativepanel.padding)
    public var padding : WinUI.Thickness {
        get { try! _default.get_PaddingImpl() }
        set { try! _default.put_PaddingImpl(newValue) }
    }

    internal enum IFrameworkElementOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
        internal typealias Class = RelativePanel
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRelativePanel
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IRelativePanel
        }
    }
    internal typealias Composable = IFrameworkElementOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.reveallistviewitempresenter)
open class RevealListViewItemPresenter : WinUI.ListViewItemPresenter {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IRevealListViewItemPresenter
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRevealListViewItemPresenter
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRevealListViewItemPresenter>?) -> RevealListViewItemPresenter? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IRevealListViewItemPresenterFactory : __ABI_Microsoft_UI_Xaml_Controls.IRevealListViewItemPresenterFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.RevealListViewItemPresenter"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IRevealListViewItemPresenterFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    internal enum IContentPresenterOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentPresenterOverrides
        internal typealias Class = RevealListViewItemPresenter
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRevealListViewItemPresenter
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IRevealListViewItemPresenter
        }
    }
    internal typealias Composable = IContentPresenterOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox)
open class RichEditBox : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IRichEditBox
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRichEditBox
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRichEditBox>?) -> RichEditBox? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IRichEditBoxFactory : __ABI_Microsoft_UI_Xaml_Controls.IRichEditBoxFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.RichEditBox"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IRichEditBoxFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IRichEditBoxStatics: __ABI_Microsoft_UI_Xaml_Controls.IRichEditBoxStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.RichEditBox"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.acceptsreturnproperty)
    public class var acceptsReturnProperty : WinUI.DependencyProperty! {
        get { try! _IRichEditBoxStatics.get_AcceptsReturnPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.charactercasingproperty)
    public class var characterCasingProperty : WinUI.DependencyProperty! {
        get { try! _IRichEditBoxStatics.get_CharacterCasingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.clipboardcopyformatproperty)
    public class var clipboardCopyFormatProperty : WinUI.DependencyProperty! {
        get { try! _IRichEditBoxStatics.get_ClipboardCopyFormatPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.descriptionproperty)
    public class var descriptionProperty : WinUI.DependencyProperty! {
        get { try! _IRichEditBoxStatics.get_DescriptionPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.desiredcandidatewindowalignmentproperty)
    public class var desiredCandidateWindowAlignmentProperty : WinUI.DependencyProperty! {
        get { try! _IRichEditBoxStatics.get_DesiredCandidateWindowAlignmentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.disabledformattingacceleratorsproperty)
    public class var disabledFormattingAcceleratorsProperty : WinUI.DependencyProperty! {
        get { try! _IRichEditBoxStatics.get_DisabledFormattingAcceleratorsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.headerproperty)
    public class var headerProperty : WinUI.DependencyProperty! {
        get { try! _IRichEditBoxStatics.get_HeaderPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.headertemplateproperty)
    public class var headerTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IRichEditBoxStatics.get_HeaderTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.horizontaltextalignmentproperty)
    public class var horizontalTextAlignmentProperty : WinUI.DependencyProperty! {
        get { try! _IRichEditBoxStatics.get_HorizontalTextAlignmentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.inputscopeproperty)
    public class var inputScopeProperty : WinUI.DependencyProperty! {
        get { try! _IRichEditBoxStatics.get_InputScopePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.iscolorfontenabledproperty)
    public class var isColorFontEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IRichEditBoxStatics.get_IsColorFontEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.isreadonlyproperty)
    public class var isReadOnlyProperty : WinUI.DependencyProperty! {
        get { try! _IRichEditBoxStatics.get_IsReadOnlyPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.isspellcheckenabledproperty)
    public class var isSpellCheckEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IRichEditBoxStatics.get_IsSpellCheckEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.istextpredictionenabledproperty)
    public class var isTextPredictionEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IRichEditBoxStatics.get_IsTextPredictionEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.maxlengthproperty)
    public class var maxLengthProperty : WinUI.DependencyProperty! {
        get { try! _IRichEditBoxStatics.get_MaxLengthPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.placeholdertextproperty)
    public class var placeholderTextProperty : WinUI.DependencyProperty! {
        get { try! _IRichEditBoxStatics.get_PlaceholderTextPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.preventkeyboarddisplayonprogrammaticfocusproperty)
    public class var preventKeyboardDisplayOnProgrammaticFocusProperty : WinUI.DependencyProperty! {
        get { try! _IRichEditBoxStatics.get_PreventKeyboardDisplayOnProgrammaticFocusPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.proofingmenuflyoutproperty)
    public class var proofingMenuFlyoutProperty : WinUI.DependencyProperty! {
        get { try! _IRichEditBoxStatics.get_ProofingMenuFlyoutPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.selectionflyoutproperty)
    public class var selectionFlyoutProperty : WinUI.DependencyProperty! {
        get { try! _IRichEditBoxStatics.get_SelectionFlyoutPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.selectionhighlightcolorproperty)
    public class var selectionHighlightColorProperty : WinUI.DependencyProperty! {
        get { try! _IRichEditBoxStatics.get_SelectionHighlightColorPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.selectionhighlightcolorwhennotfocusedproperty)
    public class var selectionHighlightColorWhenNotFocusedProperty : WinUI.DependencyProperty! {
        get { try! _IRichEditBoxStatics.get_SelectionHighlightColorWhenNotFocusedPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.textalignmentproperty)
    public class var textAlignmentProperty : WinUI.DependencyProperty! {
        get { try! _IRichEditBoxStatics.get_TextAlignmentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.textreadingorderproperty)
    public class var textReadingOrderProperty : WinUI.DependencyProperty! {
        get { try! _IRichEditBoxStatics.get_TextReadingOrderPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.textwrappingproperty)
    public class var textWrappingProperty : WinUI.DependencyProperty! {
        get { try! _IRichEditBoxStatics.get_TextWrappingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.getlinguisticalternativesasync)
    public func getLinguisticAlternativesAsync() throws -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<String>?>! {
        try _default.GetLinguisticAlternativesAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.acceptsreturn)
    public var acceptsReturn : Bool {
        get { try! _default.get_AcceptsReturnImpl() }
        set { try! _default.put_AcceptsReturnImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.charactercasing)
    public var characterCasing : CharacterCasing {
        get { try! _default.get_CharacterCasingImpl() }
        set { try! _default.put_CharacterCasingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.clipboardcopyformat)
    public var clipboardCopyFormat : RichEditClipboardFormat {
        get { try! _default.get_ClipboardCopyFormatImpl() }
        set { try! _default.put_ClipboardCopyFormatImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.description)
    public var description : Any! {
        get { try! _default.get_DescriptionImpl() }
        set { try! _default.put_DescriptionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.desiredcandidatewindowalignment)
    public var desiredCandidateWindowAlignment : CandidateWindowAlignment {
        get { try! _default.get_DesiredCandidateWindowAlignmentImpl() }
        set { try! _default.put_DesiredCandidateWindowAlignmentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.disabledformattingaccelerators)
    public var disabledFormattingAccelerators : DisabledFormattingAccelerators {
        get { try! _default.get_DisabledFormattingAcceleratorsImpl() }
        set { try! _default.put_DisabledFormattingAcceleratorsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.document)
    public var document : WinAppSDK.RichEditTextDocument! {
        get { try! _default.get_DocumentImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.header)
    public var header : Any! {
        get { try! _default.get_HeaderImpl() }
        set { try! _default.put_HeaderImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.headertemplate)
    public var headerTemplate : WinUI.DataTemplate! {
        get { try! _default.get_HeaderTemplateImpl() }
        set { try! _default.put_HeaderTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.horizontaltextalignment)
    public var horizontalTextAlignment : WinUI.TextAlignment {
        get { try! _default.get_HorizontalTextAlignmentImpl() }
        set { try! _default.put_HorizontalTextAlignmentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.inputscope)
    public var inputScope : WinUI.InputScope! {
        get { try! _default.get_InputScopeImpl() }
        set { try! _default.put_InputScopeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.iscolorfontenabled)
    public var isColorFontEnabled : Bool {
        get { try! _default.get_IsColorFontEnabledImpl() }
        set { try! _default.put_IsColorFontEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.isreadonly)
    public var isReadOnly : Bool {
        get { try! _default.get_IsReadOnlyImpl() }
        set { try! _default.put_IsReadOnlyImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.isspellcheckenabled)
    public var isSpellCheckEnabled : Bool {
        get { try! _default.get_IsSpellCheckEnabledImpl() }
        set { try! _default.put_IsSpellCheckEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.istextpredictionenabled)
    public var isTextPredictionEnabled : Bool {
        get { try! _default.get_IsTextPredictionEnabledImpl() }
        set { try! _default.put_IsTextPredictionEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.maxlength)
    public var maxLength : Int32 {
        get { try! _default.get_MaxLengthImpl() }
        set { try! _default.put_MaxLengthImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.placeholdertext)
    public var placeholderText : String {
        get { try! _default.get_PlaceholderTextImpl() }
        set { try! _default.put_PlaceholderTextImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.preventkeyboarddisplayonprogrammaticfocus)
    public var preventKeyboardDisplayOnProgrammaticFocus : Bool {
        get { try! _default.get_PreventKeyboardDisplayOnProgrammaticFocusImpl() }
        set { try! _default.put_PreventKeyboardDisplayOnProgrammaticFocusImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.proofingmenuflyout)
    public var proofingMenuFlyout : WinUI.FlyoutBase! {
        get { try! _default.get_ProofingMenuFlyoutImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.selectionflyout)
    public var selectionFlyout : WinUI.FlyoutBase! {
        get { try! _default.get_SelectionFlyoutImpl() }
        set { try! _default.put_SelectionFlyoutImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.selectionhighlightcolor)
    public var selectionHighlightColor : WinUI.SolidColorBrush! {
        get { try! _default.get_SelectionHighlightColorImpl() }
        set { try! _default.put_SelectionHighlightColorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.selectionhighlightcolorwhennotfocused)
    public var selectionHighlightColorWhenNotFocused : WinUI.SolidColorBrush! {
        get { try! _default.get_SelectionHighlightColorWhenNotFocusedImpl() }
        set { try! _default.put_SelectionHighlightColorWhenNotFocusedImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.textalignment)
    public var textAlignment : WinUI.TextAlignment {
        get { try! _default.get_TextAlignmentImpl() }
        set { try! _default.put_TextAlignmentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.textdocument)
    public var textDocument : WinAppSDK.RichEditTextDocument! {
        get { try! _default.get_TextDocumentImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.textreadingorder)
    public var textReadingOrder : WinUI.TextReadingOrder {
        get { try! _default.get_TextReadingOrderImpl() }
        set { try! _default.put_TextReadingOrderImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.textwrapping)
    public var textWrapping : WinUI.TextWrapping {
        get { try! _default.get_TextWrappingImpl() }
        set { try! _default.put_TextWrappingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.candidatewindowboundschanged)
    public lazy var candidateWindowBoundsChanged : Event<TypedEventHandler<RichEditBox?, CandidateWindowBoundsChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_CandidateWindowBoundsChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_CandidateWindowBoundsChangedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.contextmenuopening)
    public lazy var contextMenuOpening : Event<ContextMenuOpeningEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ContextMenuOpeningImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ContextMenuOpeningImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.copyingtoclipboard)
    public lazy var copyingToClipboard : Event<TypedEventHandler<RichEditBox?, TextControlCopyingToClipboardEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_CopyingToClipboardImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_CopyingToClipboardImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.cuttingtoclipboard)
    public lazy var cuttingToClipboard : Event<TypedEventHandler<RichEditBox?, TextControlCuttingToClipboardEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_CuttingToClipboardImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_CuttingToClipboardImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.paste)
    public lazy var paste : Event<TextControlPasteEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PasteImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PasteImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.selectionchanged)
    public lazy var selectionChanged : Event<WinUI.RoutedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_SelectionChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_SelectionChangedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.selectionchanging)
    public lazy var selectionChanging : Event<TypedEventHandler<RichEditBox?, RichEditBoxSelectionChangingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_SelectionChangingImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_SelectionChangingImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.textchanged)
    public lazy var textChanged : Event<WinUI.RoutedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_TextChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_TextChangedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.textchanging)
    public lazy var textChanging : Event<TypedEventHandler<RichEditBox?, RichEditBoxTextChangingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_TextChangingImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_TextChangingImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.textcompositionchanged)
    public lazy var textCompositionChanged : Event<TypedEventHandler<RichEditBox?, TextCompositionChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_TextCompositionChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_TextCompositionChangedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.textcompositionended)
    public lazy var textCompositionEnded : Event<TypedEventHandler<RichEditBox?, TextCompositionEndedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_TextCompositionEndedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_TextCompositionEndedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditbox.textcompositionstarted)
    public lazy var textCompositionStarted : Event<TypedEventHandler<RichEditBox?, TextCompositionStartedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_TextCompositionStartedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_TextCompositionStartedImpl($0)
       }
      )
    }()

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = RichEditBox
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRichEditBox
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IRichEditBox
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditboxselectionchangingeventargs)
public final class RichEditBoxSelectionChangingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IRichEditBoxSelectionChangingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRichEditBoxSelectionChangingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRichEditBoxSelectionChangingEventArgs>?) -> RichEditBoxSelectionChangingEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditboxselectionchangingeventargs.cancel)
    public var cancel : Bool {
        get { try! _default.get_CancelImpl() }
        set { try! _default.put_CancelImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditboxselectionchangingeventargs.selectionlength)
    public var selectionLength : Int32 {
        get { try! _default.get_SelectionLengthImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditboxselectionchangingeventargs.selectionstart)
    public var selectionStart : Int32 {
        get { try! _default.get_SelectionStartImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditboxtextchangingeventargs)
public final class RichEditBoxTextChangingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IRichEditBoxTextChangingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRichEditBoxTextChangingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRichEditBoxTextChangingEventArgs>?) -> RichEditBoxTextChangingEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richeditboxtextchangingeventargs.iscontentchanging)
    public var isContentChanging : Bool {
        get { try! _default.get_IsContentChangingImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock)
public final class RichTextBlock : WinUI.FrameworkElement {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IRichTextBlock
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRichTextBlock
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRichTextBlock>?) -> RichTextBlock? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.RichTextBlock")))
    }

    private static let _IRichTextBlockStatics: __ABI_Microsoft_UI_Xaml_Controls.IRichTextBlockStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.RichTextBlock"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.characterspacingproperty)
    public static var characterSpacingProperty : WinUI.DependencyProperty! {
        get { try! _IRichTextBlockStatics.get_CharacterSpacingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.fontfamilyproperty)
    public static var fontFamilyProperty : WinUI.DependencyProperty! {
        get { try! _IRichTextBlockStatics.get_FontFamilyPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.fontsizeproperty)
    public static var fontSizeProperty : WinUI.DependencyProperty! {
        get { try! _IRichTextBlockStatics.get_FontSizePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.fontstretchproperty)
    public static var fontStretchProperty : WinUI.DependencyProperty! {
        get { try! _IRichTextBlockStatics.get_FontStretchPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.fontstyleproperty)
    public static var fontStyleProperty : WinUI.DependencyProperty! {
        get { try! _IRichTextBlockStatics.get_FontStylePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.fontweightproperty)
    public static var fontWeightProperty : WinUI.DependencyProperty! {
        get { try! _IRichTextBlockStatics.get_FontWeightPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.foregroundproperty)
    public static var foregroundProperty : WinUI.DependencyProperty! {
        get { try! _IRichTextBlockStatics.get_ForegroundPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.hasoverflowcontentproperty)
    public static var hasOverflowContentProperty : WinUI.DependencyProperty! {
        get { try! _IRichTextBlockStatics.get_HasOverflowContentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.horizontaltextalignmentproperty)
    public static var horizontalTextAlignmentProperty : WinUI.DependencyProperty! {
        get { try! _IRichTextBlockStatics.get_HorizontalTextAlignmentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.iscolorfontenabledproperty)
    public static var isColorFontEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IRichTextBlockStatics.get_IsColorFontEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.istextscalefactorenabledproperty)
    public static var isTextScaleFactorEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IRichTextBlockStatics.get_IsTextScaleFactorEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.istextselectionenabledproperty)
    public static var isTextSelectionEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IRichTextBlockStatics.get_IsTextSelectionEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.istexttrimmedproperty)
    public static var isTextTrimmedProperty : WinUI.DependencyProperty! {
        get { try! _IRichTextBlockStatics.get_IsTextTrimmedPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.lineheightproperty)
    public static var lineHeightProperty : WinUI.DependencyProperty! {
        get { try! _IRichTextBlockStatics.get_LineHeightPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.linestackingstrategyproperty)
    public static var lineStackingStrategyProperty : WinUI.DependencyProperty! {
        get { try! _IRichTextBlockStatics.get_LineStackingStrategyPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.maxlinesproperty)
    public static var maxLinesProperty : WinUI.DependencyProperty! {
        get { try! _IRichTextBlockStatics.get_MaxLinesPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.opticalmarginalignmentproperty)
    public static var opticalMarginAlignmentProperty : WinUI.DependencyProperty! {
        get { try! _IRichTextBlockStatics.get_OpticalMarginAlignmentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.overflowcontenttargetproperty)
    public static var overflowContentTargetProperty : WinUI.DependencyProperty! {
        get { try! _IRichTextBlockStatics.get_OverflowContentTargetPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.paddingproperty)
    public static var paddingProperty : WinUI.DependencyProperty! {
        get { try! _IRichTextBlockStatics.get_PaddingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.selectedtextproperty)
    public static var selectedTextProperty : WinUI.DependencyProperty! {
        get { try! _IRichTextBlockStatics.get_SelectedTextPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.selectionflyoutproperty)
    public static var selectionFlyoutProperty : WinUI.DependencyProperty! {
        get { try! _IRichTextBlockStatics.get_SelectionFlyoutPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.selectionhighlightcolorproperty)
    public static var selectionHighlightColorProperty : WinUI.DependencyProperty! {
        get { try! _IRichTextBlockStatics.get_SelectionHighlightColorPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.textalignmentproperty)
    public static var textAlignmentProperty : WinUI.DependencyProperty! {
        get { try! _IRichTextBlockStatics.get_TextAlignmentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.textdecorationsproperty)
    public static var textDecorationsProperty : WinUI.DependencyProperty! {
        get { try! _IRichTextBlockStatics.get_TextDecorationsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.textindentproperty)
    public static var textIndentProperty : WinUI.DependencyProperty! {
        get { try! _IRichTextBlockStatics.get_TextIndentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.textlineboundsproperty)
    public static var textLineBoundsProperty : WinUI.DependencyProperty! {
        get { try! _IRichTextBlockStatics.get_TextLineBoundsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.textreadingorderproperty)
    public static var textReadingOrderProperty : WinUI.DependencyProperty! {
        get { try! _IRichTextBlockStatics.get_TextReadingOrderPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.texttrimmingproperty)
    public static var textTrimmingProperty : WinUI.DependencyProperty! {
        get { try! _IRichTextBlockStatics.get_TextTrimmingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.textwrappingproperty)
    public static var textWrappingProperty : WinUI.DependencyProperty! {
        get { try! _IRichTextBlockStatics.get_TextWrappingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.selectall)
    public func selectAll() throws {
        try _default.SelectAllImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.select)
    public func select(_ start: WinUI.TextPointer!, _ end: WinUI.TextPointer!) throws {
        try _default.SelectImpl(start, end)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.getpositionfrompoint)
    public func getPositionFromPoint(_ point: WindowsFoundation.Point) throws -> WinUI.TextPointer! {
        try _default.GetPositionFromPointImpl(point)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.copyselectiontoclipboard)
    public func copySelectionToClipboard() throws {
        try _default.CopySelectionToClipboardImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.baselineoffset)
    public var baselineOffset : Double {
        get { try! _default.get_BaselineOffsetImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.blocks)
    public var blocks : WinUI.BlockCollection! {
        get { try! _default.get_BlocksImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.characterspacing)
    public var characterSpacing : Int32 {
        get { try! _default.get_CharacterSpacingImpl() }
        set { try! _default.put_CharacterSpacingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.contentend)
    public var contentEnd : WinUI.TextPointer! {
        get { try! _default.get_ContentEndImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.contentstart)
    public var contentStart : WinUI.TextPointer! {
        get { try! _default.get_ContentStartImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.fontfamily)
    public var fontFamily : WinUI.FontFamily! {
        get { try! _default.get_FontFamilyImpl() }
        set { try! _default.put_FontFamilyImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.fontsize)
    public var fontSize : Double {
        get { try! _default.get_FontSizeImpl() }
        set { try! _default.put_FontSizeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.fontstretch)
    public var fontStretch : UWP.FontStretch {
        get { try! _default.get_FontStretchImpl() }
        set { try! _default.put_FontStretchImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.fontstyle)
    public var fontStyle : UWP.FontStyle {
        get { try! _default.get_FontStyleImpl() }
        set { try! _default.put_FontStyleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.fontweight)
    public var fontWeight : UWP.FontWeight {
        get { try! _default.get_FontWeightImpl() }
        set { try! _default.put_FontWeightImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.foreground)
    public var foreground : WinUI.Brush! {
        get { try! _default.get_ForegroundImpl() }
        set { try! _default.put_ForegroundImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.hasoverflowcontent)
    public var hasOverflowContent : Bool {
        get { try! _default.get_HasOverflowContentImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.horizontaltextalignment)
    public var horizontalTextAlignment : WinUI.TextAlignment {
        get { try! _default.get_HorizontalTextAlignmentImpl() }
        set { try! _default.put_HorizontalTextAlignmentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.iscolorfontenabled)
    public var isColorFontEnabled : Bool {
        get { try! _default.get_IsColorFontEnabledImpl() }
        set { try! _default.put_IsColorFontEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.istextscalefactorenabled)
    public var isTextScaleFactorEnabled : Bool {
        get { try! _default.get_IsTextScaleFactorEnabledImpl() }
        set { try! _default.put_IsTextScaleFactorEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.istextselectionenabled)
    public var isTextSelectionEnabled : Bool {
        get { try! _default.get_IsTextSelectionEnabledImpl() }
        set { try! _default.put_IsTextSelectionEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.istexttrimmed)
    public var isTextTrimmed : Bool {
        get { try! _default.get_IsTextTrimmedImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.lineheight)
    public var lineHeight : Double {
        get { try! _default.get_LineHeightImpl() }
        set { try! _default.put_LineHeightImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.linestackingstrategy)
    public var lineStackingStrategy : WinUI.LineStackingStrategy {
        get { try! _default.get_LineStackingStrategyImpl() }
        set { try! _default.put_LineStackingStrategyImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.maxlines)
    public var maxLines : Int32 {
        get { try! _default.get_MaxLinesImpl() }
        set { try! _default.put_MaxLinesImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.opticalmarginalignment)
    public var opticalMarginAlignment : WinUI.OpticalMarginAlignment {
        get { try! _default.get_OpticalMarginAlignmentImpl() }
        set { try! _default.put_OpticalMarginAlignmentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.overflowcontenttarget)
    public var overflowContentTarget : RichTextBlockOverflow! {
        get { try! _default.get_OverflowContentTargetImpl() }
        set { try! _default.put_OverflowContentTargetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.padding)
    public var padding : WinUI.Thickness {
        get { try! _default.get_PaddingImpl() }
        set { try! _default.put_PaddingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.selectedtext)
    public var selectedText : String {
        get { try! _default.get_SelectedTextImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.selectionend)
    public var selectionEnd : WinUI.TextPointer! {
        get { try! _default.get_SelectionEndImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.selectionflyout)
    public var selectionFlyout : WinUI.FlyoutBase! {
        get { try! _default.get_SelectionFlyoutImpl() }
        set { try! _default.put_SelectionFlyoutImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.selectionhighlightcolor)
    public var selectionHighlightColor : WinUI.SolidColorBrush! {
        get { try! _default.get_SelectionHighlightColorImpl() }
        set { try! _default.put_SelectionHighlightColorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.selectionstart)
    public var selectionStart : WinUI.TextPointer! {
        get { try! _default.get_SelectionStartImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.textalignment)
    public var textAlignment : WinUI.TextAlignment {
        get { try! _default.get_TextAlignmentImpl() }
        set { try! _default.put_TextAlignmentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.textdecorations)
    public var textDecorations : UWP.TextDecorations {
        get { try! _default.get_TextDecorationsImpl() }
        set { try! _default.put_TextDecorationsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.texthighlighters)
    public var textHighlighters : WindowsFoundation.AnyIVector<WinUI.TextHighlighter?>! {
        get { try! _default.get_TextHighlightersImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.textindent)
    public var textIndent : Double {
        get { try! _default.get_TextIndentImpl() }
        set { try! _default.put_TextIndentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.textlinebounds)
    public var textLineBounds : WinUI.TextLineBounds {
        get { try! _default.get_TextLineBoundsImpl() }
        set { try! _default.put_TextLineBoundsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.textreadingorder)
    public var textReadingOrder : WinUI.TextReadingOrder {
        get { try! _default.get_TextReadingOrderImpl() }
        set { try! _default.put_TextReadingOrderImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.texttrimming)
    public var textTrimming : WinUI.TextTrimming {
        get { try! _default.get_TextTrimmingImpl() }
        set { try! _default.put_TextTrimmingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.textwrapping)
    public var textWrapping : WinUI.TextWrapping {
        get { try! _default.get_TextWrappingImpl() }
        set { try! _default.put_TextWrappingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.contextmenuopening)
    public lazy var contextMenuOpening : Event<ContextMenuOpeningEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ContextMenuOpeningImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ContextMenuOpeningImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.istexttrimmedchanged)
    public lazy var isTextTrimmedChanged : Event<TypedEventHandler<RichTextBlock?, IsTextTrimmedChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_IsTextTrimmedChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_IsTextTrimmedChangedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblock.selectionchanged)
    public lazy var selectionChanged : Event<WinUI.RoutedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_SelectionChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_SelectionChangedImpl($0)
       }
      )
    }()

    internal enum IFrameworkElementOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
        internal typealias Class = RichTextBlock
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRichTextBlock
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IRichTextBlock
        }
    }
    internal typealias Composable = IFrameworkElementOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblockoverflow)
public final class RichTextBlockOverflow : WinUI.FrameworkElement {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IRichTextBlockOverflow
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRichTextBlockOverflow
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRichTextBlockOverflow>?) -> RichTextBlockOverflow? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.RichTextBlockOverflow")))
    }

    private static let _IRichTextBlockOverflowStatics: __ABI_Microsoft_UI_Xaml_Controls.IRichTextBlockOverflowStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.RichTextBlockOverflow"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblockoverflow.hasoverflowcontentproperty)
    public static var hasOverflowContentProperty : WinUI.DependencyProperty! {
        get { try! _IRichTextBlockOverflowStatics.get_HasOverflowContentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblockoverflow.istexttrimmedproperty)
    public static var isTextTrimmedProperty : WinUI.DependencyProperty! {
        get { try! _IRichTextBlockOverflowStatics.get_IsTextTrimmedPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblockoverflow.maxlinesproperty)
    public static var maxLinesProperty : WinUI.DependencyProperty! {
        get { try! _IRichTextBlockOverflowStatics.get_MaxLinesPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblockoverflow.overflowcontenttargetproperty)
    public static var overflowContentTargetProperty : WinUI.DependencyProperty! {
        get { try! _IRichTextBlockOverflowStatics.get_OverflowContentTargetPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblockoverflow.paddingproperty)
    public static var paddingProperty : WinUI.DependencyProperty! {
        get { try! _IRichTextBlockOverflowStatics.get_PaddingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblockoverflow.getpositionfrompoint)
    public func getPositionFromPoint(_ point: WindowsFoundation.Point) throws -> WinUI.TextPointer! {
        try _default.GetPositionFromPointImpl(point)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblockoverflow.baselineoffset)
    public var baselineOffset : Double {
        get { try! _default.get_BaselineOffsetImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblockoverflow.contentend)
    public var contentEnd : WinUI.TextPointer! {
        get { try! _default.get_ContentEndImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblockoverflow.contentsource)
    public var contentSource : RichTextBlock! {
        get { try! _default.get_ContentSourceImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblockoverflow.contentstart)
    public var contentStart : WinUI.TextPointer! {
        get { try! _default.get_ContentStartImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblockoverflow.hasoverflowcontent)
    public var hasOverflowContent : Bool {
        get { try! _default.get_HasOverflowContentImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblockoverflow.istexttrimmed)
    public var isTextTrimmed : Bool {
        get { try! _default.get_IsTextTrimmedImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblockoverflow.maxlines)
    public var maxLines : Int32 {
        get { try! _default.get_MaxLinesImpl() }
        set { try! _default.put_MaxLinesImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblockoverflow.overflowcontenttarget)
    public var overflowContentTarget : RichTextBlockOverflow! {
        get { try! _default.get_OverflowContentTargetImpl() }
        set { try! _default.put_OverflowContentTargetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblockoverflow.padding)
    public var padding : WinUI.Thickness {
        get { try! _default.get_PaddingImpl() }
        set { try! _default.put_PaddingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.richtextblockoverflow.istexttrimmedchanged)
    public lazy var isTextTrimmedChanged : Event<TypedEventHandler<RichTextBlockOverflow?, IsTextTrimmedChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_IsTextTrimmedChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_IsTextTrimmedChangedImpl($0)
       }
      )
    }()

    internal enum IFrameworkElementOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
        internal typealias Class = RichTextBlockOverflow
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRichTextBlockOverflow
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IRichTextBlockOverflow
        }
    }
    internal typealias Composable = IFrameworkElementOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinition)
public final class RowDefinition : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IRowDefinition
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRowDefinition
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRowDefinition>?) -> RowDefinition? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.RowDefinition")))
    }

    private static let _IRowDefinitionStatics: __ABI_Microsoft_UI_Xaml_Controls.IRowDefinitionStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.RowDefinition"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinition.heightproperty)
    public static var heightProperty : WinUI.DependencyProperty! {
        get { try! _IRowDefinitionStatics.get_HeightPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinition.maxheightproperty)
    public static var maxHeightProperty : WinUI.DependencyProperty! {
        get { try! _IRowDefinitionStatics.get_MaxHeightPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinition.minheightproperty)
    public static var minHeightProperty : WinUI.DependencyProperty! {
        get { try! _IRowDefinitionStatics.get_MinHeightPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinition.actualheight)
    public var actualHeight : Double {
        get { try! _default.get_ActualHeightImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinition.height)
    public var height : WinUI.GridLength {
        get { try! _default.get_HeightImpl() }
        set { try! _default.put_HeightImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinition.maxheight)
    public var maxHeight : Double {
        get { try! _default.get_MaxHeightImpl() }
        set { try! _default.put_MaxHeightImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinition.minheight)
    public var minHeight : Double {
        get { try! _default.get_MinHeightImpl() }
        set { try! _default.put_MinHeightImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinitioncollection)
public final class RowDefinitionCollection : WinRTClass, IVector, IIterable {
    public typealias T = RowDefinition?
    private typealias SwiftABI = WinUI.IVectorRowDefinition
    private typealias CABI = __x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CControls__CRowDefinition
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CControls__CRowDefinition>?) -> RowDefinitionCollection? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    // MARK: Collection
    public typealias Element = T
    public var startIndex: Int { 0 }
    public var endIndex: Int { Int(size) }
    public func index(after i: Int) -> Int {
        i+1
    }

    public func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    public var count: Int { Int(size) }


    public subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    public func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinitioncollection.getat)
    public func getAt(_ index: UInt32) -> RowDefinition? {
        try! _default.GetAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinitioncollection.getview)
    public func getView() -> WindowsFoundation.AnyIVectorView<RowDefinition?>? {
        try! _default.GetViewImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinitioncollection.indexof)
    public func indexOf(_ value: RowDefinition?, _ index: inout UInt32) -> Bool {
        try! _default.IndexOfImpl(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinitioncollection.setat)
    public func setAt(_ index: UInt32, _ value: RowDefinition?) {
        try! _default.SetAtImpl(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinitioncollection.insertat)
    public func insertAt(_ index: UInt32, _ value: RowDefinition?) {
        try! _default.InsertAtImpl(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinitioncollection.removeat)
    public func removeAt(_ index: UInt32) {
        try! _default.RemoveAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinitioncollection.append)
    public func append(_ value: RowDefinition?) {
        try! _default.AppendImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinitioncollection.removeatend)
    public func removeAtEnd() {
        try! _default.RemoveAtEndImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinitioncollection.clear)
    public func clear() {
        try! _default.ClearImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinitioncollection.size)
    public var size : UInt32 {
        get { try! _default.get_SizeImpl() }
    }

    private lazy var _IIterable: IIterableRowDefinition! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinitioncollection.first)
    public func first() -> WindowsFoundation.AnyIIterator<RowDefinition?>? {
        try! _IIterable.FirstImpl()
    }

    deinit {
        _default = nil
        _IIterable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollcontentpresenter)
public final class ScrollContentPresenter : WinUI.ContentPresenter {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IScrollContentPresenter
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollContentPresenter
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollContentPresenter>?) -> ScrollContentPresenter? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.ScrollContentPresenter")))
    }

    private static let _IScrollContentPresenterStatics: __ABI_Microsoft_UI_Xaml_Controls.IScrollContentPresenterStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ScrollContentPresenter"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollcontentpresenter.cancontentrenderoutsideboundsproperty)
    public static var canContentRenderOutsideBoundsProperty : WinUI.DependencyProperty! {
        get { try! _IScrollContentPresenterStatics.get_CanContentRenderOutsideBoundsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollcontentpresenter.sizescontenttotemplatedparentproperty)
    public static var sizesContentToTemplatedParentProperty : WinUI.DependencyProperty! {
        get { try! _IScrollContentPresenterStatics.get_SizesContentToTemplatedParentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollcontentpresenter.lineup)
    public func lineUp() throws {
        try _default.LineUpImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollcontentpresenter.linedown)
    public func lineDown() throws {
        try _default.LineDownImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollcontentpresenter.lineleft)
    public func lineLeft() throws {
        try _default.LineLeftImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollcontentpresenter.lineright)
    public func lineRight() throws {
        try _default.LineRightImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollcontentpresenter.pageup)
    public func pageUp() throws {
        try _default.PageUpImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollcontentpresenter.pagedown)
    public func pageDown() throws {
        try _default.PageDownImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollcontentpresenter.pageleft)
    public func pageLeft() throws {
        try _default.PageLeftImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollcontentpresenter.pageright)
    public func pageRight() throws {
        try _default.PageRightImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollcontentpresenter.mousewheelup)
    public func mouseWheelUp() throws {
        try _default.MouseWheelUpImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollcontentpresenter.mousewheeldown)
    public func mouseWheelDown() throws {
        try _default.MouseWheelDownImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollcontentpresenter.mousewheelleft)
    public func mouseWheelLeft() throws {
        try _default.MouseWheelLeftImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollcontentpresenter.mousewheelright)
    public func mouseWheelRight() throws {
        try _default.MouseWheelRightImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollcontentpresenter.sethorizontaloffset)
    public func setHorizontalOffset(_ offset: Double) throws {
        try _default.SetHorizontalOffsetImpl(offset)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollcontentpresenter.setverticaloffset)
    public func setVerticalOffset(_ offset: Double) throws {
        try _default.SetVerticalOffsetImpl(offset)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollcontentpresenter.makevisible)
    public func makeVisible(_ visual: WinUI.UIElement!, _ rectangle: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _default.MakeVisibleImpl(visual, rectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollcontentpresenter.cancontentrenderoutsidebounds)
    public var canContentRenderOutsideBounds : Bool {
        get { try! _default.get_CanContentRenderOutsideBoundsImpl() }
        set { try! _default.put_CanContentRenderOutsideBoundsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollcontentpresenter.canhorizontallyscroll)
    public var canHorizontallyScroll : Bool {
        get { try! _default.get_CanHorizontallyScrollImpl() }
        set { try! _default.put_CanHorizontallyScrollImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollcontentpresenter.canverticallyscroll)
    public var canVerticallyScroll : Bool {
        get { try! _default.get_CanVerticallyScrollImpl() }
        set { try! _default.put_CanVerticallyScrollImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollcontentpresenter.extentheight)
    public var extentHeight : Double {
        get { try! _default.get_ExtentHeightImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollcontentpresenter.extentwidth)
    public var extentWidth : Double {
        get { try! _default.get_ExtentWidthImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollcontentpresenter.horizontaloffset)
    public var horizontalOffset : Double {
        get { try! _default.get_HorizontalOffsetImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollcontentpresenter.scrollowner)
    public var scrollOwner : Any! {
        get { try! _default.get_ScrollOwnerImpl() }
        set { try! _default.put_ScrollOwnerImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollcontentpresenter.sizescontenttotemplatedparent)
    public var sizesContentToTemplatedParent : Bool {
        get { try! _default.get_SizesContentToTemplatedParentImpl() }
        set { try! _default.put_SizesContentToTemplatedParentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollcontentpresenter.verticaloffset)
    public var verticalOffset : Double {
        get { try! _default.get_VerticalOffsetImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollcontentpresenter.viewportheight)
    public var viewportHeight : Double {
        get { try! _default.get_ViewportHeightImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollcontentpresenter.viewportwidth)
    public var viewportWidth : Double {
        get { try! _default.get_ViewportWidthImpl() }
    }

    internal enum IContentPresenterOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentPresenterOverrides
        internal typealias Class = ScrollContentPresenter
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollContentPresenter
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IScrollContentPresenter
        }
    }
    internal typealias Composable = IContentPresenterOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview)
open class ScrollView : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IScrollView
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView>?) -> ScrollView? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IScrollViewFactory : __ABI_Microsoft_UI_Xaml_Controls.IScrollViewFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ScrollView"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IScrollViewFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IScrollViewStatics: __ABI_Microsoft_UI_Xaml_Controls.IScrollViewStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ScrollView"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.computedhorizontalscrollbarvisibilityproperty)
    public class var computedHorizontalScrollBarVisibilityProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_ComputedHorizontalScrollBarVisibilityPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.computedhorizontalscrollmodeproperty)
    public class var computedHorizontalScrollModeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_ComputedHorizontalScrollModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.computedverticalscrollbarvisibilityproperty)
    public class var computedVerticalScrollBarVisibilityProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_ComputedVerticalScrollBarVisibilityPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.computedverticalscrollmodeproperty)
    public class var computedVerticalScrollModeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_ComputedVerticalScrollModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.contentorientationproperty)
    public class var contentOrientationProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_ContentOrientationPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.contentproperty)
    public class var contentProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_ContentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.horizontalanchorratioproperty)
    public class var horizontalAnchorRatioProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_HorizontalAnchorRatioPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.horizontalscrollbarvisibilityproperty)
    public class var horizontalScrollBarVisibilityProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_HorizontalScrollBarVisibilityPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.horizontalscrollchainmodeproperty)
    public class var horizontalScrollChainModeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_HorizontalScrollChainModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.horizontalscrollmodeproperty)
    public class var horizontalScrollModeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_HorizontalScrollModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.horizontalscrollrailmodeproperty)
    public class var horizontalScrollRailModeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_HorizontalScrollRailModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.ignoredinputkindsproperty)
    public class var ignoredInputKindsProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_IgnoredInputKindsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.maxzoomfactorproperty)
    public class var maxZoomFactorProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_MaxZoomFactorPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.minzoomfactorproperty)
    public class var minZoomFactorProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_MinZoomFactorPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.scrollpresenterproperty)
    public class var scrollPresenterProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_ScrollPresenterPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.verticalanchorratioproperty)
    public class var verticalAnchorRatioProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_VerticalAnchorRatioPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.verticalscrollbarvisibilityproperty)
    public class var verticalScrollBarVisibilityProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_VerticalScrollBarVisibilityPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.verticalscrollchainmodeproperty)
    public class var verticalScrollChainModeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_VerticalScrollChainModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.verticalscrollmodeproperty)
    public class var verticalScrollModeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_VerticalScrollModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.verticalscrollrailmodeproperty)
    public class var verticalScrollRailModeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_VerticalScrollRailModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.zoomchainmodeproperty)
    public class var zoomChainModeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_ZoomChainModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.zoommodeproperty)
    public class var zoomModeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_ZoomModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.registeranchorcandidate)
    public func registerAnchorCandidate(_ element: WinUI.UIElement!) throws {
        try _default.RegisterAnchorCandidateImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.unregisteranchorcandidate)
    public func unregisterAnchorCandidate(_ element: WinUI.UIElement!) throws {
        try _default.UnregisterAnchorCandidateImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.scrollto)
    public func scrollTo(_ horizontalOffset: Double, _ verticalOffset: Double) throws -> Int32 {
        try _default.ScrollToImpl(horizontalOffset, verticalOffset)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.scrollto)
    public func scrollTo(_ horizontalOffset: Double, _ verticalOffset: Double, _ options: ScrollingScrollOptions!) throws -> Int32 {
        try _default.ScrollToWithOptionsImpl(horizontalOffset, verticalOffset, options)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.scrollby)
    public func scrollBy(_ horizontalOffsetDelta: Double, _ verticalOffsetDelta: Double) throws -> Int32 {
        try _default.ScrollByImpl(horizontalOffsetDelta, verticalOffsetDelta)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.scrollby)
    public func scrollBy(_ horizontalOffsetDelta: Double, _ verticalOffsetDelta: Double, _ options: ScrollingScrollOptions!) throws -> Int32 {
        try _default.ScrollByWithOptionsImpl(horizontalOffsetDelta, verticalOffsetDelta, options)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.addscrollvelocity)
    public func addScrollVelocity(_ offsetsVelocity: WindowsFoundation.Vector2, _ inertiaDecayRate: WindowsFoundation.Vector2?) throws -> Int32 {
        try _default.AddScrollVelocityImpl(offsetsVelocity, inertiaDecayRate)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.zoomto)
    public func zoomTo(_ zoomFactor: Float, _ centerPoint: WindowsFoundation.Vector2?) throws -> Int32 {
        try _default.ZoomToImpl(zoomFactor, centerPoint)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.zoomto)
    public func zoomTo(_ zoomFactor: Float, _ centerPoint: WindowsFoundation.Vector2?, _ options: ScrollingZoomOptions!) throws -> Int32 {
        try _default.ZoomToWithOptionsImpl(zoomFactor, centerPoint, options)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.zoomby)
    public func zoomBy(_ zoomFactorDelta: Float, _ centerPoint: WindowsFoundation.Vector2?) throws -> Int32 {
        try _default.ZoomByImpl(zoomFactorDelta, centerPoint)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.zoomby)
    public func zoomBy(_ zoomFactorDelta: Float, _ centerPoint: WindowsFoundation.Vector2?, _ options: ScrollingZoomOptions!) throws -> Int32 {
        try _default.ZoomByWithOptionsImpl(zoomFactorDelta, centerPoint, options)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.addzoomvelocity)
    public func addZoomVelocity(_ zoomFactorVelocity: Float, _ centerPoint: WindowsFoundation.Vector2?, _ inertiaDecayRate: Float?) throws -> Int32 {
        try _default.AddZoomVelocityImpl(zoomFactorVelocity, centerPoint, inertiaDecayRate)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.computedhorizontalscrollbarvisibility)
    public var computedHorizontalScrollBarVisibility : WinUI.Visibility {
        get { try! _default.get_ComputedHorizontalScrollBarVisibilityImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.computedhorizontalscrollmode)
    public var computedHorizontalScrollMode : ScrollingScrollMode {
        get { try! _default.get_ComputedHorizontalScrollModeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.computedverticalscrollbarvisibility)
    public var computedVerticalScrollBarVisibility : WinUI.Visibility {
        get { try! _default.get_ComputedVerticalScrollBarVisibilityImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.computedverticalscrollmode)
    public var computedVerticalScrollMode : ScrollingScrollMode {
        get { try! _default.get_ComputedVerticalScrollModeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.content)
    public var content : WinUI.UIElement! {
        get { try! _default.get_ContentImpl() }
        set { try! _default.put_ContentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.contentorientation)
    public var contentOrientation : ScrollingContentOrientation {
        get { try! _default.get_ContentOrientationImpl() }
        set { try! _default.put_ContentOrientationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.currentanchor)
    public var currentAnchor : WinUI.UIElement! {
        get { try! _default.get_CurrentAnchorImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.expressionanimationsources)
    public var expressionAnimationSources : WinAppSDK.CompositionPropertySet! {
        get { try! _default.get_ExpressionAnimationSourcesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.extentheight)
    public var extentHeight : Double {
        get { try! _default.get_ExtentHeightImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.extentwidth)
    public var extentWidth : Double {
        get { try! _default.get_ExtentWidthImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.horizontalanchorratio)
    public var horizontalAnchorRatio : Double {
        get { try! _default.get_HorizontalAnchorRatioImpl() }
        set { try! _default.put_HorizontalAnchorRatioImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.horizontaloffset)
    public var horizontalOffset : Double {
        get { try! _default.get_HorizontalOffsetImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.horizontalscrollbarvisibility)
    public var horizontalScrollBarVisibility : ScrollingScrollBarVisibility {
        get { try! _default.get_HorizontalScrollBarVisibilityImpl() }
        set { try! _default.put_HorizontalScrollBarVisibilityImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.horizontalscrollchainmode)
    public var horizontalScrollChainMode : ScrollingChainMode {
        get { try! _default.get_HorizontalScrollChainModeImpl() }
        set { try! _default.put_HorizontalScrollChainModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.horizontalscrollmode)
    public var horizontalScrollMode : ScrollingScrollMode {
        get { try! _default.get_HorizontalScrollModeImpl() }
        set { try! _default.put_HorizontalScrollModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.horizontalscrollrailmode)
    public var horizontalScrollRailMode : ScrollingRailMode {
        get { try! _default.get_HorizontalScrollRailModeImpl() }
        set { try! _default.put_HorizontalScrollRailModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.ignoredinputkinds)
    public var ignoredInputKinds : ScrollingInputKinds {
        get { try! _default.get_IgnoredInputKindsImpl() }
        set { try! _default.put_IgnoredInputKindsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.maxzoomfactor)
    public var maxZoomFactor : Double {
        get { try! _default.get_MaxZoomFactorImpl() }
        set { try! _default.put_MaxZoomFactorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.minzoomfactor)
    public var minZoomFactor : Double {
        get { try! _default.get_MinZoomFactorImpl() }
        set { try! _default.put_MinZoomFactorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.scrollpresenter)
    public var scrollPresenter : WinUI.ScrollPresenter! {
        get { try! _default.get_ScrollPresenterImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.scrollableheight)
    public var scrollableHeight : Double {
        get { try! _default.get_ScrollableHeightImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.scrollablewidth)
    public var scrollableWidth : Double {
        get { try! _default.get_ScrollableWidthImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.state)
    public var state : ScrollingInteractionState {
        get { try! _default.get_StateImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.verticalanchorratio)
    public var verticalAnchorRatio : Double {
        get { try! _default.get_VerticalAnchorRatioImpl() }
        set { try! _default.put_VerticalAnchorRatioImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.verticaloffset)
    public var verticalOffset : Double {
        get { try! _default.get_VerticalOffsetImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.verticalscrollbarvisibility)
    public var verticalScrollBarVisibility : ScrollingScrollBarVisibility {
        get { try! _default.get_VerticalScrollBarVisibilityImpl() }
        set { try! _default.put_VerticalScrollBarVisibilityImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.verticalscrollchainmode)
    public var verticalScrollChainMode : ScrollingChainMode {
        get { try! _default.get_VerticalScrollChainModeImpl() }
        set { try! _default.put_VerticalScrollChainModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.verticalscrollmode)
    public var verticalScrollMode : ScrollingScrollMode {
        get { try! _default.get_VerticalScrollModeImpl() }
        set { try! _default.put_VerticalScrollModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.verticalscrollrailmode)
    public var verticalScrollRailMode : ScrollingRailMode {
        get { try! _default.get_VerticalScrollRailModeImpl() }
        set { try! _default.put_VerticalScrollRailModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.viewportheight)
    public var viewportHeight : Double {
        get { try! _default.get_ViewportHeightImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.viewportwidth)
    public var viewportWidth : Double {
        get { try! _default.get_ViewportWidthImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.zoomchainmode)
    public var zoomChainMode : ScrollingChainMode {
        get { try! _default.get_ZoomChainModeImpl() }
        set { try! _default.put_ZoomChainModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.zoomfactor)
    public var zoomFactor : Float {
        get { try! _default.get_ZoomFactorImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.zoommode)
    public var zoomMode : ScrollingZoomMode {
        get { try! _default.get_ZoomModeImpl() }
        set { try! _default.put_ZoomModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.anchorrequested)
    public lazy var anchorRequested : Event<TypedEventHandler<ScrollView?, ScrollingAnchorRequestedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_AnchorRequestedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_AnchorRequestedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.bringingintoview)
    public lazy var bringingIntoView : Event<TypedEventHandler<ScrollView?, ScrollingBringingIntoViewEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_BringingIntoViewImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_BringingIntoViewImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.extentchanged)
    public lazy var extentChanged : Event<TypedEventHandler<ScrollView?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ExtentChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ExtentChangedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.scrollanimationstarting)
    public lazy var scrollAnimationStarting : Event<TypedEventHandler<ScrollView?, ScrollingScrollAnimationStartingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ScrollAnimationStartingImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ScrollAnimationStartingImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.scrollcompleted)
    public lazy var scrollCompleted : Event<TypedEventHandler<ScrollView?, ScrollingScrollCompletedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ScrollCompletedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ScrollCompletedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.statechanged)
    public lazy var stateChanged : Event<TypedEventHandler<ScrollView?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_StateChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_StateChangedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.viewchanged)
    public lazy var viewChanged : Event<TypedEventHandler<ScrollView?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ViewChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ViewChangedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.zoomanimationstarting)
    public lazy var zoomAnimationStarting : Event<TypedEventHandler<ScrollView?, ScrollingZoomAnimationStartingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ZoomAnimationStartingImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ZoomAnimationStartingImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.zoomcompleted)
    public lazy var zoomCompleted : Event<TypedEventHandler<ScrollView?, ScrollingZoomCompletedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ZoomCompletedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ZoomCompletedImpl($0)
       }
      )
    }()

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = ScrollView
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IScrollView
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer)
public final class ScrollViewer : WinUI.ContentControl, IScrollAnchorProvider {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IScrollViewer
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer>?) -> ScrollViewer? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.ScrollViewer")))
    }

    private static let _IScrollViewerStatics: __ABI_Microsoft_UI_Xaml_Controls.IScrollViewerStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ScrollViewer"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.gethorizontalscrollbarvisibility)
    public static func getHorizontalScrollBarVisibility(_ element: WinUI.DependencyObject!) -> ScrollBarVisibility {
        return try! _IScrollViewerStatics.GetHorizontalScrollBarVisibilityImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.sethorizontalscrollbarvisibility)
    public static func setHorizontalScrollBarVisibility(_ element: WinUI.DependencyObject!, _ horizontalScrollBarVisibility: ScrollBarVisibility) {
        try! _IScrollViewerStatics.SetHorizontalScrollBarVisibilityImpl(element, horizontalScrollBarVisibility)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.getverticalscrollbarvisibility)
    public static func getVerticalScrollBarVisibility(_ element: WinUI.DependencyObject!) -> ScrollBarVisibility {
        return try! _IScrollViewerStatics.GetVerticalScrollBarVisibilityImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.setverticalscrollbarvisibility)
    public static func setVerticalScrollBarVisibility(_ element: WinUI.DependencyObject!, _ verticalScrollBarVisibility: ScrollBarVisibility) {
        try! _IScrollViewerStatics.SetVerticalScrollBarVisibilityImpl(element, verticalScrollBarVisibility)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.getishorizontalrailenabled)
    public static func getIsHorizontalRailEnabled(_ element: WinUI.DependencyObject!) -> Bool {
        return try! _IScrollViewerStatics.GetIsHorizontalRailEnabledImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.setishorizontalrailenabled)
    public static func setIsHorizontalRailEnabled(_ element: WinUI.DependencyObject!, _ isHorizontalRailEnabled: Bool) {
        try! _IScrollViewerStatics.SetIsHorizontalRailEnabledImpl(element, isHorizontalRailEnabled)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.getisverticalrailenabled)
    public static func getIsVerticalRailEnabled(_ element: WinUI.DependencyObject!) -> Bool {
        return try! _IScrollViewerStatics.GetIsVerticalRailEnabledImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.setisverticalrailenabled)
    public static func setIsVerticalRailEnabled(_ element: WinUI.DependencyObject!, _ isVerticalRailEnabled: Bool) {
        try! _IScrollViewerStatics.SetIsVerticalRailEnabledImpl(element, isVerticalRailEnabled)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.getishorizontalscrollchainingenabled)
    public static func getIsHorizontalScrollChainingEnabled(_ element: WinUI.DependencyObject!) -> Bool {
        return try! _IScrollViewerStatics.GetIsHorizontalScrollChainingEnabledImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.setishorizontalscrollchainingenabled)
    public static func setIsHorizontalScrollChainingEnabled(_ element: WinUI.DependencyObject!, _ isHorizontalScrollChainingEnabled: Bool) {
        try! _IScrollViewerStatics.SetIsHorizontalScrollChainingEnabledImpl(element, isHorizontalScrollChainingEnabled)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.getisverticalscrollchainingenabled)
    public static func getIsVerticalScrollChainingEnabled(_ element: WinUI.DependencyObject!) -> Bool {
        return try! _IScrollViewerStatics.GetIsVerticalScrollChainingEnabledImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.setisverticalscrollchainingenabled)
    public static func setIsVerticalScrollChainingEnabled(_ element: WinUI.DependencyObject!, _ isVerticalScrollChainingEnabled: Bool) {
        try! _IScrollViewerStatics.SetIsVerticalScrollChainingEnabledImpl(element, isVerticalScrollChainingEnabled)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.getiszoomchainingenabled)
    public static func getIsZoomChainingEnabled(_ element: WinUI.DependencyObject!) -> Bool {
        return try! _IScrollViewerStatics.GetIsZoomChainingEnabledImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.setiszoomchainingenabled)
    public static func setIsZoomChainingEnabled(_ element: WinUI.DependencyObject!, _ isZoomChainingEnabled: Bool) {
        try! _IScrollViewerStatics.SetIsZoomChainingEnabledImpl(element, isZoomChainingEnabled)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.getisscrollinertiaenabled)
    public static func getIsScrollInertiaEnabled(_ element: WinUI.DependencyObject!) -> Bool {
        return try! _IScrollViewerStatics.GetIsScrollInertiaEnabledImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.setisscrollinertiaenabled)
    public static func setIsScrollInertiaEnabled(_ element: WinUI.DependencyObject!, _ isScrollInertiaEnabled: Bool) {
        try! _IScrollViewerStatics.SetIsScrollInertiaEnabledImpl(element, isScrollInertiaEnabled)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.getiszoominertiaenabled)
    public static func getIsZoomInertiaEnabled(_ element: WinUI.DependencyObject!) -> Bool {
        return try! _IScrollViewerStatics.GetIsZoomInertiaEnabledImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.setiszoominertiaenabled)
    public static func setIsZoomInertiaEnabled(_ element: WinUI.DependencyObject!, _ isZoomInertiaEnabled: Bool) {
        try! _IScrollViewerStatics.SetIsZoomInertiaEnabledImpl(element, isZoomInertiaEnabled)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.gethorizontalscrollmode)
    public static func getHorizontalScrollMode(_ element: WinUI.DependencyObject!) -> ScrollMode {
        return try! _IScrollViewerStatics.GetHorizontalScrollModeImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.sethorizontalscrollmode)
    public static func setHorizontalScrollMode(_ element: WinUI.DependencyObject!, _ horizontalScrollMode: ScrollMode) {
        try! _IScrollViewerStatics.SetHorizontalScrollModeImpl(element, horizontalScrollMode)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.getverticalscrollmode)
    public static func getVerticalScrollMode(_ element: WinUI.DependencyObject!) -> ScrollMode {
        return try! _IScrollViewerStatics.GetVerticalScrollModeImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.setverticalscrollmode)
    public static func setVerticalScrollMode(_ element: WinUI.DependencyObject!, _ verticalScrollMode: ScrollMode) {
        try! _IScrollViewerStatics.SetVerticalScrollModeImpl(element, verticalScrollMode)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.getzoommode)
    public static func getZoomMode(_ element: WinUI.DependencyObject!) -> ZoomMode {
        return try! _IScrollViewerStatics.GetZoomModeImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.setzoommode)
    public static func setZoomMode(_ element: WinUI.DependencyObject!, _ zoomMode: ZoomMode) {
        try! _IScrollViewerStatics.SetZoomModeImpl(element, zoomMode)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.getcancontentrenderoutsidebounds)
    public static func getCanContentRenderOutsideBounds(_ element: WinUI.DependencyObject!) -> Bool {
        return try! _IScrollViewerStatics.GetCanContentRenderOutsideBoundsImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.setcancontentrenderoutsidebounds)
    public static func setCanContentRenderOutsideBounds(_ element: WinUI.DependencyObject!, _ canContentRenderOutsideBounds: Bool) {
        try! _IScrollViewerStatics.SetCanContentRenderOutsideBoundsImpl(element, canContentRenderOutsideBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.getisdeferredscrollingenabled)
    public static func getIsDeferredScrollingEnabled(_ element: WinUI.DependencyObject!) -> Bool {
        return try! _IScrollViewerStatics.GetIsDeferredScrollingEnabledImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.setisdeferredscrollingenabled)
    public static func setIsDeferredScrollingEnabled(_ element: WinUI.DependencyObject!, _ isDeferredScrollingEnabled: Bool) {
        try! _IScrollViewerStatics.SetIsDeferredScrollingEnabledImpl(element, isDeferredScrollingEnabled)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.getbringintoviewonfocuschange)
    public static func getBringIntoViewOnFocusChange(_ element: WinUI.DependencyObject!) -> Bool {
        return try! _IScrollViewerStatics.GetBringIntoViewOnFocusChangeImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.setbringintoviewonfocuschange)
    public static func setBringIntoViewOnFocusChange(_ element: WinUI.DependencyObject!, _ bringIntoViewOnFocusChange: Bool) {
        try! _IScrollViewerStatics.SetBringIntoViewOnFocusChangeImpl(element, bringIntoViewOnFocusChange)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.bringintoviewonfocuschangeproperty)
    public static var bringIntoViewOnFocusChangeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_BringIntoViewOnFocusChangePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.cancontentrenderoutsideboundsproperty)
    public static var canContentRenderOutsideBoundsProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_CanContentRenderOutsideBoundsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.computedhorizontalscrollbarvisibilityproperty)
    public static var computedHorizontalScrollBarVisibilityProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_ComputedHorizontalScrollBarVisibilityPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.computedverticalscrollbarvisibilityproperty)
    public static var computedVerticalScrollBarVisibilityProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_ComputedVerticalScrollBarVisibilityPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.extentheightproperty)
    public static var extentHeightProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_ExtentHeightPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.extentwidthproperty)
    public static var extentWidthProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_ExtentWidthPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.horizontalanchorratioproperty)
    public static var horizontalAnchorRatioProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_HorizontalAnchorRatioPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.horizontaloffsetproperty)
    public static var horizontalOffsetProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_HorizontalOffsetPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.horizontalscrollbarvisibilityproperty)
    public static var horizontalScrollBarVisibilityProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_HorizontalScrollBarVisibilityPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.horizontalscrollmodeproperty)
    public static var horizontalScrollModeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_HorizontalScrollModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.horizontalsnappointsalignmentproperty)
    public static var horizontalSnapPointsAlignmentProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_HorizontalSnapPointsAlignmentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.horizontalsnappointstypeproperty)
    public static var horizontalSnapPointsTypeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_HorizontalSnapPointsTypePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.isdeferredscrollingenabledproperty)
    public static var isDeferredScrollingEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_IsDeferredScrollingEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.ishorizontalrailenabledproperty)
    public static var isHorizontalRailEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_IsHorizontalRailEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.ishorizontalscrollchainingenabledproperty)
    public static var isHorizontalScrollChainingEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_IsHorizontalScrollChainingEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.isscrollinertiaenabledproperty)
    public static var isScrollInertiaEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_IsScrollInertiaEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.isverticalrailenabledproperty)
    public static var isVerticalRailEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_IsVerticalRailEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.isverticalscrollchainingenabledproperty)
    public static var isVerticalScrollChainingEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_IsVerticalScrollChainingEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.iszoomchainingenabledproperty)
    public static var isZoomChainingEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_IsZoomChainingEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.iszoominertiaenabledproperty)
    public static var isZoomInertiaEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_IsZoomInertiaEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.leftheaderproperty)
    public static var leftHeaderProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_LeftHeaderPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.maxzoomfactorproperty)
    public static var maxZoomFactorProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_MaxZoomFactorPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.minzoomfactorproperty)
    public static var minZoomFactorProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_MinZoomFactorPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.reduceviewportforcoreinputviewocclusionsproperty)
    public static var reduceViewportForCoreInputViewOcclusionsProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_ReduceViewportForCoreInputViewOcclusionsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.scrollableheightproperty)
    public static var scrollableHeightProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_ScrollableHeightPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.scrollablewidthproperty)
    public static var scrollableWidthProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_ScrollableWidthPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.topheaderproperty)
    public static var topHeaderProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_TopHeaderPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.topleftheaderproperty)
    public static var topLeftHeaderProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_TopLeftHeaderPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.verticalanchorratioproperty)
    public static var verticalAnchorRatioProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_VerticalAnchorRatioPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.verticaloffsetproperty)
    public static var verticalOffsetProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_VerticalOffsetPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.verticalscrollbarvisibilityproperty)
    public static var verticalScrollBarVisibilityProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_VerticalScrollBarVisibilityPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.verticalscrollmodeproperty)
    public static var verticalScrollModeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_VerticalScrollModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.verticalsnappointsalignmentproperty)
    public static var verticalSnapPointsAlignmentProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_VerticalSnapPointsAlignmentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.verticalsnappointstypeproperty)
    public static var verticalSnapPointsTypeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_VerticalSnapPointsTypePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.viewportheightproperty)
    public static var viewportHeightProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_ViewportHeightPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.viewportwidthproperty)
    public static var viewportWidthProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_ViewportWidthPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.zoomfactorproperty)
    public static var zoomFactorProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_ZoomFactorPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.zoommodeproperty)
    public static var zoomModeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_ZoomModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.zoomsnappointsproperty)
    public static var zoomSnapPointsProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_ZoomSnapPointsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.zoomsnappointstypeproperty)
    public static var zoomSnapPointsTypeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_ZoomSnapPointsTypePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.scrolltohorizontaloffset)
    public func scrollToHorizontalOffset(_ offset: Double) throws {
        try _default.ScrollToHorizontalOffsetImpl(offset)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.scrolltoverticaloffset)
    public func scrollToVerticalOffset(_ offset: Double) throws {
        try _default.ScrollToVerticalOffsetImpl(offset)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.zoomtofactor)
    public func zoomToFactor(_ factor: Float) throws {
        try _default.ZoomToFactorImpl(factor)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.changeview)
    public func changeView(_ horizontalOffset: Double?, _ verticalOffset: Double?, _ zoomFactor: Float?) throws -> Bool {
        try _default.ChangeViewImpl(horizontalOffset, verticalOffset, zoomFactor)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.changeview)
    public func changeView(_ horizontalOffset: Double?, _ verticalOffset: Double?, _ zoomFactor: Float?, _ disableAnimation: Bool) throws -> Bool {
        try _default.ChangeViewWithOptionalAnimationImpl(horizontalOffset, verticalOffset, zoomFactor, disableAnimation)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.invalidatescrollinfo)
    public func invalidateScrollInfo() throws {
        try _default.InvalidateScrollInfoImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.bringintoviewonfocuschange)
    public var bringIntoViewOnFocusChange : Bool {
        get { try! _default.get_BringIntoViewOnFocusChangeImpl() }
        set { try! _default.put_BringIntoViewOnFocusChangeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.cancontentrenderoutsidebounds)
    public var canContentRenderOutsideBounds : Bool {
        get { try! _default.get_CanContentRenderOutsideBoundsImpl() }
        set { try! _default.put_CanContentRenderOutsideBoundsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.computedhorizontalscrollbarvisibility)
    public var computedHorizontalScrollBarVisibility : WinUI.Visibility {
        get { try! _default.get_ComputedHorizontalScrollBarVisibilityImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.computedverticalscrollbarvisibility)
    public var computedVerticalScrollBarVisibility : WinUI.Visibility {
        get { try! _default.get_ComputedVerticalScrollBarVisibilityImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.extentheight)
    public var extentHeight : Double {
        get { try! _default.get_ExtentHeightImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.extentwidth)
    public var extentWidth : Double {
        get { try! _default.get_ExtentWidthImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.horizontalanchorratio)
    public var horizontalAnchorRatio : Double {
        get { try! _default.get_HorizontalAnchorRatioImpl() }
        set { try! _default.put_HorizontalAnchorRatioImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.horizontaloffset)
    public var horizontalOffset : Double {
        get { try! _default.get_HorizontalOffsetImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.horizontalscrollbarvisibility)
    public var horizontalScrollBarVisibility : ScrollBarVisibility {
        get { try! _default.get_HorizontalScrollBarVisibilityImpl() }
        set { try! _default.put_HorizontalScrollBarVisibilityImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.horizontalscrollmode)
    public var horizontalScrollMode : ScrollMode {
        get { try! _default.get_HorizontalScrollModeImpl() }
        set { try! _default.put_HorizontalScrollModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.horizontalsnappointsalignment)
    public var horizontalSnapPointsAlignment : WinUI.SnapPointsAlignment {
        get { try! _default.get_HorizontalSnapPointsAlignmentImpl() }
        set { try! _default.put_HorizontalSnapPointsAlignmentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.horizontalsnappointstype)
    public var horizontalSnapPointsType : SnapPointsType {
        get { try! _default.get_HorizontalSnapPointsTypeImpl() }
        set { try! _default.put_HorizontalSnapPointsTypeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.isdeferredscrollingenabled)
    public var isDeferredScrollingEnabled : Bool {
        get { try! _default.get_IsDeferredScrollingEnabledImpl() }
        set { try! _default.put_IsDeferredScrollingEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.ishorizontalrailenabled)
    public var isHorizontalRailEnabled : Bool {
        get { try! _default.get_IsHorizontalRailEnabledImpl() }
        set { try! _default.put_IsHorizontalRailEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.ishorizontalscrollchainingenabled)
    public var isHorizontalScrollChainingEnabled : Bool {
        get { try! _default.get_IsHorizontalScrollChainingEnabledImpl() }
        set { try! _default.put_IsHorizontalScrollChainingEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.isscrollinertiaenabled)
    public var isScrollInertiaEnabled : Bool {
        get { try! _default.get_IsScrollInertiaEnabledImpl() }
        set { try! _default.put_IsScrollInertiaEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.isverticalrailenabled)
    public var isVerticalRailEnabled : Bool {
        get { try! _default.get_IsVerticalRailEnabledImpl() }
        set { try! _default.put_IsVerticalRailEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.isverticalscrollchainingenabled)
    public var isVerticalScrollChainingEnabled : Bool {
        get { try! _default.get_IsVerticalScrollChainingEnabledImpl() }
        set { try! _default.put_IsVerticalScrollChainingEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.iszoomchainingenabled)
    public var isZoomChainingEnabled : Bool {
        get { try! _default.get_IsZoomChainingEnabledImpl() }
        set { try! _default.put_IsZoomChainingEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.iszoominertiaenabled)
    public var isZoomInertiaEnabled : Bool {
        get { try! _default.get_IsZoomInertiaEnabledImpl() }
        set { try! _default.put_IsZoomInertiaEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.leftheader)
    public var leftHeader : WinUI.UIElement! {
        get { try! _default.get_LeftHeaderImpl() }
        set { try! _default.put_LeftHeaderImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.maxzoomfactor)
    public var maxZoomFactor : Float {
        get { try! _default.get_MaxZoomFactorImpl() }
        set { try! _default.put_MaxZoomFactorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.minzoomfactor)
    public var minZoomFactor : Float {
        get { try! _default.get_MinZoomFactorImpl() }
        set { try! _default.put_MinZoomFactorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.reduceviewportforcoreinputviewocclusions)
    public var reduceViewportForCoreInputViewOcclusions : Bool {
        get { try! _default.get_ReduceViewportForCoreInputViewOcclusionsImpl() }
        set { try! _default.put_ReduceViewportForCoreInputViewOcclusionsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.scrollableheight)
    public var scrollableHeight : Double {
        get { try! _default.get_ScrollableHeightImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.scrollablewidth)
    public var scrollableWidth : Double {
        get { try! _default.get_ScrollableWidthImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.topheader)
    public var topHeader : WinUI.UIElement! {
        get { try! _default.get_TopHeaderImpl() }
        set { try! _default.put_TopHeaderImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.topleftheader)
    public var topLeftHeader : WinUI.UIElement! {
        get { try! _default.get_TopLeftHeaderImpl() }
        set { try! _default.put_TopLeftHeaderImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.verticalanchorratio)
    public var verticalAnchorRatio : Double {
        get { try! _default.get_VerticalAnchorRatioImpl() }
        set { try! _default.put_VerticalAnchorRatioImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.verticaloffset)
    public var verticalOffset : Double {
        get { try! _default.get_VerticalOffsetImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.verticalscrollbarvisibility)
    public var verticalScrollBarVisibility : ScrollBarVisibility {
        get { try! _default.get_VerticalScrollBarVisibilityImpl() }
        set { try! _default.put_VerticalScrollBarVisibilityImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.verticalscrollmode)
    public var verticalScrollMode : ScrollMode {
        get { try! _default.get_VerticalScrollModeImpl() }
        set { try! _default.put_VerticalScrollModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.verticalsnappointsalignment)
    public var verticalSnapPointsAlignment : WinUI.SnapPointsAlignment {
        get { try! _default.get_VerticalSnapPointsAlignmentImpl() }
        set { try! _default.put_VerticalSnapPointsAlignmentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.verticalsnappointstype)
    public var verticalSnapPointsType : SnapPointsType {
        get { try! _default.get_VerticalSnapPointsTypeImpl() }
        set { try! _default.put_VerticalSnapPointsTypeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.viewportheight)
    public var viewportHeight : Double {
        get { try! _default.get_ViewportHeightImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.viewportwidth)
    public var viewportWidth : Double {
        get { try! _default.get_ViewportWidthImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.zoomfactor)
    public var zoomFactor : Float {
        get { try! _default.get_ZoomFactorImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.zoommode)
    public var zoomMode : ZoomMode {
        get { try! _default.get_ZoomModeImpl() }
        set { try! _default.put_ZoomModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.zoomsnappoints)
    public var zoomSnapPoints : WindowsFoundation.AnyIVector<Float>! {
        get { try! _default.get_ZoomSnapPointsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.zoomsnappointstype)
    public var zoomSnapPointsType : SnapPointsType {
        get { try! _default.get_ZoomSnapPointsTypeImpl() }
        set { try! _default.put_ZoomSnapPointsTypeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.anchorrequested)
    public lazy var anchorRequested : Event<TypedEventHandler<ScrollViewer?, AnchorRequestedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_AnchorRequestedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_AnchorRequestedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.directmanipulationcompleted)
    public lazy var directManipulationCompleted : Event<EventHandler<Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_DirectManipulationCompletedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_DirectManipulationCompletedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.directmanipulationstarted)
    public lazy var directManipulationStarted : Event<EventHandler<Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_DirectManipulationStartedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_DirectManipulationStartedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.viewchanged)
    public lazy var viewChanged : Event<EventHandler<ScrollViewerViewChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ViewChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ViewChangedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.viewchanging)
    public lazy var viewChanging : Event<EventHandler<ScrollViewerViewChangingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ViewChangingImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ViewChangingImpl($0)
       }
      )
    }()

    private lazy var _IScrollAnchorProvider: __ABI_Microsoft_UI_Xaml_Controls.IScrollAnchorProvider! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.registeranchorcandidate)
    public func registerAnchorCandidate(_ element: WinUI.UIElement!) throws {
        try _IScrollAnchorProvider.RegisterAnchorCandidateImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.unregisteranchorcandidate)
    public func unregisterAnchorCandidate(_ element: WinUI.UIElement!) throws {
        try _IScrollAnchorProvider.UnregisterAnchorCandidateImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.currentanchor)
    public var currentAnchor : WinUI.UIElement! {
        get { try! _IScrollAnchorProvider.get_CurrentAnchorImpl() }
    }

    internal enum IContentControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
        internal typealias Class = ScrollViewer
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IScrollViewer
        }
    }
    internal typealias Composable = IContentControlOverrides
    deinit {
        _default = nil
        _IScrollAnchorProvider = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewerview)
public final class ScrollViewerView : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IScrollViewerView
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerView
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerView>?) -> ScrollViewerView? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewerview.horizontaloffset)
    public var horizontalOffset : Double {
        get { try! _default.get_HorizontalOffsetImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewerview.verticaloffset)
    public var verticalOffset : Double {
        get { try! _default.get_VerticalOffsetImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewerview.zoomfactor)
    public var zoomFactor : Float {
        get { try! _default.get_ZoomFactorImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewerviewchangedeventargs)
public final class ScrollViewerViewChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IScrollViewerViewChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerViewChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerViewChangedEventArgs>?) -> ScrollViewerViewChangedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public init() {
        super.init(try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.ScrollViewerViewChangedEventArgs")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewerviewchangedeventargs.isintermediate)
    public var isIntermediate : Bool {
        get { try! _default.get_IsIntermediateImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewerviewchangingeventargs)
public final class ScrollViewerViewChangingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IScrollViewerViewChangingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerViewChangingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerViewChangingEventArgs>?) -> ScrollViewerViewChangingEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewerviewchangingeventargs.finalview)
    public var finalView : ScrollViewerView! {
        get { try! _default.get_FinalViewImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewerviewchangingeventargs.isinertial)
    public var isInertial : Bool {
        get { try! _default.get_IsInertialImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewerviewchangingeventargs.nextview)
    public var nextView : ScrollViewerView! {
        get { try! _default.get_NextViewImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollinganchorrequestedeventargs)
public final class ScrollingAnchorRequestedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IScrollingAnchorRequestedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingAnchorRequestedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingAnchorRequestedEventArgs>?) -> ScrollingAnchorRequestedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollinganchorrequestedeventargs.anchorcandidates)
    public var anchorCandidates : WindowsFoundation.AnyIVector<WinUI.UIElement?>! {
        get { try! _default.get_AnchorCandidatesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollinganchorrequestedeventargs.anchorelement)
    public var anchorElement : WinUI.UIElement! {
        get { try! _default.get_AnchorElementImpl() }
        set { try! _default.put_AnchorElementImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingbringingintovieweventargs)
public final class ScrollingBringingIntoViewEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IScrollingBringingIntoViewEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingBringingIntoViewEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingBringingIntoViewEventArgs>?) -> ScrollingBringingIntoViewEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingbringingintovieweventargs.cancel)
    public var cancel : Bool {
        get { try! _default.get_CancelImpl() }
        set { try! _default.put_CancelImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingbringingintovieweventargs.correlationid)
    public var correlationId : Int32 {
        get { try! _default.get_CorrelationIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingbringingintovieweventargs.requesteventargs)
    public var requestEventArgs : WinUI.BringIntoViewRequestedEventArgs! {
        get { try! _default.get_RequestEventArgsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingbringingintovieweventargs.snappointsmode)
    public var snapPointsMode : ScrollingSnapPointsMode {
        get { try! _default.get_SnapPointsModeImpl() }
        set { try! _default.put_SnapPointsModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingbringingintovieweventargs.targethorizontaloffset)
    public var targetHorizontalOffset : Double {
        get { try! _default.get_TargetHorizontalOffsetImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingbringingintovieweventargs.targetverticaloffset)
    public var targetVerticalOffset : Double {
        get { try! _default.get_TargetVerticalOffsetImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingscrollanimationstartingeventargs)
public final class ScrollingScrollAnimationStartingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IScrollingScrollAnimationStartingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollAnimationStartingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollAnimationStartingEventArgs>?) -> ScrollingScrollAnimationStartingEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingscrollanimationstartingeventargs.animation)
    public var animation : WinAppSDK.CompositionAnimation! {
        get { try! _default.get_AnimationImpl() }
        set { try! _default.put_AnimationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingscrollanimationstartingeventargs.correlationid)
    public var correlationId : Int32 {
        get { try! _default.get_CorrelationIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingscrollanimationstartingeventargs.endposition)
    public var endPosition : WindowsFoundation.Vector2 {
        get { try! _default.get_EndPositionImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingscrollanimationstartingeventargs.startposition)
    public var startPosition : WindowsFoundation.Vector2 {
        get { try! _default.get_StartPositionImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingscrollcompletedeventargs)
public final class ScrollingScrollCompletedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IScrollingScrollCompletedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollCompletedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollCompletedEventArgs>?) -> ScrollingScrollCompletedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingscrollcompletedeventargs.correlationid)
    public var correlationId : Int32 {
        get { try! _default.get_CorrelationIdImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingscrolloptions)
open class ScrollingScrollOptions : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IScrollingScrollOptions
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollOptions
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollOptions>?) -> ScrollingScrollOptions? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IScrollingScrollOptionsFactory : __ABI_Microsoft_UI_Xaml_Controls.IScrollingScrollOptionsFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ScrollingScrollOptions"))

    public init(_ animationMode: ScrollingAnimationMode) {
        super.init()
        MakeComposed(composing: Self.Composable.self, self) { baseInterface, innerInterface in 
            try! Self._IScrollingScrollOptionsFactory.CreateInstanceImpl(animationMode, baseInterface, &innerInterface)
        }
    }

    public init(_ animationMode: ScrollingAnimationMode, _ snapPointsMode: ScrollingSnapPointsMode) {
        super.init()
        MakeComposed(composing: Self.Composable.self, self) { baseInterface, innerInterface in 
            try! Self._IScrollingScrollOptionsFactory.CreateInstance2Impl(animationMode, snapPointsMode, baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingscrolloptions.animationmode)
    public var animationMode : ScrollingAnimationMode {
        get { try! _default.get_AnimationModeImpl() }
        set { try! _default.put_AnimationModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingscrolloptions.snappointsmode)
    public var snapPointsMode : ScrollingSnapPointsMode {
        get { try! _default.get_SnapPointsModeImpl() }
        set { try! _default.put_SnapPointsModeImpl(newValue) }
    }

    internal enum IScrollingScrollOptions : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = ScrollingScrollOptions
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollOptions
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IScrollingScrollOptions
        }
    }
    internal typealias Composable = IScrollingScrollOptions
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingzoomanimationstartingeventargs)
public final class ScrollingZoomAnimationStartingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IScrollingZoomAnimationStartingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomAnimationStartingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomAnimationStartingEventArgs>?) -> ScrollingZoomAnimationStartingEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingzoomanimationstartingeventargs.animation)
    public var animation : WinAppSDK.CompositionAnimation! {
        get { try! _default.get_AnimationImpl() }
        set { try! _default.put_AnimationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingzoomanimationstartingeventargs.centerpoint)
    public var centerPoint : WindowsFoundation.Vector2 {
        get { try! _default.get_CenterPointImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingzoomanimationstartingeventargs.correlationid)
    public var correlationId : Int32 {
        get { try! _default.get_CorrelationIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingzoomanimationstartingeventargs.endzoomfactor)
    public var endZoomFactor : Float {
        get { try! _default.get_EndZoomFactorImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingzoomanimationstartingeventargs.startzoomfactor)
    public var startZoomFactor : Float {
        get { try! _default.get_StartZoomFactorImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingzoomcompletedeventargs)
public final class ScrollingZoomCompletedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IScrollingZoomCompletedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomCompletedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomCompletedEventArgs>?) -> ScrollingZoomCompletedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingzoomcompletedeventargs.correlationid)
    public var correlationId : Int32 {
        get { try! _default.get_CorrelationIdImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingzoomoptions)
open class ScrollingZoomOptions : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IScrollingZoomOptions
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomOptions
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomOptions>?) -> ScrollingZoomOptions? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IScrollingZoomOptionsFactory : __ABI_Microsoft_UI_Xaml_Controls.IScrollingZoomOptionsFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ScrollingZoomOptions"))

    public init(_ animationMode: ScrollingAnimationMode) {
        super.init()
        MakeComposed(composing: Self.Composable.self, self) { baseInterface, innerInterface in 
            try! Self._IScrollingZoomOptionsFactory.CreateInstanceImpl(animationMode, baseInterface, &innerInterface)
        }
    }

    public init(_ animationMode: ScrollingAnimationMode, _ snapPointsMode: ScrollingSnapPointsMode) {
        super.init()
        MakeComposed(composing: Self.Composable.self, self) { baseInterface, innerInterface in 
            try! Self._IScrollingZoomOptionsFactory.CreateInstance2Impl(animationMode, snapPointsMode, baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingzoomoptions.animationmode)
    public var animationMode : ScrollingAnimationMode {
        get { try! _default.get_AnimationModeImpl() }
        set { try! _default.put_AnimationModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingzoomoptions.snappointsmode)
    public var snapPointsMode : ScrollingSnapPointsMode {
        get { try! _default.get_SnapPointsModeImpl() }
        set { try! _default.put_SnapPointsModeImpl(newValue) }
    }

    internal enum IScrollingZoomOptions : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = ScrollingZoomOptions
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomOptions
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IScrollingZoomOptions
        }
    }
    internal typealias Composable = IScrollingZoomOptions
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.sectionsinviewchangedeventargs)
open class SectionsInViewChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ISectionsInViewChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISectionsInViewChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CISectionsInViewChangedEventArgs>?) -> SectionsInViewChangedEventArgs? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ISectionsInViewChangedEventArgsFactory : __ABI_Microsoft_UI_Xaml_Controls.ISectionsInViewChangedEventArgsFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.SectionsInViewChangedEventArgs"))

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.sectionsinviewchangedeventargs.addedsections)
    public var addedSections : WindowsFoundation.AnyIVector<HubSection?>! {
        get { try! _default.get_AddedSectionsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.sectionsinviewchangedeventargs.removedsections)
    public var removedSections : WindowsFoundation.AnyIVector<HubSection?>! {
        get { try! _default.get_RemovedSectionsImpl() }
    }

    internal enum ISectionsInViewChangedEventArgs : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = SectionsInViewChangedEventArgs
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISectionsInViewChangedEventArgs
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ISectionsInViewChangedEventArgs
        }
    }
    internal typealias Composable = ISectionsInViewChangedEventArgs
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.selectionchangedeventargs)
open class SelectionChangedEventArgs : WinUI.RoutedEventArgs {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ISelectionChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISelectionChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CISelectionChangedEventArgs>?) -> SelectionChangedEventArgs? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ISelectionChangedEventArgsFactory : __ABI_Microsoft_UI_Xaml_Controls.ISelectionChangedEventArgsFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.SelectionChangedEventArgs"))

    public init(_ removedItems: WindowsFoundation.AnyIVector<Any?>!, _ addedItems: WindowsFoundation.AnyIVector<Any?>!) {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._ISelectionChangedEventArgsFactory.CreateInstanceWithRemovedItemsAndAddedItemsImpl(removedItems, addedItems, baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.selectionchangedeventargs.addeditems)
    public var addedItems : WindowsFoundation.AnyIVector<Any?>! {
        get { try! _default.get_AddedItemsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.selectionchangedeventargs.removeditems)
    public var removedItems : WindowsFoundation.AnyIVector<Any?>! {
        get { try! _default.get_RemovedItemsImpl() }
    }

    internal enum ISelectionChangedEventArgs : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = SelectionChangedEventArgs
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISelectionChangedEventArgs
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ISelectionChangedEventArgs
        }
    }
    internal typealias Composable = ISelectionChangedEventArgs
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.selectorbar)
open class SelectorBar : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ISelectorBar
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISelectorBar
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CISelectorBar>?) -> SelectorBar? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ISelectorBarFactory : __ABI_Microsoft_UI_Xaml_Controls.ISelectorBarFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.SelectorBar"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._ISelectorBarFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _ISelectorBarStatics: __ABI_Microsoft_UI_Xaml_Controls.ISelectorBarStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.SelectorBar"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.selectorbar.itemsproperty)
    public class var itemsProperty : WinUI.DependencyProperty! {
        get { try! _ISelectorBarStatics.get_ItemsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.selectorbar.selecteditemproperty)
    public class var selectedItemProperty : WinUI.DependencyProperty! {
        get { try! _ISelectorBarStatics.get_SelectedItemPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.selectorbar.items)
    public var items : WindowsFoundation.AnyIVector<SelectorBarItem?>! {
        get { try! _default.get_ItemsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.selectorbar.selecteditem)
    public var selectedItem : SelectorBarItem! {
        get { try! _default.get_SelectedItemImpl() }
        set { try! _default.put_SelectedItemImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.selectorbar.selectionchanged)
    public lazy var selectionChanged : Event<TypedEventHandler<SelectorBar?, SelectorBarSelectionChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_SelectionChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_SelectionChangedImpl($0)
       }
      )
    }()

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = SelectorBar
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISelectorBar
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ISelectorBar
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.selectorbaritem)
open class SelectorBarItem : WinUI.ItemContainer {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ISelectorBarItem
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISelectorBarItem
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CISelectorBarItem>?) -> SelectorBarItem? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ISelectorBarItemFactory : __ABI_Microsoft_UI_Xaml_Controls.ISelectorBarItemFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.SelectorBarItem"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._ISelectorBarItemFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _ISelectorBarItemStatics: __ABI_Microsoft_UI_Xaml_Controls.ISelectorBarItemStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.SelectorBarItem"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.selectorbaritem.iconproperty)
    public class var iconProperty : WinUI.DependencyProperty! {
        get { try! _ISelectorBarItemStatics.get_IconPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.selectorbaritem.textproperty)
    public class var textProperty : WinUI.DependencyProperty! {
        get { try! _ISelectorBarItemStatics.get_TextPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.selectorbaritem.icon)
    public var icon : IconElement! {
        get { try! _default.get_IconImpl() }
        set { try! _default.put_IconImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.selectorbaritem.text)
    public var text : String {
        get { try! _default.get_TextImpl() }
        set { try! _default.put_TextImpl(newValue) }
    }

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = SelectorBarItem
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISelectorBarItem
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ISelectorBarItem
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.selectorbarselectionchangedeventargs)
public final class SelectorBarSelectionChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ISelectorBarSelectionChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISelectorBarSelectionChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CISelectorBarSelectionChangedEventArgs>?) -> SelectorBarSelectionChangedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoom)
public final class SemanticZoom : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ISemanticZoom
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoom
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoom>?) -> SemanticZoom? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.SemanticZoom")))
    }

    private static let _ISemanticZoomStatics: __ABI_Microsoft_UI_Xaml_Controls.ISemanticZoomStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.SemanticZoom"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoom.canchangeviewsproperty)
    public static var canChangeViewsProperty : WinUI.DependencyProperty! {
        get { try! _ISemanticZoomStatics.get_CanChangeViewsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoom.iszoomoutbuttonenabledproperty)
    public static var isZoomOutButtonEnabledProperty : WinUI.DependencyProperty! {
        get { try! _ISemanticZoomStatics.get_IsZoomOutButtonEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoom.iszoomedinviewactiveproperty)
    public static var isZoomedInViewActiveProperty : WinUI.DependencyProperty! {
        get { try! _ISemanticZoomStatics.get_IsZoomedInViewActivePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoom.zoomedinviewproperty)
    public static var zoomedInViewProperty : WinUI.DependencyProperty! {
        get { try! _ISemanticZoomStatics.get_ZoomedInViewPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoom.zoomedoutviewproperty)
    public static var zoomedOutViewProperty : WinUI.DependencyProperty! {
        get { try! _ISemanticZoomStatics.get_ZoomedOutViewPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoom.toggleactiveview)
    public func toggleActiveView() throws {
        try _default.ToggleActiveViewImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoom.canchangeviews)
    public var canChangeViews : Bool {
        get { try! _default.get_CanChangeViewsImpl() }
        set { try! _default.put_CanChangeViewsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoom.iszoomoutbuttonenabled)
    public var isZoomOutButtonEnabled : Bool {
        get { try! _default.get_IsZoomOutButtonEnabledImpl() }
        set { try! _default.put_IsZoomOutButtonEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoom.iszoomedinviewactive)
    public var isZoomedInViewActive : Bool {
        get { try! _default.get_IsZoomedInViewActiveImpl() }
        set { try! _default.put_IsZoomedInViewActiveImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoom.zoomedinview)
    public var zoomedInView : AnyISemanticZoomInformation! {
        get { try! _default.get_ZoomedInViewImpl() }
        set { try! _default.put_ZoomedInViewImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoom.zoomedoutview)
    public var zoomedOutView : AnyISemanticZoomInformation! {
        get { try! _default.get_ZoomedOutViewImpl() }
        set { try! _default.put_ZoomedOutViewImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoom.viewchangecompleted)
    public lazy var viewChangeCompleted : Event<SemanticZoomViewChangedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ViewChangeCompletedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ViewChangeCompletedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoom.viewchangestarted)
    public lazy var viewChangeStarted : Event<SemanticZoomViewChangedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ViewChangeStartedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ViewChangeStartedImpl($0)
       }
      )
    }()

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = SemanticZoom
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoom
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ISemanticZoom
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoomlocation)
public final class SemanticZoomLocation : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ISemanticZoomLocation
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomLocation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomLocation>?) -> SemanticZoomLocation? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public init() {
        super.init(try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.SemanticZoomLocation")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoomlocation.bounds)
    public var bounds : WindowsFoundation.Rect {
        get { try! _default.get_BoundsImpl() }
        set { try! _default.put_BoundsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoomlocation.item)
    public var item : Any! {
        get { try! _default.get_ItemImpl() }
        set { try! _default.put_ItemImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoomviewchangedeventargs)
public final class SemanticZoomViewChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ISemanticZoomViewChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomViewChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomViewChangedEventArgs>?) -> SemanticZoomViewChangedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public init() {
        super.init(try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.SemanticZoomViewChangedEventArgs")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoomviewchangedeventargs.destinationitem)
    public var destinationItem : SemanticZoomLocation! {
        get { try! _default.get_DestinationItemImpl() }
        set { try! _default.put_DestinationItemImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoomviewchangedeventargs.issourcezoomedinview)
    public var isSourceZoomedInView : Bool {
        get { try! _default.get_IsSourceZoomedInViewImpl() }
        set { try! _default.put_IsSourceZoomedInViewImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoomviewchangedeventargs.sourceitem)
    public var sourceItem : SemanticZoomLocation! {
        get { try! _default.get_SourceItemImpl() }
        set { try! _default.put_SourceItemImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider)
open class Slider : WinUI.RangeBase {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ISlider
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISlider
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CISlider>?) -> Slider? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ISliderFactory : __ABI_Microsoft_UI_Xaml_Controls.ISliderFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.Slider"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._ISliderFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _ISliderStatics: __ABI_Microsoft_UI_Xaml_Controls.ISliderStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.Slider"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.headerproperty)
    public class var headerProperty : WinUI.DependencyProperty! {
        get { try! _ISliderStatics.get_HeaderPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.headertemplateproperty)
    public class var headerTemplateProperty : WinUI.DependencyProperty! {
        get { try! _ISliderStatics.get_HeaderTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.intermediatevalueproperty)
    public class var intermediateValueProperty : WinUI.DependencyProperty! {
        get { try! _ISliderStatics.get_IntermediateValuePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.isdirectionreversedproperty)
    public class var isDirectionReversedProperty : WinUI.DependencyProperty! {
        get { try! _ISliderStatics.get_IsDirectionReversedPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.isthumbtooltipenabledproperty)
    public class var isThumbToolTipEnabledProperty : WinUI.DependencyProperty! {
        get { try! _ISliderStatics.get_IsThumbToolTipEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.orientationproperty)
    public class var orientationProperty : WinUI.DependencyProperty! {
        get { try! _ISliderStatics.get_OrientationPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.snapstoproperty)
    public class var snapsToProperty : WinUI.DependencyProperty! {
        get { try! _ISliderStatics.get_SnapsToPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.stepfrequencyproperty)
    public class var stepFrequencyProperty : WinUI.DependencyProperty! {
        get { try! _ISliderStatics.get_StepFrequencyPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.thumbtooltipvalueconverterproperty)
    public class var thumbToolTipValueConverterProperty : WinUI.DependencyProperty! {
        get { try! _ISliderStatics.get_ThumbToolTipValueConverterPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.tickfrequencyproperty)
    public class var tickFrequencyProperty : WinUI.DependencyProperty! {
        get { try! _ISliderStatics.get_TickFrequencyPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.tickplacementproperty)
    public class var tickPlacementProperty : WinUI.DependencyProperty! {
        get { try! _ISliderStatics.get_TickPlacementPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.header)
    public var header : Any! {
        get { try! _default.get_HeaderImpl() }
        set { try! _default.put_HeaderImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.headertemplate)
    public var headerTemplate : WinUI.DataTemplate! {
        get { try! _default.get_HeaderTemplateImpl() }
        set { try! _default.put_HeaderTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.intermediatevalue)
    public var intermediateValue : Double {
        get { try! _default.get_IntermediateValueImpl() }
        set { try! _default.put_IntermediateValueImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.isdirectionreversed)
    public var isDirectionReversed : Bool {
        get { try! _default.get_IsDirectionReversedImpl() }
        set { try! _default.put_IsDirectionReversedImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.isthumbtooltipenabled)
    public var isThumbToolTipEnabled : Bool {
        get { try! _default.get_IsThumbToolTipEnabledImpl() }
        set { try! _default.put_IsThumbToolTipEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.orientation)
    public var orientation : Orientation {
        get { try! _default.get_OrientationImpl() }
        set { try! _default.put_OrientationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.snapsto)
    public var snapsTo : WinUI.SliderSnapsTo {
        get { try! _default.get_SnapsToImpl() }
        set { try! _default.put_SnapsToImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.stepfrequency)
    public var stepFrequency : Double {
        get { try! _default.get_StepFrequencyImpl() }
        set { try! _default.put_StepFrequencyImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.thumbtooltipvalueconverter)
    public var thumbToolTipValueConverter : WinUI.AnyIValueConverter! {
        get { try! _default.get_ThumbToolTipValueConverterImpl() }
        set { try! _default.put_ThumbToolTipValueConverterImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.tickfrequency)
    public var tickFrequency : Double {
        get { try! _default.get_TickFrequencyImpl() }
        set { try! _default.put_TickFrequencyImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.tickplacement)
    public var tickPlacement : WinUI.TickPlacement {
        get { try! _default.get_TickPlacementImpl() }
        set { try! _default.put_TickPlacementImpl(newValue) }
    }

    internal enum IRangeBaseOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IRangeBaseOverrides
        internal typealias Class = Slider
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISlider
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ISlider
        }
    }
    internal typealias Composable = IRangeBaseOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitbutton)
open class SplitButton : WinUI.ContentControl {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ISplitButton
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitButton
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitButton>?) -> SplitButton? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ISplitButtonFactory : __ABI_Microsoft_UI_Xaml_Controls.ISplitButtonFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.SplitButton"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._ISplitButtonFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _ISplitButtonStatics: __ABI_Microsoft_UI_Xaml_Controls.ISplitButtonStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.SplitButton"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitbutton.commandparameterproperty)
    public class var commandParameterProperty : WinUI.DependencyProperty! {
        get { try! _ISplitButtonStatics.get_CommandParameterPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitbutton.commandproperty)
    public class var commandProperty : WinUI.DependencyProperty! {
        get { try! _ISplitButtonStatics.get_CommandPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitbutton.flyoutproperty)
    public class var flyoutProperty : WinUI.DependencyProperty! {
        get { try! _ISplitButtonStatics.get_FlyoutPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitbutton.command)
    public var command : WinUI.AnyICommand! {
        get { try! _default.get_CommandImpl() }
        set { try! _default.put_CommandImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitbutton.commandparameter)
    public var commandParameter : Any! {
        get { try! _default.get_CommandParameterImpl() }
        set { try! _default.put_CommandParameterImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitbutton.flyout)
    public var flyout : WinUI.FlyoutBase! {
        get { try! _default.get_FlyoutImpl() }
        set { try! _default.put_FlyoutImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitbutton.click)
    public lazy var click : Event<TypedEventHandler<SplitButton?, SplitButtonClickEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ClickImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ClickImpl($0)
       }
      )
    }()

    internal enum IContentControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
        internal typealias Class = SplitButton
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitButton
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ISplitButton
        }
    }
    internal typealias Composable = IContentControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitbuttonclickeventargs)
public final class SplitButtonClickEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ISplitButtonClickEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitButtonClickEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitButtonClickEventArgs>?) -> SplitButtonClickEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview)
open class SplitView : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ISplitView
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView>?) -> SplitView? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ISplitViewFactory : __ABI_Microsoft_UI_Xaml_Controls.ISplitViewFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.SplitView"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._ISplitViewFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _ISplitViewStatics: __ABI_Microsoft_UI_Xaml_Controls.ISplitViewStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.SplitView"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.compactpanelengthproperty)
    public class var compactPaneLengthProperty : WinUI.DependencyProperty! {
        get { try! _ISplitViewStatics.get_CompactPaneLengthPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.contentproperty)
    public class var contentProperty : WinUI.DependencyProperty! {
        get { try! _ISplitViewStatics.get_ContentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.displaymodeproperty)
    public class var displayModeProperty : WinUI.DependencyProperty! {
        get { try! _ISplitViewStatics.get_DisplayModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.ispaneopenproperty)
    public class var isPaneOpenProperty : WinUI.DependencyProperty! {
        get { try! _ISplitViewStatics.get_IsPaneOpenPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.lightdismissoverlaymodeproperty)
    public class var lightDismissOverlayModeProperty : WinUI.DependencyProperty! {
        get { try! _ISplitViewStatics.get_LightDismissOverlayModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.openpanelengthproperty)
    public class var openPaneLengthProperty : WinUI.DependencyProperty! {
        get { try! _ISplitViewStatics.get_OpenPaneLengthPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.panebackgroundproperty)
    public class var paneBackgroundProperty : WinUI.DependencyProperty! {
        get { try! _ISplitViewStatics.get_PaneBackgroundPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.paneplacementproperty)
    public class var panePlacementProperty : WinUI.DependencyProperty! {
        get { try! _ISplitViewStatics.get_PanePlacementPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.paneproperty)
    public class var paneProperty : WinUI.DependencyProperty! {
        get { try! _ISplitViewStatics.get_PanePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.templatesettingsproperty)
    public class var templateSettingsProperty : WinUI.DependencyProperty! {
        get { try! _ISplitViewStatics.get_TemplateSettingsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.compactpanelength)
    public var compactPaneLength : Double {
        get { try! _default.get_CompactPaneLengthImpl() }
        set { try! _default.put_CompactPaneLengthImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.content)
    public var content : WinUI.UIElement! {
        get { try! _default.get_ContentImpl() }
        set { try! _default.put_ContentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.displaymode)
    public var displayMode : SplitViewDisplayMode {
        get { try! _default.get_DisplayModeImpl() }
        set { try! _default.put_DisplayModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.ispaneopen)
    public var isPaneOpen : Bool {
        get { try! _default.get_IsPaneOpenImpl() }
        set { try! _default.put_IsPaneOpenImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.lightdismissoverlaymode)
    public var lightDismissOverlayMode : LightDismissOverlayMode {
        get { try! _default.get_LightDismissOverlayModeImpl() }
        set { try! _default.put_LightDismissOverlayModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.openpanelength)
    public var openPaneLength : Double {
        get { try! _default.get_OpenPaneLengthImpl() }
        set { try! _default.put_OpenPaneLengthImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.pane)
    public var pane : WinUI.UIElement! {
        get { try! _default.get_PaneImpl() }
        set { try! _default.put_PaneImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.panebackground)
    public var paneBackground : WinUI.Brush! {
        get { try! _default.get_PaneBackgroundImpl() }
        set { try! _default.put_PaneBackgroundImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.paneplacement)
    public var panePlacement : SplitViewPanePlacement {
        get { try! _default.get_PanePlacementImpl() }
        set { try! _default.put_PanePlacementImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.templatesettings)
    public var templateSettings : WinUI.SplitViewTemplateSettings! {
        get { try! _default.get_TemplateSettingsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.paneclosed)
    public lazy var paneClosed : Event<TypedEventHandler<SplitView?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PaneClosedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PaneClosedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.paneclosing)
    public lazy var paneClosing : Event<TypedEventHandler<SplitView?, SplitViewPaneClosingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PaneClosingImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PaneClosingImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.paneopened)
    public lazy var paneOpened : Event<TypedEventHandler<SplitView?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PaneOpenedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PaneOpenedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.paneopening)
    public lazy var paneOpening : Event<TypedEventHandler<SplitView?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PaneOpeningImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PaneOpeningImpl($0)
       }
      )
    }()

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = SplitView
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ISplitView
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitviewpaneclosingeventargs)
public final class SplitViewPaneClosingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ISplitViewPaneClosingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitViewPaneClosingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitViewPaneClosingEventArgs>?) -> SplitViewPaneClosingEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitviewpaneclosingeventargs.cancel)
    public var cancel : Bool {
        get { try! _default.get_CancelImpl() }
        set { try! _default.put_CancelImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stacklayout)
open class StackLayout : WinUI.VirtualizingLayout {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IStackLayout
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStackLayout
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStackLayout>?) -> StackLayout? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IStackLayoutFactory : __ABI_Microsoft_UI_Xaml_Controls.IStackLayoutFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.StackLayout"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IStackLayoutFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IStackLayoutStatics: __ABI_Microsoft_UI_Xaml_Controls.IStackLayoutStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.StackLayout"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stacklayout.orientationproperty)
    public class var orientationProperty : WinUI.DependencyProperty! {
        get { try! _IStackLayoutStatics.get_OrientationPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stacklayout.spacingproperty)
    public class var spacingProperty : WinUI.DependencyProperty! {
        get { try! _IStackLayoutStatics.get_SpacingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stacklayout.orientation)
    public var orientation : Orientation {
        get { try! _default.get_OrientationImpl() }
        set { try! _default.put_OrientationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stacklayout.spacing)
    public var spacing : Double {
        get { try! _default.get_SpacingImpl() }
        set { try! _default.put_SpacingImpl(newValue) }
    }

    internal enum IVirtualizingLayoutOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingLayoutOverrides
        internal typealias Class = StackLayout
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStackLayout
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IStackLayout
        }
    }
    internal typealias Composable = IVirtualizingLayoutOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stackpanel)
open class StackPanel : WinUI.Panel, WinUI.IScrollSnapPointsInfo, IInsertionPanel {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IStackPanel
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStackPanel
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStackPanel>?) -> StackPanel? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IStackPanelFactory : __ABI_Microsoft_UI_Xaml_Controls.IStackPanelFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.StackPanel"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IStackPanelFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IStackPanelStatics: __ABI_Microsoft_UI_Xaml_Controls.IStackPanelStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.StackPanel"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stackpanel.arescrollsnappointsregularproperty)
    public class var areScrollSnapPointsRegularProperty : WinUI.DependencyProperty! {
        get { try! _IStackPanelStatics.get_AreScrollSnapPointsRegularPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stackpanel.backgroundsizingproperty)
    public class var backgroundSizingProperty : WinUI.DependencyProperty! {
        get { try! _IStackPanelStatics.get_BackgroundSizingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stackpanel.borderbrushproperty)
    public class var borderBrushProperty : WinUI.DependencyProperty! {
        get { try! _IStackPanelStatics.get_BorderBrushPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stackpanel.borderthicknessproperty)
    public class var borderThicknessProperty : WinUI.DependencyProperty! {
        get { try! _IStackPanelStatics.get_BorderThicknessPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stackpanel.cornerradiusproperty)
    public class var cornerRadiusProperty : WinUI.DependencyProperty! {
        get { try! _IStackPanelStatics.get_CornerRadiusPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stackpanel.orientationproperty)
    public class var orientationProperty : WinUI.DependencyProperty! {
        get { try! _IStackPanelStatics.get_OrientationPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stackpanel.paddingproperty)
    public class var paddingProperty : WinUI.DependencyProperty! {
        get { try! _IStackPanelStatics.get_PaddingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stackpanel.spacingproperty)
    public class var spacingProperty : WinUI.DependencyProperty! {
        get { try! _IStackPanelStatics.get_SpacingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stackpanel.arescrollsnappointsregular)
    public var areScrollSnapPointsRegular : Bool {
        get { try! _default.get_AreScrollSnapPointsRegularImpl() }
        set { try! _default.put_AreScrollSnapPointsRegularImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stackpanel.backgroundsizing)
    public var backgroundSizing : BackgroundSizing {
        get { try! _default.get_BackgroundSizingImpl() }
        set { try! _default.put_BackgroundSizingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stackpanel.borderbrush)
    public var borderBrush : WinUI.Brush! {
        get { try! _default.get_BorderBrushImpl() }
        set { try! _default.put_BorderBrushImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stackpanel.borderthickness)
    public var borderThickness : WinUI.Thickness {
        get { try! _default.get_BorderThicknessImpl() }
        set { try! _default.put_BorderThicknessImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stackpanel.cornerradius)
    public var cornerRadius : WinUI.CornerRadius {
        get { try! _default.get_CornerRadiusImpl() }
        set { try! _default.put_CornerRadiusImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stackpanel.orientation)
    public var orientation : Orientation {
        get { try! _default.get_OrientationImpl() }
        set { try! _default.put_OrientationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stackpanel.padding)
    public var padding : WinUI.Thickness {
        get { try! _default.get_PaddingImpl() }
        set { try! _default.put_PaddingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stackpanel.spacing)
    public var spacing : Double {
        get { try! _default.get_SpacingImpl() }
        set { try! _default.put_SpacingImpl(newValue) }
    }

    private lazy var _IScrollSnapPointsInfo: __ABI_Microsoft_UI_Xaml_Controls_Primitives.IScrollSnapPointsInfo! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stackpanel.getirregularsnappoints)
    public func getIrregularSnapPoints(_ orientation: Orientation, _ alignment: WinUI.SnapPointsAlignment) throws -> WindowsFoundation.AnyIVectorView<Float>! {
        try _IScrollSnapPointsInfo.GetIrregularSnapPointsImpl(orientation, alignment)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stackpanel.getregularsnappoints)
    public func getRegularSnapPoints(_ orientation: Orientation, _ alignment: WinUI.SnapPointsAlignment, _ offset: inout Float) throws -> Float {
        try _IScrollSnapPointsInfo.GetRegularSnapPointsImpl(orientation, alignment, &offset)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stackpanel.arehorizontalsnappointsregular)
    public var areHorizontalSnapPointsRegular : Bool {
        get { try! _IScrollSnapPointsInfo.get_AreHorizontalSnapPointsRegularImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stackpanel.areverticalsnappointsregular)
    public var areVerticalSnapPointsRegular : Bool {
        get { try! _IScrollSnapPointsInfo.get_AreVerticalSnapPointsRegularImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stackpanel.horizontalsnappointschanged)
    public lazy var horizontalSnapPointsChanged : Event<EventHandler<Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._IScrollSnapPointsInfo else { return .init() }
          return try! this.add_HorizontalSnapPointsChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._IScrollSnapPointsInfo.remove_HorizontalSnapPointsChangedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stackpanel.verticalsnappointschanged)
    public lazy var verticalSnapPointsChanged : Event<EventHandler<Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._IScrollSnapPointsInfo else { return .init() }
          return try! this.add_VerticalSnapPointsChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._IScrollSnapPointsInfo.remove_VerticalSnapPointsChangedImpl($0)
       }
      )
    }()

    private lazy var _IInsertionPanel: __ABI_Microsoft_UI_Xaml_Controls.IInsertionPanel! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.stackpanel.getinsertionindexes)
    public func getInsertionIndexes(_ position: WindowsFoundation.Point, _ first: inout Int32, _ second: inout Int32) throws {
        try _IInsertionPanel.GetInsertionIndexesImpl(position, &first, &second)
    }

    internal enum IFrameworkElementOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
        internal typealias Class = StackPanel
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStackPanel
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IStackPanel
        }
    }
    internal typealias Composable = IFrameworkElementOverrides
    deinit {
        _default = nil
        _IScrollSnapPointsInfo = nil
        _IInsertionPanel = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.styleselector)
open class StyleSelector : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IStyleSelector
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStyleSelector
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStyleSelector>?) -> StyleSelector? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.IStyleSelectorOverridesWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.IStyleSelectorOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IStyleSelectorFactory : __ABI_Microsoft_UI_Xaml_Controls.IStyleSelectorFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.StyleSelector"))

    override public init() {
        super.init()
        MakeComposed(composing: Self.Composable.self, self) { baseInterface, innerInterface in 
            try! Self._IStyleSelectorFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.styleselector.selectstyle)
    public func selectStyle(_ item: Any!, _ container: WinUI.DependencyObject!) throws -> WinUI.Style! {
        try _default.SelectStyleImpl(item, container)
    }

    private lazy var _IStyleSelectorOverrides: __ABI_Microsoft_UI_Xaml_Controls.IStyleSelectorOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.styleselector.selectstylecore)
    open func selectStyleCore(_ item: Any!, _ container: WinUI.DependencyObject!) throws -> WinUI.Style! {
        try _IStyleSelectorOverrides.SelectStyleCoreImpl(item, container)
    }

    internal enum IStyleSelectorOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStyleSelectorOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IStyleSelectorOverrides
        internal typealias Class = StyleSelector
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStyleSelector
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IStyleSelector
        }
    }
    internal typealias Composable = IStyleSelectorOverrides
    deinit {
        _default = nil
        _IStyleSelectorOverrides = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.swapchainbackgroundpanel)
open class SwapChainBackgroundPanel : WinUI.Grid {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ISwapChainBackgroundPanel
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISwapChainBackgroundPanel
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CISwapChainBackgroundPanel>?) -> SwapChainBackgroundPanel? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ISwapChainBackgroundPanelFactory : __ABI_Microsoft_UI_Xaml_Controls.ISwapChainBackgroundPanelFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.SwapChainBackgroundPanel"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._ISwapChainBackgroundPanelFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    internal enum IFrameworkElementOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
        internal typealias Class = SwapChainBackgroundPanel
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISwapChainBackgroundPanel
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ISwapChainBackgroundPanel
        }
    }
    internal typealias Composable = IFrameworkElementOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.swapchainpanel)
open class SwapChainPanel : WinUI.Grid {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ISwapChainPanel
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISwapChainPanel
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CISwapChainPanel>?) -> SwapChainPanel? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ISwapChainPanelFactory : __ABI_Microsoft_UI_Xaml_Controls.ISwapChainPanelFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.SwapChainPanel"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._ISwapChainPanelFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _ISwapChainPanelStatics: __ABI_Microsoft_UI_Xaml_Controls.ISwapChainPanelStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.SwapChainPanel"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.swapchainpanel.compositionscalexproperty)
    public class var compositionScaleXProperty : WinUI.DependencyProperty! {
        get { try! _ISwapChainPanelStatics.get_CompositionScaleXPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.swapchainpanel.compositionscaleyproperty)
    public class var compositionScaleYProperty : WinUI.DependencyProperty! {
        get { try! _ISwapChainPanelStatics.get_CompositionScaleYPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.swapchainpanel.createcoreindependentinputsource)
    public func createCoreIndependentInputSource(_ deviceKinds: WinAppSDK.InputPointerSourceDeviceKinds) throws -> WinAppSDK.InputPointerSource! {
        try _default.CreateCoreIndependentInputSourceImpl(deviceKinds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.swapchainpanel.compositionscalex)
    public var compositionScaleX : Float {
        get { try! _default.get_CompositionScaleXImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.swapchainpanel.compositionscaley)
    public var compositionScaleY : Float {
        get { try! _default.get_CompositionScaleYImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.swapchainpanel.compositionscalechanged)
    public lazy var compositionScaleChanged : Event<TypedEventHandler<SwapChainPanel?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_CompositionScaleChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_CompositionScaleChangedImpl($0)
       }
      )
    }()

    internal enum IFrameworkElementOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
        internal typealias Class = SwapChainPanel
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISwapChainPanel
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ISwapChainPanel
        }
    }
    internal typealias Composable = IFrameworkElementOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.swipecontrol)
open class SwipeControl : WinUI.ContentControl {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ISwipeControl
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISwipeControl
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CISwipeControl>?) -> SwipeControl? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ISwipeControlFactory : __ABI_Microsoft_UI_Xaml_Controls.ISwipeControlFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.SwipeControl"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._ISwipeControlFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _ISwipeControlStatics: __ABI_Microsoft_UI_Xaml_Controls.ISwipeControlStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.SwipeControl"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.swipecontrol.bottomitemsproperty)
    public class var bottomItemsProperty : WinUI.DependencyProperty! {
        get { try! _ISwipeControlStatics.get_BottomItemsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.swipecontrol.leftitemsproperty)
    public class var leftItemsProperty : WinUI.DependencyProperty! {
        get { try! _ISwipeControlStatics.get_LeftItemsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.swipecontrol.rightitemsproperty)
    public class var rightItemsProperty : WinUI.DependencyProperty! {
        get { try! _ISwipeControlStatics.get_RightItemsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.swipecontrol.topitemsproperty)
    public class var topItemsProperty : WinUI.DependencyProperty! {
        get { try! _ISwipeControlStatics.get_TopItemsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.swipecontrol.close)
    public func close() throws {
        try _default.CloseImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.swipecontrol.bottomitems)
    public var bottomItems : SwipeItems! {
        get { try! _default.get_BottomItemsImpl() }
        set { try! _default.put_BottomItemsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.swipecontrol.leftitems)
    public var leftItems : SwipeItems! {
        get { try! _default.get_LeftItemsImpl() }
        set { try! _default.put_LeftItemsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.swipecontrol.rightitems)
    public var rightItems : SwipeItems! {
        get { try! _default.get_RightItemsImpl() }
        set { try! _default.put_RightItemsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.swipecontrol.topitems)
    public var topItems : SwipeItems! {
        get { try! _default.get_TopItemsImpl() }
        set { try! _default.put_TopItemsImpl(newValue) }
    }

    internal enum IContentControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
        internal typealias Class = SwipeControl
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISwipeControl
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ISwipeControl
        }
    }
    internal typealias Composable = IContentControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.swipeitem)
open class SwipeItem : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ISwipeItem
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISwipeItem
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CISwipeItem>?) -> SwipeItem? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ISwipeItemFactory : __ABI_Microsoft_UI_Xaml_Controls.ISwipeItemFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.SwipeItem"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._ISwipeItemFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _ISwipeItemStatics: __ABI_Microsoft_UI_Xaml_Controls.ISwipeItemStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.SwipeItem"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.swipeitem.backgroundproperty)
    public class var backgroundProperty : WinUI.DependencyProperty! {
        get { try! _ISwipeItemStatics.get_BackgroundPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.swipeitem.behavioroninvokedproperty)
    public class var behaviorOnInvokedProperty : WinUI.DependencyProperty! {
        get { try! _ISwipeItemStatics.get_BehaviorOnInvokedPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.swipeitem.commandparameterproperty)
    public class var commandParameterProperty : WinUI.DependencyProperty! {
        get { try! _ISwipeItemStatics.get_CommandParameterPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.swipeitem.commandproperty)
    public class var commandProperty : WinUI.DependencyProperty! {
        get { try! _ISwipeItemStatics.get_CommandPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.swipeitem.foregroundproperty)
    public class var foregroundProperty : WinUI.DependencyProperty! {
        get { try! _ISwipeItemStatics.get_ForegroundPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.swipeitem.iconsourceproperty)
    public class var iconSourceProperty : WinUI.DependencyProperty! {
        get { try! _ISwipeItemStatics.get_IconSourcePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.swipeitem.textproperty)
    public class var textProperty : WinUI.DependencyProperty! {
        get { try! _ISwipeItemStatics.get_TextPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.swipeitem.background)
    public var background : WinUI.Brush! {
        get { try! _default.get_BackgroundImpl() }
        set { try! _default.put_BackgroundImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.swipeitem.behavioroninvoked)
    public var behaviorOnInvoked : SwipeBehaviorOnInvoked {
        get { try! _default.get_BehaviorOnInvokedImpl() }
        set { try! _default.put_BehaviorOnInvokedImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.swipeitem.command)
    public var command : WinUI.AnyICommand! {
        get { try! _default.get_CommandImpl() }
        set { try! _default.put_CommandImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.swipeitem.commandparameter)
    public var commandParameter : Any! {
        get { try! _default.get_CommandParameterImpl() }
        set { try! _default.put_CommandParameterImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.swipeitem.foreground)
    public var foreground : WinUI.Brush! {
        get { try! _default.get_ForegroundImpl() }
        set { try! _default.put_ForegroundImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.swipeitem.iconsource)
    public var iconSource : IconSource! {
        get { try! _default.get_IconSourceImpl() }
        set { try! _default.put_IconSourceImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.swipeitem.text)
    public var text : String {
        get { try! _default.get_TextImpl() }
        set { try! _default.put_TextImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.swipeitem.invoked)
    public lazy var invoked : Event<TypedEventHandler<SwipeItem?, SwipeItemInvokedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_InvokedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_InvokedImpl($0)
       }
      )
    }()

    internal enum ISwipeItem : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = SwipeItem
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISwipeItem
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ISwipeItem
        }
    }
    internal typealias Composable = ISwipeItem
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.swipeiteminvokedeventargs)
public final class SwipeItemInvokedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ISwipeItemInvokedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISwipeItemInvokedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CISwipeItemInvokedEventArgs>?) -> SwipeItemInvokedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.swipeiteminvokedeventargs.swipecontrol)
    public var swipeControl : SwipeControl! {
        get { try! _default.get_SwipeControlImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.swipeitems)
open class SwipeItems : WinUI.DependencyObject, IVector, IIterable {
    public typealias T = SwipeItem?
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ISwipeItems
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISwipeItems
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CISwipeItems>?) -> SwipeItems? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ISwipeItemsFactory : __ABI_Microsoft_UI_Xaml_Controls.ISwipeItemsFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.SwipeItems"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._ISwipeItemsFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _ISwipeItemsStatics: __ABI_Microsoft_UI_Xaml_Controls.ISwipeItemsStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.SwipeItems"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.swipeitems.modeproperty)
    public class var modeProperty : WinUI.DependencyProperty! {
        get { try! _ISwipeItemsStatics.get_ModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.swipeitems.mode)
    public var mode : SwipeMode {
        get { try! _default.get_ModeImpl() }
        set { try! _default.put_ModeImpl(newValue) }
    }

    // MARK: Collection
    public typealias Element = T
    public var startIndex: Int { 0 }
    public var endIndex: Int { Int(size) }
    public func index(after i: Int) -> Int {
        i+1
    }

    public func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    public var count: Int { Int(size) }


    public subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    public func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    private lazy var _IVector: IVectorSwipeItem! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.swipeitems.getat)
    public func getAt(_ index: UInt32) -> SwipeItem? {
        try! _IVector.GetAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.swipeitems.getview)
    public func getView() -> WindowsFoundation.AnyIVectorView<SwipeItem?>? {
        try! _IVector.GetViewImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.swipeitems.indexof)
    public func indexOf(_ value: SwipeItem?, _ index: inout UInt32) -> Bool {
        try! _IVector.IndexOfImpl(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.swipeitems.setat)
    public func setAt(_ index: UInt32, _ value: SwipeItem?) {
        try! _IVector.SetAtImpl(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.swipeitems.insertat)
    public func insertAt(_ index: UInt32, _ value: SwipeItem?) {
        try! _IVector.InsertAtImpl(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.swipeitems.removeat)
    public func removeAt(_ index: UInt32) {
        try! _IVector.RemoveAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.swipeitems.append)
    public func append(_ value: SwipeItem?) {
        try! _IVector.AppendImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.swipeitems.removeatend)
    public func removeAtEnd() {
        try! _IVector.RemoveAtEndImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.swipeitems.clear)
    public func clear() {
        try! _IVector.ClearImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.swipeitems.size)
    public var size : UInt32 {
        get { try! _IVector.get_SizeImpl() }
    }

    private lazy var _IIterable: IIterableSwipeItem! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.swipeitems.first)
    public func first() -> WindowsFoundation.AnyIIterator<SwipeItem?>? {
        try! _IIterable.FirstImpl()
    }

    internal enum ISwipeItems : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = SwipeItems
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISwipeItems
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ISwipeItems
        }
    }
    internal typealias Composable = ISwipeItems
    deinit {
        _default = nil
        _IVector = nil
        _IIterable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.symbolicon)
public final class SymbolIcon : WinUI.IconElement {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ISymbolIcon
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISymbolIcon
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CISymbolIcon>?) -> SymbolIcon? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.SymbolIcon")))
    }

    private static let _ISymbolIconFactory: __ABI_Microsoft_UI_Xaml_Controls.ISymbolIconFactory = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.SymbolIcon"))
    public init(_ symbol: Symbol) {
        super.init(fromAbi: try! Self._ISymbolIconFactory.CreateInstanceWithSymbolImpl(symbol))
    }

    private static let _ISymbolIconStatics: __ABI_Microsoft_UI_Xaml_Controls.ISymbolIconStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.SymbolIcon"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.symbolicon.symbolproperty)
    public static var symbolProperty : WinUI.DependencyProperty! {
        get { try! _ISymbolIconStatics.get_SymbolPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.symbolicon.symbol)
    public var symbol : Symbol {
        get { try! _default.get_SymbolImpl() }
        set { try! _default.put_SymbolImpl(newValue) }
    }

    internal enum IFrameworkElementOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
        internal typealias Class = SymbolIcon
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISymbolIcon
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ISymbolIcon
        }
    }
    internal typealias Composable = IFrameworkElementOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.symboliconsource)
open class SymbolIconSource : WinUI.IconSource {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ISymbolIconSource
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISymbolIconSource
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CISymbolIconSource>?) -> SymbolIconSource? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ISymbolIconSourceFactory : __ABI_Microsoft_UI_Xaml_Controls.ISymbolIconSourceFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.SymbolIconSource"))

    public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._ISymbolIconSourceFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _ISymbolIconSourceStatics: __ABI_Microsoft_UI_Xaml_Controls.ISymbolIconSourceStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.SymbolIconSource"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.symboliconsource.symbolproperty)
    public class var symbolProperty : WinUI.DependencyProperty! {
        get { try! _ISymbolIconSourceStatics.get_SymbolPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.symboliconsource.symbol)
    public var symbol : Symbol {
        get { try! _default.get_SymbolImpl() }
        set { try! _default.put_SymbolImpl(newValue) }
    }

    internal enum IIconSourceOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSourceOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IIconSourceOverrides
        internal typealias Class = SymbolIconSource
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISymbolIconSource
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ISymbolIconSource
        }
    }
    internal typealias Composable = IIconSourceOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabview)
open class TabView : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITabView
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITabView
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITabView>?) -> TabView? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ITabViewFactory : __ABI_Microsoft_UI_Xaml_Controls.ITabViewFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.TabView"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._ITabViewFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _ITabViewStatics: __ABI_Microsoft_UI_Xaml_Controls.ITabViewStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.TabView"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabview.addtabbuttoncommandparameterproperty)
    public class var addTabButtonCommandParameterProperty : WinUI.DependencyProperty! {
        get { try! _ITabViewStatics.get_AddTabButtonCommandParameterPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabview.addtabbuttoncommandproperty)
    public class var addTabButtonCommandProperty : WinUI.DependencyProperty! {
        get { try! _ITabViewStatics.get_AddTabButtonCommandPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabview.allowdroptabsproperty)
    public class var allowDropTabsProperty : WinUI.DependencyProperty! {
        get { try! _ITabViewStatics.get_AllowDropTabsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabview.candragtabsproperty)
    public class var canDragTabsProperty : WinUI.DependencyProperty! {
        get { try! _ITabViewStatics.get_CanDragTabsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabview.canreordertabsproperty)
    public class var canReorderTabsProperty : WinUI.DependencyProperty! {
        get { try! _ITabViewStatics.get_CanReorderTabsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabview.closebuttonoverlaymodeproperty)
    public class var closeButtonOverlayModeProperty : WinUI.DependencyProperty! {
        get { try! _ITabViewStatics.get_CloseButtonOverlayModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabview.isaddtabbuttonvisibleproperty)
    public class var isAddTabButtonVisibleProperty : WinUI.DependencyProperty! {
        get { try! _ITabViewStatics.get_IsAddTabButtonVisiblePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabview.selectedindexproperty)
    public class var selectedIndexProperty : WinUI.DependencyProperty! {
        get { try! _ITabViewStatics.get_SelectedIndexPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabview.selecteditemproperty)
    public class var selectedItemProperty : WinUI.DependencyProperty! {
        get { try! _ITabViewStatics.get_SelectedItemPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabview.tabitemtemplateproperty)
    public class var tabItemTemplateProperty : WinUI.DependencyProperty! {
        get { try! _ITabViewStatics.get_TabItemTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabview.tabitemtemplateselectorproperty)
    public class var tabItemTemplateSelectorProperty : WinUI.DependencyProperty! {
        get { try! _ITabViewStatics.get_TabItemTemplateSelectorPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabview.tabitemsproperty)
    public class var tabItemsProperty : WinUI.DependencyProperty! {
        get { try! _ITabViewStatics.get_TabItemsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabview.tabitemssourceproperty)
    public class var tabItemsSourceProperty : WinUI.DependencyProperty! {
        get { try! _ITabViewStatics.get_TabItemsSourcePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabview.tabstripfooterproperty)
    public class var tabStripFooterProperty : WinUI.DependencyProperty! {
        get { try! _ITabViewStatics.get_TabStripFooterPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabview.tabstripfootertemplateproperty)
    public class var tabStripFooterTemplateProperty : WinUI.DependencyProperty! {
        get { try! _ITabViewStatics.get_TabStripFooterTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabview.tabstripheaderproperty)
    public class var tabStripHeaderProperty : WinUI.DependencyProperty! {
        get { try! _ITabViewStatics.get_TabStripHeaderPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabview.tabstripheadertemplateproperty)
    public class var tabStripHeaderTemplateProperty : WinUI.DependencyProperty! {
        get { try! _ITabViewStatics.get_TabStripHeaderTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabview.tabwidthmodeproperty)
    public class var tabWidthModeProperty : WinUI.DependencyProperty! {
        get { try! _ITabViewStatics.get_TabWidthModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabview.containerfromitem)
    public func containerFromItem(_ item: Any!) throws -> WinUI.DependencyObject! {
        try _default.ContainerFromItemImpl(item)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabview.containerfromindex)
    public func containerFromIndex(_ index: Int32) throws -> WinUI.DependencyObject! {
        try _default.ContainerFromIndexImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabview.addtabbuttoncommand)
    public var addTabButtonCommand : WinUI.AnyICommand! {
        get { try! _default.get_AddTabButtonCommandImpl() }
        set { try! _default.put_AddTabButtonCommandImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabview.addtabbuttoncommandparameter)
    public var addTabButtonCommandParameter : Any! {
        get { try! _default.get_AddTabButtonCommandParameterImpl() }
        set { try! _default.put_AddTabButtonCommandParameterImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabview.allowdroptabs)
    public var allowDropTabs : Bool {
        get { try! _default.get_AllowDropTabsImpl() }
        set { try! _default.put_AllowDropTabsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabview.candragtabs)
    public var canDragTabs : Bool {
        get { try! _default.get_CanDragTabsImpl() }
        set { try! _default.put_CanDragTabsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabview.canreordertabs)
    public var canReorderTabs : Bool {
        get { try! _default.get_CanReorderTabsImpl() }
        set { try! _default.put_CanReorderTabsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabview.closebuttonoverlaymode)
    public var closeButtonOverlayMode : TabViewCloseButtonOverlayMode {
        get { try! _default.get_CloseButtonOverlayModeImpl() }
        set { try! _default.put_CloseButtonOverlayModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabview.isaddtabbuttonvisible)
    public var isAddTabButtonVisible : Bool {
        get { try! _default.get_IsAddTabButtonVisibleImpl() }
        set { try! _default.put_IsAddTabButtonVisibleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabview.selectedindex)
    public var selectedIndex : Int32 {
        get { try! _default.get_SelectedIndexImpl() }
        set { try! _default.put_SelectedIndexImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabview.selecteditem)
    public var selectedItem : Any! {
        get { try! _default.get_SelectedItemImpl() }
        set { try! _default.put_SelectedItemImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabview.tabitemtemplate)
    public var tabItemTemplate : WinUI.DataTemplate! {
        get { try! _default.get_TabItemTemplateImpl() }
        set { try! _default.put_TabItemTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabview.tabitemtemplateselector)
    public var tabItemTemplateSelector : DataTemplateSelector! {
        get { try! _default.get_TabItemTemplateSelectorImpl() }
        set { try! _default.put_TabItemTemplateSelectorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabview.tabitems)
    public var tabItems : WindowsFoundation.AnyIVector<Any?>! {
        get { try! _default.get_TabItemsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabview.tabitemssource)
    public var tabItemsSource : Any! {
        get { try! _default.get_TabItemsSourceImpl() }
        set { try! _default.put_TabItemsSourceImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabview.tabstripfooter)
    public var tabStripFooter : Any! {
        get { try! _default.get_TabStripFooterImpl() }
        set { try! _default.put_TabStripFooterImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabview.tabstripfootertemplate)
    public var tabStripFooterTemplate : WinUI.DataTemplate! {
        get { try! _default.get_TabStripFooterTemplateImpl() }
        set { try! _default.put_TabStripFooterTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabview.tabstripheader)
    public var tabStripHeader : Any! {
        get { try! _default.get_TabStripHeaderImpl() }
        set { try! _default.put_TabStripHeaderImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabview.tabstripheadertemplate)
    public var tabStripHeaderTemplate : WinUI.DataTemplate! {
        get { try! _default.get_TabStripHeaderTemplateImpl() }
        set { try! _default.put_TabStripHeaderTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabview.tabwidthmode)
    public var tabWidthMode : TabViewWidthMode {
        get { try! _default.get_TabWidthModeImpl() }
        set { try! _default.put_TabWidthModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabview.addtabbuttonclick)
    public lazy var addTabButtonClick : Event<TypedEventHandler<TabView?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_AddTabButtonClickImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_AddTabButtonClickImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabview.selectionchanged)
    public lazy var selectionChanged : Event<SelectionChangedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_SelectionChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_SelectionChangedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabview.tabcloserequested)
    public lazy var tabCloseRequested : Event<TypedEventHandler<TabView?, TabViewTabCloseRequestedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_TabCloseRequestedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_TabCloseRequestedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabview.tabdragcompleted)
    public lazy var tabDragCompleted : Event<TypedEventHandler<TabView?, TabViewTabDragCompletedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_TabDragCompletedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_TabDragCompletedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabview.tabdragstarting)
    public lazy var tabDragStarting : Event<TypedEventHandler<TabView?, TabViewTabDragStartingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_TabDragStartingImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_TabDragStartingImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabview.tabdroppedoutside)
    public lazy var tabDroppedOutside : Event<TypedEventHandler<TabView?, TabViewTabDroppedOutsideEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_TabDroppedOutsideImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_TabDroppedOutsideImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabview.tabitemschanged)
    public lazy var tabItemsChanged : Event<TypedEventHandler<TabView?, IVectorChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_TabItemsChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_TabItemsChangedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabview.tabstripdragover)
    public lazy var tabStripDragOver : Event<WinUI.DragEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_TabStripDragOverImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_TabStripDragOverImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabview.tabstripdrop)
    public lazy var tabStripDrop : Event<WinUI.DragEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_TabStripDropImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_TabStripDropImpl($0)
       }
      )
    }()

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = TabView
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITabView
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITabView
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabviewitem)
open class TabViewItem : WinUI.ListViewItem {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITabViewItem
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITabViewItem
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITabViewItem>?) -> TabViewItem? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ITabViewItemFactory : __ABI_Microsoft_UI_Xaml_Controls.ITabViewItemFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.TabViewItem"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._ITabViewItemFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _ITabViewItemStatics: __ABI_Microsoft_UI_Xaml_Controls.ITabViewItemStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.TabViewItem"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabviewitem.headerproperty)
    public class var headerProperty : WinUI.DependencyProperty! {
        get { try! _ITabViewItemStatics.get_HeaderPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabviewitem.headertemplateproperty)
    public class var headerTemplateProperty : WinUI.DependencyProperty! {
        get { try! _ITabViewItemStatics.get_HeaderTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabviewitem.iconsourceproperty)
    public class var iconSourceProperty : WinUI.DependencyProperty! {
        get { try! _ITabViewItemStatics.get_IconSourcePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabviewitem.isclosableproperty)
    public class var isClosableProperty : WinUI.DependencyProperty! {
        get { try! _ITabViewItemStatics.get_IsClosablePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabviewitem.tabviewtemplatesettingsproperty)
    public class var tabViewTemplateSettingsProperty : WinUI.DependencyProperty! {
        get { try! _ITabViewItemStatics.get_TabViewTemplateSettingsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabviewitem.header)
    public var header : Any! {
        get { try! _default.get_HeaderImpl() }
        set { try! _default.put_HeaderImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabviewitem.headertemplate)
    public var headerTemplate : WinUI.DataTemplate! {
        get { try! _default.get_HeaderTemplateImpl() }
        set { try! _default.put_HeaderTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabviewitem.iconsource)
    public var iconSource : IconSource! {
        get { try! _default.get_IconSourceImpl() }
        set { try! _default.put_IconSourceImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabviewitem.isclosable)
    public var isClosable : Bool {
        get { try! _default.get_IsClosableImpl() }
        set { try! _default.put_IsClosableImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabviewitem.tabviewtemplatesettings)
    public var tabViewTemplateSettings : TabViewItemTemplateSettings! {
        get { try! _default.get_TabViewTemplateSettingsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabviewitem.closerequested)
    public lazy var closeRequested : Event<TypedEventHandler<TabViewItem?, TabViewTabCloseRequestedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_CloseRequestedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_CloseRequestedImpl($0)
       }
      )
    }()

    internal enum IContentControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
        internal typealias Class = TabViewItem
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITabViewItem
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITabViewItem
        }
    }
    internal typealias Composable = IContentControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabviewitemtemplatesettings)
open class TabViewItemTemplateSettings : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITabViewItemTemplateSettings
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITabViewItemTemplateSettings
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITabViewItemTemplateSettings>?) -> TabViewItemTemplateSettings? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ITabViewItemTemplateSettingsFactory : __ABI_Microsoft_UI_Xaml_Controls.ITabViewItemTemplateSettingsFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.TabViewItemTemplateSettings"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._ITabViewItemTemplateSettingsFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _ITabViewItemTemplateSettingsStatics: __ABI_Microsoft_UI_Xaml_Controls.ITabViewItemTemplateSettingsStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.TabViewItemTemplateSettings"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabviewitemtemplatesettings.iconelementproperty)
    public class var iconElementProperty : WinUI.DependencyProperty! {
        get { try! _ITabViewItemTemplateSettingsStatics.get_IconElementPropertyImpl() }
    }

    private static let _ITabViewItemTemplateSettingsStatics2: __ABI_Microsoft_UI_Xaml_Controls.ITabViewItemTemplateSettingsStatics2 = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.TabViewItemTemplateSettings"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabviewitemtemplatesettings.tabgeometryproperty)
    public class var tabGeometryProperty : WinUI.DependencyProperty! {
        get { try! _ITabViewItemTemplateSettingsStatics2.get_TabGeometryPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabviewitemtemplatesettings.iconelement)
    public var iconElement : IconElement! {
        get { try! _default.get_IconElementImpl() }
        set { try! _default.put_IconElementImpl(newValue) }
    }

    private lazy var _ITabViewItemTemplateSettings2: __ABI_Microsoft_UI_Xaml_Controls.ITabViewItemTemplateSettings2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabviewitemtemplatesettings.tabgeometry)
    public var tabGeometry : WinUI.Geometry! {
        get { try! _ITabViewItemTemplateSettings2.get_TabGeometryImpl() }
        set { try! _ITabViewItemTemplateSettings2.put_TabGeometryImpl(newValue) }
    }

    internal enum ITabViewItemTemplateSettings : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = TabViewItemTemplateSettings
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITabViewItemTemplateSettings
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITabViewItemTemplateSettings
        }
    }
    internal typealias Composable = ITabViewItemTemplateSettings
    deinit {
        _default = nil
        _ITabViewItemTemplateSettings2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabviewtabcloserequestedeventargs)
public final class TabViewTabCloseRequestedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITabViewTabCloseRequestedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITabViewTabCloseRequestedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITabViewTabCloseRequestedEventArgs>?) -> TabViewTabCloseRequestedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabviewtabcloserequestedeventargs.item)
    public var item : Any! {
        get { try! _default.get_ItemImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabviewtabcloserequestedeventargs.tab)
    public var tab : TabViewItem! {
        get { try! _default.get_TabImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabviewtabdragcompletedeventargs)
public final class TabViewTabDragCompletedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITabViewTabDragCompletedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITabViewTabDragCompletedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITabViewTabDragCompletedEventArgs>?) -> TabViewTabDragCompletedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabviewtabdragcompletedeventargs.dropresult)
    public var dropResult : UWP.DataPackageOperation {
        get { try! _default.get_DropResultImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabviewtabdragcompletedeventargs.item)
    public var item : Any! {
        get { try! _default.get_ItemImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabviewtabdragcompletedeventargs.tab)
    public var tab : TabViewItem! {
        get { try! _default.get_TabImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabviewtabdragstartingeventargs)
public final class TabViewTabDragStartingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITabViewTabDragStartingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITabViewTabDragStartingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITabViewTabDragStartingEventArgs>?) -> TabViewTabDragStartingEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabviewtabdragstartingeventargs.cancel)
    public var cancel : Bool {
        get { try! _default.get_CancelImpl() }
        set { try! _default.put_CancelImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabviewtabdragstartingeventargs.data)
    public var data : UWP.DataPackage! {
        get { try! _default.get_DataImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabviewtabdragstartingeventargs.item)
    public var item : Any! {
        get { try! _default.get_ItemImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabviewtabdragstartingeventargs.tab)
    public var tab : TabViewItem! {
        get { try! _default.get_TabImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabviewtabdroppedoutsideeventargs)
public final class TabViewTabDroppedOutsideEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITabViewTabDroppedOutsideEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITabViewTabDroppedOutsideEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITabViewTabDroppedOutsideEventArgs>?) -> TabViewTabDroppedOutsideEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabviewtabdroppedoutsideeventargs.item)
    public var item : Any! {
        get { try! _default.get_ItemImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tabviewtabdroppedoutsideeventargs.tab)
    public var tab : TabViewItem! {
        get { try! _default.get_TabImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip)
open class TeachingTip : WinUI.ContentControl {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITeachingTip
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTip
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTip>?) -> TeachingTip? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ITeachingTipFactory : __ABI_Microsoft_UI_Xaml_Controls.ITeachingTipFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.TeachingTip"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._ITeachingTipFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _ITeachingTipStatics: __ABI_Microsoft_UI_Xaml_Controls.ITeachingTipStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.TeachingTip"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.actionbuttoncommandparameterproperty)
    public class var actionButtonCommandParameterProperty : WinUI.DependencyProperty! {
        get { try! _ITeachingTipStatics.get_ActionButtonCommandParameterPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.actionbuttoncommandproperty)
    public class var actionButtonCommandProperty : WinUI.DependencyProperty! {
        get { try! _ITeachingTipStatics.get_ActionButtonCommandPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.actionbuttoncontentproperty)
    public class var actionButtonContentProperty : WinUI.DependencyProperty! {
        get { try! _ITeachingTipStatics.get_ActionButtonContentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.actionbuttonstyleproperty)
    public class var actionButtonStyleProperty : WinUI.DependencyProperty! {
        get { try! _ITeachingTipStatics.get_ActionButtonStylePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.closebuttoncommandparameterproperty)
    public class var closeButtonCommandParameterProperty : WinUI.DependencyProperty! {
        get { try! _ITeachingTipStatics.get_CloseButtonCommandParameterPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.closebuttoncommandproperty)
    public class var closeButtonCommandProperty : WinUI.DependencyProperty! {
        get { try! _ITeachingTipStatics.get_CloseButtonCommandPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.closebuttoncontentproperty)
    public class var closeButtonContentProperty : WinUI.DependencyProperty! {
        get { try! _ITeachingTipStatics.get_CloseButtonContentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.closebuttonstyleproperty)
    public class var closeButtonStyleProperty : WinUI.DependencyProperty! {
        get { try! _ITeachingTipStatics.get_CloseButtonStylePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.herocontentplacementproperty)
    public class var heroContentPlacementProperty : WinUI.DependencyProperty! {
        get { try! _ITeachingTipStatics.get_HeroContentPlacementPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.herocontentproperty)
    public class var heroContentProperty : WinUI.DependencyProperty! {
        get { try! _ITeachingTipStatics.get_HeroContentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.iconsourceproperty)
    public class var iconSourceProperty : WinUI.DependencyProperty! {
        get { try! _ITeachingTipStatics.get_IconSourcePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.islightdismissenabledproperty)
    public class var isLightDismissEnabledProperty : WinUI.DependencyProperty! {
        get { try! _ITeachingTipStatics.get_IsLightDismissEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.isopenproperty)
    public class var isOpenProperty : WinUI.DependencyProperty! {
        get { try! _ITeachingTipStatics.get_IsOpenPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.placementmarginproperty)
    public class var placementMarginProperty : WinUI.DependencyProperty! {
        get { try! _ITeachingTipStatics.get_PlacementMarginPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.preferredplacementproperty)
    public class var preferredPlacementProperty : WinUI.DependencyProperty! {
        get { try! _ITeachingTipStatics.get_PreferredPlacementPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.shouldconstraintorootboundsproperty)
    public class var shouldConstrainToRootBoundsProperty : WinUI.DependencyProperty! {
        get { try! _ITeachingTipStatics.get_ShouldConstrainToRootBoundsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.subtitleproperty)
    public class var subtitleProperty : WinUI.DependencyProperty! {
        get { try! _ITeachingTipStatics.get_SubtitlePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.tailvisibilityproperty)
    public class var tailVisibilityProperty : WinUI.DependencyProperty! {
        get { try! _ITeachingTipStatics.get_TailVisibilityPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.targetproperty)
    public class var targetProperty : WinUI.DependencyProperty! {
        get { try! _ITeachingTipStatics.get_TargetPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.templatesettingsproperty)
    public class var templateSettingsProperty : WinUI.DependencyProperty! {
        get { try! _ITeachingTipStatics.get_TemplateSettingsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.titleproperty)
    public class var titleProperty : WinUI.DependencyProperty! {
        get { try! _ITeachingTipStatics.get_TitlePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.actionbuttoncommand)
    public var actionButtonCommand : WinUI.AnyICommand! {
        get { try! _default.get_ActionButtonCommandImpl() }
        set { try! _default.put_ActionButtonCommandImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.actionbuttoncommandparameter)
    public var actionButtonCommandParameter : Any! {
        get { try! _default.get_ActionButtonCommandParameterImpl() }
        set { try! _default.put_ActionButtonCommandParameterImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.actionbuttoncontent)
    public var actionButtonContent : Any! {
        get { try! _default.get_ActionButtonContentImpl() }
        set { try! _default.put_ActionButtonContentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.actionbuttonstyle)
    public var actionButtonStyle : WinUI.Style! {
        get { try! _default.get_ActionButtonStyleImpl() }
        set { try! _default.put_ActionButtonStyleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.closebuttoncommand)
    public var closeButtonCommand : WinUI.AnyICommand! {
        get { try! _default.get_CloseButtonCommandImpl() }
        set { try! _default.put_CloseButtonCommandImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.closebuttoncommandparameter)
    public var closeButtonCommandParameter : Any! {
        get { try! _default.get_CloseButtonCommandParameterImpl() }
        set { try! _default.put_CloseButtonCommandParameterImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.closebuttoncontent)
    public var closeButtonContent : Any! {
        get { try! _default.get_CloseButtonContentImpl() }
        set { try! _default.put_CloseButtonContentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.closebuttonstyle)
    public var closeButtonStyle : WinUI.Style! {
        get { try! _default.get_CloseButtonStyleImpl() }
        set { try! _default.put_CloseButtonStyleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.herocontent)
    public var heroContent : WinUI.UIElement! {
        get { try! _default.get_HeroContentImpl() }
        set { try! _default.put_HeroContentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.herocontentplacement)
    public var heroContentPlacement : TeachingTipHeroContentPlacementMode {
        get { try! _default.get_HeroContentPlacementImpl() }
        set { try! _default.put_HeroContentPlacementImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.iconsource)
    public var iconSource : IconSource! {
        get { try! _default.get_IconSourceImpl() }
        set { try! _default.put_IconSourceImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.islightdismissenabled)
    public var isLightDismissEnabled : Bool {
        get { try! _default.get_IsLightDismissEnabledImpl() }
        set { try! _default.put_IsLightDismissEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.isopen)
    public var isOpen : Bool {
        get { try! _default.get_IsOpenImpl() }
        set { try! _default.put_IsOpenImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.placementmargin)
    public var placementMargin : WinUI.Thickness {
        get { try! _default.get_PlacementMarginImpl() }
        set { try! _default.put_PlacementMarginImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.preferredplacement)
    public var preferredPlacement : TeachingTipPlacementMode {
        get { try! _default.get_PreferredPlacementImpl() }
        set { try! _default.put_PreferredPlacementImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.shouldconstraintorootbounds)
    public var shouldConstrainToRootBounds : Bool {
        get { try! _default.get_ShouldConstrainToRootBoundsImpl() }
        set { try! _default.put_ShouldConstrainToRootBoundsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.subtitle)
    public var subtitle : String {
        get { try! _default.get_SubtitleImpl() }
        set { try! _default.put_SubtitleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.tailvisibility)
    public var tailVisibility : TeachingTipTailVisibility {
        get { try! _default.get_TailVisibilityImpl() }
        set { try! _default.put_TailVisibilityImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.target)
    public var target : WinUI.FrameworkElement! {
        get { try! _default.get_TargetImpl() }
        set { try! _default.put_TargetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.templatesettings)
    public var templateSettings : TeachingTipTemplateSettings! {
        get { try! _default.get_TemplateSettingsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.title)
    public var title : String {
        get { try! _default.get_TitleImpl() }
        set { try! _default.put_TitleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.actionbuttonclick)
    public lazy var actionButtonClick : Event<TypedEventHandler<TeachingTip?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ActionButtonClickImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ActionButtonClickImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.closebuttonclick)
    public lazy var closeButtonClick : Event<TypedEventHandler<TeachingTip?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_CloseButtonClickImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_CloseButtonClickImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.closed)
    public lazy var closed : Event<TypedEventHandler<TeachingTip?, TeachingTipClosedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ClosedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ClosedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtip.closing)
    public lazy var closing : Event<TypedEventHandler<TeachingTip?, TeachingTipClosingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ClosingImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ClosingImpl($0)
       }
      )
    }()

    internal enum IContentControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
        internal typealias Class = TeachingTip
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTip
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITeachingTip
        }
    }
    internal typealias Composable = IContentControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtipclosedeventargs)
public final class TeachingTipClosedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITeachingTipClosedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipClosedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipClosedEventArgs>?) -> TeachingTipClosedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtipclosedeventargs.reason)
    public var reason : TeachingTipCloseReason {
        get { try! _default.get_ReasonImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtipclosingeventargs)
public final class TeachingTipClosingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITeachingTipClosingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipClosingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipClosingEventArgs>?) -> TeachingTipClosingEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtipclosingeventargs.getdeferral)
    public func getDeferral() throws -> WindowsFoundation.Deferral! {
        try _default.GetDeferralImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtipclosingeventargs.cancel)
    public var cancel : Bool {
        get { try! _default.get_CancelImpl() }
        set { try! _default.put_CancelImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtipclosingeventargs.reason)
    public var reason : TeachingTipCloseReason {
        get { try! _default.get_ReasonImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtiptemplatesettings)
open class TeachingTipTemplateSettings : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITeachingTipTemplateSettings
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipTemplateSettings
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipTemplateSettings>?) -> TeachingTipTemplateSettings? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ITeachingTipTemplateSettingsFactory : __ABI_Microsoft_UI_Xaml_Controls.ITeachingTipTemplateSettingsFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.TeachingTipTemplateSettings"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._ITeachingTipTemplateSettingsFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _ITeachingTipTemplateSettingsStatics: __ABI_Microsoft_UI_Xaml_Controls.ITeachingTipTemplateSettingsStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.TeachingTipTemplateSettings"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtiptemplatesettings.iconelementproperty)
    public class var iconElementProperty : WinUI.DependencyProperty! {
        get { try! _ITeachingTipTemplateSettingsStatics.get_IconElementPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtiptemplatesettings.toplefthighlightmarginproperty)
    public class var topLeftHighlightMarginProperty : WinUI.DependencyProperty! {
        get { try! _ITeachingTipTemplateSettingsStatics.get_TopLeftHighlightMarginPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtiptemplatesettings.toprighthighlightmarginproperty)
    public class var topRightHighlightMarginProperty : WinUI.DependencyProperty! {
        get { try! _ITeachingTipTemplateSettingsStatics.get_TopRightHighlightMarginPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtiptemplatesettings.iconelement)
    public var iconElement : IconElement! {
        get { try! _default.get_IconElementImpl() }
        set { try! _default.put_IconElementImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtiptemplatesettings.toplefthighlightmargin)
    public var topLeftHighlightMargin : WinUI.Thickness {
        get { try! _default.get_TopLeftHighlightMarginImpl() }
        set { try! _default.put_TopLeftHighlightMarginImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.teachingtiptemplatesettings.toprighthighlightmargin)
    public var topRightHighlightMargin : WinUI.Thickness {
        get { try! _default.get_TopRightHighlightMarginImpl() }
        set { try! _default.put_TopRightHighlightMarginImpl(newValue) }
    }

    internal enum ITeachingTipTemplateSettings : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = TeachingTipTemplateSettings
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITeachingTipTemplateSettings
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITeachingTipTemplateSettings
        }
    }
    internal typealias Composable = ITeachingTipTemplateSettings
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock)
public final class TextBlock : WinUI.FrameworkElement {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITextBlock
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock>?) -> TextBlock? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.TextBlock")))
    }

    private static let _ITextBlockStatics: __ABI_Microsoft_UI_Xaml_Controls.ITextBlockStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.TextBlock"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.characterspacingproperty)
    public static var characterSpacingProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_CharacterSpacingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.fontfamilyproperty)
    public static var fontFamilyProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_FontFamilyPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.fontsizeproperty)
    public static var fontSizeProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_FontSizePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.fontstretchproperty)
    public static var fontStretchProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_FontStretchPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.fontstyleproperty)
    public static var fontStyleProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_FontStylePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.fontweightproperty)
    public static var fontWeightProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_FontWeightPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.foregroundproperty)
    public static var foregroundProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_ForegroundPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.horizontaltextalignmentproperty)
    public static var horizontalTextAlignmentProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_HorizontalTextAlignmentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.iscolorfontenabledproperty)
    public static var isColorFontEnabledProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_IsColorFontEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.istextscalefactorenabledproperty)
    public static var isTextScaleFactorEnabledProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_IsTextScaleFactorEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.istextselectionenabledproperty)
    public static var isTextSelectionEnabledProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_IsTextSelectionEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.istexttrimmedproperty)
    public static var isTextTrimmedProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_IsTextTrimmedPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.lineheightproperty)
    public static var lineHeightProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_LineHeightPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.linestackingstrategyproperty)
    public static var lineStackingStrategyProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_LineStackingStrategyPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.maxlinesproperty)
    public static var maxLinesProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_MaxLinesPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.opticalmarginalignmentproperty)
    public static var opticalMarginAlignmentProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_OpticalMarginAlignmentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.paddingproperty)
    public static var paddingProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_PaddingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.selectedtextproperty)
    public static var selectedTextProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_SelectedTextPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.selectionflyoutproperty)
    public static var selectionFlyoutProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_SelectionFlyoutPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.selectionhighlightcolorproperty)
    public static var selectionHighlightColorProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_SelectionHighlightColorPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.textalignmentproperty)
    public static var textAlignmentProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_TextAlignmentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.textdecorationsproperty)
    public static var textDecorationsProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_TextDecorationsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.textlineboundsproperty)
    public static var textLineBoundsProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_TextLineBoundsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.textproperty)
    public static var textProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_TextPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.textreadingorderproperty)
    public static var textReadingOrderProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_TextReadingOrderPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.texttrimmingproperty)
    public static var textTrimmingProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_TextTrimmingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.textwrappingproperty)
    public static var textWrappingProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_TextWrappingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.selectall)
    public func selectAll() throws {
        try _default.SelectAllImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.select)
    public func select(_ start: WinUI.TextPointer!, _ end: WinUI.TextPointer!) throws {
        try _default.SelectImpl(start, end)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.getalphamask)
    public func getAlphaMask() throws -> WinAppSDK.CompositionBrush! {
        try _default.GetAlphaMaskImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.copyselectiontoclipboard)
    public func copySelectionToClipboard() throws {
        try _default.CopySelectionToClipboardImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.baselineoffset)
    public var baselineOffset : Double {
        get { try! _default.get_BaselineOffsetImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.characterspacing)
    public var characterSpacing : Int32 {
        get { try! _default.get_CharacterSpacingImpl() }
        set { try! _default.put_CharacterSpacingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.contentend)
    public var contentEnd : WinUI.TextPointer! {
        get { try! _default.get_ContentEndImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.contentstart)
    public var contentStart : WinUI.TextPointer! {
        get { try! _default.get_ContentStartImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.fontfamily)
    public var fontFamily : WinUI.FontFamily! {
        get { try! _default.get_FontFamilyImpl() }
        set { try! _default.put_FontFamilyImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.fontsize)
    public var fontSize : Double {
        get { try! _default.get_FontSizeImpl() }
        set { try! _default.put_FontSizeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.fontstretch)
    public var fontStretch : UWP.FontStretch {
        get { try! _default.get_FontStretchImpl() }
        set { try! _default.put_FontStretchImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.fontstyle)
    public var fontStyle : UWP.FontStyle {
        get { try! _default.get_FontStyleImpl() }
        set { try! _default.put_FontStyleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.fontweight)
    public var fontWeight : UWP.FontWeight {
        get { try! _default.get_FontWeightImpl() }
        set { try! _default.put_FontWeightImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.foreground)
    public var foreground : WinUI.Brush! {
        get { try! _default.get_ForegroundImpl() }
        set { try! _default.put_ForegroundImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.horizontaltextalignment)
    public var horizontalTextAlignment : WinUI.TextAlignment {
        get { try! _default.get_HorizontalTextAlignmentImpl() }
        set { try! _default.put_HorizontalTextAlignmentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.inlines)
    public var inlines : WinUI.InlineCollection! {
        get { try! _default.get_InlinesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.iscolorfontenabled)
    public var isColorFontEnabled : Bool {
        get { try! _default.get_IsColorFontEnabledImpl() }
        set { try! _default.put_IsColorFontEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.istextscalefactorenabled)
    public var isTextScaleFactorEnabled : Bool {
        get { try! _default.get_IsTextScaleFactorEnabledImpl() }
        set { try! _default.put_IsTextScaleFactorEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.istextselectionenabled)
    public var isTextSelectionEnabled : Bool {
        get { try! _default.get_IsTextSelectionEnabledImpl() }
        set { try! _default.put_IsTextSelectionEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.istexttrimmed)
    public var isTextTrimmed : Bool {
        get { try! _default.get_IsTextTrimmedImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.lineheight)
    public var lineHeight : Double {
        get { try! _default.get_LineHeightImpl() }
        set { try! _default.put_LineHeightImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.linestackingstrategy)
    public var lineStackingStrategy : WinUI.LineStackingStrategy {
        get { try! _default.get_LineStackingStrategyImpl() }
        set { try! _default.put_LineStackingStrategyImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.maxlines)
    public var maxLines : Int32 {
        get { try! _default.get_MaxLinesImpl() }
        set { try! _default.put_MaxLinesImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.opticalmarginalignment)
    public var opticalMarginAlignment : WinUI.OpticalMarginAlignment {
        get { try! _default.get_OpticalMarginAlignmentImpl() }
        set { try! _default.put_OpticalMarginAlignmentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.padding)
    public var padding : WinUI.Thickness {
        get { try! _default.get_PaddingImpl() }
        set { try! _default.put_PaddingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.selectedtext)
    public var selectedText : String {
        get { try! _default.get_SelectedTextImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.selectionend)
    public var selectionEnd : WinUI.TextPointer! {
        get { try! _default.get_SelectionEndImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.selectionflyout)
    public var selectionFlyout : WinUI.FlyoutBase! {
        get { try! _default.get_SelectionFlyoutImpl() }
        set { try! _default.put_SelectionFlyoutImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.selectionhighlightcolor)
    public var selectionHighlightColor : WinUI.SolidColorBrush! {
        get { try! _default.get_SelectionHighlightColorImpl() }
        set { try! _default.put_SelectionHighlightColorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.selectionstart)
    public var selectionStart : WinUI.TextPointer! {
        get { try! _default.get_SelectionStartImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.text)
    public var text : String {
        get { try! _default.get_TextImpl() }
        set { try! _default.put_TextImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.textalignment)
    public var textAlignment : WinUI.TextAlignment {
        get { try! _default.get_TextAlignmentImpl() }
        set { try! _default.put_TextAlignmentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.textdecorations)
    public var textDecorations : UWP.TextDecorations {
        get { try! _default.get_TextDecorationsImpl() }
        set { try! _default.put_TextDecorationsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.texthighlighters)
    public var textHighlighters : WindowsFoundation.AnyIVector<WinUI.TextHighlighter?>! {
        get { try! _default.get_TextHighlightersImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.textlinebounds)
    public var textLineBounds : WinUI.TextLineBounds {
        get { try! _default.get_TextLineBoundsImpl() }
        set { try! _default.put_TextLineBoundsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.textreadingorder)
    public var textReadingOrder : WinUI.TextReadingOrder {
        get { try! _default.get_TextReadingOrderImpl() }
        set { try! _default.put_TextReadingOrderImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.texttrimming)
    public var textTrimming : WinUI.TextTrimming {
        get { try! _default.get_TextTrimmingImpl() }
        set { try! _default.put_TextTrimmingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.textwrapping)
    public var textWrapping : WinUI.TextWrapping {
        get { try! _default.get_TextWrappingImpl() }
        set { try! _default.put_TextWrappingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.contextmenuopening)
    public lazy var contextMenuOpening : Event<ContextMenuOpeningEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ContextMenuOpeningImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ContextMenuOpeningImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.istexttrimmedchanged)
    public lazy var isTextTrimmedChanged : Event<TypedEventHandler<TextBlock?, IsTextTrimmedChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_IsTextTrimmedChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_IsTextTrimmedChangedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.selectionchanged)
    public lazy var selectionChanged : Event<WinUI.RoutedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_SelectionChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_SelectionChangedImpl($0)
       }
      )
    }()

    internal enum IFrameworkElementOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
        internal typealias Class = TextBlock
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITextBlock
        }
    }
    internal typealias Composable = IFrameworkElementOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox)
open class TextBox : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITextBox
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox>?) -> TextBox? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ITextBoxFactory : __ABI_Microsoft_UI_Xaml_Controls.ITextBoxFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.TextBox"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._ITextBoxFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _ITextBoxStatics: __ABI_Microsoft_UI_Xaml_Controls.ITextBoxStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.TextBox"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.acceptsreturnproperty)
    public class var acceptsReturnProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_AcceptsReturnPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.canpasteclipboardcontentproperty)
    public class var canPasteClipboardContentProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_CanPasteClipboardContentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.canredoproperty)
    public class var canRedoProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_CanRedoPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.canundoproperty)
    public class var canUndoProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_CanUndoPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.charactercasingproperty)
    public class var characterCasingProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_CharacterCasingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.descriptionproperty)
    public class var descriptionProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_DescriptionPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.desiredcandidatewindowalignmentproperty)
    public class var desiredCandidateWindowAlignmentProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_DesiredCandidateWindowAlignmentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.headerproperty)
    public class var headerProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_HeaderPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.headertemplateproperty)
    public class var headerTemplateProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_HeaderTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.horizontaltextalignmentproperty)
    public class var horizontalTextAlignmentProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_HorizontalTextAlignmentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.inputscopeproperty)
    public class var inputScopeProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_InputScopePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.iscolorfontenabledproperty)
    public class var isColorFontEnabledProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_IsColorFontEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.isreadonlyproperty)
    public class var isReadOnlyProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_IsReadOnlyPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.isspellcheckenabledproperty)
    public class var isSpellCheckEnabledProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_IsSpellCheckEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.istextpredictionenabledproperty)
    public class var isTextPredictionEnabledProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_IsTextPredictionEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.maxlengthproperty)
    public class var maxLengthProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_MaxLengthPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.placeholderforegroundproperty)
    public class var placeholderForegroundProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_PlaceholderForegroundPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.placeholdertextproperty)
    public class var placeholderTextProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_PlaceholderTextPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.preventkeyboarddisplayonprogrammaticfocusproperty)
    public class var preventKeyboardDisplayOnProgrammaticFocusProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_PreventKeyboardDisplayOnProgrammaticFocusPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.proofingmenuflyoutproperty)
    public class var proofingMenuFlyoutProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_ProofingMenuFlyoutPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.selectionflyoutproperty)
    public class var selectionFlyoutProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_SelectionFlyoutPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.selectionhighlightcolorproperty)
    public class var selectionHighlightColorProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_SelectionHighlightColorPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.selectionhighlightcolorwhennotfocusedproperty)
    public class var selectionHighlightColorWhenNotFocusedProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_SelectionHighlightColorWhenNotFocusedPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.textalignmentproperty)
    public class var textAlignmentProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_TextAlignmentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.textproperty)
    public class var textProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_TextPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.textreadingorderproperty)
    public class var textReadingOrderProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_TextReadingOrderPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.textwrappingproperty)
    public class var textWrappingProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_TextWrappingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.select)
    public func select(_ start: Int32, _ length: Int32) throws {
        try _default.SelectImpl(start, length)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.selectall)
    public func selectAll() throws {
        try _default.SelectAllImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.getrectfromcharacterindex)
    public func getRectFromCharacterIndex(_ charIndex: Int32, _ trailingEdge: Bool) throws -> WindowsFoundation.Rect {
        try _default.GetRectFromCharacterIndexImpl(charIndex, trailingEdge)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.getlinguisticalternativesasync)
    public func getLinguisticAlternativesAsync() throws -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<String>?>! {
        try _default.GetLinguisticAlternativesAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.undo)
    public func undo() throws {
        try _default.UndoImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.redo)
    public func redo() throws {
        try _default.RedoImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.pastefromclipboard)
    public func pasteFromClipboard() throws {
        try _default.PasteFromClipboardImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.copyselectiontoclipboard)
    public func copySelectionToClipboard() throws {
        try _default.CopySelectionToClipboardImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.cutselectiontoclipboard)
    public func cutSelectionToClipboard() throws {
        try _default.CutSelectionToClipboardImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.clearundoredohistory)
    public func clearUndoRedoHistory() throws {
        try _default.ClearUndoRedoHistoryImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.acceptsreturn)
    public var acceptsReturn : Bool {
        get { try! _default.get_AcceptsReturnImpl() }
        set { try! _default.put_AcceptsReturnImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.canpasteclipboardcontent)
    public var canPasteClipboardContent : Bool {
        get { try! _default.get_CanPasteClipboardContentImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.canredo)
    public var canRedo : Bool {
        get { try! _default.get_CanRedoImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.canundo)
    public var canUndo : Bool {
        get { try! _default.get_CanUndoImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.charactercasing)
    public var characterCasing : CharacterCasing {
        get { try! _default.get_CharacterCasingImpl() }
        set { try! _default.put_CharacterCasingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.description)
    public var description : Any! {
        get { try! _default.get_DescriptionImpl() }
        set { try! _default.put_DescriptionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.desiredcandidatewindowalignment)
    public var desiredCandidateWindowAlignment : CandidateWindowAlignment {
        get { try! _default.get_DesiredCandidateWindowAlignmentImpl() }
        set { try! _default.put_DesiredCandidateWindowAlignmentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.header)
    public var header : Any! {
        get { try! _default.get_HeaderImpl() }
        set { try! _default.put_HeaderImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.headertemplate)
    public var headerTemplate : WinUI.DataTemplate! {
        get { try! _default.get_HeaderTemplateImpl() }
        set { try! _default.put_HeaderTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.horizontaltextalignment)
    public var horizontalTextAlignment : WinUI.TextAlignment {
        get { try! _default.get_HorizontalTextAlignmentImpl() }
        set { try! _default.put_HorizontalTextAlignmentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.inputscope)
    public var inputScope : WinUI.InputScope! {
        get { try! _default.get_InputScopeImpl() }
        set { try! _default.put_InputScopeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.iscolorfontenabled)
    public var isColorFontEnabled : Bool {
        get { try! _default.get_IsColorFontEnabledImpl() }
        set { try! _default.put_IsColorFontEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.isreadonly)
    public var isReadOnly : Bool {
        get { try! _default.get_IsReadOnlyImpl() }
        set { try! _default.put_IsReadOnlyImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.isspellcheckenabled)
    public var isSpellCheckEnabled : Bool {
        get { try! _default.get_IsSpellCheckEnabledImpl() }
        set { try! _default.put_IsSpellCheckEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.istextpredictionenabled)
    public var isTextPredictionEnabled : Bool {
        get { try! _default.get_IsTextPredictionEnabledImpl() }
        set { try! _default.put_IsTextPredictionEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.maxlength)
    public var maxLength : Int32 {
        get { try! _default.get_MaxLengthImpl() }
        set { try! _default.put_MaxLengthImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.placeholderforeground)
    public var placeholderForeground : WinUI.Brush! {
        get { try! _default.get_PlaceholderForegroundImpl() }
        set { try! _default.put_PlaceholderForegroundImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.placeholdertext)
    public var placeholderText : String {
        get { try! _default.get_PlaceholderTextImpl() }
        set { try! _default.put_PlaceholderTextImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.preventkeyboarddisplayonprogrammaticfocus)
    public var preventKeyboardDisplayOnProgrammaticFocus : Bool {
        get { try! _default.get_PreventKeyboardDisplayOnProgrammaticFocusImpl() }
        set { try! _default.put_PreventKeyboardDisplayOnProgrammaticFocusImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.proofingmenuflyout)
    public var proofingMenuFlyout : WinUI.FlyoutBase! {
        get { try! _default.get_ProofingMenuFlyoutImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.selectedtext)
    public var selectedText : String {
        get { try! _default.get_SelectedTextImpl() }
        set { try! _default.put_SelectedTextImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.selectionflyout)
    public var selectionFlyout : WinUI.FlyoutBase! {
        get { try! _default.get_SelectionFlyoutImpl() }
        set { try! _default.put_SelectionFlyoutImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.selectionhighlightcolor)
    public var selectionHighlightColor : WinUI.SolidColorBrush! {
        get { try! _default.get_SelectionHighlightColorImpl() }
        set { try! _default.put_SelectionHighlightColorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.selectionhighlightcolorwhennotfocused)
    public var selectionHighlightColorWhenNotFocused : WinUI.SolidColorBrush! {
        get { try! _default.get_SelectionHighlightColorWhenNotFocusedImpl() }
        set { try! _default.put_SelectionHighlightColorWhenNotFocusedImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.selectionlength)
    public var selectionLength : Int32 {
        get { try! _default.get_SelectionLengthImpl() }
        set { try! _default.put_SelectionLengthImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.selectionstart)
    public var selectionStart : Int32 {
        get { try! _default.get_SelectionStartImpl() }
        set { try! _default.put_SelectionStartImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.text)
    public var text : String {
        get { try! _default.get_TextImpl() }
        set { try! _default.put_TextImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.textalignment)
    public var textAlignment : WinUI.TextAlignment {
        get { try! _default.get_TextAlignmentImpl() }
        set { try! _default.put_TextAlignmentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.textreadingorder)
    public var textReadingOrder : WinUI.TextReadingOrder {
        get { try! _default.get_TextReadingOrderImpl() }
        set { try! _default.put_TextReadingOrderImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.textwrapping)
    public var textWrapping : WinUI.TextWrapping {
        get { try! _default.get_TextWrappingImpl() }
        set { try! _default.put_TextWrappingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.beforetextchanging)
    public lazy var beforeTextChanging : Event<TypedEventHandler<TextBox?, TextBoxBeforeTextChangingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_BeforeTextChangingImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_BeforeTextChangingImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.candidatewindowboundschanged)
    public lazy var candidateWindowBoundsChanged : Event<TypedEventHandler<TextBox?, CandidateWindowBoundsChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_CandidateWindowBoundsChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_CandidateWindowBoundsChangedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.contextmenuopening)
    public lazy var contextMenuOpening : Event<ContextMenuOpeningEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ContextMenuOpeningImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ContextMenuOpeningImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.copyingtoclipboard)
    public lazy var copyingToClipboard : Event<TypedEventHandler<TextBox?, TextControlCopyingToClipboardEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_CopyingToClipboardImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_CopyingToClipboardImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.cuttingtoclipboard)
    public lazy var cuttingToClipboard : Event<TypedEventHandler<TextBox?, TextControlCuttingToClipboardEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_CuttingToClipboardImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_CuttingToClipboardImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.paste)
    public lazy var paste : Event<TextControlPasteEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PasteImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PasteImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.selectionchanged)
    public lazy var selectionChanged : Event<WinUI.RoutedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_SelectionChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_SelectionChangedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.selectionchanging)
    public lazy var selectionChanging : Event<TypedEventHandler<TextBox?, TextBoxSelectionChangingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_SelectionChangingImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_SelectionChangingImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.textchanged)
    public lazy var textChanged : Event<TextChangedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_TextChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_TextChangedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.textchanging)
    public lazy var textChanging : Event<TypedEventHandler<TextBox?, TextBoxTextChangingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_TextChangingImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_TextChangingImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.textcompositionchanged)
    public lazy var textCompositionChanged : Event<TypedEventHandler<TextBox?, TextCompositionChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_TextCompositionChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_TextCompositionChangedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.textcompositionended)
    public lazy var textCompositionEnded : Event<TypedEventHandler<TextBox?, TextCompositionEndedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_TextCompositionEndedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_TextCompositionEndedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.textcompositionstarted)
    public lazy var textCompositionStarted : Event<TypedEventHandler<TextBox?, TextCompositionStartedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_TextCompositionStartedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_TextCompositionStartedImpl($0)
       }
      )
    }()

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = TextBox
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITextBox
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textboxbeforetextchangingeventargs)
public final class TextBoxBeforeTextChangingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITextBoxBeforeTextChangingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxBeforeTextChangingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxBeforeTextChangingEventArgs>?) -> TextBoxBeforeTextChangingEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textboxbeforetextchangingeventargs.cancel)
    public var cancel : Bool {
        get { try! _default.get_CancelImpl() }
        set { try! _default.put_CancelImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textboxbeforetextchangingeventargs.newtext)
    public var newText : String {
        get { try! _default.get_NewTextImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textboxselectionchangingeventargs)
public final class TextBoxSelectionChangingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITextBoxSelectionChangingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxSelectionChangingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxSelectionChangingEventArgs>?) -> TextBoxSelectionChangingEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textboxselectionchangingeventargs.cancel)
    public var cancel : Bool {
        get { try! _default.get_CancelImpl() }
        set { try! _default.put_CancelImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textboxselectionchangingeventargs.selectionlength)
    public var selectionLength : Int32 {
        get { try! _default.get_SelectionLengthImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textboxselectionchangingeventargs.selectionstart)
    public var selectionStart : Int32 {
        get { try! _default.get_SelectionStartImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textboxtextchangingeventargs)
public final class TextBoxTextChangingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITextBoxTextChangingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxTextChangingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxTextChangingEventArgs>?) -> TextBoxTextChangingEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textboxtextchangingeventargs.iscontentchanging)
    public var isContentChanging : Bool {
        get { try! _default.get_IsContentChangingImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textchangedeventargs)
public final class TextChangedEventArgs : WinUI.RoutedEventArgs {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITextChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextChangedEventArgs>?) -> TextChangedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textcommandbarflyout)
open class TextCommandBarFlyout : WinUI.CommandBarFlyout {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITextCommandBarFlyout
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextCommandBarFlyout
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextCommandBarFlyout>?) -> TextCommandBarFlyout? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ITextCommandBarFlyoutFactory : __ABI_Microsoft_UI_Xaml_Controls.ITextCommandBarFlyoutFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.TextCommandBarFlyout"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._ITextCommandBarFlyoutFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    internal enum IFlyoutBaseOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IFlyoutBaseOverrides
        internal typealias Class = TextCommandBarFlyout
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextCommandBarFlyout
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITextCommandBarFlyout
        }
    }
    internal typealias Composable = IFlyoutBaseOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textcompositionchangedeventargs)
public final class TextCompositionChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITextCompositionChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextCompositionChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextCompositionChangedEventArgs>?) -> TextCompositionChangedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textcompositionchangedeventargs.length)
    public var length : Int32 {
        get { try! _default.get_LengthImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textcompositionchangedeventargs.startindex)
    public var startIndex : Int32 {
        get { try! _default.get_StartIndexImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textcompositionendedeventargs)
public final class TextCompositionEndedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITextCompositionEndedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextCompositionEndedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextCompositionEndedEventArgs>?) -> TextCompositionEndedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textcompositionendedeventargs.length)
    public var length : Int32 {
        get { try! _default.get_LengthImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textcompositionendedeventargs.startindex)
    public var startIndex : Int32 {
        get { try! _default.get_StartIndexImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textcompositionstartedeventargs)
public final class TextCompositionStartedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITextCompositionStartedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextCompositionStartedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextCompositionStartedEventArgs>?) -> TextCompositionStartedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textcompositionstartedeventargs.length)
    public var length : Int32 {
        get { try! _default.get_LengthImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textcompositionstartedeventargs.startindex)
    public var startIndex : Int32 {
        get { try! _default.get_StartIndexImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textcontrolcopyingtoclipboardeventargs)
public final class TextControlCopyingToClipboardEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITextControlCopyingToClipboardEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextControlCopyingToClipboardEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextControlCopyingToClipboardEventArgs>?) -> TextControlCopyingToClipboardEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textcontrolcopyingtoclipboardeventargs.handled)
    public var handled : Bool {
        get { try! _default.get_HandledImpl() }
        set { try! _default.put_HandledImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textcontrolcuttingtoclipboardeventargs)
public final class TextControlCuttingToClipboardEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITextControlCuttingToClipboardEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextControlCuttingToClipboardEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextControlCuttingToClipboardEventArgs>?) -> TextControlCuttingToClipboardEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textcontrolcuttingtoclipboardeventargs.handled)
    public var handled : Bool {
        get { try! _default.get_HandledImpl() }
        set { try! _default.put_HandledImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textcontrolpasteeventargs)
public final class TextControlPasteEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITextControlPasteEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextControlPasteEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextControlPasteEventArgs>?) -> TextControlPasteEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textcontrolpasteeventargs.handled)
    public var handled : Bool {
        get { try! _default.get_HandledImpl() }
        set { try! _default.put_HandledImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.timepickedeventargs)
public final class TimePickedEventArgs : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITimePickedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITimePickedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITimePickedEventArgs>?) -> TimePickedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.TimePickedEventArgs")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.timepickedeventargs.newtime)
    public var newTime : WindowsFoundation.TimeSpan {
        get { try! _default.get_NewTimeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.timepickedeventargs.oldtime)
    public var oldTime : WindowsFoundation.TimeSpan {
        get { try! _default.get_OldTimeImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.timepicker)
open class TimePicker : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITimePicker
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITimePicker
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITimePicker>?) -> TimePicker? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ITimePickerFactory : __ABI_Microsoft_UI_Xaml_Controls.ITimePickerFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.TimePicker"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._ITimePickerFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _ITimePickerStatics: __ABI_Microsoft_UI_Xaml_Controls.ITimePickerStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.TimePicker"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.timepicker.clockidentifierproperty)
    public class var clockIdentifierProperty : WinUI.DependencyProperty! {
        get { try! _ITimePickerStatics.get_ClockIdentifierPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.timepicker.headerproperty)
    public class var headerProperty : WinUI.DependencyProperty! {
        get { try! _ITimePickerStatics.get_HeaderPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.timepicker.headertemplateproperty)
    public class var headerTemplateProperty : WinUI.DependencyProperty! {
        get { try! _ITimePickerStatics.get_HeaderTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.timepicker.lightdismissoverlaymodeproperty)
    public class var lightDismissOverlayModeProperty : WinUI.DependencyProperty! {
        get { try! _ITimePickerStatics.get_LightDismissOverlayModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.timepicker.minuteincrementproperty)
    public class var minuteIncrementProperty : WinUI.DependencyProperty! {
        get { try! _ITimePickerStatics.get_MinuteIncrementPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.timepicker.selectedtimeproperty)
    public class var selectedTimeProperty : WinUI.DependencyProperty! {
        get { try! _ITimePickerStatics.get_SelectedTimePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.timepicker.timeproperty)
    public class var timeProperty : WinUI.DependencyProperty! {
        get { try! _ITimePickerStatics.get_TimePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.timepicker.clockidentifier)
    public var clockIdentifier : String {
        get { try! _default.get_ClockIdentifierImpl() }
        set { try! _default.put_ClockIdentifierImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.timepicker.header)
    public var header : Any! {
        get { try! _default.get_HeaderImpl() }
        set { try! _default.put_HeaderImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.timepicker.headertemplate)
    public var headerTemplate : WinUI.DataTemplate! {
        get { try! _default.get_HeaderTemplateImpl() }
        set { try! _default.put_HeaderTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.timepicker.lightdismissoverlaymode)
    public var lightDismissOverlayMode : LightDismissOverlayMode {
        get { try! _default.get_LightDismissOverlayModeImpl() }
        set { try! _default.put_LightDismissOverlayModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.timepicker.minuteincrement)
    public var minuteIncrement : Int32 {
        get { try! _default.get_MinuteIncrementImpl() }
        set { try! _default.put_MinuteIncrementImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.timepicker.selectedtime)
    public var selectedTime : WindowsFoundation.TimeSpan? {
        get { try! _default.get_SelectedTimeImpl() }
        set { try! _default.put_SelectedTimeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.timepicker.time)
    public var time : WindowsFoundation.TimeSpan {
        get { try! _default.get_TimeImpl() }
        set { try! _default.put_TimeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.timepicker.selectedtimechanged)
    public lazy var selectedTimeChanged : Event<TypedEventHandler<TimePicker?, TimePickerSelectedValueChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_SelectedTimeChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_SelectedTimeChangedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.timepicker.timechanged)
    public lazy var timeChanged : Event<EventHandler<TimePickerValueChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_TimeChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_TimeChangedImpl($0)
       }
      )
    }()

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = TimePicker
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITimePicker
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITimePicker
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.timepickerflyout)
public final class TimePickerFlyout : WinUI.PickerFlyoutBase {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITimePickerFlyout
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITimePickerFlyout
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITimePickerFlyout>?) -> TimePickerFlyout? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.TimePickerFlyout")))
    }

    private static let _ITimePickerFlyoutStatics: __ABI_Microsoft_UI_Xaml_Controls.ITimePickerFlyoutStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.TimePickerFlyout"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.timepickerflyout.clockidentifierproperty)
    public static var clockIdentifierProperty : WinUI.DependencyProperty! {
        get { try! _ITimePickerFlyoutStatics.get_ClockIdentifierPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.timepickerflyout.minuteincrementproperty)
    public static var minuteIncrementProperty : WinUI.DependencyProperty! {
        get { try! _ITimePickerFlyoutStatics.get_MinuteIncrementPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.timepickerflyout.timeproperty)
    public static var timeProperty : WinUI.DependencyProperty! {
        get { try! _ITimePickerFlyoutStatics.get_TimePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.timepickerflyout.showatasync)
    public func showAtAsync(_ target: WinUI.FrameworkElement!) throws -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.TimeSpan?>! {
        try _default.ShowAtAsyncImpl(target)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.timepickerflyout.clockidentifier)
    public var clockIdentifier : String {
        get { try! _default.get_ClockIdentifierImpl() }
        set { try! _default.put_ClockIdentifierImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.timepickerflyout.minuteincrement)
    public var minuteIncrement : Int32 {
        get { try! _default.get_MinuteIncrementImpl() }
        set { try! _default.put_MinuteIncrementImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.timepickerflyout.time)
    public var time : WindowsFoundation.TimeSpan {
        get { try! _default.get_TimeImpl() }
        set { try! _default.put_TimeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.timepickerflyout.timepicked)
    public lazy var timePicked : Event<TypedEventHandler<TimePickerFlyout?, TimePickedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_TimePickedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_TimePickedImpl($0)
       }
      )
    }()

    internal enum IPickerFlyoutBaseOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIPickerFlyoutBaseOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IPickerFlyoutBaseOverrides
        internal typealias Class = TimePickerFlyout
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITimePickerFlyout
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITimePickerFlyout
        }
    }
    internal typealias Composable = IPickerFlyoutBaseOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.timepickerflyoutpresenter)
public final class TimePickerFlyoutPresenter : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITimePickerFlyoutPresenter
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITimePickerFlyoutPresenter
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITimePickerFlyoutPresenter>?) -> TimePickerFlyoutPresenter? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _ITimePickerFlyoutPresenterStatics: __ABI_Microsoft_UI_Xaml_Controls.ITimePickerFlyoutPresenterStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.TimePickerFlyoutPresenter"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.timepickerflyoutpresenter.isdefaultshadowenabledproperty)
    public static var isDefaultShadowEnabledProperty : WinUI.DependencyProperty! {
        get { try! _ITimePickerFlyoutPresenterStatics.get_IsDefaultShadowEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.timepickerflyoutpresenter.isdefaultshadowenabled)
    public var isDefaultShadowEnabled : Bool {
        get { try! _default.get_IsDefaultShadowEnabledImpl() }
        set { try! _default.put_IsDefaultShadowEnabledImpl(newValue) }
    }

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = TimePickerFlyoutPresenter
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITimePickerFlyoutPresenter
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITimePickerFlyoutPresenter
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.timepickerselectedvaluechangedeventargs)
public final class TimePickerSelectedValueChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITimePickerSelectedValueChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITimePickerSelectedValueChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITimePickerSelectedValueChangedEventArgs>?) -> TimePickerSelectedValueChangedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.timepickerselectedvaluechangedeventargs.newtime)
    public var newTime : WindowsFoundation.TimeSpan? {
        get { try! _default.get_NewTimeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.timepickerselectedvaluechangedeventargs.oldtime)
    public var oldTime : WindowsFoundation.TimeSpan? {
        get { try! _default.get_OldTimeImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.timepickervaluechangedeventargs)
public final class TimePickerValueChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITimePickerValueChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITimePickerValueChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITimePickerValueChangedEventArgs>?) -> TimePickerValueChangedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.timepickervaluechangedeventargs.newtime)
    public var newTime : WindowsFoundation.TimeSpan {
        get { try! _default.get_NewTimeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.timepickervaluechangedeventargs.oldtime)
    public var oldTime : WindowsFoundation.TimeSpan {
        get { try! _default.get_OldTimeImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.togglemenuflyoutitem)
open class ToggleMenuFlyoutItem : WinUI.MenuFlyoutItem {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IToggleMenuFlyoutItem
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleMenuFlyoutItem
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleMenuFlyoutItem>?) -> ToggleMenuFlyoutItem? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IToggleMenuFlyoutItemFactory : __ABI_Microsoft_UI_Xaml_Controls.IToggleMenuFlyoutItemFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ToggleMenuFlyoutItem"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IToggleMenuFlyoutItemFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IToggleMenuFlyoutItemStatics: __ABI_Microsoft_UI_Xaml_Controls.IToggleMenuFlyoutItemStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ToggleMenuFlyoutItem"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.togglemenuflyoutitem.ischeckedproperty)
    public class var isCheckedProperty : WinUI.DependencyProperty! {
        get { try! _IToggleMenuFlyoutItemStatics.get_IsCheckedPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.togglemenuflyoutitem.ischecked)
    public var isChecked : Bool {
        get { try! _default.get_IsCheckedImpl() }
        set { try! _default.put_IsCheckedImpl(newValue) }
    }

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = ToggleMenuFlyoutItem
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleMenuFlyoutItem
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IToggleMenuFlyoutItem
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.togglesplitbutton)
open class ToggleSplitButton : WinUI.SplitButton {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IToggleSplitButton
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSplitButton
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSplitButton>?) -> ToggleSplitButton? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IToggleSplitButtonFactory : __ABI_Microsoft_UI_Xaml_Controls.IToggleSplitButtonFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ToggleSplitButton"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IToggleSplitButtonFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IToggleSplitButtonStatics: __ABI_Microsoft_UI_Xaml_Controls.IToggleSplitButtonStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ToggleSplitButton"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.togglesplitbutton.ischeckedproperty)
    public class var isCheckedProperty : WinUI.DependencyProperty! {
        get { try! _IToggleSplitButtonStatics.get_IsCheckedPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.togglesplitbutton.ischecked)
    public var isChecked : Bool {
        get { try! _default.get_IsCheckedImpl() }
        set { try! _default.put_IsCheckedImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.togglesplitbutton.ischeckedchanged)
    public lazy var isCheckedChanged : Event<TypedEventHandler<ToggleSplitButton?, ToggleSplitButtonIsCheckedChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_IsCheckedChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_IsCheckedChangedImpl($0)
       }
      )
    }()

    internal enum IContentControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
        internal typealias Class = ToggleSplitButton
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSplitButton
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IToggleSplitButton
        }
    }
    internal typealias Composable = IContentControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.togglesplitbuttonischeckedchangedeventargs)
public final class ToggleSplitButtonIsCheckedChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IToggleSplitButtonIsCheckedChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSplitButtonIsCheckedChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSplitButtonIsCheckedChangedEventArgs>?) -> ToggleSplitButtonIsCheckedChangedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.toggleswitch)
public final class ToggleSwitch : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IToggleSwitch
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitch
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitch>?) -> ToggleSwitch? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.ToggleSwitch")))
    }

    private static let _IToggleSwitchStatics: __ABI_Microsoft_UI_Xaml_Controls.IToggleSwitchStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ToggleSwitch"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.toggleswitch.headerproperty)
    public static var headerProperty : WinUI.DependencyProperty! {
        get { try! _IToggleSwitchStatics.get_HeaderPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.toggleswitch.headertemplateproperty)
    public static var headerTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IToggleSwitchStatics.get_HeaderTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.toggleswitch.isonproperty)
    public static var isOnProperty : WinUI.DependencyProperty! {
        get { try! _IToggleSwitchStatics.get_IsOnPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.toggleswitch.offcontentproperty)
    public static var offContentProperty : WinUI.DependencyProperty! {
        get { try! _IToggleSwitchStatics.get_OffContentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.toggleswitch.offcontenttemplateproperty)
    public static var offContentTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IToggleSwitchStatics.get_OffContentTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.toggleswitch.oncontentproperty)
    public static var onContentProperty : WinUI.DependencyProperty! {
        get { try! _IToggleSwitchStatics.get_OnContentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.toggleswitch.oncontenttemplateproperty)
    public static var onContentTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IToggleSwitchStatics.get_OnContentTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.toggleswitch.header)
    public var header : Any! {
        get { try! _default.get_HeaderImpl() }
        set { try! _default.put_HeaderImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.toggleswitch.headertemplate)
    public var headerTemplate : WinUI.DataTemplate! {
        get { try! _default.get_HeaderTemplateImpl() }
        set { try! _default.put_HeaderTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.toggleswitch.ison)
    public var isOn : Bool {
        get { try! _default.get_IsOnImpl() }
        set { try! _default.put_IsOnImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.toggleswitch.offcontent)
    public var offContent : Any! {
        get { try! _default.get_OffContentImpl() }
        set { try! _default.put_OffContentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.toggleswitch.offcontenttemplate)
    public var offContentTemplate : WinUI.DataTemplate! {
        get { try! _default.get_OffContentTemplateImpl() }
        set { try! _default.put_OffContentTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.toggleswitch.oncontent)
    public var onContent : Any! {
        get { try! _default.get_OnContentImpl() }
        set { try! _default.put_OnContentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.toggleswitch.oncontenttemplate)
    public var onContentTemplate : WinUI.DataTemplate! {
        get { try! _default.get_OnContentTemplateImpl() }
        set { try! _default.put_OnContentTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.toggleswitch.templatesettings)
    public var templateSettings : WinUI.ToggleSwitchTemplateSettings! {
        get { try! _default.get_TemplateSettingsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.toggleswitch.toggled)
    public lazy var toggled : Event<WinUI.RoutedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ToggledImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ToggledImpl($0)
       }
      )
    }()

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = ToggleSwitch
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitch
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IToggleSwitch
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tooltip)
open class ToolTip : WinUI.ContentControl {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IToolTip
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToolTip
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToolTip>?) -> ToolTip? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IToolTipFactory : __ABI_Microsoft_UI_Xaml_Controls.IToolTipFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ToolTip"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IToolTipFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IToolTipStatics: __ABI_Microsoft_UI_Xaml_Controls.IToolTipStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ToolTip"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tooltip.horizontaloffsetproperty)
    public class var horizontalOffsetProperty : WinUI.DependencyProperty! {
        get { try! _IToolTipStatics.get_HorizontalOffsetPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tooltip.isopenproperty)
    public class var isOpenProperty : WinUI.DependencyProperty! {
        get { try! _IToolTipStatics.get_IsOpenPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tooltip.placementproperty)
    public class var placementProperty : WinUI.DependencyProperty! {
        get { try! _IToolTipStatics.get_PlacementPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tooltip.placementrectproperty)
    public class var placementRectProperty : WinUI.DependencyProperty! {
        get { try! _IToolTipStatics.get_PlacementRectPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tooltip.placementtargetproperty)
    public class var placementTargetProperty : WinUI.DependencyProperty! {
        get { try! _IToolTipStatics.get_PlacementTargetPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tooltip.verticaloffsetproperty)
    public class var verticalOffsetProperty : WinUI.DependencyProperty! {
        get { try! _IToolTipStatics.get_VerticalOffsetPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tooltip.horizontaloffset)
    public var horizontalOffset : Double {
        get { try! _default.get_HorizontalOffsetImpl() }
        set { try! _default.put_HorizontalOffsetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tooltip.isopen)
    public var isOpen : Bool {
        get { try! _default.get_IsOpenImpl() }
        set { try! _default.put_IsOpenImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tooltip.placement)
    public var placement : WinUI.PlacementMode {
        get { try! _default.get_PlacementImpl() }
        set { try! _default.put_PlacementImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tooltip.placementrect)
    public var placementRect : WindowsFoundation.Rect? {
        get { try! _default.get_PlacementRectImpl() }
        set { try! _default.put_PlacementRectImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tooltip.placementtarget)
    public var placementTarget : WinUI.UIElement! {
        get { try! _default.get_PlacementTargetImpl() }
        set { try! _default.put_PlacementTargetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tooltip.templatesettings)
    public var templateSettings : WinUI.ToolTipTemplateSettings! {
        get { try! _default.get_TemplateSettingsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tooltip.verticaloffset)
    public var verticalOffset : Double {
        get { try! _default.get_VerticalOffsetImpl() }
        set { try! _default.put_VerticalOffsetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tooltip.closed)
    public lazy var closed : Event<WinUI.RoutedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ClosedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ClosedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tooltip.opened)
    public lazy var opened : Event<WinUI.RoutedEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_OpenedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_OpenedImpl($0)
       }
      )
    }()

    internal enum IContentControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
        internal typealias Class = ToolTip
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToolTip
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IToolTip
        }
    }
    internal typealias Composable = IContentControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tooltipservice)
public final class ToolTipService : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IToolTipService
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToolTipService
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToolTipService>?) -> ToolTipService? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IToolTipServiceStatics: __ABI_Microsoft_UI_Xaml_Controls.IToolTipServiceStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ToolTipService"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tooltipservice.getplacement)
    public static func getPlacement(_ element: WinUI.DependencyObject!) -> WinUI.PlacementMode {
        return try! _IToolTipServiceStatics.GetPlacementImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tooltipservice.setplacement)
    public static func setPlacement(_ element: WinUI.DependencyObject!, _ value: WinUI.PlacementMode) {
        try! _IToolTipServiceStatics.SetPlacementImpl(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tooltipservice.getplacementtarget)
    public static func getPlacementTarget(_ element: WinUI.DependencyObject!) -> WinUI.UIElement! {
        return try! _IToolTipServiceStatics.GetPlacementTargetImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tooltipservice.setplacementtarget)
    public static func setPlacementTarget(_ element: WinUI.DependencyObject!, _ value: WinUI.UIElement!) {
        try! _IToolTipServiceStatics.SetPlacementTargetImpl(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tooltipservice.gettooltip)
    public static func getToolTip(_ element: WinUI.DependencyObject!) -> Any! {
        return try! _IToolTipServiceStatics.GetToolTipImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tooltipservice.settooltip)
    public static func setToolTip(_ element: WinUI.DependencyObject!, _ value: Any!) {
        try! _IToolTipServiceStatics.SetToolTipImpl(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tooltipservice.placementproperty)
    public static var placementProperty : WinUI.DependencyProperty! {
        get { try! _IToolTipServiceStatics.get_PlacementPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tooltipservice.placementtargetproperty)
    public static var placementTargetProperty : WinUI.DependencyProperty! {
        get { try! _IToolTipServiceStatics.get_PlacementTargetPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.tooltipservice.tooltipproperty)
    public static var toolTipProperty : WinUI.DependencyProperty! {
        get { try! _IToolTipServiceStatics.get_ToolTipPropertyImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview)
open class TreeView : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITreeView
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeView
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeView>?) -> TreeView? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ITreeViewFactory : __ABI_Microsoft_UI_Xaml_Controls.ITreeViewFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.TreeView"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._ITreeViewFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _ITreeViewStatics: __ABI_Microsoft_UI_Xaml_Controls.ITreeViewStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.TreeView"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.selecteditemproperty)
    public class var selectedItemProperty : WinUI.DependencyProperty! {
        get { try! _ITreeViewStatics.get_SelectedItemPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.selectionmodeproperty)
    public class var selectionModeProperty : WinUI.DependencyProperty! {
        get { try! _ITreeViewStatics.get_SelectionModePropertyImpl() }
    }

    private static let _ITreeViewStatics2: __ABI_Microsoft_UI_Xaml_Controls.ITreeViewStatics2 = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.TreeView"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.candragitemsproperty)
    public class var canDragItemsProperty : WinUI.DependencyProperty! {
        get { try! _ITreeViewStatics2.get_CanDragItemsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.canreorderitemsproperty)
    public class var canReorderItemsProperty : WinUI.DependencyProperty! {
        get { try! _ITreeViewStatics2.get_CanReorderItemsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.itemcontainerstyleproperty)
    public class var itemContainerStyleProperty : WinUI.DependencyProperty! {
        get { try! _ITreeViewStatics2.get_ItemContainerStylePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.itemcontainerstyleselectorproperty)
    public class var itemContainerStyleSelectorProperty : WinUI.DependencyProperty! {
        get { try! _ITreeViewStatics2.get_ItemContainerStyleSelectorPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.itemcontainertransitionsproperty)
    public class var itemContainerTransitionsProperty : WinUI.DependencyProperty! {
        get { try! _ITreeViewStatics2.get_ItemContainerTransitionsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.itemtemplateproperty)
    public class var itemTemplateProperty : WinUI.DependencyProperty! {
        get { try! _ITreeViewStatics2.get_ItemTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.itemtemplateselectorproperty)
    public class var itemTemplateSelectorProperty : WinUI.DependencyProperty! {
        get { try! _ITreeViewStatics2.get_ItemTemplateSelectorPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.itemssourceproperty)
    public class var itemsSourceProperty : WinUI.DependencyProperty! {
        get { try! _ITreeViewStatics2.get_ItemsSourcePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.expand)
    public func expand(_ value: TreeViewNode!) throws {
        try _default.ExpandImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.collapse)
    public func collapse(_ value: TreeViewNode!) throws {
        try _default.CollapseImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.selectall)
    public func selectAll() throws {
        try _default.SelectAllImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.rootnodes)
    public var rootNodes : WindowsFoundation.AnyIVector<TreeViewNode?>! {
        get { try! _default.get_RootNodesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.selectednodes)
    public var selectedNodes : WindowsFoundation.AnyIVector<TreeViewNode?>! {
        get { try! _default.get_SelectedNodesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.selectionmode)
    public var selectionMode : TreeViewSelectionMode {
        get { try! _default.get_SelectionModeImpl() }
        set { try! _default.put_SelectionModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.collapsed)
    public lazy var collapsed : Event<TypedEventHandler<TreeView?, TreeViewCollapsedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_CollapsedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_CollapsedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.expanding)
    public lazy var expanding : Event<TypedEventHandler<TreeView?, TreeViewExpandingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ExpandingImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ExpandingImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.iteminvoked)
    public lazy var itemInvoked : Event<TypedEventHandler<TreeView?, TreeViewItemInvokedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ItemInvokedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ItemInvokedImpl($0)
       }
      )
    }()

    private lazy var _ITreeView2: __ABI_Microsoft_UI_Xaml_Controls.ITreeView2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.nodefromcontainer)
    public func nodeFromContainer(_ container: WinUI.DependencyObject!) throws -> TreeViewNode! {
        try _ITreeView2.NodeFromContainerImpl(container)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.containerfromnode)
    public func containerFromNode(_ node: TreeViewNode!) throws -> WinUI.DependencyObject! {
        try _ITreeView2.ContainerFromNodeImpl(node)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.itemfromcontainer)
    public func itemFromContainer(_ container: WinUI.DependencyObject!) throws -> Any! {
        try _ITreeView2.ItemFromContainerImpl(container)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.containerfromitem)
    public func containerFromItem(_ item: Any!) throws -> WinUI.DependencyObject! {
        try _ITreeView2.ContainerFromItemImpl(item)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.candragitems)
    public var canDragItems : Bool {
        get { try! _ITreeView2.get_CanDragItemsImpl() }
        set { try! _ITreeView2.put_CanDragItemsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.canreorderitems)
    public var canReorderItems : Bool {
        get { try! _ITreeView2.get_CanReorderItemsImpl() }
        set { try! _ITreeView2.put_CanReorderItemsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.itemcontainerstyle)
    public var itemContainerStyle : WinUI.Style! {
        get { try! _ITreeView2.get_ItemContainerStyleImpl() }
        set { try! _ITreeView2.put_ItemContainerStyleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.itemcontainerstyleselector)
    public var itemContainerStyleSelector : StyleSelector! {
        get { try! _ITreeView2.get_ItemContainerStyleSelectorImpl() }
        set { try! _ITreeView2.put_ItemContainerStyleSelectorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.itemcontainertransitions)
    public var itemContainerTransitions : WinUI.TransitionCollection! {
        get { try! _ITreeView2.get_ItemContainerTransitionsImpl() }
        set { try! _ITreeView2.put_ItemContainerTransitionsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.itemtemplate)
    public var itemTemplate : WinUI.DataTemplate! {
        get { try! _ITreeView2.get_ItemTemplateImpl() }
        set { try! _ITreeView2.put_ItemTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.itemtemplateselector)
    public var itemTemplateSelector : DataTemplateSelector! {
        get { try! _ITreeView2.get_ItemTemplateSelectorImpl() }
        set { try! _ITreeView2.put_ItemTemplateSelectorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.itemssource)
    public var itemsSource : Any! {
        get { try! _ITreeView2.get_ItemsSourceImpl() }
        set { try! _ITreeView2.put_ItemsSourceImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.selecteditem)
    public var selectedItem : Any! {
        get { try! _ITreeView2.get_SelectedItemImpl() }
        set { try! _ITreeView2.put_SelectedItemImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.selecteditems)
    public var selectedItems : WindowsFoundation.AnyIVector<Any?>! {
        get { try! _ITreeView2.get_SelectedItemsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.selectednode)
    public var selectedNode : TreeViewNode! {
        get { try! _ITreeView2.get_SelectedNodeImpl() }
        set { try! _ITreeView2.put_SelectedNodeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.dragitemscompleted)
    public lazy var dragItemsCompleted : Event<TypedEventHandler<TreeView?, TreeViewDragItemsCompletedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._ITreeView2 else { return .init() }
          return try! this.add_DragItemsCompletedImpl($0)
        },
        remove: { [weak self] in
         try? self?._ITreeView2.remove_DragItemsCompletedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.dragitemsstarting)
    public lazy var dragItemsStarting : Event<TypedEventHandler<TreeView?, TreeViewDragItemsStartingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._ITreeView2 else { return .init() }
          return try! this.add_DragItemsStartingImpl($0)
        },
        remove: { [weak self] in
         try? self?._ITreeView2.remove_DragItemsStartingImpl($0)
       }
      )
    }()

    private lazy var _ITreeView3: __ABI_Microsoft_UI_Xaml_Controls.ITreeView3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeview.selectionchanged)
    public lazy var selectionChanged : Event<TypedEventHandler<TreeView?, TreeViewSelectionChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._ITreeView3 else { return .init() }
          return try! this.add_SelectionChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._ITreeView3.remove_SelectionChangedImpl($0)
       }
      )
    }()

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = TreeView
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeView
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITreeView
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = nil
        _ITreeView2 = nil
        _ITreeView3 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewcollapsedeventargs)
public final class TreeViewCollapsedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITreeViewCollapsedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewCollapsedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewCollapsedEventArgs>?) -> TreeViewCollapsedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewcollapsedeventargs.node)
    public var node : TreeViewNode! {
        get { try! _default.get_NodeImpl() }
    }

    private lazy var _ITreeViewCollapsedEventArgs2: __ABI_Microsoft_UI_Xaml_Controls.ITreeViewCollapsedEventArgs2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewcollapsedeventargs.item)
    public var item : Any! {
        get { try! _ITreeViewCollapsedEventArgs2.get_ItemImpl() }
    }

    deinit {
        _default = nil
        _ITreeViewCollapsedEventArgs2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewdragitemscompletedeventargs)
public final class TreeViewDragItemsCompletedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITreeViewDragItemsCompletedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewDragItemsCompletedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewDragItemsCompletedEventArgs>?) -> TreeViewDragItemsCompletedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewdragitemscompletedeventargs.dropresult)
    public var dropResult : UWP.DataPackageOperation {
        get { try! _default.get_DropResultImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewdragitemscompletedeventargs.items)
    public var items : WindowsFoundation.AnyIVectorView<Any?>! {
        get { try! _default.get_ItemsImpl() }
    }

    private lazy var _ITreeViewDragItemsCompletedEventArgs2: __ABI_Microsoft_UI_Xaml_Controls.ITreeViewDragItemsCompletedEventArgs2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewdragitemscompletedeventargs.newparentitem)
    public var newParentItem : Any! {
        get { try! _ITreeViewDragItemsCompletedEventArgs2.get_NewParentItemImpl() }
    }

    deinit {
        _default = nil
        _ITreeViewDragItemsCompletedEventArgs2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewdragitemsstartingeventargs)
public final class TreeViewDragItemsStartingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITreeViewDragItemsStartingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewDragItemsStartingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewDragItemsStartingEventArgs>?) -> TreeViewDragItemsStartingEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewdragitemsstartingeventargs.cancel)
    public var cancel : Bool {
        get { try! _default.get_CancelImpl() }
        set { try! _default.put_CancelImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewdragitemsstartingeventargs.data)
    public var data : UWP.DataPackage! {
        get { try! _default.get_DataImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewdragitemsstartingeventargs.items)
    public var items : WindowsFoundation.AnyIVector<Any?>! {
        get { try! _default.get_ItemsImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewexpandingeventargs)
public final class TreeViewExpandingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITreeViewExpandingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewExpandingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewExpandingEventArgs>?) -> TreeViewExpandingEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewexpandingeventargs.node)
    public var node : TreeViewNode! {
        get { try! _default.get_NodeImpl() }
    }

    private lazy var _ITreeViewExpandingEventArgs2: __ABI_Microsoft_UI_Xaml_Controls.ITreeViewExpandingEventArgs2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewexpandingeventargs.item)
    public var item : Any! {
        get { try! _ITreeViewExpandingEventArgs2.get_ItemImpl() }
    }

    deinit {
        _default = nil
        _ITreeViewExpandingEventArgs2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewitem)
open class TreeViewItem : WinUI.ListViewItem {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITreeViewItem
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItem
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItem>?) -> TreeViewItem? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ITreeViewItemFactory : __ABI_Microsoft_UI_Xaml_Controls.ITreeViewItemFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.TreeViewItem"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._ITreeViewItemFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _ITreeViewItemStatics: __ABI_Microsoft_UI_Xaml_Controls.ITreeViewItemStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.TreeViewItem"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewitem.collapsedglyphproperty)
    public class var collapsedGlyphProperty : WinUI.DependencyProperty! {
        get { try! _ITreeViewItemStatics.get_CollapsedGlyphPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewitem.expandedglyphproperty)
    public class var expandedGlyphProperty : WinUI.DependencyProperty! {
        get { try! _ITreeViewItemStatics.get_ExpandedGlyphPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewitem.glyphbrushproperty)
    public class var glyphBrushProperty : WinUI.DependencyProperty! {
        get { try! _ITreeViewItemStatics.get_GlyphBrushPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewitem.glyphopacityproperty)
    public class var glyphOpacityProperty : WinUI.DependencyProperty! {
        get { try! _ITreeViewItemStatics.get_GlyphOpacityPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewitem.glyphsizeproperty)
    public class var glyphSizeProperty : WinUI.DependencyProperty! {
        get { try! _ITreeViewItemStatics.get_GlyphSizePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewitem.isexpandedproperty)
    public class var isExpandedProperty : WinUI.DependencyProperty! {
        get { try! _ITreeViewItemStatics.get_IsExpandedPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewitem.treeviewitemtemplatesettingsproperty)
    public class var treeViewItemTemplateSettingsProperty : WinUI.DependencyProperty! {
        get { try! _ITreeViewItemStatics.get_TreeViewItemTemplateSettingsPropertyImpl() }
    }

    private static let _ITreeViewItemStatics2: __ABI_Microsoft_UI_Xaml_Controls.ITreeViewItemStatics2 = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.TreeViewItem"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewitem.hasunrealizedchildrenproperty)
    public class var hasUnrealizedChildrenProperty : WinUI.DependencyProperty! {
        get { try! _ITreeViewItemStatics2.get_HasUnrealizedChildrenPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewitem.itemssourceproperty)
    public class var itemsSourceProperty : WinUI.DependencyProperty! {
        get { try! _ITreeViewItemStatics2.get_ItemsSourcePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewitem.collapsedglyph)
    public var collapsedGlyph : String {
        get { try! _default.get_CollapsedGlyphImpl() }
        set { try! _default.put_CollapsedGlyphImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewitem.expandedglyph)
    public var expandedGlyph : String {
        get { try! _default.get_ExpandedGlyphImpl() }
        set { try! _default.put_ExpandedGlyphImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewitem.glyphbrush)
    public var glyphBrush : WinUI.Brush! {
        get { try! _default.get_GlyphBrushImpl() }
        set { try! _default.put_GlyphBrushImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewitem.glyphopacity)
    public var glyphOpacity : Double {
        get { try! _default.get_GlyphOpacityImpl() }
        set { try! _default.put_GlyphOpacityImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewitem.glyphsize)
    public var glyphSize : Double {
        get { try! _default.get_GlyphSizeImpl() }
        set { try! _default.put_GlyphSizeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewitem.isexpanded)
    public var isExpanded : Bool {
        get { try! _default.get_IsExpandedImpl() }
        set { try! _default.put_IsExpandedImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewitem.treeviewitemtemplatesettings)
    public var treeViewItemTemplateSettings : TreeViewItemTemplateSettings! {
        get { try! _default.get_TreeViewItemTemplateSettingsImpl() }
    }

    private lazy var _ITreeViewItem2: __ABI_Microsoft_UI_Xaml_Controls.ITreeViewItem2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewitem.hasunrealizedchildren)
    public var hasUnrealizedChildren : Bool {
        get { try! _ITreeViewItem2.get_HasUnrealizedChildrenImpl() }
        set { try! _ITreeViewItem2.put_HasUnrealizedChildrenImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewitem.itemssource)
    public var itemsSource : Any! {
        get { try! _ITreeViewItem2.get_ItemsSourceImpl() }
        set { try! _ITreeViewItem2.put_ItemsSourceImpl(newValue) }
    }

    internal enum IContentControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
        internal typealias Class = TreeViewItem
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItem
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITreeViewItem
        }
    }
    internal typealias Composable = IContentControlOverrides
    deinit {
        _default = nil
        _ITreeViewItem2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewiteminvokedeventargs)
public final class TreeViewItemInvokedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITreeViewItemInvokedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItemInvokedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItemInvokedEventArgs>?) -> TreeViewItemInvokedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewiteminvokedeventargs.handled)
    public var handled : Bool {
        get { try! _default.get_HandledImpl() }
        set { try! _default.put_HandledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewiteminvokedeventargs.invokeditem)
    public var invokedItem : Any! {
        get { try! _default.get_InvokedItemImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewitemtemplatesettings)
open class TreeViewItemTemplateSettings : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITreeViewItemTemplateSettings
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItemTemplateSettings
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItemTemplateSettings>?) -> TreeViewItemTemplateSettings? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ITreeViewItemTemplateSettingsFactory : __ABI_Microsoft_UI_Xaml_Controls.ITreeViewItemTemplateSettingsFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.TreeViewItemTemplateSettings"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._ITreeViewItemTemplateSettingsFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _ITreeViewItemTemplateSettingsStatics: __ABI_Microsoft_UI_Xaml_Controls.ITreeViewItemTemplateSettingsStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.TreeViewItemTemplateSettings"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewitemtemplatesettings.collapsedglyphvisibilityproperty)
    public class var collapsedGlyphVisibilityProperty : WinUI.DependencyProperty! {
        get { try! _ITreeViewItemTemplateSettingsStatics.get_CollapsedGlyphVisibilityPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewitemtemplatesettings.dragitemscountproperty)
    public class var dragItemsCountProperty : WinUI.DependencyProperty! {
        get { try! _ITreeViewItemTemplateSettingsStatics.get_DragItemsCountPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewitemtemplatesettings.expandedglyphvisibilityproperty)
    public class var expandedGlyphVisibilityProperty : WinUI.DependencyProperty! {
        get { try! _ITreeViewItemTemplateSettingsStatics.get_ExpandedGlyphVisibilityPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewitemtemplatesettings.indentationproperty)
    public class var indentationProperty : WinUI.DependencyProperty! {
        get { try! _ITreeViewItemTemplateSettingsStatics.get_IndentationPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewitemtemplatesettings.collapsedglyphvisibility)
    public var collapsedGlyphVisibility : WinUI.Visibility {
        get { try! _default.get_CollapsedGlyphVisibilityImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewitemtemplatesettings.dragitemscount)
    public var dragItemsCount : Int32 {
        get { try! _default.get_DragItemsCountImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewitemtemplatesettings.expandedglyphvisibility)
    public var expandedGlyphVisibility : WinUI.Visibility {
        get { try! _default.get_ExpandedGlyphVisibilityImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewitemtemplatesettings.indentation)
    public var indentation : WinUI.Thickness {
        get { try! _default.get_IndentationImpl() }
    }

    internal enum ITreeViewItemTemplateSettings : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = TreeViewItemTemplateSettings
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewItemTemplateSettings
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITreeViewItemTemplateSettings
        }
    }
    internal typealias Composable = ITreeViewItemTemplateSettings
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewlist)
open class TreeViewList : WinUI.ListView {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITreeViewList
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewList
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewList>?) -> TreeViewList? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ITreeViewListFactory : __ABI_Microsoft_UI_Xaml_Controls.ITreeViewListFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.TreeViewList"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._ITreeViewListFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    internal enum IItemsControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsControlOverrides
        internal typealias Class = TreeViewList
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewList
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITreeViewList
        }
    }
    internal typealias Composable = IItemsControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewnode)
open class TreeViewNode : WinUI.DependencyObject {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITreeViewNode
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewNode
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewNode>?) -> TreeViewNode? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ITreeViewNodeFactory : __ABI_Microsoft_UI_Xaml_Controls.ITreeViewNodeFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.TreeViewNode"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._ITreeViewNodeFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _ITreeViewNodeStatics: __ABI_Microsoft_UI_Xaml_Controls.ITreeViewNodeStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.TreeViewNode"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewnode.contentproperty)
    public class var contentProperty : WinUI.DependencyProperty! {
        get { try! _ITreeViewNodeStatics.get_ContentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewnode.depthproperty)
    public class var depthProperty : WinUI.DependencyProperty! {
        get { try! _ITreeViewNodeStatics.get_DepthPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewnode.haschildrenproperty)
    public class var hasChildrenProperty : WinUI.DependencyProperty! {
        get { try! _ITreeViewNodeStatics.get_HasChildrenPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewnode.isexpandedproperty)
    public class var isExpandedProperty : WinUI.DependencyProperty! {
        get { try! _ITreeViewNodeStatics.get_IsExpandedPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewnode.children)
    public var children : WindowsFoundation.AnyIVector<TreeViewNode?>! {
        get { try! _default.get_ChildrenImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewnode.content)
    public var content : Any! {
        get { try! _default.get_ContentImpl() }
        set { try! _default.put_ContentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewnode.depth)
    public var depth : Int32 {
        get { try! _default.get_DepthImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewnode.haschildren)
    public var hasChildren : Bool {
        get { try! _default.get_HasChildrenImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewnode.hasunrealizedchildren)
    public var hasUnrealizedChildren : Bool {
        get { try! _default.get_HasUnrealizedChildrenImpl() }
        set { try! _default.put_HasUnrealizedChildrenImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewnode.isexpanded)
    public var isExpanded : Bool {
        get { try! _default.get_IsExpandedImpl() }
        set { try! _default.put_IsExpandedImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewnode.parent)
    public var parent : TreeViewNode! {
        get { try! _default.get_ParentImpl() }
    }

    internal enum ITreeViewNode : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias SwiftABI = WindowsFoundation.IInspectable
        internal typealias Class = TreeViewNode
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewNode
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITreeViewNode
        }
    }
    internal typealias Composable = ITreeViewNode
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewselectionchangedeventargs)
public final class TreeViewSelectionChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITreeViewSelectionChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewSelectionChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITreeViewSelectionChangedEventArgs>?) -> TreeViewSelectionChangedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewselectionchangedeventargs.addeditems)
    public var addedItems : WindowsFoundation.AnyIVector<Any?>! {
        get { try! _default.get_AddedItemsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.treeviewselectionchangedeventargs.removeditems)
    public var removedItems : WindowsFoundation.AnyIVector<Any?>! {
        get { try! _default.get_RemovedItemsImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.twopaneview)
open class TwoPaneView : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITwoPaneView
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITwoPaneView
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITwoPaneView>?) -> TwoPaneView? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ITwoPaneViewFactory : __ABI_Microsoft_UI_Xaml_Controls.ITwoPaneViewFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.TwoPaneView"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._ITwoPaneViewFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _ITwoPaneViewStatics: __ABI_Microsoft_UI_Xaml_Controls.ITwoPaneViewStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.TwoPaneView"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.twopaneview.mintallmodeheightproperty)
    public class var minTallModeHeightProperty : WinUI.DependencyProperty! {
        get { try! _ITwoPaneViewStatics.get_MinTallModeHeightPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.twopaneview.minwidemodewidthproperty)
    public class var minWideModeWidthProperty : WinUI.DependencyProperty! {
        get { try! _ITwoPaneViewStatics.get_MinWideModeWidthPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.twopaneview.modeproperty)
    public class var modeProperty : WinUI.DependencyProperty! {
        get { try! _ITwoPaneViewStatics.get_ModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.twopaneview.pane1lengthproperty)
    public class var pane1LengthProperty : WinUI.DependencyProperty! {
        get { try! _ITwoPaneViewStatics.get_Pane1LengthPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.twopaneview.pane1property)
    public class var pane1Property : WinUI.DependencyProperty! {
        get { try! _ITwoPaneViewStatics.get_Pane1PropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.twopaneview.pane2lengthproperty)
    public class var pane2LengthProperty : WinUI.DependencyProperty! {
        get { try! _ITwoPaneViewStatics.get_Pane2LengthPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.twopaneview.pane2property)
    public class var pane2Property : WinUI.DependencyProperty! {
        get { try! _ITwoPaneViewStatics.get_Pane2PropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.twopaneview.panepriorityproperty)
    public class var panePriorityProperty : WinUI.DependencyProperty! {
        get { try! _ITwoPaneViewStatics.get_PanePriorityPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.twopaneview.tallmodeconfigurationproperty)
    public class var tallModeConfigurationProperty : WinUI.DependencyProperty! {
        get { try! _ITwoPaneViewStatics.get_TallModeConfigurationPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.twopaneview.widemodeconfigurationproperty)
    public class var wideModeConfigurationProperty : WinUI.DependencyProperty! {
        get { try! _ITwoPaneViewStatics.get_WideModeConfigurationPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.twopaneview.mintallmodeheight)
    public var minTallModeHeight : Double {
        get { try! _default.get_MinTallModeHeightImpl() }
        set { try! _default.put_MinTallModeHeightImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.twopaneview.minwidemodewidth)
    public var minWideModeWidth : Double {
        get { try! _default.get_MinWideModeWidthImpl() }
        set { try! _default.put_MinWideModeWidthImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.twopaneview.mode)
    public var mode : TwoPaneViewMode {
        get { try! _default.get_ModeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.twopaneview.pane1)
    public var pane1 : WinUI.UIElement! {
        get { try! _default.get_Pane1Impl() }
        set { try! _default.put_Pane1Impl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.twopaneview.pane1length)
    public var pane1Length : WinUI.GridLength {
        get { try! _default.get_Pane1LengthImpl() }
        set { try! _default.put_Pane1LengthImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.twopaneview.pane2)
    public var pane2 : WinUI.UIElement! {
        get { try! _default.get_Pane2Impl() }
        set { try! _default.put_Pane2Impl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.twopaneview.pane2length)
    public var pane2Length : WinUI.GridLength {
        get { try! _default.get_Pane2LengthImpl() }
        set { try! _default.put_Pane2LengthImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.twopaneview.panepriority)
    public var panePriority : TwoPaneViewPriority {
        get { try! _default.get_PanePriorityImpl() }
        set { try! _default.put_PanePriorityImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.twopaneview.tallmodeconfiguration)
    public var tallModeConfiguration : TwoPaneViewTallModeConfiguration {
        get { try! _default.get_TallModeConfigurationImpl() }
        set { try! _default.put_TallModeConfigurationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.twopaneview.widemodeconfiguration)
    public var wideModeConfiguration : TwoPaneViewWideModeConfiguration {
        get { try! _default.get_WideModeConfigurationImpl() }
        set { try! _default.put_WideModeConfigurationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.twopaneview.modechanged)
    public lazy var modeChanged : Event<TypedEventHandler<TwoPaneView?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ModeChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ModeChangedImpl($0)
       }
      )
    }()

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = TwoPaneView
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITwoPaneView
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.ITwoPaneView
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uielementcollection)
public final class UIElementCollection : WinRTClass, IVector, IIterable {
    public typealias T = WinUI.UIElement?
    private typealias SwiftABI = WinUI.IVectorUIElement
    private typealias CABI = __x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CUIElement
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CUIElement>?) -> UIElementCollection? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IUIElementCollection: __ABI_Microsoft_UI_Xaml_Controls.IUIElementCollection! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uielementcollection.move)
    public func move(_ oldIndex: UInt32, _ newIndex: UInt32) throws {
        try _IUIElementCollection.MoveImpl(oldIndex, newIndex)
    }

    // MARK: Collection
    public typealias Element = T
    public var startIndex: Int { 0 }
    public var endIndex: Int { Int(size) }
    public func index(after i: Int) -> Int {
        i+1
    }

    public func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    public var count: Int { Int(size) }


    public subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    public func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uielementcollection.getat)
    public func getAt(_ index: UInt32) -> WinUI.UIElement? {
        try! _default.GetAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uielementcollection.getview)
    public func getView() -> WindowsFoundation.AnyIVectorView<WinUI.UIElement?>? {
        try! _default.GetViewImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uielementcollection.indexof)
    public func indexOf(_ value: WinUI.UIElement?, _ index: inout UInt32) -> Bool {
        try! _default.IndexOfImpl(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uielementcollection.setat)
    public func setAt(_ index: UInt32, _ value: WinUI.UIElement?) {
        try! _default.SetAtImpl(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uielementcollection.insertat)
    public func insertAt(_ index: UInt32, _ value: WinUI.UIElement?) {
        try! _default.InsertAtImpl(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uielementcollection.removeat)
    public func removeAt(_ index: UInt32) {
        try! _default.RemoveAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uielementcollection.append)
    public func append(_ value: WinUI.UIElement?) {
        try! _default.AppendImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uielementcollection.removeatend)
    public func removeAtEnd() {
        try! _default.RemoveAtEndImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uielementcollection.clear)
    public func clear() {
        try! _default.ClearImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uielementcollection.size)
    public var size : UInt32 {
        get { try! _default.get_SizeImpl() }
    }

    private lazy var _IIterable: IIterableUIElement! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uielementcollection.first)
    public func first() -> WindowsFoundation.AnyIIterator<WinUI.UIElement?>? {
        try! _IIterable.FirstImpl()
    }

    deinit {
        _IUIElementCollection = nil
        _default = nil
        _IIterable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uniformgridlayout)
open class UniformGridLayout : WinUI.VirtualizingLayout {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IUniformGridLayout
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUniformGridLayout
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUniformGridLayout>?) -> UniformGridLayout? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IUniformGridLayoutFactory : __ABI_Microsoft_UI_Xaml_Controls.IUniformGridLayoutFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.UniformGridLayout"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IUniformGridLayoutFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IUniformGridLayoutStatics: __ABI_Microsoft_UI_Xaml_Controls.IUniformGridLayoutStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.UniformGridLayout"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uniformgridlayout.itemsjustificationproperty)
    public class var itemsJustificationProperty : WinUI.DependencyProperty! {
        get { try! _IUniformGridLayoutStatics.get_ItemsJustificationPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uniformgridlayout.itemsstretchproperty)
    public class var itemsStretchProperty : WinUI.DependencyProperty! {
        get { try! _IUniformGridLayoutStatics.get_ItemsStretchPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uniformgridlayout.maximumrowsorcolumnsproperty)
    public class var maximumRowsOrColumnsProperty : WinUI.DependencyProperty! {
        get { try! _IUniformGridLayoutStatics.get_MaximumRowsOrColumnsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uniformgridlayout.mincolumnspacingproperty)
    public class var minColumnSpacingProperty : WinUI.DependencyProperty! {
        get { try! _IUniformGridLayoutStatics.get_MinColumnSpacingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uniformgridlayout.minitemheightproperty)
    public class var minItemHeightProperty : WinUI.DependencyProperty! {
        get { try! _IUniformGridLayoutStatics.get_MinItemHeightPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uniformgridlayout.minitemwidthproperty)
    public class var minItemWidthProperty : WinUI.DependencyProperty! {
        get { try! _IUniformGridLayoutStatics.get_MinItemWidthPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uniformgridlayout.minrowspacingproperty)
    public class var minRowSpacingProperty : WinUI.DependencyProperty! {
        get { try! _IUniformGridLayoutStatics.get_MinRowSpacingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uniformgridlayout.orientationproperty)
    public class var orientationProperty : WinUI.DependencyProperty! {
        get { try! _IUniformGridLayoutStatics.get_OrientationPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uniformgridlayout.itemsjustification)
    public var itemsJustification : UniformGridLayoutItemsJustification {
        get { try! _default.get_ItemsJustificationImpl() }
        set { try! _default.put_ItemsJustificationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uniformgridlayout.itemsstretch)
    public var itemsStretch : UniformGridLayoutItemsStretch {
        get { try! _default.get_ItemsStretchImpl() }
        set { try! _default.put_ItemsStretchImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uniformgridlayout.maximumrowsorcolumns)
    public var maximumRowsOrColumns : Int32 {
        get { try! _default.get_MaximumRowsOrColumnsImpl() }
        set { try! _default.put_MaximumRowsOrColumnsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uniformgridlayout.mincolumnspacing)
    public var minColumnSpacing : Double {
        get { try! _default.get_MinColumnSpacingImpl() }
        set { try! _default.put_MinColumnSpacingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uniformgridlayout.minitemheight)
    public var minItemHeight : Double {
        get { try! _default.get_MinItemHeightImpl() }
        set { try! _default.put_MinItemHeightImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uniformgridlayout.minitemwidth)
    public var minItemWidth : Double {
        get { try! _default.get_MinItemWidthImpl() }
        set { try! _default.put_MinItemWidthImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uniformgridlayout.minrowspacing)
    public var minRowSpacing : Double {
        get { try! _default.get_MinRowSpacingImpl() }
        set { try! _default.put_MinRowSpacingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uniformgridlayout.orientation)
    public var orientation : Orientation {
        get { try! _default.get_OrientationImpl() }
        set { try! _default.put_OrientationImpl(newValue) }
    }

    internal enum IVirtualizingLayoutOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingLayoutOverrides
        internal typealias Class = UniformGridLayout
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUniformGridLayout
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IUniformGridLayout
        }
    }
    internal typealias Composable = IVirtualizingLayoutOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.usercontrol)
open class UserControl : WinUI.Control {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IUserControl
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUserControl
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUserControl>?) -> UserControl? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IUserControlFactory : __ABI_Microsoft_UI_Xaml_Controls.IUserControlFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.UserControl"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IUserControlFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IUserControlStatics: __ABI_Microsoft_UI_Xaml_Controls.IUserControlStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.UserControl"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.usercontrol.contentproperty)
    public class var contentProperty : WinUI.DependencyProperty! {
        get { try! _IUserControlStatics.get_ContentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.usercontrol.content)
    public var content : WinUI.UIElement! {
        get { try! _default.get_ContentImpl() }
        set { try! _default.put_ContentImpl(newValue) }
    }

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = UserControl
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUserControl
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IUserControl
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.variablesizedwrapgrid)
public final class VariableSizedWrapGrid : WinUI.Panel {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IVariableSizedWrapGrid
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVariableSizedWrapGrid
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVariableSizedWrapGrid>?) -> VariableSizedWrapGrid? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.VariableSizedWrapGrid")))
    }

    private static let _IVariableSizedWrapGridStatics: __ABI_Microsoft_UI_Xaml_Controls.IVariableSizedWrapGridStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.VariableSizedWrapGrid"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.variablesizedwrapgrid.getrowspan)
    public static func getRowSpan(_ element: WinUI.UIElement!) -> Int32 {
        return try! _IVariableSizedWrapGridStatics.GetRowSpanImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.variablesizedwrapgrid.setrowspan)
    public static func setRowSpan(_ element: WinUI.UIElement!, _ value: Int32) {
        try! _IVariableSizedWrapGridStatics.SetRowSpanImpl(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.variablesizedwrapgrid.getcolumnspan)
    public static func getColumnSpan(_ element: WinUI.UIElement!) -> Int32 {
        return try! _IVariableSizedWrapGridStatics.GetColumnSpanImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.variablesizedwrapgrid.setcolumnspan)
    public static func setColumnSpan(_ element: WinUI.UIElement!, _ value: Int32) {
        try! _IVariableSizedWrapGridStatics.SetColumnSpanImpl(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.variablesizedwrapgrid.columnspanproperty)
    public static var columnSpanProperty : WinUI.DependencyProperty! {
        get { try! _IVariableSizedWrapGridStatics.get_ColumnSpanPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.variablesizedwrapgrid.horizontalchildrenalignmentproperty)
    public static var horizontalChildrenAlignmentProperty : WinUI.DependencyProperty! {
        get { try! _IVariableSizedWrapGridStatics.get_HorizontalChildrenAlignmentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.variablesizedwrapgrid.itemheightproperty)
    public static var itemHeightProperty : WinUI.DependencyProperty! {
        get { try! _IVariableSizedWrapGridStatics.get_ItemHeightPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.variablesizedwrapgrid.itemwidthproperty)
    public static var itemWidthProperty : WinUI.DependencyProperty! {
        get { try! _IVariableSizedWrapGridStatics.get_ItemWidthPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.variablesizedwrapgrid.maximumrowsorcolumnsproperty)
    public static var maximumRowsOrColumnsProperty : WinUI.DependencyProperty! {
        get { try! _IVariableSizedWrapGridStatics.get_MaximumRowsOrColumnsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.variablesizedwrapgrid.orientationproperty)
    public static var orientationProperty : WinUI.DependencyProperty! {
        get { try! _IVariableSizedWrapGridStatics.get_OrientationPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.variablesizedwrapgrid.rowspanproperty)
    public static var rowSpanProperty : WinUI.DependencyProperty! {
        get { try! _IVariableSizedWrapGridStatics.get_RowSpanPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.variablesizedwrapgrid.verticalchildrenalignmentproperty)
    public static var verticalChildrenAlignmentProperty : WinUI.DependencyProperty! {
        get { try! _IVariableSizedWrapGridStatics.get_VerticalChildrenAlignmentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.variablesizedwrapgrid.horizontalchildrenalignment)
    public var horizontalChildrenAlignment : WinUI.HorizontalAlignment {
        get { try! _default.get_HorizontalChildrenAlignmentImpl() }
        set { try! _default.put_HorizontalChildrenAlignmentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.variablesizedwrapgrid.itemheight)
    public var itemHeight : Double {
        get { try! _default.get_ItemHeightImpl() }
        set { try! _default.put_ItemHeightImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.variablesizedwrapgrid.itemwidth)
    public var itemWidth : Double {
        get { try! _default.get_ItemWidthImpl() }
        set { try! _default.put_ItemWidthImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.variablesizedwrapgrid.maximumrowsorcolumns)
    public var maximumRowsOrColumns : Int32 {
        get { try! _default.get_MaximumRowsOrColumnsImpl() }
        set { try! _default.put_MaximumRowsOrColumnsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.variablesizedwrapgrid.orientation)
    public var orientation : Orientation {
        get { try! _default.get_OrientationImpl() }
        set { try! _default.put_OrientationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.variablesizedwrapgrid.verticalchildrenalignment)
    public var verticalChildrenAlignment : WinUI.VerticalAlignment {
        get { try! _default.get_VerticalChildrenAlignmentImpl() }
        set { try! _default.put_VerticalChildrenAlignmentImpl(newValue) }
    }

    internal enum IFrameworkElementOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
        internal typealias Class = VariableSizedWrapGrid
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVariableSizedWrapGrid
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IVariableSizedWrapGrid
        }
    }
    internal typealias Composable = IFrameworkElementOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.viewbox)
public final class Viewbox : WinUI.FrameworkElement {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IViewbox
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIViewbox
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIViewbox>?) -> Viewbox? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.Viewbox")))
    }

    private static let _IViewboxStatics: __ABI_Microsoft_UI_Xaml_Controls.IViewboxStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.Viewbox"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.viewbox.stretchdirectionproperty)
    public static var stretchDirectionProperty : WinUI.DependencyProperty! {
        get { try! _IViewboxStatics.get_StretchDirectionPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.viewbox.stretchproperty)
    public static var stretchProperty : WinUI.DependencyProperty! {
        get { try! _IViewboxStatics.get_StretchPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.viewbox.child)
    public var child : WinUI.UIElement! {
        get { try! _default.get_ChildImpl() }
        set { try! _default.put_ChildImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.viewbox.stretch)
    public var stretch : WinUI.Stretch {
        get { try! _default.get_StretchImpl() }
        set { try! _default.put_StretchImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.viewbox.stretchdirection)
    public var stretchDirection : StretchDirection {
        get { try! _default.get_StretchDirectionImpl() }
        set { try! _default.put_StretchDirectionImpl(newValue) }
    }

    internal enum IFrameworkElementOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
        internal typealias Class = Viewbox
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIViewbox
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IViewbox
        }
    }
    internal typealias Composable = IFrameworkElementOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizinglayout)
open class VirtualizingLayout : WinUI.Layout {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingLayout
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayout
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayout>?) -> VirtualizingLayout? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingLayoutOverridesWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingLayoutOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IVirtualizingLayoutFactory : __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingLayoutFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.VirtualizingLayout"))

    public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IVirtualizingLayoutFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private lazy var _IVirtualizingLayoutOverrides: __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingLayoutOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizinglayout.initializeforcontextcore)
    open func initializeForContextCore(_ context: VirtualizingLayoutContext!) throws {
        try _IVirtualizingLayoutOverrides.InitializeForContextCoreImpl(context)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizinglayout.uninitializeforcontextcore)
    open func uninitializeForContextCore(_ context: VirtualizingLayoutContext!) throws {
        try _IVirtualizingLayoutOverrides.UninitializeForContextCoreImpl(context)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizinglayout.measureoverride)
    open func measureOverride(_ context: VirtualizingLayoutContext!, _ availableSize: WindowsFoundation.Size) throws -> WindowsFoundation.Size {
        try _IVirtualizingLayoutOverrides.MeasureOverrideImpl(context, availableSize)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizinglayout.arrangeoverride)
    open func arrangeOverride(_ context: VirtualizingLayoutContext!, _ finalSize: WindowsFoundation.Size) throws -> WindowsFoundation.Size {
        try _IVirtualizingLayoutOverrides.ArrangeOverrideImpl(context, finalSize)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizinglayout.onitemschangedcore)
    open func onItemsChangedCore(_ context: VirtualizingLayoutContext!, _ source: Any!, _ args: WinUI.NotifyCollectionChangedEventArgs!) throws {
        try _IVirtualizingLayoutOverrides.OnItemsChangedCoreImpl(context, source, args)
    }

    internal enum IVirtualizingLayoutOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingLayoutOverrides
        internal typealias Class = VirtualizingLayout
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayout
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingLayout
        }
    }
    internal typealias Composable = IVirtualizingLayoutOverrides
    deinit {
        _default = nil
        _IVirtualizingLayoutOverrides = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizinglayoutcontext)
open class VirtualizingLayoutContext : WinUI.LayoutContext {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingLayoutContext
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutContext
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutContext>?) -> VirtualizingLayoutContext? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingLayoutContextOverridesWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingLayoutContextOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingLayoutContextOverrides2Wrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingLayoutContextOverrides2Wrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IVirtualizingLayoutContextFactory : __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingLayoutContextFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.VirtualizingLayoutContext"))

    public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IVirtualizingLayoutContextFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizinglayoutcontext.getitemat)
    public func getItemAt(_ index: Int32) throws -> Any! {
        try _default.GetItemAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizinglayoutcontext.getorcreateelementat)
    public func getOrCreateElementAt(_ index: Int32) throws -> WinUI.UIElement! {
        try _default.GetOrCreateElementAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizinglayoutcontext.getorcreateelementat)
    public func getOrCreateElementAt(_ index: Int32, _ options: ElementRealizationOptions) throws -> WinUI.UIElement! {
        try _default.GetOrCreateElementAt2Impl(index, options)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizinglayoutcontext.recycleelement)
    public func recycleElement(_ element: WinUI.UIElement!) throws {
        try _default.RecycleElementImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizinglayoutcontext.itemcount)
    public var itemCount : Int32 {
        get { try! _default.get_ItemCountImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizinglayoutcontext.layoutorigin)
    public var layoutOrigin : WindowsFoundation.Point {
        get { try! _default.get_LayoutOriginImpl() }
        set { try! _default.put_LayoutOriginImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizinglayoutcontext.realizationrect)
    public var realizationRect : WindowsFoundation.Rect {
        get { try! _default.get_RealizationRectImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizinglayoutcontext.recommendedanchorindex)
    public var recommendedAnchorIndex : Int32 {
        get { try! _default.get_RecommendedAnchorIndexImpl() }
    }

    private lazy var _IVirtualizingLayoutContext2: __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingLayoutContext2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizinglayoutcontext.visiblerect)
    public var visibleRect : WindowsFoundation.Rect {
        get { try! _IVirtualizingLayoutContext2.get_VisibleRectImpl() }
    }

    private lazy var _IVirtualizingLayoutContextOverrides: __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingLayoutContextOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizinglayoutcontext.itemcountcore)
    open func itemCountCore() throws -> Int32 {
        try _IVirtualizingLayoutContextOverrides.ItemCountCoreImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizinglayoutcontext.getitematcore)
    open func getItemAtCore(_ index: Int32) throws -> Any! {
        try _IVirtualizingLayoutContextOverrides.GetItemAtCoreImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizinglayoutcontext.realizationrectcore)
    open func realizationRectCore() throws -> WindowsFoundation.Rect {
        try _IVirtualizingLayoutContextOverrides.RealizationRectCoreImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizinglayoutcontext.getorcreateelementatcore)
    open func getOrCreateElementAtCore(_ index: Int32, _ options: ElementRealizationOptions) throws -> WinUI.UIElement! {
        try _IVirtualizingLayoutContextOverrides.GetOrCreateElementAtCoreImpl(index, options)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizinglayoutcontext.recycleelementcore)
    open func recycleElementCore(_ element: WinUI.UIElement!) throws {
        try _IVirtualizingLayoutContextOverrides.RecycleElementCoreImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizinglayoutcontext.layoutorigincore)
    open var layoutOriginCore : WindowsFoundation.Point {
        get { try! _IVirtualizingLayoutContextOverrides.get_LayoutOriginCoreImpl() }
        set { try! _IVirtualizingLayoutContextOverrides.put_LayoutOriginCoreImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizinglayoutcontext.recommendedanchorindexcore)
    open var recommendedAnchorIndexCore : Int32 {
        get { try! _IVirtualizingLayoutContextOverrides.get_RecommendedAnchorIndexCoreImpl() }
    }

    internal enum IVirtualizingLayoutContextOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutContextOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingLayoutContextOverrides
        internal typealias Class = VirtualizingLayoutContext
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutContext
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingLayoutContext
        }
    }
    internal typealias Composable = IVirtualizingLayoutContextOverrides
    private lazy var _IVirtualizingLayoutContextOverrides2: __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingLayoutContextOverrides2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizinglayoutcontext.visiblerectcore)
    open func visibleRectCore() throws -> WindowsFoundation.Rect {
        try _IVirtualizingLayoutContextOverrides2.VisibleRectCoreImpl()
    }

    internal enum IVirtualizingLayoutContextOverrides2 : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutContextOverrides2
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingLayoutContextOverrides2
        internal typealias Class = VirtualizingLayoutContext
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingLayoutContext
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingLayoutContext
        }
    }
    deinit {
        _default = nil
        _IVirtualizingLayoutContext2 = nil
        _IVirtualizingLayoutContextOverrides = nil
        _IVirtualizingLayoutContextOverrides2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizingpanel)
open class VirtualizingPanel : WinUI.Panel {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingPanel
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingPanel
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingPanel>?) -> VirtualizingPanel? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingPanelOverridesWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingPanelOverridesWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IVirtualizingPanelFactory : __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingPanelFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.VirtualizingPanel"))

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizingpanel.itemcontainergenerator)
    public var itemContainerGenerator : ItemContainerGenerator! {
        get { try! _default.get_ItemContainerGeneratorImpl() }
    }

    private lazy var _IVirtualizingPanelProtected: __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingPanelProtected! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizingpanel.addinternalchild)
    public func addInternalChild(_ child: WinUI.UIElement!) throws {
        try _IVirtualizingPanelProtected.AddInternalChildImpl(child)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizingpanel.insertinternalchild)
    public func insertInternalChild(_ index: Int32, _ child: WinUI.UIElement!) throws {
        try _IVirtualizingPanelProtected.InsertInternalChildImpl(index, child)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizingpanel.removeinternalchildrange)
    public func removeInternalChildRange(_ index: Int32, _ range: Int32) throws {
        try _IVirtualizingPanelProtected.RemoveInternalChildRangeImpl(index, range)
    }

    private lazy var _IVirtualizingPanelOverrides: __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingPanelOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizingpanel.onitemschanged)
    open func onItemsChanged(_ sender: Any!, _ args: WinUI.ItemsChangedEventArgs!) throws {
        try _IVirtualizingPanelOverrides.OnItemsChangedImpl(sender, args)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizingpanel.onclearchildren)
    open func onClearChildren() throws {
        try _IVirtualizingPanelOverrides.OnClearChildrenImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizingpanel.bringindexintoview)
    open func bringIndexIntoView(_ index: Int32) throws {
        try _IVirtualizingPanelOverrides.BringIndexIntoViewImpl(index)
    }

    internal enum IVirtualizingPanelOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingPanelOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingPanelOverrides
        internal typealias Class = VirtualizingPanel
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingPanel
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingPanel
        }
    }
    internal typealias Composable = IVirtualizingPanelOverrides
    deinit {
        _default = nil
        _IVirtualizingPanelProtected = nil
        _IVirtualizingPanelOverrides = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizingstackpanel)
public final class VirtualizingStackPanel : WinUI.OrientedVirtualizingPanel {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingStackPanel
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingStackPanel
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingStackPanel>?) -> VirtualizingStackPanel? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.VirtualizingStackPanel")))
    }

    private static let _IVirtualizingStackPanelStatics: __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingStackPanelStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.VirtualizingStackPanel"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizingstackpanel.getvirtualizationmode)
    public static func getVirtualizationMode(_ element: WinUI.DependencyObject!) -> VirtualizationMode {
        return try! _IVirtualizingStackPanelStatics.GetVirtualizationModeImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizingstackpanel.setvirtualizationmode)
    public static func setVirtualizationMode(_ element: WinUI.DependencyObject!, _ value: VirtualizationMode) {
        try! _IVirtualizingStackPanelStatics.SetVirtualizationModeImpl(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizingstackpanel.getisvirtualizing)
    public static func getIsVirtualizing(_ o: WinUI.DependencyObject!) -> Bool {
        return try! _IVirtualizingStackPanelStatics.GetIsVirtualizingImpl(o)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizingstackpanel.arescrollsnappointsregularproperty)
    public static var areScrollSnapPointsRegularProperty : WinUI.DependencyProperty! {
        get { try! _IVirtualizingStackPanelStatics.get_AreScrollSnapPointsRegularPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizingstackpanel.isvirtualizingproperty)
    public static var isVirtualizingProperty : WinUI.DependencyProperty! {
        get { try! _IVirtualizingStackPanelStatics.get_IsVirtualizingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizingstackpanel.orientationproperty)
    public static var orientationProperty : WinUI.DependencyProperty! {
        get { try! _IVirtualizingStackPanelStatics.get_OrientationPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizingstackpanel.virtualizationmodeproperty)
    public static var virtualizationModeProperty : WinUI.DependencyProperty! {
        get { try! _IVirtualizingStackPanelStatics.get_VirtualizationModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizingstackpanel.arescrollsnappointsregular)
    public var areScrollSnapPointsRegular : Bool {
        get { try! _default.get_AreScrollSnapPointsRegularImpl() }
        set { try! _default.put_AreScrollSnapPointsRegularImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizingstackpanel.orientation)
    public var orientation : Orientation {
        get { try! _default.get_OrientationImpl() }
        set { try! _default.put_OrientationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.virtualizingstackpanel.cleanupvirtualizeditemevent)
    public lazy var cleanUpVirtualizedItemEvent : Event<CleanUpVirtualizedItemEventHandler> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_CleanUpVirtualizedItemEventImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_CleanUpVirtualizedItemEventImpl($0)
       }
      )
    }()

    internal enum IVirtualizingPanelOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingPanelOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingPanelOverrides
        internal typealias Class = VirtualizingStackPanel
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingStackPanel
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingStackPanel
        }
    }
    internal typealias Composable = IVirtualizingPanelOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.webview2)
open class WebView2 : WinUI.FrameworkElement {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IWebView2
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2>?) -> WebView2? {
        guard let abi = abi else { return nil }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IWebView2Factory : __ABI_Microsoft_UI_Xaml_Controls.IWebView2Factory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.WebView2"))

    override public init() {
        super.init(composing: Self.Composable.self) { baseInterface, innerInterface in 
            try! Self._IWebView2Factory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static let _IWebView2Statics: __ABI_Microsoft_UI_Xaml_Controls.IWebView2Statics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.WebView2"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.webview2.cangobackproperty)
    public class var canGoBackProperty : WinUI.DependencyProperty! {
        get { try! _IWebView2Statics.get_CanGoBackPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.webview2.cangoforwardproperty)
    public class var canGoForwardProperty : WinUI.DependencyProperty! {
        get { try! _IWebView2Statics.get_CanGoForwardPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.webview2.defaultbackgroundcolorproperty)
    public class var defaultBackgroundColorProperty : WinUI.DependencyProperty! {
        get { try! _IWebView2Statics.get_DefaultBackgroundColorPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.webview2.sourceproperty)
    public class var sourceProperty : WinUI.DependencyProperty! {
        get { try! _IWebView2Statics.get_SourcePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.webview2.ensurecorewebview2async)
    public func ensureCoreWebView2Async() throws -> WindowsFoundation.AnyIAsyncAction! {
        try _default.EnsureCoreWebView2AsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.webview2.executescriptasync)
    public func executeScriptAsync(_ javascriptCode: String) throws -> WindowsFoundation.AnyIAsyncOperation<String>! {
        try _default.ExecuteScriptAsyncImpl(javascriptCode)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.webview2.reload)
    public func reload() throws {
        try _default.ReloadImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.webview2.goforward)
    public func goForward() throws {
        try _default.GoForwardImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.webview2.goback)
    public func goBack() throws {
        try _default.GoBackImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.webview2.navigatetostring)
    public func navigateToString(_ htmlContent: String) throws {
        try _default.NavigateToStringImpl(htmlContent)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.webview2.close)
    public func close() throws {
        try _default.CloseImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.webview2.cangoback)
    public var canGoBack : Bool {
        get { try! _default.get_CanGoBackImpl() }
        set { try! _default.put_CanGoBackImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.webview2.cangoforward)
    public var canGoForward : Bool {
        get { try! _default.get_CanGoForwardImpl() }
        set { try! _default.put_CanGoForwardImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.webview2.corewebview2)
    public var coreWebView2 : WebView2Core.CoreWebView2! {
        get { try! _default.get_CoreWebView2Impl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.webview2.defaultbackgroundcolor)
    public var defaultBackgroundColor : UWP.Color {
        get { try! _default.get_DefaultBackgroundColorImpl() }
        set { try! _default.put_DefaultBackgroundColorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.webview2.source)
    public var source : WindowsFoundation.Uri! {
        get { try! _default.get_SourceImpl() }
        set { try! _default.put_SourceImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.webview2.coreprocessfailed)
    public lazy var coreProcessFailed : Event<TypedEventHandler<WebView2?, CoreWebView2ProcessFailedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_CoreProcessFailedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_CoreProcessFailedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.webview2.corewebview2initialized)
    public lazy var coreWebView2Initialized : Event<TypedEventHandler<WebView2?, CoreWebView2InitializedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_CoreWebView2InitializedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_CoreWebView2InitializedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.webview2.navigationcompleted)
    public lazy var navigationCompleted : Event<TypedEventHandler<WebView2?, CoreWebView2NavigationCompletedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_NavigationCompletedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_NavigationCompletedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.webview2.navigationstarting)
    public lazy var navigationStarting : Event<TypedEventHandler<WebView2?, CoreWebView2NavigationStartingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_NavigationStartingImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_NavigationStartingImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.webview2.webmessagereceived)
    public lazy var webMessageReceived : Event<TypedEventHandler<WebView2?, CoreWebView2WebMessageReceivedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_WebMessageReceivedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_WebMessageReceivedImpl($0)
       }
      )
    }()

    private lazy var _IWebView22: __ABI_Microsoft_UI_Xaml_Controls.IWebView22! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.webview2.ensurecorewebview2async)
    public func ensureCoreWebView2Async(_ environment: WebView2Core.CoreWebView2Environment!) throws -> WindowsFoundation.AnyIAsyncAction! {
        try _IWebView22.EnsureCoreWebView2WithEnvironmentAsyncImpl(environment)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.webview2.ensurecorewebview2async)
    public func ensureCoreWebView2Async(_ environment: WebView2Core.CoreWebView2Environment!, _ controllerOptions: WebView2Core.CoreWebView2ControllerOptions!) throws -> WindowsFoundation.AnyIAsyncAction! {
        try _IWebView22.EnsureCoreWebView2WithEnvironmentAndOptionsAsyncImpl(environment, controllerOptions)
    }

    internal enum IFrameworkElementOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
        internal typealias Class = WebView2
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IWebView2
        }
    }
    internal typealias Composable = IFrameworkElementOverrides
    deinit {
        _default = nil
        _IWebView22 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.wrapgrid)
public final class WrapGrid : WinUI.OrientedVirtualizingPanel {
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IWrapGrid
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWrapGrid
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWrapGrid>?) -> WrapGrid? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.WrapGrid")))
    }

    private static let _IWrapGridStatics: __ABI_Microsoft_UI_Xaml_Controls.IWrapGridStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.WrapGrid"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.wrapgrid.horizontalchildrenalignmentproperty)
    public static var horizontalChildrenAlignmentProperty : WinUI.DependencyProperty! {
        get { try! _IWrapGridStatics.get_HorizontalChildrenAlignmentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.wrapgrid.itemheightproperty)
    public static var itemHeightProperty : WinUI.DependencyProperty! {
        get { try! _IWrapGridStatics.get_ItemHeightPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.wrapgrid.itemwidthproperty)
    public static var itemWidthProperty : WinUI.DependencyProperty! {
        get { try! _IWrapGridStatics.get_ItemWidthPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.wrapgrid.maximumrowsorcolumnsproperty)
    public static var maximumRowsOrColumnsProperty : WinUI.DependencyProperty! {
        get { try! _IWrapGridStatics.get_MaximumRowsOrColumnsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.wrapgrid.orientationproperty)
    public static var orientationProperty : WinUI.DependencyProperty! {
        get { try! _IWrapGridStatics.get_OrientationPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.wrapgrid.verticalchildrenalignmentproperty)
    public static var verticalChildrenAlignmentProperty : WinUI.DependencyProperty! {
        get { try! _IWrapGridStatics.get_VerticalChildrenAlignmentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.wrapgrid.horizontalchildrenalignment)
    public var horizontalChildrenAlignment : WinUI.HorizontalAlignment {
        get { try! _default.get_HorizontalChildrenAlignmentImpl() }
        set { try! _default.put_HorizontalChildrenAlignmentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.wrapgrid.itemheight)
    public var itemHeight : Double {
        get { try! _default.get_ItemHeightImpl() }
        set { try! _default.put_ItemHeightImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.wrapgrid.itemwidth)
    public var itemWidth : Double {
        get { try! _default.get_ItemWidthImpl() }
        set { try! _default.put_ItemWidthImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.wrapgrid.maximumrowsorcolumns)
    public var maximumRowsOrColumns : Int32 {
        get { try! _default.get_MaximumRowsOrColumnsImpl() }
        set { try! _default.put_MaximumRowsOrColumnsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.wrapgrid.orientation)
    public var orientation : Orientation {
        get { try! _default.get_OrientationImpl() }
        set { try! _default.put_OrientationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.wrapgrid.verticalchildrenalignment)
    public var verticalChildrenAlignment : WinUI.VerticalAlignment {
        get { try! _default.get_VerticalChildrenAlignmentImpl() }
        set { try! _default.put_VerticalChildrenAlignmentImpl(newValue) }
    }

    internal enum IVirtualizingPanelOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIVirtualizingPanelOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IVirtualizingPanelOverrides
        internal typealias Class = WrapGrid
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWrapGrid
            internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IWrapGrid
        }
    }
    internal typealias Composable = IVirtualizingPanelOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.xamlcontrolsresources)
public final class XamlControlsResources : WinUI.ResourceDictionary {
    public typealias K = Any?
    public typealias V = Any?
    public typealias T = WindowsFoundation.AnyIKeyValuePair<Any?, Any?>?
    private typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IXamlControlsResources
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIXamlControlsResources
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIXamlControlsResources>?) -> XamlControlsResources? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.XamlControlsResources")))
    }

    private static let _IXamlControlsResourcesStatics: __ABI_Microsoft_UI_Xaml_Controls.IXamlControlsResourcesStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.XamlControlsResources"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.xamlcontrolsresources.ensurereveallights)
    public static func ensureRevealLights(_ element: WinUI.UIElement!) {
        try! _IXamlControlsResourcesStatics.EnsureRevealLightsImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.xamlcontrolsresources.usecompactresourcesproperty)
    public static var useCompactResourcesProperty : WinUI.DependencyProperty! {
        get { try! _IXamlControlsResourcesStatics.get_UseCompactResourcesPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.xamlcontrolsresources.usecompactresources)
    public var useCompactResources : Bool {
        get { try! _default.get_UseCompactResourcesImpl() }
        set { try! _default.put_UseCompactResourcesImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

public typealias CalendarViewDayItemChangingEventHandler = (CalendarView?, CalendarViewDayItemChangingEventArgs?) -> ()
public typealias CleanUpVirtualizedItemEventHandler = (Any?, CleanUpVirtualizedItemEventArgs?) -> ()
public typealias ContextMenuOpeningEventHandler = (Any?, ContextMenuEventArgs?) -> ()
public typealias DragItemsStartingEventHandler = (Any?, DragItemsStartingEventArgs?) -> ()
public typealias HubSectionHeaderClickEventHandler = (Any?, HubSectionHeaderClickEventArgs?) -> ()
public typealias ItemClickEventHandler = (Any?, ItemClickEventArgs?) -> ()
public typealias ListViewItemToKeyHandler = (Any?) -> String
public typealias ListViewKeyToItemHandler = (String) -> WindowsFoundation.AnyIAsyncOperation<Any?>?
public typealias SectionsInViewChangedEventHandler = (Any?, SectionsInViewChangedEventArgs?) -> ()
public typealias SelectionChangedEventHandler = (Any?, SelectionChangedEventArgs?) -> ()
public typealias SemanticZoomViewChangedEventHandler = (Any?, SemanticZoomViewChangedEventArgs?) -> ()
public typealias TextChangedEventHandler = (Any?, TextChangedEventArgs?) -> ()
public typealias TextControlPasteEventHandler = (Any?, TextControlPasteEventArgs?) -> ()
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ianimatedvisual)
public protocol IAnimatedVisual : WindowsFoundation.IClosable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ianimatedvisual.duration)
    var duration: WindowsFoundation.TimeSpan { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ianimatedvisual.rootvisual)
    var rootVisual: WinAppSDK.Visual! { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ianimatedvisual.size)
    var size: WindowsFoundation.Vector2 { get }
}

extension IAnimatedVisual {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.IAnimatedVisualWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.IAnimatedVisualWrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Foundation.IClosableWrapper.IID:
                let wrapper = __ABI_Windows_Foundation.IClosableWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIAnimatedVisual = any IAnimatedVisual

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ianimatedvisual2)
public protocol IAnimatedVisual2 : WindowsFoundation.IClosable, IAnimatedVisual {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ianimatedvisual2.createanimations)
    func createAnimations() throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ianimatedvisual2.destroyanimations)
    func destroyAnimations() throws
}

extension IAnimatedVisual2 {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.IAnimatedVisual2Wrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.IAnimatedVisual2Wrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Foundation.IClosableWrapper.IID:
                let wrapper = __ABI_Windows_Foundation.IClosableWrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Microsoft_UI_Xaml_Controls.IAnimatedVisualWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.IAnimatedVisualWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIAnimatedVisual2 = any IAnimatedVisual2

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ianimatedvisualsource)
public protocol IAnimatedVisualSource : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ianimatedvisualsource.trycreateanimatedvisual)
    func tryCreateAnimatedVisual(_ compositor: WinAppSDK.Compositor!, _ diagnostics: inout Any!) throws -> WinUI.AnyIAnimatedVisual!
}

extension IAnimatedVisualSource {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.IAnimatedVisualSourceWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.IAnimatedVisualSourceWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIAnimatedVisualSource = any IAnimatedVisualSource

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ianimatedvisualsource2)
public protocol IAnimatedVisualSource2 : IAnimatedVisualSource {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ianimatedvisualsource2.setcolorproperty)
    func setColorProperty(_ propertyName: String, _ value: UWP.Color) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ianimatedvisualsource2.markers)
    var markers: WindowsFoundation.AnyIMapView<String, Double>! { get }
}

extension IAnimatedVisualSource2 {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.IAnimatedVisualSource2Wrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.IAnimatedVisualSource2Wrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Microsoft_UI_Xaml_Controls.IAnimatedVisualSourceWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.IAnimatedVisualSourceWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIAnimatedVisualSource2 = any IAnimatedVisualSource2

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ianimatedvisualsource3)
public protocol IAnimatedVisualSource3 : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ianimatedvisualsource3.trycreateanimatedvisual)
    func tryCreateAnimatedVisual(_ compositor: WinAppSDK.Compositor!, _ diagnostics: inout Any!, _ createAnimations: Bool) throws -> WinUI.AnyIAnimatedVisual2!
}

extension IAnimatedVisualSource3 {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.IAnimatedVisualSource3Wrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.IAnimatedVisualSource3Wrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIAnimatedVisualSource3 = any IAnimatedVisualSource3

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.icommandbarelement)
public protocol ICommandBarElement : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.icommandbarelement.dynamicoverfloworder)
    var dynamicOverflowOrder: Int32 { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.icommandbarelement.iscompact)
    var isCompact: Bool { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.icommandbarelement.isinoverflow)
    var isInOverflow: Bool { get }
}

extension ICommandBarElement {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.ICommandBarElementWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.ICommandBarElementWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyICommandBarElement = any ICommandBarElement

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.idynamicanimatedvisualsource)
public protocol IDynamicAnimatedVisualSource : IAnimatedVisualSource {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.idynamicanimatedvisualsource.animatedvisualinvalidated)
    var animatedVisualInvalidated: Event<TypedEventHandler<IDynamicAnimatedVisualSource?, Any?>> { get }
}

extension IDynamicAnimatedVisualSource {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.IDynamicAnimatedVisualSourceWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.IDynamicAnimatedVisualSourceWrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Microsoft_UI_Xaml_Controls.IAnimatedVisualSourceWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.IAnimatedVisualSourceWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIDynamicAnimatedVisualSource = any IDynamicAnimatedVisualSource

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iinsertionpanel)
public protocol IInsertionPanel : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iinsertionpanel.getinsertionindexes)
    func getInsertionIndexes(_ position: WindowsFoundation.Point, _ first: inout Int32, _ second: inout Int32) throws
}

extension IInsertionPanel {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.IInsertionPanelWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.IInsertionPanelWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIInsertionPanel = any IInsertionPanel

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iitemcontainermapping)
public protocol IItemContainerMapping : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iitemcontainermapping.itemfromcontainer)
    func itemFromContainer(_ container: WinUI.DependencyObject!) throws -> Any!
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iitemcontainermapping.containerfromitem)
    func containerFromItem(_ item: Any!) throws -> WinUI.DependencyObject!
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iitemcontainermapping.indexfromcontainer)
    func indexFromContainer(_ container: WinUI.DependencyObject!) throws -> Int32
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iitemcontainermapping.containerfromindex)
    func containerFromIndex(_ index: Int32) throws -> WinUI.DependencyObject!
}

extension IItemContainerMapping {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.IItemContainerMappingWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.IItemContainerMappingWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIItemContainerMapping = any IItemContainerMapping

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ikeyindexmapping)
public protocol IKeyIndexMapping : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ikeyindexmapping.keyfromindex)
    func keyFromIndex(_ index: Int32) throws -> String
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ikeyindexmapping.indexfromkey)
    func indexFromKey(_ key: String) throws -> Int32
}

extension IKeyIndexMapping {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.IKeyIndexMappingWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.IKeyIndexMappingWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIKeyIndexMapping = any IKeyIndexMapping

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.inavigate)
public protocol INavigate : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.inavigate.navigate)
    func navigate(_ sourcePageType: WinUI.TypeName) throws -> Bool
}

extension INavigate {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.INavigateWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.INavigateWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyINavigate = any INavigate

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iscrollanchorprovider)
public protocol IScrollAnchorProvider : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iscrollanchorprovider.registeranchorcandidate)
    func registerAnchorCandidate(_ element: WinUI.UIElement!) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iscrollanchorprovider.unregisteranchorcandidate)
    func unregisterAnchorCandidate(_ element: WinUI.UIElement!) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iscrollanchorprovider.currentanchor)
    var currentAnchor: WinUI.UIElement! { get }
}

extension IScrollAnchorProvider {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.IScrollAnchorProviderWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.IScrollAnchorProviderWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIScrollAnchorProvider = any IScrollAnchorProvider

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.isemanticzoominformation)
public protocol ISemanticZoomInformation : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.isemanticzoominformation.initializeviewchange)
    func initializeViewChange() throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.isemanticzoominformation.completeviewchange)
    func completeViewChange() throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.isemanticzoominformation.makevisible)
    func makeVisible(_ item: WinUI.SemanticZoomLocation!) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.isemanticzoominformation.startviewchangefrom)
    func startViewChangeFrom(_ source: WinUI.SemanticZoomLocation!, _ destination: WinUI.SemanticZoomLocation!) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.isemanticzoominformation.startviewchangeto)
    func startViewChangeTo(_ source: WinUI.SemanticZoomLocation!, _ destination: WinUI.SemanticZoomLocation!) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.isemanticzoominformation.completeviewchangefrom)
    func completeViewChangeFrom(_ source: WinUI.SemanticZoomLocation!, _ destination: WinUI.SemanticZoomLocation!) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.isemanticzoominformation.completeviewchangeto)
    func completeViewChangeTo(_ source: WinUI.SemanticZoomLocation!, _ destination: WinUI.SemanticZoomLocation!) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.isemanticzoominformation.isactiveview)
    var isActiveView: Bool { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.isemanticzoominformation.iszoomedinview)
    var isZoomedInView: Bool { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.isemanticzoominformation.semanticzoomowner)
    var semanticZoomOwner: WinUI.SemanticZoom! { get set }
}

extension ISemanticZoomInformation {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.ISemanticZoomInformationWrapper.IID:
                let wrapper = __ABI_Microsoft_UI_Xaml_Controls.ISemanticZoomInformationWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyISemanticZoomInformation = any ISemanticZoomInformation

extension WinUI.AnnotatedScrollBarScrollingEventKind {
    public static var click : WinUI.AnnotatedScrollBarScrollingEventKind {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CAnnotatedScrollBarScrollingEventKind_Click
    }
    public static var drag : WinUI.AnnotatedScrollBarScrollingEventKind {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CAnnotatedScrollBarScrollingEventKind_Drag
    }
    public static var incrementButton : WinUI.AnnotatedScrollBarScrollingEventKind {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CAnnotatedScrollBarScrollingEventKind_IncrementButton
    }
    public static var decrementButton : WinUI.AnnotatedScrollBarScrollingEventKind {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CAnnotatedScrollBarScrollingEventKind_DecrementButton
    }
}
extension WinUI.AnnotatedScrollBarScrollingEventKind: @retroactive Hashable, @retroactive Codable {}

extension WinUI.AppBarClosedDisplayMode {
    public static var compact : WinUI.AppBarClosedDisplayMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CAppBarClosedDisplayMode_Compact
    }
    public static var minimal : WinUI.AppBarClosedDisplayMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CAppBarClosedDisplayMode_Minimal
    }
    public static var hidden : WinUI.AppBarClosedDisplayMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CAppBarClosedDisplayMode_Hidden
    }
}
extension WinUI.AppBarClosedDisplayMode: @retroactive Hashable, @retroactive Codable {}

extension WinUI.AutoSuggestionBoxTextChangeReason {
    public static var userInput : WinUI.AutoSuggestionBoxTextChangeReason {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CAutoSuggestionBoxTextChangeReason_UserInput
    }
    public static var programmaticChange : WinUI.AutoSuggestionBoxTextChangeReason {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CAutoSuggestionBoxTextChangeReason_ProgrammaticChange
    }
    public static var suggestionChosen : WinUI.AutoSuggestionBoxTextChangeReason {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CAutoSuggestionBoxTextChangeReason_SuggestionChosen
    }
}
extension WinUI.AutoSuggestionBoxTextChangeReason: @retroactive Hashable, @retroactive Codable {}

extension WinUI.BackgroundSizing {
    public static var innerBorderEdge : WinUI.BackgroundSizing {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CBackgroundSizing_InnerBorderEdge
    }
    public static var outerBorderEdge : WinUI.BackgroundSizing {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CBackgroundSizing_OuterBorderEdge
    }
}
extension WinUI.BackgroundSizing: @retroactive Hashable, @retroactive Codable {}

extension WinUI.CalendarViewDisplayMode {
    public static var month : WinUI.CalendarViewDisplayMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CCalendarViewDisplayMode_Month
    }
    public static var year : WinUI.CalendarViewDisplayMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CCalendarViewDisplayMode_Year
    }
    public static var decade : WinUI.CalendarViewDisplayMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CCalendarViewDisplayMode_Decade
    }
}
extension WinUI.CalendarViewDisplayMode: @retroactive Hashable, @retroactive Codable {}

extension WinUI.CalendarViewSelectionMode {
    public static var none : WinUI.CalendarViewSelectionMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CCalendarViewSelectionMode_None
    }
    public static var single : WinUI.CalendarViewSelectionMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CCalendarViewSelectionMode_Single
    }
    public static var multiple : WinUI.CalendarViewSelectionMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CCalendarViewSelectionMode_Multiple
    }
}
extension WinUI.CalendarViewSelectionMode: @retroactive Hashable, @retroactive Codable {}

extension WinUI.CandidateWindowAlignment {
    public static var `default` : WinUI.CandidateWindowAlignment {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CCandidateWindowAlignment_Default
    }
    public static var bottomEdge : WinUI.CandidateWindowAlignment {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CCandidateWindowAlignment_BottomEdge
    }
}
extension WinUI.CandidateWindowAlignment: @retroactive Hashable, @retroactive Codable {}

extension WinUI.CharacterCasing {
    public static var normal : WinUI.CharacterCasing {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CCharacterCasing_Normal
    }
    public static var lower : WinUI.CharacterCasing {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CCharacterCasing_Lower
    }
    public static var upper : WinUI.CharacterCasing {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CCharacterCasing_Upper
    }
}
extension WinUI.CharacterCasing: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ClickMode {
    public static var release : WinUI.ClickMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CClickMode_Release
    }
    public static var press : WinUI.ClickMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CClickMode_Press
    }
    public static var hover : WinUI.ClickMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CClickMode_Hover
    }
}
extension WinUI.ClickMode: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ColorPickerHsvChannel {
    public static var hue : WinUI.ColorPickerHsvChannel {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CColorPickerHsvChannel_Hue
    }
    public static var saturation : WinUI.ColorPickerHsvChannel {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CColorPickerHsvChannel_Saturation
    }
    public static var value : WinUI.ColorPickerHsvChannel {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CColorPickerHsvChannel_Value
    }
    public static var alpha : WinUI.ColorPickerHsvChannel {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CColorPickerHsvChannel_Alpha
    }
}
extension WinUI.ColorPickerHsvChannel: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ColorSpectrumComponents {
    public static var hueValue : WinUI.ColorSpectrumComponents {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CColorSpectrumComponents_HueValue
    }
    public static var valueHue : WinUI.ColorSpectrumComponents {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CColorSpectrumComponents_ValueHue
    }
    public static var hueSaturation : WinUI.ColorSpectrumComponents {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CColorSpectrumComponents_HueSaturation
    }
    public static var saturationHue : WinUI.ColorSpectrumComponents {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CColorSpectrumComponents_SaturationHue
    }
    public static var saturationValue : WinUI.ColorSpectrumComponents {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CColorSpectrumComponents_SaturationValue
    }
    public static var valueSaturation : WinUI.ColorSpectrumComponents {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CColorSpectrumComponents_ValueSaturation
    }
}
extension WinUI.ColorSpectrumComponents: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ColorSpectrumShape {
    public static var box : WinUI.ColorSpectrumShape {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CColorSpectrumShape_Box
    }
    public static var ring : WinUI.ColorSpectrumShape {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CColorSpectrumShape_Ring
    }
}
extension WinUI.ColorSpectrumShape: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ComboBoxSelectionChangedTrigger {
    public static var committed : WinUI.ComboBoxSelectionChangedTrigger {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CComboBoxSelectionChangedTrigger_Committed
    }
    public static var always : WinUI.ComboBoxSelectionChangedTrigger {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CComboBoxSelectionChangedTrigger_Always
    }
}
extension WinUI.ComboBoxSelectionChangedTrigger: @retroactive Hashable, @retroactive Codable {}

extension WinUI.CommandBarDefaultLabelPosition {
    public static var bottom : WinUI.CommandBarDefaultLabelPosition {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CCommandBarDefaultLabelPosition_Bottom
    }
    public static var right : WinUI.CommandBarDefaultLabelPosition {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CCommandBarDefaultLabelPosition_Right
    }
    public static var collapsed : WinUI.CommandBarDefaultLabelPosition {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CCommandBarDefaultLabelPosition_Collapsed
    }
}
extension WinUI.CommandBarDefaultLabelPosition: @retroactive Hashable, @retroactive Codable {}

extension WinUI.CommandBarDynamicOverflowAction {
    public static var addingToOverflow : WinUI.CommandBarDynamicOverflowAction {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CCommandBarDynamicOverflowAction_AddingToOverflow
    }
    public static var removingFromOverflow : WinUI.CommandBarDynamicOverflowAction {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CCommandBarDynamicOverflowAction_RemovingFromOverflow
    }
}
extension WinUI.CommandBarDynamicOverflowAction: @retroactive Hashable, @retroactive Codable {}

extension WinUI.CommandBarLabelPosition {
    public static var `default` : WinUI.CommandBarLabelPosition {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CCommandBarLabelPosition_Default
    }
    public static var collapsed : WinUI.CommandBarLabelPosition {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CCommandBarLabelPosition_Collapsed
    }
}
extension WinUI.CommandBarLabelPosition: @retroactive Hashable, @retroactive Codable {}

extension WinUI.CommandBarOverflowButtonVisibility {
    public static var auto : WinUI.CommandBarOverflowButtonVisibility {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CCommandBarOverflowButtonVisibility_Auto
    }
    public static var visible : WinUI.CommandBarOverflowButtonVisibility {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CCommandBarOverflowButtonVisibility_Visible
    }
    public static var collapsed : WinUI.CommandBarOverflowButtonVisibility {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CCommandBarOverflowButtonVisibility_Collapsed
    }
}
extension WinUI.CommandBarOverflowButtonVisibility: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ContentDialogButton {
    public static var none : WinUI.ContentDialogButton {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CContentDialogButton_None
    }
    public static var primary : WinUI.ContentDialogButton {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CContentDialogButton_Primary
    }
    public static var secondary : WinUI.ContentDialogButton {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CContentDialogButton_Secondary
    }
    public static var close : WinUI.ContentDialogButton {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CContentDialogButton_Close
    }
}
extension WinUI.ContentDialogButton: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ContentDialogPlacement {
    public static var popup : WinUI.ContentDialogPlacement {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CContentDialogPlacement_Popup
    }
    public static var inPlace : WinUI.ContentDialogPlacement {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CContentDialogPlacement_InPlace
    }
}
extension WinUI.ContentDialogPlacement: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ContentDialogResult {
    public static var none : WinUI.ContentDialogResult {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CContentDialogResult_None
    }
    public static var primary : WinUI.ContentDialogResult {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CContentDialogResult_Primary
    }
    public static var secondary : WinUI.ContentDialogResult {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CContentDialogResult_Secondary
    }
}
extension WinUI.ContentDialogResult: @retroactive Hashable, @retroactive Codable {}

extension WinUI.DisabledFormattingAccelerators {
    public static var none : WinUI.DisabledFormattingAccelerators {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CDisabledFormattingAccelerators_None
    }
    public static var bold : WinUI.DisabledFormattingAccelerators {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CDisabledFormattingAccelerators_Bold
    }
    public static var italic : WinUI.DisabledFormattingAccelerators {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CDisabledFormattingAccelerators_Italic
    }
    public static var underline : WinUI.DisabledFormattingAccelerators {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CDisabledFormattingAccelerators_Underline
    }
    public static var all : WinUI.DisabledFormattingAccelerators {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CDisabledFormattingAccelerators_All
    }
}
extension WinUI.DisabledFormattingAccelerators: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ElementRealizationOptions {
    public static var none : WinUI.ElementRealizationOptions {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CElementRealizationOptions_None
    }
    public static var forceCreate : WinUI.ElementRealizationOptions {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CElementRealizationOptions_ForceCreate
    }
    public static var suppressAutoRecycle : WinUI.ElementRealizationOptions {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CElementRealizationOptions_SuppressAutoRecycle
    }
}
extension WinUI.ElementRealizationOptions: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ExpandDirection {
    public static var down : WinUI.ExpandDirection {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CExpandDirection_Down
    }
    public static var up : WinUI.ExpandDirection {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CExpandDirection_Up
    }
}
extension WinUI.ExpandDirection: @retroactive Hashable, @retroactive Codable {}

extension WinUI.IncrementalLoadingTrigger {
    public static var none : WinUI.IncrementalLoadingTrigger {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIncrementalLoadingTrigger_None
    }
    public static var edge : WinUI.IncrementalLoadingTrigger {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIncrementalLoadingTrigger_Edge
    }
}
extension WinUI.IncrementalLoadingTrigger: @retroactive Hashable, @retroactive Codable {}

extension WinUI.IndexBasedLayoutOrientation {
    public static var none : WinUI.IndexBasedLayoutOrientation {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIndexBasedLayoutOrientation_None
    }
    public static var topToBottom : WinUI.IndexBasedLayoutOrientation {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIndexBasedLayoutOrientation_TopToBottom
    }
    public static var leftToRight : WinUI.IndexBasedLayoutOrientation {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIndexBasedLayoutOrientation_LeftToRight
    }
}
extension WinUI.IndexBasedLayoutOrientation: @retroactive Hashable, @retroactive Codable {}

extension WinUI.InfoBarCloseReason {
    public static var closeButton : WinUI.InfoBarCloseReason {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CInfoBarCloseReason_CloseButton
    }
    public static var programmatic : WinUI.InfoBarCloseReason {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CInfoBarCloseReason_Programmatic
    }
}
extension WinUI.InfoBarCloseReason: @retroactive Hashable, @retroactive Codable {}

extension WinUI.InfoBarSeverity {
    public static var informational : WinUI.InfoBarSeverity {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CInfoBarSeverity_Informational
    }
    public static var success : WinUI.InfoBarSeverity {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CInfoBarSeverity_Success
    }
    public static var warning : WinUI.InfoBarSeverity {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CInfoBarSeverity_Warning
    }
    public static var error : WinUI.InfoBarSeverity {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CInfoBarSeverity_Error
    }
}
extension WinUI.InfoBarSeverity: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ItemCollectionTransitionOperation {
    public static var add : WinUI.ItemCollectionTransitionOperation {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CItemCollectionTransitionOperation_Add
    }
    public static var remove : WinUI.ItemCollectionTransitionOperation {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CItemCollectionTransitionOperation_Remove
    }
    public static var move : WinUI.ItemCollectionTransitionOperation {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CItemCollectionTransitionOperation_Move
    }
}
extension WinUI.ItemCollectionTransitionOperation: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ItemCollectionTransitionTriggers {
    public static var collectionChangeAdd : WinUI.ItemCollectionTransitionTriggers {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CItemCollectionTransitionTriggers_CollectionChangeAdd
    }
    public static var collectionChangeRemove : WinUI.ItemCollectionTransitionTriggers {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CItemCollectionTransitionTriggers_CollectionChangeRemove
    }
    public static var collectionChangeReset : WinUI.ItemCollectionTransitionTriggers {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CItemCollectionTransitionTriggers_CollectionChangeReset
    }
    public static var layoutTransition : WinUI.ItemCollectionTransitionTriggers {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CItemCollectionTransitionTriggers_LayoutTransition
    }
}
extension WinUI.ItemCollectionTransitionTriggers: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ItemsUpdatingScrollMode {
    public static var keepItemsInView : WinUI.ItemsUpdatingScrollMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CItemsUpdatingScrollMode_KeepItemsInView
    }
    public static var keepScrollOffset : WinUI.ItemsUpdatingScrollMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CItemsUpdatingScrollMode_KeepScrollOffset
    }
    public static var keepLastItemInView : WinUI.ItemsUpdatingScrollMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CItemsUpdatingScrollMode_KeepLastItemInView
    }
}
extension WinUI.ItemsUpdatingScrollMode: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ItemsViewSelectionMode {
    public static var none : WinUI.ItemsViewSelectionMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CItemsViewSelectionMode_None
    }
    public static var single : WinUI.ItemsViewSelectionMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CItemsViewSelectionMode_Single
    }
    public static var multiple : WinUI.ItemsViewSelectionMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CItemsViewSelectionMode_Multiple
    }
    public static var extended : WinUI.ItemsViewSelectionMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CItemsViewSelectionMode_Extended
    }
}
extension WinUI.ItemsViewSelectionMode: @retroactive Hashable, @retroactive Codable {}

extension WinUI.LightDismissOverlayMode {
    public static var auto : WinUI.LightDismissOverlayMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CLightDismissOverlayMode_Auto
    }
    public static var on : WinUI.LightDismissOverlayMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CLightDismissOverlayMode_On
    }
    public static var off : WinUI.LightDismissOverlayMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CLightDismissOverlayMode_Off
    }
}
extension WinUI.LightDismissOverlayMode: @retroactive Hashable, @retroactive Codable {}

extension WinUI.LinedFlowLayoutItemsJustification {
    public static var start : WinUI.LinedFlowLayoutItemsJustification {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CLinedFlowLayoutItemsJustification_Start
    }
    public static var center : WinUI.LinedFlowLayoutItemsJustification {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CLinedFlowLayoutItemsJustification_Center
    }
    public static var end : WinUI.LinedFlowLayoutItemsJustification {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CLinedFlowLayoutItemsJustification_End
    }
    public static var spaceAround : WinUI.LinedFlowLayoutItemsJustification {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CLinedFlowLayoutItemsJustification_SpaceAround
    }
    public static var spaceBetween : WinUI.LinedFlowLayoutItemsJustification {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CLinedFlowLayoutItemsJustification_SpaceBetween
    }
    public static var spaceEvenly : WinUI.LinedFlowLayoutItemsJustification {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CLinedFlowLayoutItemsJustification_SpaceEvenly
    }
}
extension WinUI.LinedFlowLayoutItemsJustification: @retroactive Hashable, @retroactive Codable {}

extension WinUI.LinedFlowLayoutItemsStretch {
    public static var none : WinUI.LinedFlowLayoutItemsStretch {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CLinedFlowLayoutItemsStretch_None
    }
    public static var fill : WinUI.LinedFlowLayoutItemsStretch {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CLinedFlowLayoutItemsStretch_Fill
    }
}
extension WinUI.LinedFlowLayoutItemsStretch: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ListPickerFlyoutSelectionMode {
    public static var single : WinUI.ListPickerFlyoutSelectionMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CListPickerFlyoutSelectionMode_Single
    }
    public static var multiple : WinUI.ListPickerFlyoutSelectionMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CListPickerFlyoutSelectionMode_Multiple
    }
}
extension WinUI.ListPickerFlyoutSelectionMode: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ListViewReorderMode {
    public static var disabled : WinUI.ListViewReorderMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CListViewReorderMode_Disabled
    }
    public static var enabled : WinUI.ListViewReorderMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CListViewReorderMode_Enabled
    }
}
extension WinUI.ListViewReorderMode: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ListViewSelectionMode {
    public static var none : WinUI.ListViewSelectionMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CListViewSelectionMode_None
    }
    public static var single : WinUI.ListViewSelectionMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CListViewSelectionMode_Single
    }
    public static var multiple : WinUI.ListViewSelectionMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CListViewSelectionMode_Multiple
    }
    public static var extended : WinUI.ListViewSelectionMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CListViewSelectionMode_Extended
    }
}
extension WinUI.ListViewSelectionMode: @retroactive Hashable, @retroactive Codable {}

extension WinUI.NavigationViewBackButtonVisible {
    public static var collapsed : WinUI.NavigationViewBackButtonVisible {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewBackButtonVisible_Collapsed
    }
    public static var visible : WinUI.NavigationViewBackButtonVisible {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewBackButtonVisible_Visible
    }
    public static var auto : WinUI.NavigationViewBackButtonVisible {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewBackButtonVisible_Auto
    }
}
extension WinUI.NavigationViewBackButtonVisible: @retroactive Hashable, @retroactive Codable {}

extension WinUI.NavigationViewDisplayMode {
    public static var minimal : WinUI.NavigationViewDisplayMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewDisplayMode_Minimal
    }
    public static var compact : WinUI.NavigationViewDisplayMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewDisplayMode_Compact
    }
    public static var expanded : WinUI.NavigationViewDisplayMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewDisplayMode_Expanded
    }
}
extension WinUI.NavigationViewDisplayMode: @retroactive Hashable, @retroactive Codable {}

extension WinUI.NavigationViewOverflowLabelMode {
    public static var moreLabel : WinUI.NavigationViewOverflowLabelMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewOverflowLabelMode_MoreLabel
    }
    public static var noLabel : WinUI.NavigationViewOverflowLabelMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewOverflowLabelMode_NoLabel
    }
}
extension WinUI.NavigationViewOverflowLabelMode: @retroactive Hashable, @retroactive Codable {}

extension WinUI.NavigationViewPaneDisplayMode {
    public static var auto : WinUI.NavigationViewPaneDisplayMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewPaneDisplayMode_Auto
    }
    public static var left : WinUI.NavigationViewPaneDisplayMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewPaneDisplayMode_Left
    }
    public static var top : WinUI.NavigationViewPaneDisplayMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewPaneDisplayMode_Top
    }
    public static var leftCompact : WinUI.NavigationViewPaneDisplayMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewPaneDisplayMode_LeftCompact
    }
    public static var leftMinimal : WinUI.NavigationViewPaneDisplayMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewPaneDisplayMode_LeftMinimal
    }
}
extension WinUI.NavigationViewPaneDisplayMode: @retroactive Hashable, @retroactive Codable {}

extension WinUI.NavigationViewSelectionFollowsFocus {
    public static var disabled : WinUI.NavigationViewSelectionFollowsFocus {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewSelectionFollowsFocus_Disabled
    }
    public static var enabled : WinUI.NavigationViewSelectionFollowsFocus {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewSelectionFollowsFocus_Enabled
    }
}
extension WinUI.NavigationViewSelectionFollowsFocus: @retroactive Hashable, @retroactive Codable {}

extension WinUI.NavigationViewShoulderNavigationEnabled {
    public static var whenSelectionFollowsFocus : WinUI.NavigationViewShoulderNavigationEnabled {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewShoulderNavigationEnabled_WhenSelectionFollowsFocus
    }
    public static var always : WinUI.NavigationViewShoulderNavigationEnabled {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewShoulderNavigationEnabled_Always
    }
    public static var never : WinUI.NavigationViewShoulderNavigationEnabled {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewShoulderNavigationEnabled_Never
    }
}
extension WinUI.NavigationViewShoulderNavigationEnabled: @retroactive Hashable, @retroactive Codable {}

extension WinUI.NumberBoxSpinButtonPlacementMode {
    public static var hidden : WinUI.NumberBoxSpinButtonPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNumberBoxSpinButtonPlacementMode_Hidden
    }
    public static var compact : WinUI.NumberBoxSpinButtonPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNumberBoxSpinButtonPlacementMode_Compact
    }
    public static var inline : WinUI.NumberBoxSpinButtonPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNumberBoxSpinButtonPlacementMode_Inline
    }
}
extension WinUI.NumberBoxSpinButtonPlacementMode: @retroactive Hashable, @retroactive Codable {}

extension WinUI.NumberBoxValidationMode {
    public static var invalidInputOverwritten : WinUI.NumberBoxValidationMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNumberBoxValidationMode_InvalidInputOverwritten
    }
    public static var disabled : WinUI.NumberBoxValidationMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNumberBoxValidationMode_Disabled
    }
}
extension WinUI.NumberBoxValidationMode: @retroactive Hashable, @retroactive Codable {}

extension WinUI.Orientation {
    public static var vertical : WinUI.Orientation {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_COrientation_Vertical
    }
    public static var horizontal : WinUI.Orientation {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_COrientation_Horizontal
    }
}
extension WinUI.Orientation: @retroactive Hashable, @retroactive Codable {}

extension WinUI.PanelScrollingDirection {
    public static var none : WinUI.PanelScrollingDirection {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPanelScrollingDirection_None
    }
    public static var forward : WinUI.PanelScrollingDirection {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPanelScrollingDirection_Forward
    }
    public static var backward : WinUI.PanelScrollingDirection {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPanelScrollingDirection_Backward
    }
}
extension WinUI.PanelScrollingDirection: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ParallaxSourceOffsetKind {
    public static var absolute : WinUI.ParallaxSourceOffsetKind {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CParallaxSourceOffsetKind_Absolute
    }
    public static var relative : WinUI.ParallaxSourceOffsetKind {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CParallaxSourceOffsetKind_Relative
    }
}
extension WinUI.ParallaxSourceOffsetKind: @retroactive Hashable, @retroactive Codable {}

extension WinUI.PasswordRevealMode {
    public static var peek : WinUI.PasswordRevealMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPasswordRevealMode_Peek
    }
    public static var hidden : WinUI.PasswordRevealMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPasswordRevealMode_Hidden
    }
    public static var visible : WinUI.PasswordRevealMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPasswordRevealMode_Visible
    }
}
extension WinUI.PasswordRevealMode: @retroactive Hashable, @retroactive Codable {}

extension WinUI.PipsPagerButtonVisibility {
    public static var visible : WinUI.PipsPagerButtonVisibility {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPipsPagerButtonVisibility_Visible
    }
    public static var visibleOnPointerOver : WinUI.PipsPagerButtonVisibility {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPipsPagerButtonVisibility_VisibleOnPointerOver
    }
    public static var collapsed : WinUI.PipsPagerButtonVisibility {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPipsPagerButtonVisibility_Collapsed
    }
}
extension WinUI.PipsPagerButtonVisibility: @retroactive Hashable, @retroactive Codable {}

extension WinUI.PivotHeaderFocusVisualPlacement {
    public static var itemHeaders : WinUI.PivotHeaderFocusVisualPlacement {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPivotHeaderFocusVisualPlacement_ItemHeaders
    }
    public static var selectedItemHeader : WinUI.PivotHeaderFocusVisualPlacement {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPivotHeaderFocusVisualPlacement_SelectedItemHeader
    }
}
extension WinUI.PivotHeaderFocusVisualPlacement: @retroactive Hashable, @retroactive Codable {}

extension WinUI.PivotSlideInAnimationGroup {
    public static var `default` : WinUI.PivotSlideInAnimationGroup {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPivotSlideInAnimationGroup_Default
    }
    public static var groupOne : WinUI.PivotSlideInAnimationGroup {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPivotSlideInAnimationGroup_GroupOne
    }
    public static var groupTwo : WinUI.PivotSlideInAnimationGroup {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPivotSlideInAnimationGroup_GroupTwo
    }
    public static var groupThree : WinUI.PivotSlideInAnimationGroup {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPivotSlideInAnimationGroup_GroupThree
    }
}
extension WinUI.PivotSlideInAnimationGroup: @retroactive Hashable, @retroactive Codable {}

extension WinUI.PlayerAnimationOptimization {
    public static var latency : WinUI.PlayerAnimationOptimization {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPlayerAnimationOptimization_Latency
    }
    public static var resources : WinUI.PlayerAnimationOptimization {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPlayerAnimationOptimization_Resources
    }
}
extension WinUI.PlayerAnimationOptimization: @retroactive Hashable, @retroactive Codable {}

extension WinUI.RefreshPullDirection {
    public static var leftToRight : WinUI.RefreshPullDirection {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CRefreshPullDirection_LeftToRight
    }
    public static var topToBottom : WinUI.RefreshPullDirection {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CRefreshPullDirection_TopToBottom
    }
    public static var rightToLeft : WinUI.RefreshPullDirection {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CRefreshPullDirection_RightToLeft
    }
    public static var bottomToTop : WinUI.RefreshPullDirection {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CRefreshPullDirection_BottomToTop
    }
}
extension WinUI.RefreshPullDirection: @retroactive Hashable, @retroactive Codable {}

extension WinUI.RefreshVisualizerOrientation {
    public static var auto : WinUI.RefreshVisualizerOrientation {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CRefreshVisualizerOrientation_Auto
    }
    public static var normal : WinUI.RefreshVisualizerOrientation {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CRefreshVisualizerOrientation_Normal
    }
    public static var rotate90DegreesCounterclockwise : WinUI.RefreshVisualizerOrientation {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CRefreshVisualizerOrientation_Rotate90DegreesCounterclockwise
    }
    public static var rotate270DegreesCounterclockwise : WinUI.RefreshVisualizerOrientation {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CRefreshVisualizerOrientation_Rotate270DegreesCounterclockwise
    }
}
extension WinUI.RefreshVisualizerOrientation: @retroactive Hashable, @retroactive Codable {}

extension WinUI.RefreshVisualizerState {
    public static var idle : WinUI.RefreshVisualizerState {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CRefreshVisualizerState_Idle
    }
    public static var peeking : WinUI.RefreshVisualizerState {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CRefreshVisualizerState_Peeking
    }
    public static var interacting : WinUI.RefreshVisualizerState {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CRefreshVisualizerState_Interacting
    }
    public static var pending : WinUI.RefreshVisualizerState {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CRefreshVisualizerState_Pending
    }
    public static var refreshing : WinUI.RefreshVisualizerState {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CRefreshVisualizerState_Refreshing
    }
}
extension WinUI.RefreshVisualizerState: @retroactive Hashable, @retroactive Codable {}

extension WinUI.RequiresPointer {
    public static var never : WinUI.RequiresPointer {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CRequiresPointer_Never
    }
    public static var whenEngaged : WinUI.RequiresPointer {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CRequiresPointer_WhenEngaged
    }
    public static var whenFocused : WinUI.RequiresPointer {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CRequiresPointer_WhenFocused
    }
}
extension WinUI.RequiresPointer: @retroactive Hashable, @retroactive Codable {}

extension WinUI.RichEditClipboardFormat {
    public static var allFormats : WinUI.RichEditClipboardFormat {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CRichEditClipboardFormat_AllFormats
    }
    public static var plainText : WinUI.RichEditClipboardFormat {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CRichEditClipboardFormat_PlainText
    }
}
extension WinUI.RichEditClipboardFormat: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ScrollBarVisibility {
    public static var disabled : WinUI.ScrollBarVisibility {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollBarVisibility_Disabled
    }
    public static var auto : WinUI.ScrollBarVisibility {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollBarVisibility_Auto
    }
    public static var hidden : WinUI.ScrollBarVisibility {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollBarVisibility_Hidden
    }
    public static var visible : WinUI.ScrollBarVisibility {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollBarVisibility_Visible
    }
}
extension WinUI.ScrollBarVisibility: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ScrollIntoViewAlignment {
    public static var `default` : WinUI.ScrollIntoViewAlignment {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollIntoViewAlignment_Default
    }
    public static var leading : WinUI.ScrollIntoViewAlignment {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollIntoViewAlignment_Leading
    }
}
extension WinUI.ScrollIntoViewAlignment: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ScrollMode {
    public static var disabled : WinUI.ScrollMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollMode_Disabled
    }
    public static var enabled : WinUI.ScrollMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollMode_Enabled
    }
    public static var auto : WinUI.ScrollMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollMode_Auto
    }
}
extension WinUI.ScrollMode: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ScrollingAnimationMode {
    public static var disabled : WinUI.ScrollingAnimationMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingAnimationMode_Disabled
    }
    public static var enabled : WinUI.ScrollingAnimationMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingAnimationMode_Enabled
    }
    public static var auto : WinUI.ScrollingAnimationMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingAnimationMode_Auto
    }
}
extension WinUI.ScrollingAnimationMode: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ScrollingChainMode {
    public static var auto : WinUI.ScrollingChainMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingChainMode_Auto
    }
    public static var always : WinUI.ScrollingChainMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingChainMode_Always
    }
    public static var never : WinUI.ScrollingChainMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingChainMode_Never
    }
}
extension WinUI.ScrollingChainMode: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ScrollingContentOrientation {
    public static var vertical : WinUI.ScrollingContentOrientation {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingContentOrientation_Vertical
    }
    public static var horizontal : WinUI.ScrollingContentOrientation {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingContentOrientation_Horizontal
    }
    public static var none : WinUI.ScrollingContentOrientation {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingContentOrientation_None
    }
    public static var both : WinUI.ScrollingContentOrientation {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingContentOrientation_Both
    }
}
extension WinUI.ScrollingContentOrientation: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ScrollingInputKinds {
    public static var none : WinUI.ScrollingInputKinds {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingInputKinds_None
    }
    public static var touch : WinUI.ScrollingInputKinds {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingInputKinds_Touch
    }
    public static var pen : WinUI.ScrollingInputKinds {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingInputKinds_Pen
    }
    public static var mouseWheel : WinUI.ScrollingInputKinds {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingInputKinds_MouseWheel
    }
    public static var keyboard : WinUI.ScrollingInputKinds {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingInputKinds_Keyboard
    }
    public static var gamepad : WinUI.ScrollingInputKinds {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingInputKinds_Gamepad
    }
    public static var all : WinUI.ScrollingInputKinds {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingInputKinds_All
    }
}
extension WinUI.ScrollingInputKinds: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ScrollingInteractionState {
    public static var idle : WinUI.ScrollingInteractionState {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingInteractionState_Idle
    }
    public static var interaction : WinUI.ScrollingInteractionState {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingInteractionState_Interaction
    }
    public static var inertia : WinUI.ScrollingInteractionState {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingInteractionState_Inertia
    }
    public static var animation : WinUI.ScrollingInteractionState {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingInteractionState_Animation
    }
}
extension WinUI.ScrollingInteractionState: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ScrollingRailMode {
    public static var enabled : WinUI.ScrollingRailMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingRailMode_Enabled
    }
    public static var disabled : WinUI.ScrollingRailMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingRailMode_Disabled
    }
}
extension WinUI.ScrollingRailMode: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ScrollingScrollBarVisibility {
    public static var auto : WinUI.ScrollingScrollBarVisibility {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingScrollBarVisibility_Auto
    }
    public static var visible : WinUI.ScrollingScrollBarVisibility {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingScrollBarVisibility_Visible
    }
    public static var hidden : WinUI.ScrollingScrollBarVisibility {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingScrollBarVisibility_Hidden
    }
}
extension WinUI.ScrollingScrollBarVisibility: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ScrollingScrollMode {
    public static var enabled : WinUI.ScrollingScrollMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingScrollMode_Enabled
    }
    public static var disabled : WinUI.ScrollingScrollMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingScrollMode_Disabled
    }
    public static var auto : WinUI.ScrollingScrollMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingScrollMode_Auto
    }
}
extension WinUI.ScrollingScrollMode: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ScrollingSnapPointsMode {
    public static var `default` : WinUI.ScrollingSnapPointsMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingSnapPointsMode_Default
    }
    public static var ignore : WinUI.ScrollingSnapPointsMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingSnapPointsMode_Ignore
    }
}
extension WinUI.ScrollingSnapPointsMode: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ScrollingZoomMode {
    public static var enabled : WinUI.ScrollingZoomMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingZoomMode_Enabled
    }
    public static var disabled : WinUI.ScrollingZoomMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingZoomMode_Disabled
    }
}
extension WinUI.ScrollingZoomMode: @retroactive Hashable, @retroactive Codable {}

extension WinUI.SelectionMode {
    public static var single : WinUI.SelectionMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSelectionMode_Single
    }
    public static var multiple : WinUI.SelectionMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSelectionMode_Multiple
    }
    public static var extended : WinUI.SelectionMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSelectionMode_Extended
    }
}
extension WinUI.SelectionMode: @retroactive Hashable, @retroactive Codable {}

extension WinUI.SnapPointsType {
    public static var none : WinUI.SnapPointsType {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSnapPointsType_None
    }
    public static var optional : WinUI.SnapPointsType {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSnapPointsType_Optional
    }
    public static var mandatory : WinUI.SnapPointsType {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSnapPointsType_Mandatory
    }
    public static var optionalSingle : WinUI.SnapPointsType {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSnapPointsType_OptionalSingle
    }
    public static var mandatorySingle : WinUI.SnapPointsType {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSnapPointsType_MandatorySingle
    }
}
extension WinUI.SnapPointsType: @retroactive Hashable, @retroactive Codable {}

extension WinUI.SplitViewDisplayMode {
    public static var overlay : WinUI.SplitViewDisplayMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSplitViewDisplayMode_Overlay
    }
    public static var inline : WinUI.SplitViewDisplayMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSplitViewDisplayMode_Inline
    }
    public static var compactOverlay : WinUI.SplitViewDisplayMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSplitViewDisplayMode_CompactOverlay
    }
    public static var compactInline : WinUI.SplitViewDisplayMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSplitViewDisplayMode_CompactInline
    }
}
extension WinUI.SplitViewDisplayMode: @retroactive Hashable, @retroactive Codable {}

extension WinUI.SplitViewPanePlacement {
    public static var left : WinUI.SplitViewPanePlacement {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSplitViewPanePlacement_Left
    }
    public static var right : WinUI.SplitViewPanePlacement {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSplitViewPanePlacement_Right
    }
}
extension WinUI.SplitViewPanePlacement: @retroactive Hashable, @retroactive Codable {}

extension WinUI.StretchDirection {
    public static var upOnly : WinUI.StretchDirection {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CStretchDirection_UpOnly
    }
    public static var downOnly : WinUI.StretchDirection {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CStretchDirection_DownOnly
    }
    public static var both : WinUI.StretchDirection {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CStretchDirection_Both
    }
}
extension WinUI.StretchDirection: @retroactive Hashable, @retroactive Codable {}

extension WinUI.SwipeBehaviorOnInvoked {
    public static var auto : WinUI.SwipeBehaviorOnInvoked {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSwipeBehaviorOnInvoked_Auto
    }
    public static var close : WinUI.SwipeBehaviorOnInvoked {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSwipeBehaviorOnInvoked_Close
    }
    public static var remainOpen : WinUI.SwipeBehaviorOnInvoked {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSwipeBehaviorOnInvoked_RemainOpen
    }
}
extension WinUI.SwipeBehaviorOnInvoked: @retroactive Hashable, @retroactive Codable {}

extension WinUI.SwipeMode {
    public static var reveal : WinUI.SwipeMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSwipeMode_Reveal
    }
    public static var execute : WinUI.SwipeMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSwipeMode_Execute
    }
}
extension WinUI.SwipeMode: @retroactive Hashable, @retroactive Codable {}

extension WinUI.Symbol {
    public static var previous : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Previous
    }
    public static var next : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Next
    }
    public static var play : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Play
    }
    public static var pause : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Pause
    }
    public static var edit : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Edit
    }
    public static var save : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Save
    }
    public static var clear : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Clear
    }
    public static var delete : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Delete
    }
    public static var remove : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Remove
    }
    public static var add : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Add
    }
    public static var cancel : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Cancel
    }
    public static var accept : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Accept
    }
    public static var more : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_More
    }
    public static var redo : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Redo
    }
    public static var undo : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Undo
    }
    public static var home : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Home
    }
    public static var up : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Up
    }
    public static var forward : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Forward
    }
    public static var back : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Back
    }
    public static var favorite : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Favorite
    }
    public static var camera : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Camera
    }
    public static var setting : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Setting
    }
    public static var video : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Video
    }
    public static var sync : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Sync
    }
    public static var download : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Download
    }
    public static var mail : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Mail
    }
    public static var find : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Find
    }
    public static var help : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Help
    }
    public static var upload : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Upload
    }
    public static var emoji : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Emoji
    }
    public static var twoPage : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_TwoPage
    }
    public static var leaveChat : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_LeaveChat
    }
    public static var mailForward : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_MailForward
    }
    public static var clock : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Clock
    }
    public static var send : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Send
    }
    public static var crop : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Crop
    }
    public static var rotateCamera : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_RotateCamera
    }
    public static var people : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_People
    }
    public static var openPane : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_OpenPane
    }
    public static var closePane : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_ClosePane
    }
    public static var world : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_World
    }
    public static var flag : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Flag
    }
    public static var previewLink : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_PreviewLink
    }
    public static var globe : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Globe
    }
    public static var trim : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Trim
    }
    public static var attachCamera : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_AttachCamera
    }
    public static var zoomIn : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_ZoomIn
    }
    public static var bookmarks : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Bookmarks
    }
    public static var document : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Document
    }
    public static var protectedDocument : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_ProtectedDocument
    }
    public static var page : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Page
    }
    public static var bullets : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Bullets
    }
    public static var comment : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Comment
    }
    public static var mailFilled : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_MailFilled
    }
    public static var contactInfo : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_ContactInfo
    }
    public static var hangUp : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_HangUp
    }
    public static var viewAll : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_ViewAll
    }
    public static var mapPin : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_MapPin
    }
    public static var phone : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Phone
    }
    public static var videoChat : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_VideoChat
    }
    public static var `switch` : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Switch
    }
    public static var contact : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Contact
    }
    public static var rename : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Rename
    }
    public static var pin : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Pin
    }
    public static var musicInfo : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_MusicInfo
    }
    public static var go : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Go
    }
    public static var keyboard : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Keyboard
    }
    public static var dockLeft : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_DockLeft
    }
    public static var dockRight : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_DockRight
    }
    public static var dockBottom : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_DockBottom
    }
    public static var remote : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Remote
    }
    public static var refresh : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Refresh
    }
    public static var rotate : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Rotate
    }
    public static var shuffle : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Shuffle
    }
    public static var list : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_List
    }
    public static var shop : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Shop
    }
    public static var selectAll : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_SelectAll
    }
    public static var orientation : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Orientation
    }
    public static var `import` : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Import
    }
    public static var importAll : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_ImportAll
    }
    public static var browsePhotos : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_BrowsePhotos
    }
    public static var webCam : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_WebCam
    }
    public static var pictures : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Pictures
    }
    public static var saveLocal : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_SaveLocal
    }
    public static var caption : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Caption
    }
    public static var stop : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Stop
    }
    public static var showResults : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_ShowResults
    }
    public static var volume : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Volume
    }
    public static var repair : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Repair
    }
    public static var message : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Message
    }
    public static var page2 : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Page2
    }
    public static var calendarDay : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_CalendarDay
    }
    public static var calendarWeek : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_CalendarWeek
    }
    public static var calendar : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Calendar
    }
    public static var character : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Character
    }
    public static var mailReplyAll : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_MailReplyAll
    }
    public static var read : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Read
    }
    public static var link : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Link
    }
    public static var account : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Account
    }
    public static var showBcc : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_ShowBcc
    }
    public static var hideBcc : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_HideBcc
    }
    public static var cut : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Cut
    }
    public static var attach : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Attach
    }
    public static var paste : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Paste
    }
    public static var filter : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Filter
    }
    public static var copy : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Copy
    }
    public static var emoji2 : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Emoji2
    }
    public static var important : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Important
    }
    public static var mailReply : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_MailReply
    }
    public static var slideShow : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_SlideShow
    }
    public static var sort : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Sort
    }
    public static var manage : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Manage
    }
    public static var allApps : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_AllApps
    }
    public static var disconnectDrive : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_DisconnectDrive
    }
    public static var mapDrive : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_MapDrive
    }
    public static var newWindow : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_NewWindow
    }
    public static var openWith : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_OpenWith
    }
    public static var contactPresence : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_ContactPresence
    }
    public static var priority : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Priority
    }
    public static var goToToday : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_GoToToday
    }
    public static var font : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Font
    }
    public static var fontColor : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_FontColor
    }
    public static var contact2 : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Contact2
    }
    public static var folder : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Folder
    }
    public static var audio : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Audio
    }
    public static var placeholder : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Placeholder
    }
    public static var view : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_View
    }
    public static var setLockScreen : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_SetLockScreen
    }
    public static var setTile : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_SetTile
    }
    public static var closedCaption : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_ClosedCaption
    }
    public static var stopSlideShow : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_StopSlideShow
    }
    public static var permissions : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Permissions
    }
    public static var highlight : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Highlight
    }
    public static var disableUpdates : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_DisableUpdates
    }
    public static var unFavorite : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_UnFavorite
    }
    public static var unPin : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_UnPin
    }
    public static var openLocal : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_OpenLocal
    }
    public static var mute : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Mute
    }
    public static var italic : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Italic
    }
    public static var underline : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Underline
    }
    public static var bold : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Bold
    }
    public static var moveToFolder : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_MoveToFolder
    }
    public static var likeDislike : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_LikeDislike
    }
    public static var dislike : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Dislike
    }
    public static var like : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Like
    }
    public static var alignRight : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_AlignRight
    }
    public static var alignCenter : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_AlignCenter
    }
    public static var alignLeft : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_AlignLeft
    }
    public static var zoom : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Zoom
    }
    public static var zoomOut : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_ZoomOut
    }
    public static var openFile : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_OpenFile
    }
    public static var otherUser : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_OtherUser
    }
    public static var admin : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Admin
    }
    public static var street : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Street
    }
    public static var map : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Map
    }
    public static var clearSelection : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_ClearSelection
    }
    public static var fontDecrease : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_FontDecrease
    }
    public static var fontIncrease : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_FontIncrease
    }
    public static var fontSize : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_FontSize
    }
    public static var cellPhone : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_CellPhone
    }
    public static var reShare : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_ReShare
    }
    public static var tag : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Tag
    }
    public static var repeatOne : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_RepeatOne
    }
    public static var repeatAll : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_RepeatAll
    }
    public static var outlineStar : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_OutlineStar
    }
    public static var solidStar : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_SolidStar
    }
    public static var calculator : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Calculator
    }
    public static var directions : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Directions
    }
    public static var target : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Target
    }
    public static var library : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Library
    }
    public static var phoneBook : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_PhoneBook
    }
    public static var memo : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Memo
    }
    public static var microphone : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Microphone
    }
    public static var postUpdate : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_PostUpdate
    }
    public static var backToWindow : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_BackToWindow
    }
    public static var fullScreen : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_FullScreen
    }
    public static var newFolder : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_NewFolder
    }
    public static var calendarReply : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_CalendarReply
    }
    public static var unSyncFolder : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_UnSyncFolder
    }
    public static var reportHacked : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_ReportHacked
    }
    public static var syncFolder : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_SyncFolder
    }
    public static var blockContact : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_BlockContact
    }
    public static var switchApps : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_SwitchApps
    }
    public static var addFriend : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_AddFriend
    }
    public static var touchPointer : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_TouchPointer
    }
    public static var goToStart : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_GoToStart
    }
    public static var zeroBars : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_ZeroBars
    }
    public static var oneBar : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_OneBar
    }
    public static var twoBars : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_TwoBars
    }
    public static var threeBars : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_ThreeBars
    }
    public static var fourBars : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_FourBars
    }
    public static var scan : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Scan
    }
    public static var preview : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Preview
    }
    public static var globalNavigationButton : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_GlobalNavigationButton
    }
    public static var share : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Share
    }
    public static var print : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_Print
    }
    public static var xboxOneConsole : WinUI.Symbol {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSymbol_XboxOneConsole
    }
}
extension WinUI.Symbol: @retroactive Hashable, @retroactive Codable {}

extension WinUI.TabViewCloseButtonOverlayMode {
    public static var auto : WinUI.TabViewCloseButtonOverlayMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTabViewCloseButtonOverlayMode_Auto
    }
    public static var onPointerOver : WinUI.TabViewCloseButtonOverlayMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTabViewCloseButtonOverlayMode_OnPointerOver
    }
    public static var always : WinUI.TabViewCloseButtonOverlayMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTabViewCloseButtonOverlayMode_Always
    }
}
extension WinUI.TabViewCloseButtonOverlayMode: @retroactive Hashable, @retroactive Codable {}

extension WinUI.TabViewWidthMode {
    public static var equal : WinUI.TabViewWidthMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTabViewWidthMode_Equal
    }
    public static var sizeToContent : WinUI.TabViewWidthMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTabViewWidthMode_SizeToContent
    }
    public static var compact : WinUI.TabViewWidthMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTabViewWidthMode_Compact
    }
}
extension WinUI.TabViewWidthMode: @retroactive Hashable, @retroactive Codable {}

extension WinUI.TeachingTipCloseReason {
    public static var closeButton : WinUI.TeachingTipCloseReason {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTeachingTipCloseReason_CloseButton
    }
    public static var lightDismiss : WinUI.TeachingTipCloseReason {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTeachingTipCloseReason_LightDismiss
    }
    public static var programmatic : WinUI.TeachingTipCloseReason {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTeachingTipCloseReason_Programmatic
    }
}
extension WinUI.TeachingTipCloseReason: @retroactive Hashable, @retroactive Codable {}

extension WinUI.TeachingTipHeroContentPlacementMode {
    public static var auto : WinUI.TeachingTipHeroContentPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTeachingTipHeroContentPlacementMode_Auto
    }
    public static var top : WinUI.TeachingTipHeroContentPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTeachingTipHeroContentPlacementMode_Top
    }
    public static var bottom : WinUI.TeachingTipHeroContentPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTeachingTipHeroContentPlacementMode_Bottom
    }
}
extension WinUI.TeachingTipHeroContentPlacementMode: @retroactive Hashable, @retroactive Codable {}

extension WinUI.TeachingTipPlacementMode {
    public static var auto : WinUI.TeachingTipPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTeachingTipPlacementMode_Auto
    }
    public static var top : WinUI.TeachingTipPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTeachingTipPlacementMode_Top
    }
    public static var bottom : WinUI.TeachingTipPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTeachingTipPlacementMode_Bottom
    }
    public static var left : WinUI.TeachingTipPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTeachingTipPlacementMode_Left
    }
    public static var right : WinUI.TeachingTipPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTeachingTipPlacementMode_Right
    }
    public static var topRight : WinUI.TeachingTipPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTeachingTipPlacementMode_TopRight
    }
    public static var topLeft : WinUI.TeachingTipPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTeachingTipPlacementMode_TopLeft
    }
    public static var bottomRight : WinUI.TeachingTipPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTeachingTipPlacementMode_BottomRight
    }
    public static var bottomLeft : WinUI.TeachingTipPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTeachingTipPlacementMode_BottomLeft
    }
    public static var leftTop : WinUI.TeachingTipPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTeachingTipPlacementMode_LeftTop
    }
    public static var leftBottom : WinUI.TeachingTipPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTeachingTipPlacementMode_LeftBottom
    }
    public static var rightTop : WinUI.TeachingTipPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTeachingTipPlacementMode_RightTop
    }
    public static var rightBottom : WinUI.TeachingTipPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTeachingTipPlacementMode_RightBottom
    }
    public static var center : WinUI.TeachingTipPlacementMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTeachingTipPlacementMode_Center
    }
}
extension WinUI.TeachingTipPlacementMode: @retroactive Hashable, @retroactive Codable {}

extension WinUI.TeachingTipTailVisibility {
    public static var auto : WinUI.TeachingTipTailVisibility {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTeachingTipTailVisibility_Auto
    }
    public static var visible : WinUI.TeachingTipTailVisibility {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTeachingTipTailVisibility_Visible
    }
    public static var collapsed : WinUI.TeachingTipTailVisibility {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTeachingTipTailVisibility_Collapsed
    }
}
extension WinUI.TeachingTipTailVisibility: @retroactive Hashable, @retroactive Codable {}

extension WinUI.TreeViewSelectionMode {
    public static var none : WinUI.TreeViewSelectionMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTreeViewSelectionMode_None
    }
    public static var single : WinUI.TreeViewSelectionMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTreeViewSelectionMode_Single
    }
    public static var multiple : WinUI.TreeViewSelectionMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTreeViewSelectionMode_Multiple
    }
}
extension WinUI.TreeViewSelectionMode: @retroactive Hashable, @retroactive Codable {}

extension WinUI.TwoPaneViewMode {
    public static var singlePane : WinUI.TwoPaneViewMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTwoPaneViewMode_SinglePane
    }
    public static var wide : WinUI.TwoPaneViewMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTwoPaneViewMode_Wide
    }
    public static var tall : WinUI.TwoPaneViewMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTwoPaneViewMode_Tall
    }
}
extension WinUI.TwoPaneViewMode: @retroactive Hashable, @retroactive Codable {}

extension WinUI.TwoPaneViewPriority {
    public static var pane1 : WinUI.TwoPaneViewPriority {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTwoPaneViewPriority_Pane1
    }
    public static var pane2 : WinUI.TwoPaneViewPriority {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTwoPaneViewPriority_Pane2
    }
}
extension WinUI.TwoPaneViewPriority: @retroactive Hashable, @retroactive Codable {}

extension WinUI.TwoPaneViewTallModeConfiguration {
    public static var singlePane : WinUI.TwoPaneViewTallModeConfiguration {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTwoPaneViewTallModeConfiguration_SinglePane
    }
    public static var topBottom : WinUI.TwoPaneViewTallModeConfiguration {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTwoPaneViewTallModeConfiguration_TopBottom
    }
    public static var bottomTop : WinUI.TwoPaneViewTallModeConfiguration {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTwoPaneViewTallModeConfiguration_BottomTop
    }
}
extension WinUI.TwoPaneViewTallModeConfiguration: @retroactive Hashable, @retroactive Codable {}

extension WinUI.TwoPaneViewWideModeConfiguration {
    public static var singlePane : WinUI.TwoPaneViewWideModeConfiguration {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTwoPaneViewWideModeConfiguration_SinglePane
    }
    public static var leftRight : WinUI.TwoPaneViewWideModeConfiguration {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTwoPaneViewWideModeConfiguration_LeftRight
    }
    public static var rightLeft : WinUI.TwoPaneViewWideModeConfiguration {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CTwoPaneViewWideModeConfiguration_RightLeft
    }
}
extension WinUI.TwoPaneViewWideModeConfiguration: @retroactive Hashable, @retroactive Codable {}

extension WinUI.UniformGridLayoutItemsJustification {
    public static var start : WinUI.UniformGridLayoutItemsJustification {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CUniformGridLayoutItemsJustification_Start
    }
    public static var center : WinUI.UniformGridLayoutItemsJustification {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CUniformGridLayoutItemsJustification_Center
    }
    public static var end : WinUI.UniformGridLayoutItemsJustification {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CUniformGridLayoutItemsJustification_End
    }
    public static var spaceAround : WinUI.UniformGridLayoutItemsJustification {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CUniformGridLayoutItemsJustification_SpaceAround
    }
    public static var spaceBetween : WinUI.UniformGridLayoutItemsJustification {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CUniformGridLayoutItemsJustification_SpaceBetween
    }
    public static var spaceEvenly : WinUI.UniformGridLayoutItemsJustification {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CUniformGridLayoutItemsJustification_SpaceEvenly
    }
}
extension WinUI.UniformGridLayoutItemsJustification: @retroactive Hashable, @retroactive Codable {}

extension WinUI.UniformGridLayoutItemsStretch {
    public static var none : WinUI.UniformGridLayoutItemsStretch {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CUniformGridLayoutItemsStretch_None
    }
    public static var fill : WinUI.UniformGridLayoutItemsStretch {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CUniformGridLayoutItemsStretch_Fill
    }
    public static var uniform : WinUI.UniformGridLayoutItemsStretch {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CUniformGridLayoutItemsStretch_Uniform
    }
}
extension WinUI.UniformGridLayoutItemsStretch: @retroactive Hashable, @retroactive Codable {}

extension WinUI.VirtualizationMode {
    public static var standard : WinUI.VirtualizationMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CVirtualizationMode_Standard
    }
    public static var recycling : WinUI.VirtualizationMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CVirtualizationMode_Recycling
    }
}
extension WinUI.VirtualizationMode: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ZoomMode {
    public static var disabled : WinUI.ZoomMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CZoomMode_Disabled
    }
    public static var enabled : WinUI.ZoomMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CZoomMode_Enabled
    }
}
extension WinUI.ZoomMode: @retroactive Hashable, @retroactive Codable {}

