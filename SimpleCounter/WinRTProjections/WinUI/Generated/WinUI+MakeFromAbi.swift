// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

fileprivate func makeIDataTemplateExtensionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    let swiftAbi: __ABI_Microsoft_UI_Xaml.IDataTemplateExtension = try! abi.QueryInterface()
    return __IMPL_Microsoft_UI_Xaml.IDataTemplateExtensionBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate func makeIElementFactoryFrom(abi: WindowsFoundation.IInspectable) -> Any {
    let swiftAbi: __ABI_Microsoft_UI_Xaml.IElementFactory = try! abi.QueryInterface()
    return __IMPL_Microsoft_UI_Xaml.IElementFactoryBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate func makeIXamlServiceProviderFrom(abi: WindowsFoundation.IInspectable) -> Any {
    let swiftAbi: __ABI_Microsoft_UI_Xaml.IXamlServiceProvider = try! abi.QueryInterface()
    return __IMPL_Microsoft_UI_Xaml.IXamlServiceProviderBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate func makeIAnimatedVisualFrom(abi: WindowsFoundation.IInspectable) -> Any {
    let swiftAbi: __ABI_Microsoft_UI_Xaml_Controls.IAnimatedVisual = try! abi.QueryInterface()
    return __IMPL_Microsoft_UI_Xaml_Controls.IAnimatedVisualBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate func makeIAnimatedVisual2From(abi: WindowsFoundation.IInspectable) -> Any {
    let swiftAbi: __ABI_Microsoft_UI_Xaml_Controls.IAnimatedVisual2 = try! abi.QueryInterface()
    return __IMPL_Microsoft_UI_Xaml_Controls.IAnimatedVisual2Bridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate func makeIAnimatedVisualSourceFrom(abi: WindowsFoundation.IInspectable) -> Any {
    let swiftAbi: __ABI_Microsoft_UI_Xaml_Controls.IAnimatedVisualSource = try! abi.QueryInterface()
    return __IMPL_Microsoft_UI_Xaml_Controls.IAnimatedVisualSourceBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate func makeIAnimatedVisualSource2From(abi: WindowsFoundation.IInspectable) -> Any {
    let swiftAbi: __ABI_Microsoft_UI_Xaml_Controls.IAnimatedVisualSource2 = try! abi.QueryInterface()
    return __IMPL_Microsoft_UI_Xaml_Controls.IAnimatedVisualSource2Bridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate func makeIAnimatedVisualSource3From(abi: WindowsFoundation.IInspectable) -> Any {
    let swiftAbi: __ABI_Microsoft_UI_Xaml_Controls.IAnimatedVisualSource3 = try! abi.QueryInterface()
    return __IMPL_Microsoft_UI_Xaml_Controls.IAnimatedVisualSource3Bridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate func makeICommandBarElementFrom(abi: WindowsFoundation.IInspectable) -> Any {
    let swiftAbi: __ABI_Microsoft_UI_Xaml_Controls.ICommandBarElement = try! abi.QueryInterface()
    return __IMPL_Microsoft_UI_Xaml_Controls.ICommandBarElementBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate func makeIDynamicAnimatedVisualSourceFrom(abi: WindowsFoundation.IInspectable) -> Any {
    let swiftAbi: __ABI_Microsoft_UI_Xaml_Controls.IDynamicAnimatedVisualSource = try! abi.QueryInterface()
    return __IMPL_Microsoft_UI_Xaml_Controls.IDynamicAnimatedVisualSourceBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate func makeIInsertionPanelFrom(abi: WindowsFoundation.IInspectable) -> Any {
    let swiftAbi: __ABI_Microsoft_UI_Xaml_Controls.IInsertionPanel = try! abi.QueryInterface()
    return __IMPL_Microsoft_UI_Xaml_Controls.IInsertionPanelBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate func makeIItemContainerMappingFrom(abi: WindowsFoundation.IInspectable) -> Any {
    let swiftAbi: __ABI_Microsoft_UI_Xaml_Controls.IItemContainerMapping = try! abi.QueryInterface()
    return __IMPL_Microsoft_UI_Xaml_Controls.IItemContainerMappingBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate func makeIKeyIndexMappingFrom(abi: WindowsFoundation.IInspectable) -> Any {
    let swiftAbi: __ABI_Microsoft_UI_Xaml_Controls.IKeyIndexMapping = try! abi.QueryInterface()
    return __IMPL_Microsoft_UI_Xaml_Controls.IKeyIndexMappingBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate func makeINavigateFrom(abi: WindowsFoundation.IInspectable) -> Any {
    let swiftAbi: __ABI_Microsoft_UI_Xaml_Controls.INavigate = try! abi.QueryInterface()
    return __IMPL_Microsoft_UI_Xaml_Controls.INavigateBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate func makeIScrollAnchorProviderFrom(abi: WindowsFoundation.IInspectable) -> Any {
    let swiftAbi: __ABI_Microsoft_UI_Xaml_Controls.IScrollAnchorProvider = try! abi.QueryInterface()
    return __IMPL_Microsoft_UI_Xaml_Controls.IScrollAnchorProviderBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate func makeISemanticZoomInformationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    let swiftAbi: __ABI_Microsoft_UI_Xaml_Controls.ISemanticZoomInformation = try! abi.QueryInterface()
    return __IMPL_Microsoft_UI_Xaml_Controls.ISemanticZoomInformationBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate func makeIScrollControllerFrom(abi: WindowsFoundation.IInspectable) -> Any {
    let swiftAbi: __ABI_Microsoft_UI_Xaml_Controls_Primitives.IScrollController = try! abi.QueryInterface()
    return __IMPL_Microsoft_UI_Xaml_Controls_Primitives.IScrollControllerBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate func makeIScrollControllerPanningInfoFrom(abi: WindowsFoundation.IInspectable) -> Any {
    let swiftAbi: __ABI_Microsoft_UI_Xaml_Controls_Primitives.IScrollControllerPanningInfo = try! abi.QueryInterface()
    return __IMPL_Microsoft_UI_Xaml_Controls_Primitives.IScrollControllerPanningInfoBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate func makeIScrollSnapPointsInfoFrom(abi: WindowsFoundation.IInspectable) -> Any {
    let swiftAbi: __ABI_Microsoft_UI_Xaml_Controls_Primitives.IScrollSnapPointsInfo = try! abi.QueryInterface()
    return __IMPL_Microsoft_UI_Xaml_Controls_Primitives.IScrollSnapPointsInfoBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate func makeICollectionViewFrom(abi: WindowsFoundation.IInspectable) -> Any {
    let swiftAbi: __ABI_Microsoft_UI_Xaml_Data.ICollectionView = try! abi.QueryInterface()
    return __IMPL_Microsoft_UI_Xaml_Data.ICollectionViewBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate func makeICollectionViewFactoryFrom(abi: WindowsFoundation.IInspectable) -> Any {
    let swiftAbi: __ABI_Microsoft_UI_Xaml_Data.ICollectionViewFactory = try! abi.QueryInterface()
    return __IMPL_Microsoft_UI_Xaml_Data.ICollectionViewFactoryBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate func makeICollectionViewGroupFrom(abi: WindowsFoundation.IInspectable) -> Any {
    let swiftAbi: __ABI_Microsoft_UI_Xaml_Data.ICollectionViewGroup = try! abi.QueryInterface()
    return __IMPL_Microsoft_UI_Xaml_Data.ICollectionViewGroupBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate func makeICustomPropertyFrom(abi: WindowsFoundation.IInspectable) -> Any {
    let swiftAbi: __ABI_Microsoft_UI_Xaml_Data.ICustomProperty = try! abi.QueryInterface()
    return __IMPL_Microsoft_UI_Xaml_Data.ICustomPropertyBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate func makeICustomPropertyProviderFrom(abi: WindowsFoundation.IInspectable) -> Any {
    let swiftAbi: __ABI_Microsoft_UI_Xaml_Data.ICustomPropertyProvider = try! abi.QueryInterface()
    return __IMPL_Microsoft_UI_Xaml_Data.ICustomPropertyProviderBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate func makeIItemsRangeInfoFrom(abi: WindowsFoundation.IInspectable) -> Any {
    let swiftAbi: __ABI_Microsoft_UI_Xaml_Data.IItemsRangeInfo = try! abi.QueryInterface()
    return __IMPL_Microsoft_UI_Xaml_Data.IItemsRangeInfoBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate func makeINotifyDataErrorInfoFrom(abi: WindowsFoundation.IInspectable) -> Any {
    let swiftAbi: __ABI_Microsoft_UI_Xaml_Data.INotifyDataErrorInfo = try! abi.QueryInterface()
    return __IMPL_Microsoft_UI_Xaml_Data.INotifyDataErrorInfoBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate func makeINotifyPropertyChangedFrom(abi: WindowsFoundation.IInspectable) -> Any {
    let swiftAbi: __ABI_Microsoft_UI_Xaml_Data.INotifyPropertyChanged = try! abi.QueryInterface()
    return __IMPL_Microsoft_UI_Xaml_Data.INotifyPropertyChangedBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate func makeISelectionInfoFrom(abi: WindowsFoundation.IInspectable) -> Any {
    let swiftAbi: __ABI_Microsoft_UI_Xaml_Data.ISelectionInfo = try! abi.QueryInterface()
    return __IMPL_Microsoft_UI_Xaml_Data.ISelectionInfoBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate func makeISupportIncrementalLoadingFrom(abi: WindowsFoundation.IInspectable) -> Any {
    let swiftAbi: __ABI_Microsoft_UI_Xaml_Data.ISupportIncrementalLoading = try! abi.QueryInterface()
    return __IMPL_Microsoft_UI_Xaml_Data.ISupportIncrementalLoadingBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate func makeIValueConverterFrom(abi: WindowsFoundation.IInspectable) -> Any {
    let swiftAbi: __ABI_Microsoft_UI_Xaml_Data.IValueConverter = try! abi.QueryInterface()
    return __IMPL_Microsoft_UI_Xaml_Data.IValueConverterBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate func makeICommandFrom(abi: WindowsFoundation.IInspectable) -> Any {
    let swiftAbi: __ABI_Microsoft_UI_Xaml_Input.ICommand = try! abi.QueryInterface()
    return __IMPL_Microsoft_UI_Xaml_Input.ICommandBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate func makeIBindableIterableFrom(abi: WindowsFoundation.IInspectable) -> Any {
    let swiftAbi: __ABI_Microsoft_UI_Xaml_Interop.IBindableIterable = try! abi.QueryInterface()
    return __IMPL_Microsoft_UI_Xaml_Interop.IBindableIterableBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate func makeIBindableIteratorFrom(abi: WindowsFoundation.IInspectable) -> Any {
    let swiftAbi: __ABI_Microsoft_UI_Xaml_Interop.IBindableIterator = try! abi.QueryInterface()
    return __IMPL_Microsoft_UI_Xaml_Interop.IBindableIteratorBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate func makeIBindableVectorFrom(abi: WindowsFoundation.IInspectable) -> Any {
    let swiftAbi: __ABI_Microsoft_UI_Xaml_Interop.IBindableVector = try! abi.QueryInterface()
    return __IMPL_Microsoft_UI_Xaml_Interop.IBindableVectorBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate func makeIBindableVectorViewFrom(abi: WindowsFoundation.IInspectable) -> Any {
    let swiftAbi: __ABI_Microsoft_UI_Xaml_Interop.IBindableVectorView = try! abi.QueryInterface()
    return __IMPL_Microsoft_UI_Xaml_Interop.IBindableVectorViewBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate func makeINotifyCollectionChangedFrom(abi: WindowsFoundation.IInspectable) -> Any {
    let swiftAbi: __ABI_Microsoft_UI_Xaml_Interop.INotifyCollectionChanged = try! abi.QueryInterface()
    return __IMPL_Microsoft_UI_Xaml_Interop.INotifyCollectionChangedBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate func makeIComponentConnectorFrom(abi: WindowsFoundation.IInspectable) -> Any {
    let swiftAbi: __ABI_Microsoft_UI_Xaml_Markup.IComponentConnector = try! abi.QueryInterface()
    return __IMPL_Microsoft_UI_Xaml_Markup.IComponentConnectorBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate func makeIDataTemplateComponentFrom(abi: WindowsFoundation.IInspectable) -> Any {
    let swiftAbi: __ABI_Microsoft_UI_Xaml_Markup.IDataTemplateComponent = try! abi.QueryInterface()
    return __IMPL_Microsoft_UI_Xaml_Markup.IDataTemplateComponentBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate func makeIXamlMemberFrom(abi: WindowsFoundation.IInspectable) -> Any {
    let swiftAbi: __ABI_Microsoft_UI_Xaml_Markup.IXamlMember = try! abi.QueryInterface()
    return __IMPL_Microsoft_UI_Xaml_Markup.IXamlMemberBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate func makeIXamlMetadataProviderFrom(abi: WindowsFoundation.IInspectable) -> Any {
    let swiftAbi: __ABI_Microsoft_UI_Xaml_Markup.IXamlMetadataProvider = try! abi.QueryInterface()
    return __IMPL_Microsoft_UI_Xaml_Markup.IXamlMetadataProviderBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate func makeIXamlTypeFrom(abi: WindowsFoundation.IInspectable) -> Any {
    let swiftAbi: __ABI_Microsoft_UI_Xaml_Markup.IXamlType = try! abi.QueryInterface()
    return __IMPL_Microsoft_UI_Xaml_Markup.IXamlTypeBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate func makeAdaptiveTriggerFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AdaptiveTrigger(fromAbi: abi)
}

fileprivate func makeApplicationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return Application(fromAbi: abi)
}

fileprivate func makeApplicationInitializationCallbackParamsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ApplicationInitializationCallbackParams(fromAbi: abi)
}

fileprivate func makeBindingFailedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return BindingFailedEventArgs(fromAbi: abi)
}

fileprivate func makeBringIntoViewOptionsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return BringIntoViewOptions(fromAbi: abi)
}

fileprivate func makeBringIntoViewRequestedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return BringIntoViewRequestedEventArgs(fromAbi: abi)
}

fileprivate func makeBrushTransitionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return BrushTransition(fromAbi: abi)
}

fileprivate func makeColorPaletteResourcesFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ColorPaletteResources(fromAbi: abi)
}

fileprivate func makeCornerRadiusHelperFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CornerRadiusHelper(fromAbi: abi)
}

fileprivate func makeDataContextChangedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DataContextChangedEventArgs(fromAbi: abi)
}

fileprivate func makeDataTemplateFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DataTemplate(fromAbi: abi)
}

fileprivate func makeDataTemplateKeyFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DataTemplateKey(fromAbi: abi)
}

fileprivate func makeDebugSettingsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DebugSettings(fromAbi: abi)
}

fileprivate func makeDependencyObjectFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DependencyObject(fromAbi: abi)
}

fileprivate func makeDependencyObjectCollectionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DependencyObjectCollection(fromAbi: abi)
}

fileprivate func makeDependencyPropertyFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DependencyProperty(fromAbi: abi)
}

fileprivate func makeDependencyPropertyChangedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DependencyPropertyChangedEventArgs(fromAbi: abi)
}

fileprivate func makeDispatcherTimerFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DispatcherTimer(fromAbi: abi)
}

fileprivate func makeDragEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DragEventArgs(fromAbi: abi)
}

fileprivate func makeDragOperationDeferralFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DragOperationDeferral(fromAbi: abi)
}

fileprivate func makeDragStartingEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DragStartingEventArgs(fromAbi: abi)
}

fileprivate func makeDragUIFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DragUI(fromAbi: abi)
}

fileprivate func makeDragUIOverrideFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DragUIOverride(fromAbi: abi)
}

fileprivate func makeDropCompletedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DropCompletedEventArgs(fromAbi: abi)
}

fileprivate func makeDurationHelperFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DurationHelper(fromAbi: abi)
}

fileprivate func makeEffectiveViewportChangedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return EffectiveViewportChangedEventArgs(fromAbi: abi)
}

fileprivate func makeElementFactoryGetArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ElementFactoryGetArgs(fromAbi: abi)
}

fileprivate func makeElementFactoryRecycleArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ElementFactoryRecycleArgs(fromAbi: abi)
}

fileprivate func makeElementSoundPlayerFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ElementSoundPlayer(fromAbi: abi)
}

fileprivate func makeEventTriggerFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return EventTrigger(fromAbi: abi)
}

fileprivate func makeExceptionRoutedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ExceptionRoutedEventArgs(fromAbi: abi)
}

fileprivate func makeFrameworkElementFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return FrameworkElement(fromAbi: abi)
}

fileprivate func makeFrameworkTemplateFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return FrameworkTemplate(fromAbi: abi)
}

fileprivate func makeFrameworkViewFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return FrameworkView(fromAbi: abi)
}

fileprivate func makeFrameworkViewSourceFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return FrameworkViewSource(fromAbi: abi)
}

fileprivate func makeGridLengthHelperFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return GridLengthHelper(fromAbi: abi)
}

fileprivate func makeLaunchActivatedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return LaunchActivatedEventArgs(fromAbi: abi)
}

fileprivate func makeMediaFailedRoutedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaFailedRoutedEventArgs(fromAbi: abi)
}

fileprivate func makePointHelperFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PointHelper(fromAbi: abi)
}

fileprivate func makePropertyMetadataFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PropertyMetadata(fromAbi: abi)
}

fileprivate func makePropertyPathFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PropertyPath(fromAbi: abi)
}

fileprivate func makeRectHelperFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return RectHelper(fromAbi: abi)
}

fileprivate func makeResourceDictionaryFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ResourceDictionary(fromAbi: abi)
}

fileprivate func makeResourceManagerRequestedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ResourceManagerRequestedEventArgs(fromAbi: abi)
}

fileprivate func makeRoutedEventFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return RoutedEvent(fromAbi: abi)
}

fileprivate func makeRoutedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return RoutedEventArgs(fromAbi: abi)
}

fileprivate func makeScalarTransitionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ScalarTransition(fromAbi: abi)
}

fileprivate func makeSetterFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return Setter(fromAbi: abi)
}

fileprivate func makeSetterBaseFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SetterBase(fromAbi: abi)
}

fileprivate func makeSetterBaseCollectionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SetterBaseCollection(fromAbi: abi)
}

fileprivate func makeSizeChangedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SizeChangedEventArgs(fromAbi: abi)
}

fileprivate func makeSizeHelperFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SizeHelper(fromAbi: abi)
}

fileprivate func makeStateTriggerFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return StateTrigger(fromAbi: abi)
}

fileprivate func makeStateTriggerBaseFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return StateTriggerBase(fromAbi: abi)
}

fileprivate func makeStyleFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return Style(fromAbi: abi)
}

fileprivate func makeTargetPropertyPathFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TargetPropertyPath(fromAbi: abi)
}

fileprivate func makeThicknessHelperFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ThicknessHelper(fromAbi: abi)
}

fileprivate func makeTriggerActionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TriggerAction(fromAbi: abi)
}

fileprivate func makeTriggerActionCollectionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TriggerActionCollection(fromAbi: abi)
}

fileprivate func makeTriggerBaseFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TriggerBase(fromAbi: abi)
}

fileprivate func makeTriggerCollectionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TriggerCollection(fromAbi: abi)
}

fileprivate func makeUIElementFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return UIElement(fromAbi: abi)
}

fileprivate func makeUIElementWeakCollectionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return UIElementWeakCollection(fromAbi: abi)
}

fileprivate func makeUnhandledExceptionEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return UnhandledExceptionEventArgs(fromAbi: abi)
}

fileprivate func makeVector3TransitionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return Vector3Transition(fromAbi: abi)
}

fileprivate func makeVisualStateFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return VisualState(fromAbi: abi)
}

fileprivate func makeVisualStateChangedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return VisualStateChangedEventArgs(fromAbi: abi)
}

fileprivate func makeVisualStateGroupFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return VisualStateGroup(fromAbi: abi)
}

fileprivate func makeVisualStateManagerFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return VisualStateManager(fromAbi: abi)
}

fileprivate func makeVisualTransitionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return VisualTransition(fromAbi: abi)
}

fileprivate func makeWindowFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return Window(fromAbi: abi)
}

fileprivate func makeWindowActivatedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return WindowActivatedEventArgs(fromAbi: abi)
}

fileprivate func makeWindowEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return WindowEventArgs(fromAbi: abi)
}

fileprivate func makeWindowSizeChangedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return WindowSizeChangedEventArgs(fromAbi: abi)
}

fileprivate func makeWindowVisibilityChangedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return WindowVisibilityChangedEventArgs(fromAbi: abi)
}

fileprivate func makeXamlResourceReferenceFailedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return XamlResourceReferenceFailedEventArgs(fromAbi: abi)
}

fileprivate func makeXamlRootFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return XamlRoot(fromAbi: abi)
}

fileprivate func makeXamlRootChangedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return XamlRootChangedEventArgs(fromAbi: abi)
}

fileprivate func makeAnnotationPatternIdentifiersFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AnnotationPatternIdentifiers(fromAbi: abi)
}

fileprivate func makeAutomationAnnotationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AutomationAnnotation(fromAbi: abi)
}

fileprivate func makeAutomationElementIdentifiersFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AutomationElementIdentifiers(fromAbi: abi)
}

fileprivate func makeAutomationPropertiesFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AutomationProperties(fromAbi: abi)
}

fileprivate func makeAutomationPropertyFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AutomationProperty(fromAbi: abi)
}

fileprivate func makeDockPatternIdentifiersFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DockPatternIdentifiers(fromAbi: abi)
}

fileprivate func makeDragPatternIdentifiersFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DragPatternIdentifiers(fromAbi: abi)
}

fileprivate func makeDropTargetPatternIdentifiersFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DropTargetPatternIdentifiers(fromAbi: abi)
}

fileprivate func makeExpandCollapsePatternIdentifiersFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ExpandCollapsePatternIdentifiers(fromAbi: abi)
}

fileprivate func makeGridItemPatternIdentifiersFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return GridItemPatternIdentifiers(fromAbi: abi)
}

fileprivate func makeGridPatternIdentifiersFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return GridPatternIdentifiers(fromAbi: abi)
}

fileprivate func makeMultipleViewPatternIdentifiersFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MultipleViewPatternIdentifiers(fromAbi: abi)
}

fileprivate func makeRangeValuePatternIdentifiersFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return RangeValuePatternIdentifiers(fromAbi: abi)
}

fileprivate func makeScrollPatternIdentifiersFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ScrollPatternIdentifiers(fromAbi: abi)
}

fileprivate func makeSelectionItemPatternIdentifiersFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SelectionItemPatternIdentifiers(fromAbi: abi)
}

fileprivate func makeSelectionPatternIdentifiersFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SelectionPatternIdentifiers(fromAbi: abi)
}

fileprivate func makeSpreadsheetItemPatternIdentifiersFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SpreadsheetItemPatternIdentifiers(fromAbi: abi)
}

fileprivate func makeStylesPatternIdentifiersFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return StylesPatternIdentifiers(fromAbi: abi)
}

fileprivate func makeTableItemPatternIdentifiersFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TableItemPatternIdentifiers(fromAbi: abi)
}

fileprivate func makeTablePatternIdentifiersFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TablePatternIdentifiers(fromAbi: abi)
}

fileprivate func makeTogglePatternIdentifiersFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TogglePatternIdentifiers(fromAbi: abi)
}

fileprivate func makeTransformPattern2IdentifiersFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TransformPattern2Identifiers(fromAbi: abi)
}

fileprivate func makeTransformPatternIdentifiersFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TransformPatternIdentifiers(fromAbi: abi)
}

fileprivate func makeValuePatternIdentifiersFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ValuePatternIdentifiers(fromAbi: abi)
}

fileprivate func makeWindowPatternIdentifiersFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return WindowPatternIdentifiers(fromAbi: abi)
}

fileprivate func makeAutomationPeerFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AutomationPeer(fromAbi: abi)
}

fileprivate func makeAutomationPeerAnnotationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AutomationPeerAnnotation(fromAbi: abi)
}

fileprivate func makeIRawElementProviderSimpleFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return IRawElementProviderSimple(fromAbi: abi)
}

fileprivate func makeAnchorRequestedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AnchorRequestedEventArgs(fromAbi: abi)
}

fileprivate func makeAnimatedIconFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AnimatedIcon(fromAbi: abi)
}

fileprivate func makeAnimatedIconSourceFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AnimatedIconSource(fromAbi: abi)
}

fileprivate func makeAnimatedVisualPlayerFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AnimatedVisualPlayer(fromAbi: abi)
}

fileprivate func makeAnnotatedScrollBarFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AnnotatedScrollBar(fromAbi: abi)
}

fileprivate func makeAnnotatedScrollBarDetailLabelRequestedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AnnotatedScrollBarDetailLabelRequestedEventArgs(fromAbi: abi)
}

fileprivate func makeAnnotatedScrollBarLabelFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AnnotatedScrollBarLabel(fromAbi: abi)
}

fileprivate func makeAnnotatedScrollBarScrollingEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AnnotatedScrollBarScrollingEventArgs(fromAbi: abi)
}

fileprivate func makeAppBarFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AppBar(fromAbi: abi)
}

fileprivate func makeAppBarButtonFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AppBarButton(fromAbi: abi)
}

fileprivate func makeAppBarElementContainerFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AppBarElementContainer(fromAbi: abi)
}

fileprivate func makeAppBarSeparatorFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AppBarSeparator(fromAbi: abi)
}

fileprivate func makeAppBarToggleButtonFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AppBarToggleButton(fromAbi: abi)
}

fileprivate func makeAutoSuggestBoxFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AutoSuggestBox(fromAbi: abi)
}

fileprivate func makeAutoSuggestBoxQuerySubmittedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AutoSuggestBoxQuerySubmittedEventArgs(fromAbi: abi)
}

fileprivate func makeAutoSuggestBoxSuggestionChosenEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AutoSuggestBoxSuggestionChosenEventArgs(fromAbi: abi)
}

fileprivate func makeAutoSuggestBoxTextChangedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AutoSuggestBoxTextChangedEventArgs(fromAbi: abi)
}

fileprivate func makeBitmapIconFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return BitmapIcon(fromAbi: abi)
}

fileprivate func makeBitmapIconSourceFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return BitmapIconSource(fromAbi: abi)
}

fileprivate func makeBorderFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return Border(fromAbi: abi)
}

fileprivate func makeBreadcrumbBarFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return BreadcrumbBar(fromAbi: abi)
}

fileprivate func makeBreadcrumbBarItemFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return BreadcrumbBarItem(fromAbi: abi)
}

fileprivate func makeBreadcrumbBarItemClickedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return BreadcrumbBarItemClickedEventArgs(fromAbi: abi)
}

fileprivate func makeButtonFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return Button(fromAbi: abi)
}

fileprivate func makeCalendarDatePickerFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CalendarDatePicker(fromAbi: abi)
}

fileprivate func makeCalendarDatePickerDateChangedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CalendarDatePickerDateChangedEventArgs(fromAbi: abi)
}

fileprivate func makeCalendarViewFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CalendarView(fromAbi: abi)
}

fileprivate func makeCalendarViewDayItemFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CalendarViewDayItem(fromAbi: abi)
}

fileprivate func makeCalendarViewDayItemChangingEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CalendarViewDayItemChangingEventArgs(fromAbi: abi)
}

fileprivate func makeCalendarViewSelectedDatesChangedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CalendarViewSelectedDatesChangedEventArgs(fromAbi: abi)
}

fileprivate func makeCandidateWindowBoundsChangedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CandidateWindowBoundsChangedEventArgs(fromAbi: abi)
}

fileprivate func makeCanvasFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return Canvas(fromAbi: abi)
}

fileprivate func makeCheckBoxFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CheckBox(fromAbi: abi)
}

fileprivate func makeChoosingGroupHeaderContainerEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ChoosingGroupHeaderContainerEventArgs(fromAbi: abi)
}

fileprivate func makeChoosingItemContainerEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ChoosingItemContainerEventArgs(fromAbi: abi)
}

fileprivate func makeCleanUpVirtualizedItemEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CleanUpVirtualizedItemEventArgs(fromAbi: abi)
}

fileprivate func makeColorChangedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ColorChangedEventArgs(fromAbi: abi)
}

fileprivate func makeColorPickerFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ColorPicker(fromAbi: abi)
}

fileprivate func makeColumnDefinitionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ColumnDefinition(fromAbi: abi)
}

fileprivate func makeColumnDefinitionCollectionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ColumnDefinitionCollection(fromAbi: abi)
}

fileprivate func makeComboBoxFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ComboBox(fromAbi: abi)
}

fileprivate func makeComboBoxItemFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ComboBoxItem(fromAbi: abi)
}

fileprivate func makeComboBoxTextSubmittedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ComboBoxTextSubmittedEventArgs(fromAbi: abi)
}

fileprivate func makeCommandBarFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CommandBar(fromAbi: abi)
}

fileprivate func makeCommandBarFlyoutFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CommandBarFlyout(fromAbi: abi)
}

fileprivate func makeCommandBarOverflowPresenterFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CommandBarOverflowPresenter(fromAbi: abi)
}

fileprivate func makeContainerContentChangingEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ContainerContentChangingEventArgs(fromAbi: abi)
}

fileprivate func makeContentControlFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ContentControl(fromAbi: abi)
}

fileprivate func makeContentDialogFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ContentDialog(fromAbi: abi)
}

fileprivate func makeContentDialogButtonClickDeferralFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ContentDialogButtonClickDeferral(fromAbi: abi)
}

fileprivate func makeContentDialogButtonClickEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ContentDialogButtonClickEventArgs(fromAbi: abi)
}

fileprivate func makeContentDialogClosedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ContentDialogClosedEventArgs(fromAbi: abi)
}

fileprivate func makeContentDialogClosingDeferralFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ContentDialogClosingDeferral(fromAbi: abi)
}

fileprivate func makeContentDialogClosingEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ContentDialogClosingEventArgs(fromAbi: abi)
}

fileprivate func makeContentDialogOpenedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ContentDialogOpenedEventArgs(fromAbi: abi)
}

fileprivate func makeContentPresenterFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ContentPresenter(fromAbi: abi)
}

fileprivate func makeContextMenuEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ContextMenuEventArgs(fromAbi: abi)
}

fileprivate func makeControlFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return Control(fromAbi: abi)
}

fileprivate func makeControlTemplateFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ControlTemplate(fromAbi: abi)
}

fileprivate func makeCoreWebView2InitializedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWebView2InitializedEventArgs(fromAbi: abi)
}

fileprivate func makeDataTemplateSelectorFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DataTemplateSelector(fromAbi: abi)
}

fileprivate func makeDatePickedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DatePickedEventArgs(fromAbi: abi)
}

fileprivate func makeDatePickerFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DatePicker(fromAbi: abi)
}

fileprivate func makeDatePickerFlyoutFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DatePickerFlyout(fromAbi: abi)
}

fileprivate func makeDatePickerFlyoutItemFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DatePickerFlyoutItem(fromAbi: abi)
}

fileprivate func makeDatePickerFlyoutPresenterFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DatePickerFlyoutPresenter(fromAbi: abi)
}

fileprivate func makeDatePickerSelectedValueChangedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DatePickerSelectedValueChangedEventArgs(fromAbi: abi)
}

fileprivate func makeDatePickerValueChangedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DatePickerValueChangedEventArgs(fromAbi: abi)
}

fileprivate func makeDragItemsCompletedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DragItemsCompletedEventArgs(fromAbi: abi)
}

fileprivate func makeDragItemsStartingEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DragItemsStartingEventArgs(fromAbi: abi)
}

fileprivate func makeDropDownButtonFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DropDownButton(fromAbi: abi)
}

fileprivate func makeDynamicOverflowItemsChangingEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DynamicOverflowItemsChangingEventArgs(fromAbi: abi)
}

fileprivate func makeExpanderFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return Expander(fromAbi: abi)
}

fileprivate func makeExpanderCollapsedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ExpanderCollapsedEventArgs(fromAbi: abi)
}

fileprivate func makeExpanderExpandingEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ExpanderExpandingEventArgs(fromAbi: abi)
}

fileprivate func makeExpanderTemplateSettingsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ExpanderTemplateSettings(fromAbi: abi)
}

fileprivate func makeFlipViewFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return FlipView(fromAbi: abi)
}

fileprivate func makeFlipViewItemFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return FlipViewItem(fromAbi: abi)
}

fileprivate func makeFlyoutFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return Flyout(fromAbi: abi)
}

fileprivate func makeFlyoutPresenterFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return FlyoutPresenter(fromAbi: abi)
}

fileprivate func makeFocusDisengagedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return FocusDisengagedEventArgs(fromAbi: abi)
}

fileprivate func makeFocusEngagedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return FocusEngagedEventArgs(fromAbi: abi)
}

fileprivate func makeFontIconFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return FontIcon(fromAbi: abi)
}

fileprivate func makeFontIconSourceFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return FontIconSource(fromAbi: abi)
}

fileprivate func makeFrameFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return Frame(fromAbi: abi)
}

fileprivate func makeGridFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return Grid(fromAbi: abi)
}

fileprivate func makeGridViewFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return GridView(fromAbi: abi)
}

fileprivate func makeGridViewHeaderItemFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return GridViewHeaderItem(fromAbi: abi)
}

fileprivate func makeGridViewItemFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return GridViewItem(fromAbi: abi)
}

fileprivate func makeGroupItemFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return GroupItem(fromAbi: abi)
}

fileprivate func makeGroupStyleFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return GroupStyle(fromAbi: abi)
}

fileprivate func makeGroupStyleSelectorFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return GroupStyleSelector(fromAbi: abi)
}

fileprivate func makeHasValidationErrorsChangedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return HasValidationErrorsChangedEventArgs(fromAbi: abi)
}

fileprivate func makeHubFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return Hub(fromAbi: abi)
}

fileprivate func makeHubSectionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return HubSection(fromAbi: abi)
}

fileprivate func makeHubSectionCollectionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return HubSectionCollection(fromAbi: abi)
}

fileprivate func makeHubSectionHeaderClickEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return HubSectionHeaderClickEventArgs(fromAbi: abi)
}

fileprivate func makeHyperlinkButtonFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return HyperlinkButton(fromAbi: abi)
}

fileprivate func makeIconElementFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return IconElement(fromAbi: abi)
}

fileprivate func makeIconSourceFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return IconSource(fromAbi: abi)
}

fileprivate func makeIconSourceElementFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return IconSourceElement(fromAbi: abi)
}

fileprivate func makeImageFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return Image(fromAbi: abi)
}

fileprivate func makeImageIconFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ImageIcon(fromAbi: abi)
}

fileprivate func makeImageIconSourceFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ImageIconSource(fromAbi: abi)
}

fileprivate func makeInfoBadgeFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return InfoBadge(fromAbi: abi)
}

fileprivate func makeInfoBadgeTemplateSettingsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return InfoBadgeTemplateSettings(fromAbi: abi)
}

fileprivate func makeInfoBarFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return InfoBar(fromAbi: abi)
}

fileprivate func makeInfoBarClosedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return InfoBarClosedEventArgs(fromAbi: abi)
}

fileprivate func makeInfoBarClosingEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return InfoBarClosingEventArgs(fromAbi: abi)
}

fileprivate func makeInfoBarTemplateSettingsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return InfoBarTemplateSettings(fromAbi: abi)
}

fileprivate func makeIsTextTrimmedChangedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return IsTextTrimmedChangedEventArgs(fromAbi: abi)
}

fileprivate func makeItemClickEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ItemClickEventArgs(fromAbi: abi)
}

fileprivate func makeItemCollectionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ItemCollection(fromAbi: abi)
}

fileprivate func makeItemCollectionTransitionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ItemCollectionTransition(fromAbi: abi)
}

fileprivate func makeItemCollectionTransitionCompletedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ItemCollectionTransitionCompletedEventArgs(fromAbi: abi)
}

fileprivate func makeItemCollectionTransitionProgressFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ItemCollectionTransitionProgress(fromAbi: abi)
}

fileprivate func makeItemCollectionTransitionProviderFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ItemCollectionTransitionProvider(fromAbi: abi)
}

fileprivate func makeItemContainerFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ItemContainer(fromAbi: abi)
}

fileprivate func makeItemContainerGeneratorFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ItemContainerGenerator(fromAbi: abi)
}

fileprivate func makeItemsControlFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ItemsControl(fromAbi: abi)
}

fileprivate func makeItemsPanelTemplateFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ItemsPanelTemplate(fromAbi: abi)
}

fileprivate func makeItemsPickedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ItemsPickedEventArgs(fromAbi: abi)
}

fileprivate func makeItemsPresenterFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ItemsPresenter(fromAbi: abi)
}

fileprivate func makeItemsRepeaterFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ItemsRepeater(fromAbi: abi)
}

fileprivate func makeItemsRepeaterElementClearingEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ItemsRepeaterElementClearingEventArgs(fromAbi: abi)
}

fileprivate func makeItemsRepeaterElementIndexChangedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ItemsRepeaterElementIndexChangedEventArgs(fromAbi: abi)
}

fileprivate func makeItemsRepeaterElementPreparedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ItemsRepeaterElementPreparedEventArgs(fromAbi: abi)
}

fileprivate func makeItemsRepeaterScrollHostFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ItemsRepeaterScrollHost(fromAbi: abi)
}

fileprivate func makeItemsSourceViewFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ItemsSourceView(fromAbi: abi)
}

fileprivate func makeItemsStackPanelFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ItemsStackPanel(fromAbi: abi)
}

fileprivate func makeItemsViewFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ItemsView(fromAbi: abi)
}

fileprivate func makeItemsViewItemInvokedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ItemsViewItemInvokedEventArgs(fromAbi: abi)
}

fileprivate func makeItemsViewSelectionChangedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ItemsViewSelectionChangedEventArgs(fromAbi: abi)
}

fileprivate func makeItemsWrapGridFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ItemsWrapGrid(fromAbi: abi)
}

fileprivate func makeLayoutFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return Layout(fromAbi: abi)
}

fileprivate func makeLayoutContextFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return LayoutContext(fromAbi: abi)
}

fileprivate func makeLinedFlowLayoutFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return LinedFlowLayout(fromAbi: abi)
}

fileprivate func makeLinedFlowLayoutItemCollectionTransitionProviderFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return LinedFlowLayoutItemCollectionTransitionProvider(fromAbi: abi)
}

fileprivate func makeLinedFlowLayoutItemsInfoRequestedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return LinedFlowLayoutItemsInfoRequestedEventArgs(fromAbi: abi)
}

fileprivate func makeListBoxFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ListBox(fromAbi: abi)
}

fileprivate func makeListBoxItemFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ListBoxItem(fromAbi: abi)
}

fileprivate func makeListPickerFlyoutFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ListPickerFlyout(fromAbi: abi)
}

fileprivate func makeListPickerFlyoutPresenterFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ListPickerFlyoutPresenter(fromAbi: abi)
}

fileprivate func makeListViewFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ListView(fromAbi: abi)
}

fileprivate func makeListViewBaseFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ListViewBase(fromAbi: abi)
}

fileprivate func makeListViewBaseHeaderItemFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ListViewBaseHeaderItem(fromAbi: abi)
}

fileprivate func makeListViewHeaderItemFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ListViewHeaderItem(fromAbi: abi)
}

fileprivate func makeListViewItemFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ListViewItem(fromAbi: abi)
}

fileprivate func makeListViewPersistenceHelperFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ListViewPersistenceHelper(fromAbi: abi)
}

fileprivate func makeMapControlFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MapControl(fromAbi: abi)
}

fileprivate func makeMapControlMapServiceErrorOccurredEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MapControlMapServiceErrorOccurredEventArgs(fromAbi: abi)
}

fileprivate func makeMapElementFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MapElement(fromAbi: abi)
}

fileprivate func makeMapElementClickEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MapElementClickEventArgs(fromAbi: abi)
}

fileprivate func makeMapElementsLayerFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MapElementsLayer(fromAbi: abi)
}

fileprivate func makeMapIconFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MapIcon(fromAbi: abi)
}

fileprivate func makeMapLayerFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MapLayer(fromAbi: abi)
}

fileprivate func makeMediaPlayerElementFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaPlayerElement(fromAbi: abi)
}

fileprivate func makeMediaPlayerPresenterFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaPlayerPresenter(fromAbi: abi)
}

fileprivate func makeMediaTransportControlsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaTransportControls(fromAbi: abi)
}

fileprivate func makeMediaTransportControlsHelperFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaTransportControlsHelper(fromAbi: abi)
}

fileprivate func makeMenuBarFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MenuBar(fromAbi: abi)
}

fileprivate func makeMenuBarItemFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MenuBarItem(fromAbi: abi)
}

fileprivate func makeMenuBarItemFlyoutFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MenuBarItemFlyout(fromAbi: abi)
}

fileprivate func makeMenuFlyoutFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MenuFlyout(fromAbi: abi)
}

fileprivate func makeMenuFlyoutItemFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MenuFlyoutItem(fromAbi: abi)
}

fileprivate func makeMenuFlyoutItemBaseFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MenuFlyoutItemBase(fromAbi: abi)
}

fileprivate func makeMenuFlyoutPresenterFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MenuFlyoutPresenter(fromAbi: abi)
}

fileprivate func makeMenuFlyoutSeparatorFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MenuFlyoutSeparator(fromAbi: abi)
}

fileprivate func makeMenuFlyoutSubItemFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MenuFlyoutSubItem(fromAbi: abi)
}

fileprivate func makeNavigationViewFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return NavigationView(fromAbi: abi)
}

fileprivate func makeNavigationViewBackRequestedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return NavigationViewBackRequestedEventArgs(fromAbi: abi)
}

fileprivate func makeNavigationViewDisplayModeChangedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return NavigationViewDisplayModeChangedEventArgs(fromAbi: abi)
}

fileprivate func makeNavigationViewItemFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return NavigationViewItem(fromAbi: abi)
}

fileprivate func makeNavigationViewItemBaseFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return NavigationViewItemBase(fromAbi: abi)
}

fileprivate func makeNavigationViewItemCollapsedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return NavigationViewItemCollapsedEventArgs(fromAbi: abi)
}

fileprivate func makeNavigationViewItemExpandingEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return NavigationViewItemExpandingEventArgs(fromAbi: abi)
}

fileprivate func makeNavigationViewItemHeaderFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return NavigationViewItemHeader(fromAbi: abi)
}

fileprivate func makeNavigationViewItemInvokedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return NavigationViewItemInvokedEventArgs(fromAbi: abi)
}

fileprivate func makeNavigationViewItemSeparatorFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return NavigationViewItemSeparator(fromAbi: abi)
}

fileprivate func makeNavigationViewPaneClosingEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return NavigationViewPaneClosingEventArgs(fromAbi: abi)
}

fileprivate func makeNavigationViewSelectionChangedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return NavigationViewSelectionChangedEventArgs(fromAbi: abi)
}

fileprivate func makeNavigationViewTemplateSettingsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return NavigationViewTemplateSettings(fromAbi: abi)
}

fileprivate func makeNonVirtualizingLayoutFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return NonVirtualizingLayout(fromAbi: abi)
}

fileprivate func makeNonVirtualizingLayoutContextFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return NonVirtualizingLayoutContext(fromAbi: abi)
}

fileprivate func makeNumberBoxFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return NumberBox(fromAbi: abi)
}

fileprivate func makeNumberBoxValueChangedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return NumberBoxValueChangedEventArgs(fromAbi: abi)
}

fileprivate func makePageFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return Page(fromAbi: abi)
}

fileprivate func makePanelFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return Panel(fromAbi: abi)
}

fileprivate func makeParallaxViewFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ParallaxView(fromAbi: abi)
}

fileprivate func makePasswordBoxFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PasswordBox(fromAbi: abi)
}

fileprivate func makePasswordBoxPasswordChangingEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PasswordBoxPasswordChangingEventArgs(fromAbi: abi)
}

fileprivate func makePathIconFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PathIcon(fromAbi: abi)
}

fileprivate func makePathIconSourceFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PathIconSource(fromAbi: abi)
}

fileprivate func makePersonPictureFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PersonPicture(fromAbi: abi)
}

fileprivate func makePersonPictureTemplateSettingsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PersonPictureTemplateSettings(fromAbi: abi)
}

fileprivate func makePickerConfirmedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PickerConfirmedEventArgs(fromAbi: abi)
}

fileprivate func makePickerFlyoutFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PickerFlyout(fromAbi: abi)
}

fileprivate func makePickerFlyoutPresenterFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PickerFlyoutPresenter(fromAbi: abi)
}

fileprivate func makePipsPagerFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PipsPager(fromAbi: abi)
}

fileprivate func makePipsPagerSelectedIndexChangedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PipsPagerSelectedIndexChangedEventArgs(fromAbi: abi)
}

fileprivate func makePipsPagerTemplateSettingsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PipsPagerTemplateSettings(fromAbi: abi)
}

fileprivate func makePivotFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return Pivot(fromAbi: abi)
}

fileprivate func makePivotItemFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PivotItem(fromAbi: abi)
}

fileprivate func makePivotItemEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PivotItemEventArgs(fromAbi: abi)
}

fileprivate func makeProgressBarFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ProgressBar(fromAbi: abi)
}

fileprivate func makeProgressBarTemplateSettingsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ProgressBarTemplateSettings(fromAbi: abi)
}

fileprivate func makeProgressRingFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ProgressRing(fromAbi: abi)
}

fileprivate func makeProgressRingTemplateSettingsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ProgressRingTemplateSettings(fromAbi: abi)
}

fileprivate func makeRadioButtonFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return RadioButton(fromAbi: abi)
}

fileprivate func makeRadioButtonsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return RadioButtons(fromAbi: abi)
}

fileprivate func makeRadioMenuFlyoutItemFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return RadioMenuFlyoutItem(fromAbi: abi)
}

fileprivate func makeRatingControlFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return RatingControl(fromAbi: abi)
}

fileprivate func makeRatingItemFontInfoFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return RatingItemFontInfo(fromAbi: abi)
}

fileprivate func makeRatingItemImageInfoFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return RatingItemImageInfo(fromAbi: abi)
}

fileprivate func makeRatingItemInfoFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return RatingItemInfo(fromAbi: abi)
}

fileprivate func makeRefreshContainerFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return RefreshContainer(fromAbi: abi)
}

fileprivate func makeRefreshInteractionRatioChangedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return RefreshInteractionRatioChangedEventArgs(fromAbi: abi)
}

fileprivate func makeRefreshRequestedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return RefreshRequestedEventArgs(fromAbi: abi)
}

fileprivate func makeRefreshStateChangedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return RefreshStateChangedEventArgs(fromAbi: abi)
}

fileprivate func makeRefreshVisualizerFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return RefreshVisualizer(fromAbi: abi)
}

fileprivate func makeRelativePanelFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return RelativePanel(fromAbi: abi)
}

fileprivate func makeRevealListViewItemPresenterFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return RevealListViewItemPresenter(fromAbi: abi)
}

fileprivate func makeRichEditBoxFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return RichEditBox(fromAbi: abi)
}

fileprivate func makeRichEditBoxSelectionChangingEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return RichEditBoxSelectionChangingEventArgs(fromAbi: abi)
}

fileprivate func makeRichEditBoxTextChangingEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return RichEditBoxTextChangingEventArgs(fromAbi: abi)
}

fileprivate func makeRichTextBlockFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return RichTextBlock(fromAbi: abi)
}

fileprivate func makeRichTextBlockOverflowFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return RichTextBlockOverflow(fromAbi: abi)
}

fileprivate func makeRowDefinitionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return RowDefinition(fromAbi: abi)
}

fileprivate func makeRowDefinitionCollectionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return RowDefinitionCollection(fromAbi: abi)
}

fileprivate func makeScrollContentPresenterFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ScrollContentPresenter(fromAbi: abi)
}

fileprivate func makeScrollViewFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ScrollView(fromAbi: abi)
}

fileprivate func makeScrollViewerFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ScrollViewer(fromAbi: abi)
}

fileprivate func makeScrollViewerViewFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ScrollViewerView(fromAbi: abi)
}

fileprivate func makeScrollViewerViewChangedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ScrollViewerViewChangedEventArgs(fromAbi: abi)
}

fileprivate func makeScrollViewerViewChangingEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ScrollViewerViewChangingEventArgs(fromAbi: abi)
}

fileprivate func makeScrollingAnchorRequestedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ScrollingAnchorRequestedEventArgs(fromAbi: abi)
}

fileprivate func makeScrollingBringingIntoViewEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ScrollingBringingIntoViewEventArgs(fromAbi: abi)
}

fileprivate func makeScrollingScrollAnimationStartingEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ScrollingScrollAnimationStartingEventArgs(fromAbi: abi)
}

fileprivate func makeScrollingScrollCompletedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ScrollingScrollCompletedEventArgs(fromAbi: abi)
}

fileprivate func makeScrollingScrollOptionsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ScrollingScrollOptions(fromAbi: abi)
}

fileprivate func makeScrollingZoomAnimationStartingEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ScrollingZoomAnimationStartingEventArgs(fromAbi: abi)
}

fileprivate func makeScrollingZoomCompletedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ScrollingZoomCompletedEventArgs(fromAbi: abi)
}

fileprivate func makeScrollingZoomOptionsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ScrollingZoomOptions(fromAbi: abi)
}

fileprivate func makeSectionsInViewChangedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SectionsInViewChangedEventArgs(fromAbi: abi)
}

fileprivate func makeSelectionChangedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SelectionChangedEventArgs(fromAbi: abi)
}

fileprivate func makeSelectorBarFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SelectorBar(fromAbi: abi)
}

fileprivate func makeSelectorBarItemFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SelectorBarItem(fromAbi: abi)
}

fileprivate func makeSelectorBarSelectionChangedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SelectorBarSelectionChangedEventArgs(fromAbi: abi)
}

fileprivate func makeSemanticZoomFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SemanticZoom(fromAbi: abi)
}

fileprivate func makeSemanticZoomLocationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SemanticZoomLocation(fromAbi: abi)
}

fileprivate func makeSemanticZoomViewChangedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SemanticZoomViewChangedEventArgs(fromAbi: abi)
}

fileprivate func makeSliderFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return Slider(fromAbi: abi)
}

fileprivate func makeSplitButtonFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SplitButton(fromAbi: abi)
}

fileprivate func makeSplitButtonClickEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SplitButtonClickEventArgs(fromAbi: abi)
}

fileprivate func makeSplitViewFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SplitView(fromAbi: abi)
}

fileprivate func makeSplitViewPaneClosingEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SplitViewPaneClosingEventArgs(fromAbi: abi)
}

fileprivate func makeStackLayoutFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return StackLayout(fromAbi: abi)
}

fileprivate func makeStackPanelFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return StackPanel(fromAbi: abi)
}

fileprivate func makeStyleSelectorFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return StyleSelector(fromAbi: abi)
}

fileprivate func makeSwapChainBackgroundPanelFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SwapChainBackgroundPanel(fromAbi: abi)
}

fileprivate func makeSwapChainPanelFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SwapChainPanel(fromAbi: abi)
}

fileprivate func makeSwipeControlFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SwipeControl(fromAbi: abi)
}

fileprivate func makeSwipeItemFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SwipeItem(fromAbi: abi)
}

fileprivate func makeSwipeItemInvokedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SwipeItemInvokedEventArgs(fromAbi: abi)
}

fileprivate func makeSwipeItemsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SwipeItems(fromAbi: abi)
}

fileprivate func makeSymbolIconFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SymbolIcon(fromAbi: abi)
}

fileprivate func makeSymbolIconSourceFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SymbolIconSource(fromAbi: abi)
}

fileprivate func makeTabViewFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TabView(fromAbi: abi)
}

fileprivate func makeTabViewItemFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TabViewItem(fromAbi: abi)
}

fileprivate func makeTabViewItemTemplateSettingsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TabViewItemTemplateSettings(fromAbi: abi)
}

fileprivate func makeTabViewTabCloseRequestedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TabViewTabCloseRequestedEventArgs(fromAbi: abi)
}

fileprivate func makeTabViewTabDragCompletedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TabViewTabDragCompletedEventArgs(fromAbi: abi)
}

fileprivate func makeTabViewTabDragStartingEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TabViewTabDragStartingEventArgs(fromAbi: abi)
}

fileprivate func makeTabViewTabDroppedOutsideEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TabViewTabDroppedOutsideEventArgs(fromAbi: abi)
}

fileprivate func makeTeachingTipFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TeachingTip(fromAbi: abi)
}

fileprivate func makeTeachingTipClosedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TeachingTipClosedEventArgs(fromAbi: abi)
}

fileprivate func makeTeachingTipClosingEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TeachingTipClosingEventArgs(fromAbi: abi)
}

fileprivate func makeTeachingTipTemplateSettingsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TeachingTipTemplateSettings(fromAbi: abi)
}

fileprivate func makeTextBlockFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TextBlock(fromAbi: abi)
}

fileprivate func makeTextBoxFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TextBox(fromAbi: abi)
}

fileprivate func makeTextBoxBeforeTextChangingEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TextBoxBeforeTextChangingEventArgs(fromAbi: abi)
}

fileprivate func makeTextBoxSelectionChangingEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TextBoxSelectionChangingEventArgs(fromAbi: abi)
}

fileprivate func makeTextBoxTextChangingEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TextBoxTextChangingEventArgs(fromAbi: abi)
}

fileprivate func makeTextChangedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TextChangedEventArgs(fromAbi: abi)
}

fileprivate func makeTextCommandBarFlyoutFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TextCommandBarFlyout(fromAbi: abi)
}

fileprivate func makeTextCompositionChangedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TextCompositionChangedEventArgs(fromAbi: abi)
}

fileprivate func makeTextCompositionEndedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TextCompositionEndedEventArgs(fromAbi: abi)
}

fileprivate func makeTextCompositionStartedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TextCompositionStartedEventArgs(fromAbi: abi)
}

fileprivate func makeTextControlCopyingToClipboardEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TextControlCopyingToClipboardEventArgs(fromAbi: abi)
}

fileprivate func makeTextControlCuttingToClipboardEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TextControlCuttingToClipboardEventArgs(fromAbi: abi)
}

fileprivate func makeTextControlPasteEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TextControlPasteEventArgs(fromAbi: abi)
}

fileprivate func makeTimePickedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TimePickedEventArgs(fromAbi: abi)
}

fileprivate func makeTimePickerFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TimePicker(fromAbi: abi)
}

fileprivate func makeTimePickerFlyoutFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TimePickerFlyout(fromAbi: abi)
}

fileprivate func makeTimePickerFlyoutPresenterFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TimePickerFlyoutPresenter(fromAbi: abi)
}

fileprivate func makeTimePickerSelectedValueChangedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TimePickerSelectedValueChangedEventArgs(fromAbi: abi)
}

fileprivate func makeTimePickerValueChangedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TimePickerValueChangedEventArgs(fromAbi: abi)
}

fileprivate func makeToggleMenuFlyoutItemFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ToggleMenuFlyoutItem(fromAbi: abi)
}

fileprivate func makeToggleSplitButtonFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ToggleSplitButton(fromAbi: abi)
}

fileprivate func makeToggleSplitButtonIsCheckedChangedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ToggleSplitButtonIsCheckedChangedEventArgs(fromAbi: abi)
}

fileprivate func makeToggleSwitchFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ToggleSwitch(fromAbi: abi)
}

fileprivate func makeToolTipFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ToolTip(fromAbi: abi)
}

fileprivate func makeToolTipServiceFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ToolTipService(fromAbi: abi)
}

fileprivate func makeTreeViewFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TreeView(fromAbi: abi)
}

fileprivate func makeTreeViewCollapsedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TreeViewCollapsedEventArgs(fromAbi: abi)
}

fileprivate func makeTreeViewDragItemsCompletedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TreeViewDragItemsCompletedEventArgs(fromAbi: abi)
}

fileprivate func makeTreeViewDragItemsStartingEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TreeViewDragItemsStartingEventArgs(fromAbi: abi)
}

fileprivate func makeTreeViewExpandingEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TreeViewExpandingEventArgs(fromAbi: abi)
}

fileprivate func makeTreeViewItemFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TreeViewItem(fromAbi: abi)
}

fileprivate func makeTreeViewItemInvokedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TreeViewItemInvokedEventArgs(fromAbi: abi)
}

fileprivate func makeTreeViewItemTemplateSettingsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TreeViewItemTemplateSettings(fromAbi: abi)
}

fileprivate func makeTreeViewListFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TreeViewList(fromAbi: abi)
}

fileprivate func makeTreeViewNodeFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TreeViewNode(fromAbi: abi)
}

fileprivate func makeTreeViewSelectionChangedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TreeViewSelectionChangedEventArgs(fromAbi: abi)
}

fileprivate func makeTwoPaneViewFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TwoPaneView(fromAbi: abi)
}

fileprivate func makeUIElementCollectionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return UIElementCollection(fromAbi: abi)
}

fileprivate func makeUniformGridLayoutFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return UniformGridLayout(fromAbi: abi)
}

fileprivate func makeUserControlFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return UserControl(fromAbi: abi)
}

fileprivate func makeVariableSizedWrapGridFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return VariableSizedWrapGrid(fromAbi: abi)
}

fileprivate func makeViewboxFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return Viewbox(fromAbi: abi)
}

fileprivate func makeVirtualizingLayoutFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return VirtualizingLayout(fromAbi: abi)
}

fileprivate func makeVirtualizingLayoutContextFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return VirtualizingLayoutContext(fromAbi: abi)
}

fileprivate func makeVirtualizingPanelFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return VirtualizingPanel(fromAbi: abi)
}

fileprivate func makeVirtualizingStackPanelFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return VirtualizingStackPanel(fromAbi: abi)
}

fileprivate func makeWebView2From(abi: WindowsFoundation.IInspectable) -> Any {
    return WebView2(fromAbi: abi)
}

fileprivate func makeWrapGridFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return WrapGrid(fromAbi: abi)
}

fileprivate func makeXamlControlsResourcesFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return XamlControlsResources(fromAbi: abi)
}

fileprivate func makeAppBarButtonTemplateSettingsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AppBarButtonTemplateSettings(fromAbi: abi)
}

fileprivate func makeAppBarTemplateSettingsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AppBarTemplateSettings(fromAbi: abi)
}

fileprivate func makeAppBarToggleButtonTemplateSettingsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AppBarToggleButtonTemplateSettings(fromAbi: abi)
}

fileprivate func makeButtonBaseFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ButtonBase(fromAbi: abi)
}

fileprivate func makeCalendarViewTemplateSettingsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CalendarViewTemplateSettings(fromAbi: abi)
}

fileprivate func makeComboBoxTemplateSettingsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ComboBoxTemplateSettings(fromAbi: abi)
}

fileprivate func makeCommandBarTemplateSettingsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CommandBarTemplateSettings(fromAbi: abi)
}

fileprivate func makeFlyoutBaseFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return FlyoutBase(fromAbi: abi)
}

fileprivate func makeFlyoutBaseClosingEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return FlyoutBaseClosingEventArgs(fromAbi: abi)
}

fileprivate func makeFlyoutShowOptionsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return FlyoutShowOptions(fromAbi: abi)
}

fileprivate func makeGridViewItemTemplateSettingsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return GridViewItemTemplateSettings(fromAbi: abi)
}

fileprivate func makeItemsChangedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ItemsChangedEventArgs(fromAbi: abi)
}

fileprivate func makeListViewItemPresenterFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ListViewItemPresenter(fromAbi: abi)
}

fileprivate func makeListViewItemTemplateSettingsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ListViewItemTemplateSettings(fromAbi: abi)
}

fileprivate func makeMenuFlyoutItemTemplateSettingsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MenuFlyoutItemTemplateSettings(fromAbi: abi)
}

fileprivate func makeMenuFlyoutPresenterTemplateSettingsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MenuFlyoutPresenterTemplateSettings(fromAbi: abi)
}

fileprivate func makeOrientedVirtualizingPanelFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return OrientedVirtualizingPanel(fromAbi: abi)
}

fileprivate func makePickerFlyoutBaseFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PickerFlyoutBase(fromAbi: abi)
}

fileprivate func makePopupFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return Popup(fromAbi: abi)
}

fileprivate func makeRangeBaseFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return RangeBase(fromAbi: abi)
}

fileprivate func makeRangeBaseValueChangedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return RangeBaseValueChangedEventArgs(fromAbi: abi)
}

fileprivate func makeScrollControllerAddScrollVelocityRequestedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ScrollControllerAddScrollVelocityRequestedEventArgs(fromAbi: abi)
}

fileprivate func makeScrollControllerPanRequestedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ScrollControllerPanRequestedEventArgs(fromAbi: abi)
}

fileprivate func makeScrollControllerScrollByRequestedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ScrollControllerScrollByRequestedEventArgs(fromAbi: abi)
}

fileprivate func makeScrollControllerScrollToRequestedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ScrollControllerScrollToRequestedEventArgs(fromAbi: abi)
}

fileprivate func makeScrollPresenterFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ScrollPresenter(fromAbi: abi)
}

fileprivate func makeScrollSnapPointBaseFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ScrollSnapPointBase(fromAbi: abi)
}

fileprivate func makeSelectorFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return Selector(fromAbi: abi)
}

fileprivate func makeSelectorItemFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SelectorItem(fromAbi: abi)
}

fileprivate func makeSnapPointBaseFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SnapPointBase(fromAbi: abi)
}

fileprivate func makeSplitViewTemplateSettingsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SplitViewTemplateSettings(fromAbi: abi)
}

fileprivate func makeToggleButtonFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ToggleButton(fromAbi: abi)
}

fileprivate func makeToggleSwitchTemplateSettingsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ToggleSwitchTemplateSettings(fromAbi: abi)
}

fileprivate func makeToolTipTemplateSettingsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ToolTipTemplateSettings(fromAbi: abi)
}

fileprivate func makeZoomSnapPointBaseFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ZoomSnapPointBase(fromAbi: abi)
}

fileprivate func makeBindingFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return Binding(fromAbi: abi)
}

fileprivate func makeBindingBaseFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return BindingBase(fromAbi: abi)
}

fileprivate func makeBindingExpressionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return BindingExpression(fromAbi: abi)
}

fileprivate func makeBindingExpressionBaseFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return BindingExpressionBase(fromAbi: abi)
}

fileprivate func makeBindingOperationsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return BindingOperations(fromAbi: abi)
}

fileprivate func makeCollectionViewSourceFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CollectionViewSource(fromAbi: abi)
}

fileprivate func makeCurrentChangingEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CurrentChangingEventArgs(fromAbi: abi)
}

fileprivate func makeDataErrorsChangedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DataErrorsChangedEventArgs(fromAbi: abi)
}

fileprivate func makeItemIndexRangeFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ItemIndexRange(fromAbi: abi)
}

fileprivate func makePropertyChangedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PropertyChangedEventArgs(fromAbi: abi)
}

fileprivate func makeRelativeSourceFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return RelativeSource(fromAbi: abi)
}

fileprivate func makeBlockFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return Block(fromAbi: abi)
}

fileprivate func makeBlockCollectionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return BlockCollection(fromAbi: abi)
}

fileprivate func makeHyperlinkFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return Hyperlink(fromAbi: abi)
}

fileprivate func makeHyperlinkClickEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return HyperlinkClickEventArgs(fromAbi: abi)
}

fileprivate func makeInlineFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return Inline(fromAbi: abi)
}

fileprivate func makeInlineCollectionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return InlineCollection(fromAbi: abi)
}

fileprivate func makeRunFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return Run(fromAbi: abi)
}

fileprivate func makeSpanFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return Span(fromAbi: abi)
}

fileprivate func makeTextElementFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TextElement(fromAbi: abi)
}

fileprivate func makeTextHighlighterFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TextHighlighter(fromAbi: abi)
}

fileprivate func makeTextPointerFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TextPointer(fromAbi: abi)
}

fileprivate func makeDesktopWindowXamlSourceFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DesktopWindowXamlSource(fromAbi: abi)
}

fileprivate func makeDesktopWindowXamlSourceGotFocusEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DesktopWindowXamlSourceGotFocusEventArgs(fromAbi: abi)
}

fileprivate func makeDesktopWindowXamlSourceTakeFocusRequestedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DesktopWindowXamlSourceTakeFocusRequestedEventArgs(fromAbi: abi)
}

fileprivate func makeElementCompositionPreviewFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ElementCompositionPreview(fromAbi: abi)
}

fileprivate func makeWindowsXamlManagerFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return WindowsXamlManager(fromAbi: abi)
}

fileprivate func makeXamlShutdownCompletedOnThreadEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return XamlShutdownCompletedOnThreadEventArgs(fromAbi: abi)
}

fileprivate func makeXamlSourceFocusNavigationRequestFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return XamlSourceFocusNavigationRequest(fromAbi: abi)
}

fileprivate func makeXamlSourceFocusNavigationResultFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return XamlSourceFocusNavigationResult(fromAbi: abi)
}

fileprivate func makeAccessKeyDisplayDismissedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AccessKeyDisplayDismissedEventArgs(fromAbi: abi)
}

fileprivate func makeAccessKeyDisplayRequestedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AccessKeyDisplayRequestedEventArgs(fromAbi: abi)
}

fileprivate func makeAccessKeyInvokedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AccessKeyInvokedEventArgs(fromAbi: abi)
}

fileprivate func makeCharacterReceivedRoutedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CharacterReceivedRoutedEventArgs(fromAbi: abi)
}

fileprivate func makeContextRequestedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ContextRequestedEventArgs(fromAbi: abi)
}

fileprivate func makeDoubleTappedRoutedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DoubleTappedRoutedEventArgs(fromAbi: abi)
}

fileprivate func makeFindNextElementOptionsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return FindNextElementOptions(fromAbi: abi)
}

fileprivate func makeFocusManagerFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return FocusManager(fromAbi: abi)
}

fileprivate func makeFocusManagerGotFocusEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return FocusManagerGotFocusEventArgs(fromAbi: abi)
}

fileprivate func makeFocusManagerLostFocusEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return FocusManagerLostFocusEventArgs(fromAbi: abi)
}

fileprivate func makeFocusMovementResultFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return FocusMovementResult(fromAbi: abi)
}

fileprivate func makeGettingFocusEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return GettingFocusEventArgs(fromAbi: abi)
}

fileprivate func makeHoldingRoutedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return HoldingRoutedEventArgs(fromAbi: abi)
}

fileprivate func makeInertiaExpansionBehaviorFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return InertiaExpansionBehavior(fromAbi: abi)
}

fileprivate func makeInertiaRotationBehaviorFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return InertiaRotationBehavior(fromAbi: abi)
}

fileprivate func makeInertiaTranslationBehaviorFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return InertiaTranslationBehavior(fromAbi: abi)
}

fileprivate func makeInputScopeFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return InputScope(fromAbi: abi)
}

fileprivate func makeInputScopeNameFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return InputScopeName(fromAbi: abi)
}

fileprivate func makeKeyRoutedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return KeyRoutedEventArgs(fromAbi: abi)
}

fileprivate func makeKeyboardAcceleratorFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return KeyboardAccelerator(fromAbi: abi)
}

fileprivate func makeKeyboardAcceleratorInvokedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return KeyboardAcceleratorInvokedEventArgs(fromAbi: abi)
}

fileprivate func makeLosingFocusEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return LosingFocusEventArgs(fromAbi: abi)
}

fileprivate func makeManipulationCompletedRoutedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ManipulationCompletedRoutedEventArgs(fromAbi: abi)
}

fileprivate func makeManipulationDeltaRoutedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ManipulationDeltaRoutedEventArgs(fromAbi: abi)
}

fileprivate func makeManipulationInertiaStartingRoutedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ManipulationInertiaStartingRoutedEventArgs(fromAbi: abi)
}

fileprivate func makeManipulationPivotFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ManipulationPivot(fromAbi: abi)
}

fileprivate func makeManipulationStartedRoutedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ManipulationStartedRoutedEventArgs(fromAbi: abi)
}

fileprivate func makeManipulationStartingRoutedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ManipulationStartingRoutedEventArgs(fromAbi: abi)
}

fileprivate func makeNoFocusCandidateFoundEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return NoFocusCandidateFoundEventArgs(fromAbi: abi)
}

fileprivate func makePointerFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return Pointer(fromAbi: abi)
}

fileprivate func makePointerRoutedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PointerRoutedEventArgs(fromAbi: abi)
}

fileprivate func makeProcessKeyboardAcceleratorEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ProcessKeyboardAcceleratorEventArgs(fromAbi: abi)
}

fileprivate func makeRightTappedRoutedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return RightTappedRoutedEventArgs(fromAbi: abi)
}

fileprivate func makeTappedRoutedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TappedRoutedEventArgs(fromAbi: abi)
}

fileprivate func makeNotifyCollectionChangedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return NotifyCollectionChangedEventArgs(fromAbi: abi)
}

fileprivate func makeXamlBindingHelperFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return XamlBindingHelper(fromAbi: abi)
}

fileprivate func makeXamlReaderFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return XamlReader(fromAbi: abi)
}

fileprivate func makeAcrylicBrushFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AcrylicBrush(fromAbi: abi)
}

fileprivate func makeArcSegmentFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ArcSegment(fromAbi: abi)
}

fileprivate func makeBezierSegmentFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return BezierSegment(fromAbi: abi)
}

fileprivate func makeBitmapCacheFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return BitmapCache(fromAbi: abi)
}

fileprivate func makeBrushFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return Brush(fromAbi: abi)
}

fileprivate func makeBrushCollectionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return BrushCollection(fromAbi: abi)
}

fileprivate func makeCacheModeFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CacheMode(fromAbi: abi)
}

fileprivate func makeCompositeTransformFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CompositeTransform(fromAbi: abi)
}

fileprivate func makeCompositionTargetFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CompositionTarget(fromAbi: abi)
}

fileprivate func makeDesktopAcrylicBackdropFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DesktopAcrylicBackdrop(fromAbi: abi)
}

fileprivate func makeDoubleCollectionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DoubleCollection(fromAbi: abi)
}

fileprivate func makeEllipseGeometryFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return EllipseGeometry(fromAbi: abi)
}

fileprivate func makeFontFamilyFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return FontFamily(fromAbi: abi)
}

fileprivate func makeGeneralTransformFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return GeneralTransform(fromAbi: abi)
}

fileprivate func makeGeometryFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return Geometry(fromAbi: abi)
}

fileprivate func makeGeometryCollectionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return GeometryCollection(fromAbi: abi)
}

fileprivate func makeGeometryGroupFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return GeometryGroup(fromAbi: abi)
}

fileprivate func makeGradientBrushFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return GradientBrush(fromAbi: abi)
}

fileprivate func makeGradientStopFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return GradientStop(fromAbi: abi)
}

fileprivate func makeGradientStopCollectionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return GradientStopCollection(fromAbi: abi)
}

fileprivate func makeImageBrushFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ImageBrush(fromAbi: abi)
}

fileprivate func makeImageSourceFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ImageSource(fromAbi: abi)
}

fileprivate func makeLineGeometryFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return LineGeometry(fromAbi: abi)
}

fileprivate func makeLineSegmentFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return LineSegment(fromAbi: abi)
}

fileprivate func makeLinearGradientBrushFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return LinearGradientBrush(fromAbi: abi)
}

fileprivate func makeLoadedImageSourceLoadCompletedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return LoadedImageSourceLoadCompletedEventArgs(fromAbi: abi)
}

fileprivate func makeLoadedImageSurfaceFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return LoadedImageSurface(fromAbi: abi)
}

fileprivate func makeMatrix3DProjectionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return Matrix3DProjection(fromAbi: abi)
}

fileprivate func makeMatrixHelperFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MatrixHelper(fromAbi: abi)
}

fileprivate func makeMatrixTransformFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MatrixTransform(fromAbi: abi)
}

fileprivate func makeMediaTransportControlsThumbnailRequestedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaTransportControlsThumbnailRequestedEventArgs(fromAbi: abi)
}

fileprivate func makeMicaBackdropFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MicaBackdrop(fromAbi: abi)
}

fileprivate func makePathFigureFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PathFigure(fromAbi: abi)
}

fileprivate func makePathFigureCollectionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PathFigureCollection(fromAbi: abi)
}

fileprivate func makePathGeometryFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PathGeometry(fromAbi: abi)
}

fileprivate func makePathSegmentFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PathSegment(fromAbi: abi)
}

fileprivate func makePathSegmentCollectionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PathSegmentCollection(fromAbi: abi)
}

fileprivate func makePlaneProjectionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PlaneProjection(fromAbi: abi)
}

fileprivate func makePointCollectionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PointCollection(fromAbi: abi)
}

fileprivate func makePolyBezierSegmentFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PolyBezierSegment(fromAbi: abi)
}

fileprivate func makePolyLineSegmentFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PolyLineSegment(fromAbi: abi)
}

fileprivate func makePolyQuadraticBezierSegmentFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PolyQuadraticBezierSegment(fromAbi: abi)
}

fileprivate func makeProjectionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return Projection(fromAbi: abi)
}

fileprivate func makeQuadraticBezierSegmentFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return QuadraticBezierSegment(fromAbi: abi)
}

fileprivate func makeRadialGradientBrushFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return RadialGradientBrush(fromAbi: abi)
}

fileprivate func makeRectangleGeometryFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return RectangleGeometry(fromAbi: abi)
}

fileprivate func makeRenderedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return RenderedEventArgs(fromAbi: abi)
}

fileprivate func makeRenderingEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return RenderingEventArgs(fromAbi: abi)
}

fileprivate func makeRotateTransformFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return RotateTransform(fromAbi: abi)
}

fileprivate func makeScaleTransformFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ScaleTransform(fromAbi: abi)
}

fileprivate func makeShadowFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return Shadow(fromAbi: abi)
}

fileprivate func makeSkewTransformFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SkewTransform(fromAbi: abi)
}

fileprivate func makeSolidColorBrushFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SolidColorBrush(fromAbi: abi)
}

fileprivate func makeSystemBackdropFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SystemBackdrop(fromAbi: abi)
}

fileprivate func makeThemeShadowFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ThemeShadow(fromAbi: abi)
}

fileprivate func makeTileBrushFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TileBrush(fromAbi: abi)
}

fileprivate func makeTransformFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return Transform(fromAbi: abi)
}

fileprivate func makeTransformCollectionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TransformCollection(fromAbi: abi)
}

fileprivate func makeTransformGroupFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TransformGroup(fromAbi: abi)
}

fileprivate func makeTranslateTransformFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TranslateTransform(fromAbi: abi)
}

fileprivate func makeVisualTreeHelperFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return VisualTreeHelper(fromAbi: abi)
}

fileprivate func makeXamlCompositionBrushBaseFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return XamlCompositionBrushBase(fromAbi: abi)
}

fileprivate func makeXamlLightFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return XamlLight(fromAbi: abi)
}

fileprivate func makeAddDeleteThemeTransitionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AddDeleteThemeTransition(fromAbi: abi)
}

fileprivate func makeBackEaseFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return BackEase(fromAbi: abi)
}

fileprivate func makeBasicConnectedAnimationConfigurationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return BasicConnectedAnimationConfiguration(fromAbi: abi)
}

fileprivate func makeBeginStoryboardFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return BeginStoryboard(fromAbi: abi)
}

fileprivate func makeBounceEaseFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return BounceEase(fromAbi: abi)
}

fileprivate func makeCircleEaseFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CircleEase(fromAbi: abi)
}

fileprivate func makeColorAnimationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ColorAnimation(fromAbi: abi)
}

fileprivate func makeColorAnimationUsingKeyFramesFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ColorAnimationUsingKeyFrames(fromAbi: abi)
}

fileprivate func makeColorKeyFrameFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ColorKeyFrame(fromAbi: abi)
}

fileprivate func makeColorKeyFrameCollectionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ColorKeyFrameCollection(fromAbi: abi)
}

fileprivate func makeCommonNavigationTransitionInfoFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CommonNavigationTransitionInfo(fromAbi: abi)
}

fileprivate func makeConnectedAnimationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ConnectedAnimation(fromAbi: abi)
}

fileprivate func makeConnectedAnimationConfigurationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ConnectedAnimationConfiguration(fromAbi: abi)
}

fileprivate func makeConnectedAnimationServiceFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ConnectedAnimationService(fromAbi: abi)
}

fileprivate func makeContentThemeTransitionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ContentThemeTransition(fromAbi: abi)
}

fileprivate func makeContinuumNavigationTransitionInfoFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ContinuumNavigationTransitionInfo(fromAbi: abi)
}

fileprivate func makeCubicEaseFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CubicEase(fromAbi: abi)
}

fileprivate func makeDirectConnectedAnimationConfigurationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DirectConnectedAnimationConfiguration(fromAbi: abi)
}

fileprivate func makeDiscreteColorKeyFrameFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DiscreteColorKeyFrame(fromAbi: abi)
}

fileprivate func makeDiscreteDoubleKeyFrameFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DiscreteDoubleKeyFrame(fromAbi: abi)
}

fileprivate func makeDiscreteObjectKeyFrameFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DiscreteObjectKeyFrame(fromAbi: abi)
}

fileprivate func makeDiscretePointKeyFrameFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DiscretePointKeyFrame(fromAbi: abi)
}

fileprivate func makeDoubleAnimationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DoubleAnimation(fromAbi: abi)
}

fileprivate func makeDoubleAnimationUsingKeyFramesFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DoubleAnimationUsingKeyFrames(fromAbi: abi)
}

fileprivate func makeDoubleKeyFrameFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DoubleKeyFrame(fromAbi: abi)
}

fileprivate func makeDoubleKeyFrameCollectionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DoubleKeyFrameCollection(fromAbi: abi)
}

fileprivate func makeDragItemThemeAnimationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DragItemThemeAnimation(fromAbi: abi)
}

fileprivate func makeDragOverThemeAnimationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DragOverThemeAnimation(fromAbi: abi)
}

fileprivate func makeDrillInNavigationTransitionInfoFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DrillInNavigationTransitionInfo(fromAbi: abi)
}

fileprivate func makeDrillInThemeAnimationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DrillInThemeAnimation(fromAbi: abi)
}

fileprivate func makeDrillOutThemeAnimationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DrillOutThemeAnimation(fromAbi: abi)
}

fileprivate func makeDropTargetItemThemeAnimationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DropTargetItemThemeAnimation(fromAbi: abi)
}

fileprivate func makeEasingColorKeyFrameFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return EasingColorKeyFrame(fromAbi: abi)
}

fileprivate func makeEasingDoubleKeyFrameFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return EasingDoubleKeyFrame(fromAbi: abi)
}

fileprivate func makeEasingFunctionBaseFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return EasingFunctionBase(fromAbi: abi)
}

fileprivate func makeEasingPointKeyFrameFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return EasingPointKeyFrame(fromAbi: abi)
}

fileprivate func makeEdgeUIThemeTransitionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return EdgeUIThemeTransition(fromAbi: abi)
}

fileprivate func makeElasticEaseFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ElasticEase(fromAbi: abi)
}

fileprivate func makeEntranceNavigationTransitionInfoFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return EntranceNavigationTransitionInfo(fromAbi: abi)
}

fileprivate func makeEntranceThemeTransitionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return EntranceThemeTransition(fromAbi: abi)
}

fileprivate func makeExponentialEaseFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ExponentialEase(fromAbi: abi)
}

fileprivate func makeFadeInThemeAnimationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return FadeInThemeAnimation(fromAbi: abi)
}

fileprivate func makeFadeOutThemeAnimationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return FadeOutThemeAnimation(fromAbi: abi)
}

fileprivate func makeGravityConnectedAnimationConfigurationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return GravityConnectedAnimationConfiguration(fromAbi: abi)
}

fileprivate func makeKeySplineFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return KeySpline(fromAbi: abi)
}

fileprivate func makeKeyTimeHelperFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return KeyTimeHelper(fromAbi: abi)
}

fileprivate func makeLinearColorKeyFrameFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return LinearColorKeyFrame(fromAbi: abi)
}

fileprivate func makeLinearDoubleKeyFrameFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return LinearDoubleKeyFrame(fromAbi: abi)
}

fileprivate func makeLinearPointKeyFrameFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return LinearPointKeyFrame(fromAbi: abi)
}

fileprivate func makeNavigationThemeTransitionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return NavigationThemeTransition(fromAbi: abi)
}

fileprivate func makeNavigationTransitionInfoFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return NavigationTransitionInfo(fromAbi: abi)
}

fileprivate func makeObjectAnimationUsingKeyFramesFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ObjectAnimationUsingKeyFrames(fromAbi: abi)
}

fileprivate func makeObjectKeyFrameFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ObjectKeyFrame(fromAbi: abi)
}

fileprivate func makeObjectKeyFrameCollectionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ObjectKeyFrameCollection(fromAbi: abi)
}

fileprivate func makePaneThemeTransitionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PaneThemeTransition(fromAbi: abi)
}

fileprivate func makePointAnimationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PointAnimation(fromAbi: abi)
}

fileprivate func makePointAnimationUsingKeyFramesFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PointAnimationUsingKeyFrames(fromAbi: abi)
}

fileprivate func makePointKeyFrameFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PointKeyFrame(fromAbi: abi)
}

fileprivate func makePointKeyFrameCollectionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PointKeyFrameCollection(fromAbi: abi)
}

fileprivate func makePointerDownThemeAnimationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PointerDownThemeAnimation(fromAbi: abi)
}

fileprivate func makePointerUpThemeAnimationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PointerUpThemeAnimation(fromAbi: abi)
}

fileprivate func makePopInThemeAnimationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PopInThemeAnimation(fromAbi: abi)
}

fileprivate func makePopOutThemeAnimationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PopOutThemeAnimation(fromAbi: abi)
}

fileprivate func makePopupThemeTransitionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PopupThemeTransition(fromAbi: abi)
}

fileprivate func makePowerEaseFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PowerEase(fromAbi: abi)
}

fileprivate func makeQuadraticEaseFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return QuadraticEase(fromAbi: abi)
}

fileprivate func makeQuarticEaseFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return QuarticEase(fromAbi: abi)
}

fileprivate func makeQuinticEaseFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return QuinticEase(fromAbi: abi)
}

fileprivate func makeReorderThemeTransitionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ReorderThemeTransition(fromAbi: abi)
}

fileprivate func makeRepeatBehaviorHelperFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return RepeatBehaviorHelper(fromAbi: abi)
}

fileprivate func makeRepositionThemeAnimationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return RepositionThemeAnimation(fromAbi: abi)
}

fileprivate func makeRepositionThemeTransitionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return RepositionThemeTransition(fromAbi: abi)
}

fileprivate func makeSineEaseFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SineEase(fromAbi: abi)
}

fileprivate func makeSlideNavigationTransitionInfoFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SlideNavigationTransitionInfo(fromAbi: abi)
}

fileprivate func makeSplineColorKeyFrameFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SplineColorKeyFrame(fromAbi: abi)
}

fileprivate func makeSplineDoubleKeyFrameFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SplineDoubleKeyFrame(fromAbi: abi)
}

fileprivate func makeSplinePointKeyFrameFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SplinePointKeyFrame(fromAbi: abi)
}

fileprivate func makeSplitCloseThemeAnimationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SplitCloseThemeAnimation(fromAbi: abi)
}

fileprivate func makeSplitOpenThemeAnimationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SplitOpenThemeAnimation(fromAbi: abi)
}

fileprivate func makeStoryboardFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return Storyboard(fromAbi: abi)
}

fileprivate func makeSuppressNavigationTransitionInfoFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SuppressNavigationTransitionInfo(fromAbi: abi)
}

fileprivate func makeSwipeBackThemeAnimationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SwipeBackThemeAnimation(fromAbi: abi)
}

fileprivate func makeSwipeHintThemeAnimationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SwipeHintThemeAnimation(fromAbi: abi)
}

fileprivate func makeTimelineFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return Timeline(fromAbi: abi)
}

fileprivate func makeTimelineCollectionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TimelineCollection(fromAbi: abi)
}

fileprivate func makeTransitionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return Transition(fromAbi: abi)
}

fileprivate func makeTransitionCollectionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TransitionCollection(fromAbi: abi)
}

fileprivate func makeBitmapImageFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return BitmapImage(fromAbi: abi)
}

fileprivate func makeBitmapSourceFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return BitmapSource(fromAbi: abi)
}

fileprivate func makeDownloadProgressEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DownloadProgressEventArgs(fromAbi: abi)
}

fileprivate func makeRenderTargetBitmapFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return RenderTargetBitmap(fromAbi: abi)
}

fileprivate func makeSoftwareBitmapSourceFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SoftwareBitmapSource(fromAbi: abi)
}

fileprivate func makeSurfaceImageSourceFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SurfaceImageSource(fromAbi: abi)
}

fileprivate func makeSvgImageSourceFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SvgImageSource(fromAbi: abi)
}

fileprivate func makeSvgImageSourceFailedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SvgImageSourceFailedEventArgs(fromAbi: abi)
}

fileprivate func makeSvgImageSourceOpenedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SvgImageSourceOpenedEventArgs(fromAbi: abi)
}

fileprivate func makeVirtualSurfaceImageSourceFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return VirtualSurfaceImageSource(fromAbi: abi)
}

fileprivate func makeWriteableBitmapFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return WriteableBitmap(fromAbi: abi)
}

fileprivate func makeXamlRenderingBackgroundTaskFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return XamlRenderingBackgroundTask(fromAbi: abi)
}

fileprivate func makeTransform3DFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return Transform3D(fromAbi: abi)
}

fileprivate func makeFrameNavigationOptionsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return FrameNavigationOptions(fromAbi: abi)
}

fileprivate func makeNavigatingCancelEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return NavigatingCancelEventArgs(fromAbi: abi)
}

fileprivate func makeNavigationEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return NavigationEventArgs(fromAbi: abi)
}

fileprivate func makeNavigationFailedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return NavigationFailedEventArgs(fromAbi: abi)
}

fileprivate func makePageStackEntryFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PageStackEntry(fromAbi: abi)
}

fileprivate func makeAddPagesEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AddPagesEventArgs(fromAbi: abi)
}

fileprivate func makeGetPreviewPageEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return GetPreviewPageEventArgs(fromAbi: abi)
}

fileprivate func makePaginateEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PaginateEventArgs(fromAbi: abi)
}

fileprivate func makePrintDocumentFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PrintDocument(fromAbi: abi)
}

fileprivate func makeCustomXamlResourceLoaderFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CustomXamlResourceLoader(fromAbi: abi)
}

fileprivate func makeEllipseFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return Ellipse(fromAbi: abi)
}

fileprivate func makeLineFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return Line(fromAbi: abi)
}

fileprivate func makePathFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return Path(fromAbi: abi)
}

fileprivate func makePolygonFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return Polygon(fromAbi: abi)
}

fileprivate func makePolylineFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return Polyline(fromAbi: abi)
}

fileprivate func makeRectangleFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return Rectangle(fromAbi: abi)
}

fileprivate func makeShapeFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return Shape(fromAbi: abi)
}

fileprivate func makeXamlControlsXamlMetaDataProviderFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return XamlControlsXamlMetaDataProvider(fromAbi: abi)
}

@_spi(__MakeFromAbi_DoNotImport)
public class __MakeFromAbi: MakeFromAbi {
    public static func from(typeName: String, abi: WindowsFoundation.IInspectable) -> Any? {
        switch typeName {
            case "IDataTemplateExtension": return makeIDataTemplateExtensionFrom(abi: abi)
            case "IElementFactory": return makeIElementFactoryFrom(abi: abi)
            case "IXamlServiceProvider": return makeIXamlServiceProviderFrom(abi: abi)
            case "IAnimatedVisual": return makeIAnimatedVisualFrom(abi: abi)
            case "IAnimatedVisual2": return makeIAnimatedVisual2From(abi: abi)
            case "IAnimatedVisualSource": return makeIAnimatedVisualSourceFrom(abi: abi)
            case "IAnimatedVisualSource2": return makeIAnimatedVisualSource2From(abi: abi)
            case "IAnimatedVisualSource3": return makeIAnimatedVisualSource3From(abi: abi)
            case "ICommandBarElement": return makeICommandBarElementFrom(abi: abi)
            case "IDynamicAnimatedVisualSource": return makeIDynamicAnimatedVisualSourceFrom(abi: abi)
            case "IInsertionPanel": return makeIInsertionPanelFrom(abi: abi)
            case "IItemContainerMapping": return makeIItemContainerMappingFrom(abi: abi)
            case "IKeyIndexMapping": return makeIKeyIndexMappingFrom(abi: abi)
            case "INavigate": return makeINavigateFrom(abi: abi)
            case "IScrollAnchorProvider": return makeIScrollAnchorProviderFrom(abi: abi)
            case "ISemanticZoomInformation": return makeISemanticZoomInformationFrom(abi: abi)
            case "IScrollController": return makeIScrollControllerFrom(abi: abi)
            case "IScrollControllerPanningInfo": return makeIScrollControllerPanningInfoFrom(abi: abi)
            case "IScrollSnapPointsInfo": return makeIScrollSnapPointsInfoFrom(abi: abi)
            case "ICollectionView": return makeICollectionViewFrom(abi: abi)
            case "ICollectionViewFactory": return makeICollectionViewFactoryFrom(abi: abi)
            case "ICollectionViewGroup": return makeICollectionViewGroupFrom(abi: abi)
            case "ICustomProperty": return makeICustomPropertyFrom(abi: abi)
            case "ICustomPropertyProvider": return makeICustomPropertyProviderFrom(abi: abi)
            case "IItemsRangeInfo": return makeIItemsRangeInfoFrom(abi: abi)
            case "INotifyDataErrorInfo": return makeINotifyDataErrorInfoFrom(abi: abi)
            case "INotifyPropertyChanged": return makeINotifyPropertyChangedFrom(abi: abi)
            case "ISelectionInfo": return makeISelectionInfoFrom(abi: abi)
            case "ISupportIncrementalLoading": return makeISupportIncrementalLoadingFrom(abi: abi)
            case "IValueConverter": return makeIValueConverterFrom(abi: abi)
            case "ICommand": return makeICommandFrom(abi: abi)
            case "IBindableIterable": return makeIBindableIterableFrom(abi: abi)
            case "IBindableIterator": return makeIBindableIteratorFrom(abi: abi)
            case "IBindableVector": return makeIBindableVectorFrom(abi: abi)
            case "IBindableVectorView": return makeIBindableVectorViewFrom(abi: abi)
            case "INotifyCollectionChanged": return makeINotifyCollectionChangedFrom(abi: abi)
            case "IComponentConnector": return makeIComponentConnectorFrom(abi: abi)
            case "IDataTemplateComponent": return makeIDataTemplateComponentFrom(abi: abi)
            case "IXamlMember": return makeIXamlMemberFrom(abi: abi)
            case "IXamlMetadataProvider": return makeIXamlMetadataProviderFrom(abi: abi)
            case "IXamlType": return makeIXamlTypeFrom(abi: abi)
            case "AdaptiveTrigger": return makeAdaptiveTriggerFrom(abi: abi)
            case "Application": return makeApplicationFrom(abi: abi)
            case "ApplicationInitializationCallbackParams": return makeApplicationInitializationCallbackParamsFrom(abi: abi)
            case "BindingFailedEventArgs": return makeBindingFailedEventArgsFrom(abi: abi)
            case "BringIntoViewOptions": return makeBringIntoViewOptionsFrom(abi: abi)
            case "BringIntoViewRequestedEventArgs": return makeBringIntoViewRequestedEventArgsFrom(abi: abi)
            case "BrushTransition": return makeBrushTransitionFrom(abi: abi)
            case "ColorPaletteResources": return makeColorPaletteResourcesFrom(abi: abi)
            case "CornerRadiusHelper": return makeCornerRadiusHelperFrom(abi: abi)
            case "DataContextChangedEventArgs": return makeDataContextChangedEventArgsFrom(abi: abi)
            case "DataTemplate": return makeDataTemplateFrom(abi: abi)
            case "DataTemplateKey": return makeDataTemplateKeyFrom(abi: abi)
            case "DebugSettings": return makeDebugSettingsFrom(abi: abi)
            case "DependencyObject": return makeDependencyObjectFrom(abi: abi)
            case "DependencyObjectCollection": return makeDependencyObjectCollectionFrom(abi: abi)
            case "DependencyProperty": return makeDependencyPropertyFrom(abi: abi)
            case "DependencyPropertyChangedEventArgs": return makeDependencyPropertyChangedEventArgsFrom(abi: abi)
            case "DispatcherTimer": return makeDispatcherTimerFrom(abi: abi)
            case "DragEventArgs": return makeDragEventArgsFrom(abi: abi)
            case "DragOperationDeferral": return makeDragOperationDeferralFrom(abi: abi)
            case "DragStartingEventArgs": return makeDragStartingEventArgsFrom(abi: abi)
            case "DragUI": return makeDragUIFrom(abi: abi)
            case "DragUIOverride": return makeDragUIOverrideFrom(abi: abi)
            case "DropCompletedEventArgs": return makeDropCompletedEventArgsFrom(abi: abi)
            case "DurationHelper": return makeDurationHelperFrom(abi: abi)
            case "EffectiveViewportChangedEventArgs": return makeEffectiveViewportChangedEventArgsFrom(abi: abi)
            case "ElementFactoryGetArgs": return makeElementFactoryGetArgsFrom(abi: abi)
            case "ElementFactoryRecycleArgs": return makeElementFactoryRecycleArgsFrom(abi: abi)
            case "ElementSoundPlayer": return makeElementSoundPlayerFrom(abi: abi)
            case "EventTrigger": return makeEventTriggerFrom(abi: abi)
            case "ExceptionRoutedEventArgs": return makeExceptionRoutedEventArgsFrom(abi: abi)
            case "FrameworkElement": return makeFrameworkElementFrom(abi: abi)
            case "FrameworkTemplate": return makeFrameworkTemplateFrom(abi: abi)
            case "FrameworkView": return makeFrameworkViewFrom(abi: abi)
            case "FrameworkViewSource": return makeFrameworkViewSourceFrom(abi: abi)
            case "GridLengthHelper": return makeGridLengthHelperFrom(abi: abi)
            case "LaunchActivatedEventArgs": return makeLaunchActivatedEventArgsFrom(abi: abi)
            case "MediaFailedRoutedEventArgs": return makeMediaFailedRoutedEventArgsFrom(abi: abi)
            case "PointHelper": return makePointHelperFrom(abi: abi)
            case "PropertyMetadata": return makePropertyMetadataFrom(abi: abi)
            case "PropertyPath": return makePropertyPathFrom(abi: abi)
            case "RectHelper": return makeRectHelperFrom(abi: abi)
            case "ResourceDictionary": return makeResourceDictionaryFrom(abi: abi)
            case "ResourceManagerRequestedEventArgs": return makeResourceManagerRequestedEventArgsFrom(abi: abi)
            case "RoutedEvent": return makeRoutedEventFrom(abi: abi)
            case "RoutedEventArgs": return makeRoutedEventArgsFrom(abi: abi)
            case "ScalarTransition": return makeScalarTransitionFrom(abi: abi)
            case "Setter": return makeSetterFrom(abi: abi)
            case "SetterBase": return makeSetterBaseFrom(abi: abi)
            case "SetterBaseCollection": return makeSetterBaseCollectionFrom(abi: abi)
            case "SizeChangedEventArgs": return makeSizeChangedEventArgsFrom(abi: abi)
            case "SizeHelper": return makeSizeHelperFrom(abi: abi)
            case "StateTrigger": return makeStateTriggerFrom(abi: abi)
            case "StateTriggerBase": return makeStateTriggerBaseFrom(abi: abi)
            case "Style": return makeStyleFrom(abi: abi)
            case "TargetPropertyPath": return makeTargetPropertyPathFrom(abi: abi)
            case "ThicknessHelper": return makeThicknessHelperFrom(abi: abi)
            case "TriggerAction": return makeTriggerActionFrom(abi: abi)
            case "TriggerActionCollection": return makeTriggerActionCollectionFrom(abi: abi)
            case "TriggerBase": return makeTriggerBaseFrom(abi: abi)
            case "TriggerCollection": return makeTriggerCollectionFrom(abi: abi)
            case "UIElement": return makeUIElementFrom(abi: abi)
            case "UIElementWeakCollection": return makeUIElementWeakCollectionFrom(abi: abi)
            case "UnhandledExceptionEventArgs": return makeUnhandledExceptionEventArgsFrom(abi: abi)
            case "Vector3Transition": return makeVector3TransitionFrom(abi: abi)
            case "VisualState": return makeVisualStateFrom(abi: abi)
            case "VisualStateChangedEventArgs": return makeVisualStateChangedEventArgsFrom(abi: abi)
            case "VisualStateGroup": return makeVisualStateGroupFrom(abi: abi)
            case "VisualStateManager": return makeVisualStateManagerFrom(abi: abi)
            case "VisualTransition": return makeVisualTransitionFrom(abi: abi)
            case "Window": return makeWindowFrom(abi: abi)
            case "WindowActivatedEventArgs": return makeWindowActivatedEventArgsFrom(abi: abi)
            case "WindowEventArgs": return makeWindowEventArgsFrom(abi: abi)
            case "WindowSizeChangedEventArgs": return makeWindowSizeChangedEventArgsFrom(abi: abi)
            case "WindowVisibilityChangedEventArgs": return makeWindowVisibilityChangedEventArgsFrom(abi: abi)
            case "XamlResourceReferenceFailedEventArgs": return makeXamlResourceReferenceFailedEventArgsFrom(abi: abi)
            case "XamlRoot": return makeXamlRootFrom(abi: abi)
            case "XamlRootChangedEventArgs": return makeXamlRootChangedEventArgsFrom(abi: abi)
            case "AnnotationPatternIdentifiers": return makeAnnotationPatternIdentifiersFrom(abi: abi)
            case "AutomationAnnotation": return makeAutomationAnnotationFrom(abi: abi)
            case "AutomationElementIdentifiers": return makeAutomationElementIdentifiersFrom(abi: abi)
            case "AutomationProperties": return makeAutomationPropertiesFrom(abi: abi)
            case "AutomationProperty": return makeAutomationPropertyFrom(abi: abi)
            case "DockPatternIdentifiers": return makeDockPatternIdentifiersFrom(abi: abi)
            case "DragPatternIdentifiers": return makeDragPatternIdentifiersFrom(abi: abi)
            case "DropTargetPatternIdentifiers": return makeDropTargetPatternIdentifiersFrom(abi: abi)
            case "ExpandCollapsePatternIdentifiers": return makeExpandCollapsePatternIdentifiersFrom(abi: abi)
            case "GridItemPatternIdentifiers": return makeGridItemPatternIdentifiersFrom(abi: abi)
            case "GridPatternIdentifiers": return makeGridPatternIdentifiersFrom(abi: abi)
            case "MultipleViewPatternIdentifiers": return makeMultipleViewPatternIdentifiersFrom(abi: abi)
            case "RangeValuePatternIdentifiers": return makeRangeValuePatternIdentifiersFrom(abi: abi)
            case "ScrollPatternIdentifiers": return makeScrollPatternIdentifiersFrom(abi: abi)
            case "SelectionItemPatternIdentifiers": return makeSelectionItemPatternIdentifiersFrom(abi: abi)
            case "SelectionPatternIdentifiers": return makeSelectionPatternIdentifiersFrom(abi: abi)
            case "SpreadsheetItemPatternIdentifiers": return makeSpreadsheetItemPatternIdentifiersFrom(abi: abi)
            case "StylesPatternIdentifiers": return makeStylesPatternIdentifiersFrom(abi: abi)
            case "TableItemPatternIdentifiers": return makeTableItemPatternIdentifiersFrom(abi: abi)
            case "TablePatternIdentifiers": return makeTablePatternIdentifiersFrom(abi: abi)
            case "TogglePatternIdentifiers": return makeTogglePatternIdentifiersFrom(abi: abi)
            case "TransformPattern2Identifiers": return makeTransformPattern2IdentifiersFrom(abi: abi)
            case "TransformPatternIdentifiers": return makeTransformPatternIdentifiersFrom(abi: abi)
            case "ValuePatternIdentifiers": return makeValuePatternIdentifiersFrom(abi: abi)
            case "WindowPatternIdentifiers": return makeWindowPatternIdentifiersFrom(abi: abi)
            case "AutomationPeer": return makeAutomationPeerFrom(abi: abi)
            case "AutomationPeerAnnotation": return makeAutomationPeerAnnotationFrom(abi: abi)
            case "IRawElementProviderSimple": return makeIRawElementProviderSimpleFrom(abi: abi)
            case "AnchorRequestedEventArgs": return makeAnchorRequestedEventArgsFrom(abi: abi)
            case "AnimatedIcon": return makeAnimatedIconFrom(abi: abi)
            case "AnimatedIconSource": return makeAnimatedIconSourceFrom(abi: abi)
            case "AnimatedVisualPlayer": return makeAnimatedVisualPlayerFrom(abi: abi)
            case "AnnotatedScrollBar": return makeAnnotatedScrollBarFrom(abi: abi)
            case "AnnotatedScrollBarDetailLabelRequestedEventArgs": return makeAnnotatedScrollBarDetailLabelRequestedEventArgsFrom(abi: abi)
            case "AnnotatedScrollBarLabel": return makeAnnotatedScrollBarLabelFrom(abi: abi)
            case "AnnotatedScrollBarScrollingEventArgs": return makeAnnotatedScrollBarScrollingEventArgsFrom(abi: abi)
            case "AppBar": return makeAppBarFrom(abi: abi)
            case "AppBarButton": return makeAppBarButtonFrom(abi: abi)
            case "AppBarElementContainer": return makeAppBarElementContainerFrom(abi: abi)
            case "AppBarSeparator": return makeAppBarSeparatorFrom(abi: abi)
            case "AppBarToggleButton": return makeAppBarToggleButtonFrom(abi: abi)
            case "AutoSuggestBox": return makeAutoSuggestBoxFrom(abi: abi)
            case "AutoSuggestBoxQuerySubmittedEventArgs": return makeAutoSuggestBoxQuerySubmittedEventArgsFrom(abi: abi)
            case "AutoSuggestBoxSuggestionChosenEventArgs": return makeAutoSuggestBoxSuggestionChosenEventArgsFrom(abi: abi)
            case "AutoSuggestBoxTextChangedEventArgs": return makeAutoSuggestBoxTextChangedEventArgsFrom(abi: abi)
            case "BitmapIcon": return makeBitmapIconFrom(abi: abi)
            case "BitmapIconSource": return makeBitmapIconSourceFrom(abi: abi)
            case "Border": return makeBorderFrom(abi: abi)
            case "BreadcrumbBar": return makeBreadcrumbBarFrom(abi: abi)
            case "BreadcrumbBarItem": return makeBreadcrumbBarItemFrom(abi: abi)
            case "BreadcrumbBarItemClickedEventArgs": return makeBreadcrumbBarItemClickedEventArgsFrom(abi: abi)
            case "Button": return makeButtonFrom(abi: abi)
            case "CalendarDatePicker": return makeCalendarDatePickerFrom(abi: abi)
            case "CalendarDatePickerDateChangedEventArgs": return makeCalendarDatePickerDateChangedEventArgsFrom(abi: abi)
            case "CalendarView": return makeCalendarViewFrom(abi: abi)
            case "CalendarViewDayItem": return makeCalendarViewDayItemFrom(abi: abi)
            case "CalendarViewDayItemChangingEventArgs": return makeCalendarViewDayItemChangingEventArgsFrom(abi: abi)
            case "CalendarViewSelectedDatesChangedEventArgs": return makeCalendarViewSelectedDatesChangedEventArgsFrom(abi: abi)
            case "CandidateWindowBoundsChangedEventArgs": return makeCandidateWindowBoundsChangedEventArgsFrom(abi: abi)
            case "Canvas": return makeCanvasFrom(abi: abi)
            case "CheckBox": return makeCheckBoxFrom(abi: abi)
            case "ChoosingGroupHeaderContainerEventArgs": return makeChoosingGroupHeaderContainerEventArgsFrom(abi: abi)
            case "ChoosingItemContainerEventArgs": return makeChoosingItemContainerEventArgsFrom(abi: abi)
            case "CleanUpVirtualizedItemEventArgs": return makeCleanUpVirtualizedItemEventArgsFrom(abi: abi)
            case "ColorChangedEventArgs": return makeColorChangedEventArgsFrom(abi: abi)
            case "ColorPicker": return makeColorPickerFrom(abi: abi)
            case "ColumnDefinition": return makeColumnDefinitionFrom(abi: abi)
            case "ColumnDefinitionCollection": return makeColumnDefinitionCollectionFrom(abi: abi)
            case "ComboBox": return makeComboBoxFrom(abi: abi)
            case "ComboBoxItem": return makeComboBoxItemFrom(abi: abi)
            case "ComboBoxTextSubmittedEventArgs": return makeComboBoxTextSubmittedEventArgsFrom(abi: abi)
            case "CommandBar": return makeCommandBarFrom(abi: abi)
            case "CommandBarFlyout": return makeCommandBarFlyoutFrom(abi: abi)
            case "CommandBarOverflowPresenter": return makeCommandBarOverflowPresenterFrom(abi: abi)
            case "ContainerContentChangingEventArgs": return makeContainerContentChangingEventArgsFrom(abi: abi)
            case "ContentControl": return makeContentControlFrom(abi: abi)
            case "ContentDialog": return makeContentDialogFrom(abi: abi)
            case "ContentDialogButtonClickDeferral": return makeContentDialogButtonClickDeferralFrom(abi: abi)
            case "ContentDialogButtonClickEventArgs": return makeContentDialogButtonClickEventArgsFrom(abi: abi)
            case "ContentDialogClosedEventArgs": return makeContentDialogClosedEventArgsFrom(abi: abi)
            case "ContentDialogClosingDeferral": return makeContentDialogClosingDeferralFrom(abi: abi)
            case "ContentDialogClosingEventArgs": return makeContentDialogClosingEventArgsFrom(abi: abi)
            case "ContentDialogOpenedEventArgs": return makeContentDialogOpenedEventArgsFrom(abi: abi)
            case "ContentPresenter": return makeContentPresenterFrom(abi: abi)
            case "ContextMenuEventArgs": return makeContextMenuEventArgsFrom(abi: abi)
            case "Control": return makeControlFrom(abi: abi)
            case "ControlTemplate": return makeControlTemplateFrom(abi: abi)
            case "CoreWebView2InitializedEventArgs": return makeCoreWebView2InitializedEventArgsFrom(abi: abi)
            case "DataTemplateSelector": return makeDataTemplateSelectorFrom(abi: abi)
            case "DatePickedEventArgs": return makeDatePickedEventArgsFrom(abi: abi)
            case "DatePicker": return makeDatePickerFrom(abi: abi)
            case "DatePickerFlyout": return makeDatePickerFlyoutFrom(abi: abi)
            case "DatePickerFlyoutItem": return makeDatePickerFlyoutItemFrom(abi: abi)
            case "DatePickerFlyoutPresenter": return makeDatePickerFlyoutPresenterFrom(abi: abi)
            case "DatePickerSelectedValueChangedEventArgs": return makeDatePickerSelectedValueChangedEventArgsFrom(abi: abi)
            case "DatePickerValueChangedEventArgs": return makeDatePickerValueChangedEventArgsFrom(abi: abi)
            case "DragItemsCompletedEventArgs": return makeDragItemsCompletedEventArgsFrom(abi: abi)
            case "DragItemsStartingEventArgs": return makeDragItemsStartingEventArgsFrom(abi: abi)
            case "DropDownButton": return makeDropDownButtonFrom(abi: abi)
            case "DynamicOverflowItemsChangingEventArgs": return makeDynamicOverflowItemsChangingEventArgsFrom(abi: abi)
            case "Expander": return makeExpanderFrom(abi: abi)
            case "ExpanderCollapsedEventArgs": return makeExpanderCollapsedEventArgsFrom(abi: abi)
            case "ExpanderExpandingEventArgs": return makeExpanderExpandingEventArgsFrom(abi: abi)
            case "ExpanderTemplateSettings": return makeExpanderTemplateSettingsFrom(abi: abi)
            case "FlipView": return makeFlipViewFrom(abi: abi)
            case "FlipViewItem": return makeFlipViewItemFrom(abi: abi)
            case "Flyout": return makeFlyoutFrom(abi: abi)
            case "FlyoutPresenter": return makeFlyoutPresenterFrom(abi: abi)
            case "FocusDisengagedEventArgs": return makeFocusDisengagedEventArgsFrom(abi: abi)
            case "FocusEngagedEventArgs": return makeFocusEngagedEventArgsFrom(abi: abi)
            case "FontIcon": return makeFontIconFrom(abi: abi)
            case "FontIconSource": return makeFontIconSourceFrom(abi: abi)
            case "Frame": return makeFrameFrom(abi: abi)
            case "Grid": return makeGridFrom(abi: abi)
            case "GridView": return makeGridViewFrom(abi: abi)
            case "GridViewHeaderItem": return makeGridViewHeaderItemFrom(abi: abi)
            case "GridViewItem": return makeGridViewItemFrom(abi: abi)
            case "GroupItem": return makeGroupItemFrom(abi: abi)
            case "GroupStyle": return makeGroupStyleFrom(abi: abi)
            case "GroupStyleSelector": return makeGroupStyleSelectorFrom(abi: abi)
            case "HasValidationErrorsChangedEventArgs": return makeHasValidationErrorsChangedEventArgsFrom(abi: abi)
            case "Hub": return makeHubFrom(abi: abi)
            case "HubSection": return makeHubSectionFrom(abi: abi)
            case "HubSectionCollection": return makeHubSectionCollectionFrom(abi: abi)
            case "HubSectionHeaderClickEventArgs": return makeHubSectionHeaderClickEventArgsFrom(abi: abi)
            case "HyperlinkButton": return makeHyperlinkButtonFrom(abi: abi)
            case "IconElement": return makeIconElementFrom(abi: abi)
            case "IconSource": return makeIconSourceFrom(abi: abi)
            case "IconSourceElement": return makeIconSourceElementFrom(abi: abi)
            case "Image": return makeImageFrom(abi: abi)
            case "ImageIcon": return makeImageIconFrom(abi: abi)
            case "ImageIconSource": return makeImageIconSourceFrom(abi: abi)
            case "InfoBadge": return makeInfoBadgeFrom(abi: abi)
            case "InfoBadgeTemplateSettings": return makeInfoBadgeTemplateSettingsFrom(abi: abi)
            case "InfoBar": return makeInfoBarFrom(abi: abi)
            case "InfoBarClosedEventArgs": return makeInfoBarClosedEventArgsFrom(abi: abi)
            case "InfoBarClosingEventArgs": return makeInfoBarClosingEventArgsFrom(abi: abi)
            case "InfoBarTemplateSettings": return makeInfoBarTemplateSettingsFrom(abi: abi)
            case "IsTextTrimmedChangedEventArgs": return makeIsTextTrimmedChangedEventArgsFrom(abi: abi)
            case "ItemClickEventArgs": return makeItemClickEventArgsFrom(abi: abi)
            case "ItemCollection": return makeItemCollectionFrom(abi: abi)
            case "ItemCollectionTransition": return makeItemCollectionTransitionFrom(abi: abi)
            case "ItemCollectionTransitionCompletedEventArgs": return makeItemCollectionTransitionCompletedEventArgsFrom(abi: abi)
            case "ItemCollectionTransitionProgress": return makeItemCollectionTransitionProgressFrom(abi: abi)
            case "ItemCollectionTransitionProvider": return makeItemCollectionTransitionProviderFrom(abi: abi)
            case "ItemContainer": return makeItemContainerFrom(abi: abi)
            case "ItemContainerGenerator": return makeItemContainerGeneratorFrom(abi: abi)
            case "ItemsControl": return makeItemsControlFrom(abi: abi)
            case "ItemsPanelTemplate": return makeItemsPanelTemplateFrom(abi: abi)
            case "ItemsPickedEventArgs": return makeItemsPickedEventArgsFrom(abi: abi)
            case "ItemsPresenter": return makeItemsPresenterFrom(abi: abi)
            case "ItemsRepeater": return makeItemsRepeaterFrom(abi: abi)
            case "ItemsRepeaterElementClearingEventArgs": return makeItemsRepeaterElementClearingEventArgsFrom(abi: abi)
            case "ItemsRepeaterElementIndexChangedEventArgs": return makeItemsRepeaterElementIndexChangedEventArgsFrom(abi: abi)
            case "ItemsRepeaterElementPreparedEventArgs": return makeItemsRepeaterElementPreparedEventArgsFrom(abi: abi)
            case "ItemsRepeaterScrollHost": return makeItemsRepeaterScrollHostFrom(abi: abi)
            case "ItemsSourceView": return makeItemsSourceViewFrom(abi: abi)
            case "ItemsStackPanel": return makeItemsStackPanelFrom(abi: abi)
            case "ItemsView": return makeItemsViewFrom(abi: abi)
            case "ItemsViewItemInvokedEventArgs": return makeItemsViewItemInvokedEventArgsFrom(abi: abi)
            case "ItemsViewSelectionChangedEventArgs": return makeItemsViewSelectionChangedEventArgsFrom(abi: abi)
            case "ItemsWrapGrid": return makeItemsWrapGridFrom(abi: abi)
            case "Layout": return makeLayoutFrom(abi: abi)
            case "LayoutContext": return makeLayoutContextFrom(abi: abi)
            case "LinedFlowLayout": return makeLinedFlowLayoutFrom(abi: abi)
            case "LinedFlowLayoutItemCollectionTransitionProvider": return makeLinedFlowLayoutItemCollectionTransitionProviderFrom(abi: abi)
            case "LinedFlowLayoutItemsInfoRequestedEventArgs": return makeLinedFlowLayoutItemsInfoRequestedEventArgsFrom(abi: abi)
            case "ListBox": return makeListBoxFrom(abi: abi)
            case "ListBoxItem": return makeListBoxItemFrom(abi: abi)
            case "ListPickerFlyout": return makeListPickerFlyoutFrom(abi: abi)
            case "ListPickerFlyoutPresenter": return makeListPickerFlyoutPresenterFrom(abi: abi)
            case "ListView": return makeListViewFrom(abi: abi)
            case "ListViewBase": return makeListViewBaseFrom(abi: abi)
            case "ListViewBaseHeaderItem": return makeListViewBaseHeaderItemFrom(abi: abi)
            case "ListViewHeaderItem": return makeListViewHeaderItemFrom(abi: abi)
            case "ListViewItem": return makeListViewItemFrom(abi: abi)
            case "ListViewPersistenceHelper": return makeListViewPersistenceHelperFrom(abi: abi)
            case "MapControl": return makeMapControlFrom(abi: abi)
            case "MapControlMapServiceErrorOccurredEventArgs": return makeMapControlMapServiceErrorOccurredEventArgsFrom(abi: abi)
            case "MapElement": return makeMapElementFrom(abi: abi)
            case "MapElementClickEventArgs": return makeMapElementClickEventArgsFrom(abi: abi)
            case "MapElementsLayer": return makeMapElementsLayerFrom(abi: abi)
            case "MapIcon": return makeMapIconFrom(abi: abi)
            case "MapLayer": return makeMapLayerFrom(abi: abi)
            case "MediaPlayerElement": return makeMediaPlayerElementFrom(abi: abi)
            case "MediaPlayerPresenter": return makeMediaPlayerPresenterFrom(abi: abi)
            case "MediaTransportControls": return makeMediaTransportControlsFrom(abi: abi)
            case "MediaTransportControlsHelper": return makeMediaTransportControlsHelperFrom(abi: abi)
            case "MenuBar": return makeMenuBarFrom(abi: abi)
            case "MenuBarItem": return makeMenuBarItemFrom(abi: abi)
            case "MenuBarItemFlyout": return makeMenuBarItemFlyoutFrom(abi: abi)
            case "MenuFlyout": return makeMenuFlyoutFrom(abi: abi)
            case "MenuFlyoutItem": return makeMenuFlyoutItemFrom(abi: abi)
            case "MenuFlyoutItemBase": return makeMenuFlyoutItemBaseFrom(abi: abi)
            case "MenuFlyoutPresenter": return makeMenuFlyoutPresenterFrom(abi: abi)
            case "MenuFlyoutSeparator": return makeMenuFlyoutSeparatorFrom(abi: abi)
            case "MenuFlyoutSubItem": return makeMenuFlyoutSubItemFrom(abi: abi)
            case "NavigationView": return makeNavigationViewFrom(abi: abi)
            case "NavigationViewBackRequestedEventArgs": return makeNavigationViewBackRequestedEventArgsFrom(abi: abi)
            case "NavigationViewDisplayModeChangedEventArgs": return makeNavigationViewDisplayModeChangedEventArgsFrom(abi: abi)
            case "NavigationViewItem": return makeNavigationViewItemFrom(abi: abi)
            case "NavigationViewItemBase": return makeNavigationViewItemBaseFrom(abi: abi)
            case "NavigationViewItemCollapsedEventArgs": return makeNavigationViewItemCollapsedEventArgsFrom(abi: abi)
            case "NavigationViewItemExpandingEventArgs": return makeNavigationViewItemExpandingEventArgsFrom(abi: abi)
            case "NavigationViewItemHeader": return makeNavigationViewItemHeaderFrom(abi: abi)
            case "NavigationViewItemInvokedEventArgs": return makeNavigationViewItemInvokedEventArgsFrom(abi: abi)
            case "NavigationViewItemSeparator": return makeNavigationViewItemSeparatorFrom(abi: abi)
            case "NavigationViewPaneClosingEventArgs": return makeNavigationViewPaneClosingEventArgsFrom(abi: abi)
            case "NavigationViewSelectionChangedEventArgs": return makeNavigationViewSelectionChangedEventArgsFrom(abi: abi)
            case "NavigationViewTemplateSettings": return makeNavigationViewTemplateSettingsFrom(abi: abi)
            case "NonVirtualizingLayout": return makeNonVirtualizingLayoutFrom(abi: abi)
            case "NonVirtualizingLayoutContext": return makeNonVirtualizingLayoutContextFrom(abi: abi)
            case "NumberBox": return makeNumberBoxFrom(abi: abi)
            case "NumberBoxValueChangedEventArgs": return makeNumberBoxValueChangedEventArgsFrom(abi: abi)
            case "Page": return makePageFrom(abi: abi)
            case "Panel": return makePanelFrom(abi: abi)
            case "ParallaxView": return makeParallaxViewFrom(abi: abi)
            case "PasswordBox": return makePasswordBoxFrom(abi: abi)
            case "PasswordBoxPasswordChangingEventArgs": return makePasswordBoxPasswordChangingEventArgsFrom(abi: abi)
            case "PathIcon": return makePathIconFrom(abi: abi)
            case "PathIconSource": return makePathIconSourceFrom(abi: abi)
            case "PersonPicture": return makePersonPictureFrom(abi: abi)
            case "PersonPictureTemplateSettings": return makePersonPictureTemplateSettingsFrom(abi: abi)
            case "PickerConfirmedEventArgs": return makePickerConfirmedEventArgsFrom(abi: abi)
            case "PickerFlyout": return makePickerFlyoutFrom(abi: abi)
            case "PickerFlyoutPresenter": return makePickerFlyoutPresenterFrom(abi: abi)
            case "PipsPager": return makePipsPagerFrom(abi: abi)
            case "PipsPagerSelectedIndexChangedEventArgs": return makePipsPagerSelectedIndexChangedEventArgsFrom(abi: abi)
            case "PipsPagerTemplateSettings": return makePipsPagerTemplateSettingsFrom(abi: abi)
            case "Pivot": return makePivotFrom(abi: abi)
            case "PivotItem": return makePivotItemFrom(abi: abi)
            case "PivotItemEventArgs": return makePivotItemEventArgsFrom(abi: abi)
            case "ProgressBar": return makeProgressBarFrom(abi: abi)
            case "ProgressBarTemplateSettings": return makeProgressBarTemplateSettingsFrom(abi: abi)
            case "ProgressRing": return makeProgressRingFrom(abi: abi)
            case "ProgressRingTemplateSettings": return makeProgressRingTemplateSettingsFrom(abi: abi)
            case "RadioButton": return makeRadioButtonFrom(abi: abi)
            case "RadioButtons": return makeRadioButtonsFrom(abi: abi)
            case "RadioMenuFlyoutItem": return makeRadioMenuFlyoutItemFrom(abi: abi)
            case "RatingControl": return makeRatingControlFrom(abi: abi)
            case "RatingItemFontInfo": return makeRatingItemFontInfoFrom(abi: abi)
            case "RatingItemImageInfo": return makeRatingItemImageInfoFrom(abi: abi)
            case "RatingItemInfo": return makeRatingItemInfoFrom(abi: abi)
            case "RefreshContainer": return makeRefreshContainerFrom(abi: abi)
            case "RefreshInteractionRatioChangedEventArgs": return makeRefreshInteractionRatioChangedEventArgsFrom(abi: abi)
            case "RefreshRequestedEventArgs": return makeRefreshRequestedEventArgsFrom(abi: abi)
            case "RefreshStateChangedEventArgs": return makeRefreshStateChangedEventArgsFrom(abi: abi)
            case "RefreshVisualizer": return makeRefreshVisualizerFrom(abi: abi)
            case "RelativePanel": return makeRelativePanelFrom(abi: abi)
            case "RevealListViewItemPresenter": return makeRevealListViewItemPresenterFrom(abi: abi)
            case "RichEditBox": return makeRichEditBoxFrom(abi: abi)
            case "RichEditBoxSelectionChangingEventArgs": return makeRichEditBoxSelectionChangingEventArgsFrom(abi: abi)
            case "RichEditBoxTextChangingEventArgs": return makeRichEditBoxTextChangingEventArgsFrom(abi: abi)
            case "RichTextBlock": return makeRichTextBlockFrom(abi: abi)
            case "RichTextBlockOverflow": return makeRichTextBlockOverflowFrom(abi: abi)
            case "RowDefinition": return makeRowDefinitionFrom(abi: abi)
            case "RowDefinitionCollection": return makeRowDefinitionCollectionFrom(abi: abi)
            case "ScrollContentPresenter": return makeScrollContentPresenterFrom(abi: abi)
            case "ScrollView": return makeScrollViewFrom(abi: abi)
            case "ScrollViewer": return makeScrollViewerFrom(abi: abi)
            case "ScrollViewerView": return makeScrollViewerViewFrom(abi: abi)
            case "ScrollViewerViewChangedEventArgs": return makeScrollViewerViewChangedEventArgsFrom(abi: abi)
            case "ScrollViewerViewChangingEventArgs": return makeScrollViewerViewChangingEventArgsFrom(abi: abi)
            case "ScrollingAnchorRequestedEventArgs": return makeScrollingAnchorRequestedEventArgsFrom(abi: abi)
            case "ScrollingBringingIntoViewEventArgs": return makeScrollingBringingIntoViewEventArgsFrom(abi: abi)
            case "ScrollingScrollAnimationStartingEventArgs": return makeScrollingScrollAnimationStartingEventArgsFrom(abi: abi)
            case "ScrollingScrollCompletedEventArgs": return makeScrollingScrollCompletedEventArgsFrom(abi: abi)
            case "ScrollingScrollOptions": return makeScrollingScrollOptionsFrom(abi: abi)
            case "ScrollingZoomAnimationStartingEventArgs": return makeScrollingZoomAnimationStartingEventArgsFrom(abi: abi)
            case "ScrollingZoomCompletedEventArgs": return makeScrollingZoomCompletedEventArgsFrom(abi: abi)
            case "ScrollingZoomOptions": return makeScrollingZoomOptionsFrom(abi: abi)
            case "SectionsInViewChangedEventArgs": return makeSectionsInViewChangedEventArgsFrom(abi: abi)
            case "SelectionChangedEventArgs": return makeSelectionChangedEventArgsFrom(abi: abi)
            case "SelectorBar": return makeSelectorBarFrom(abi: abi)
            case "SelectorBarItem": return makeSelectorBarItemFrom(abi: abi)
            case "SelectorBarSelectionChangedEventArgs": return makeSelectorBarSelectionChangedEventArgsFrom(abi: abi)
            case "SemanticZoom": return makeSemanticZoomFrom(abi: abi)
            case "SemanticZoomLocation": return makeSemanticZoomLocationFrom(abi: abi)
            case "SemanticZoomViewChangedEventArgs": return makeSemanticZoomViewChangedEventArgsFrom(abi: abi)
            case "Slider": return makeSliderFrom(abi: abi)
            case "SplitButton": return makeSplitButtonFrom(abi: abi)
            case "SplitButtonClickEventArgs": return makeSplitButtonClickEventArgsFrom(abi: abi)
            case "SplitView": return makeSplitViewFrom(abi: abi)
            case "SplitViewPaneClosingEventArgs": return makeSplitViewPaneClosingEventArgsFrom(abi: abi)
            case "StackLayout": return makeStackLayoutFrom(abi: abi)
            case "StackPanel": return makeStackPanelFrom(abi: abi)
            case "StyleSelector": return makeStyleSelectorFrom(abi: abi)
            case "SwapChainBackgroundPanel": return makeSwapChainBackgroundPanelFrom(abi: abi)
            case "SwapChainPanel": return makeSwapChainPanelFrom(abi: abi)
            case "SwipeControl": return makeSwipeControlFrom(abi: abi)
            case "SwipeItem": return makeSwipeItemFrom(abi: abi)
            case "SwipeItemInvokedEventArgs": return makeSwipeItemInvokedEventArgsFrom(abi: abi)
            case "SwipeItems": return makeSwipeItemsFrom(abi: abi)
            case "SymbolIcon": return makeSymbolIconFrom(abi: abi)
            case "SymbolIconSource": return makeSymbolIconSourceFrom(abi: abi)
            case "TabView": return makeTabViewFrom(abi: abi)
            case "TabViewItem": return makeTabViewItemFrom(abi: abi)
            case "TabViewItemTemplateSettings": return makeTabViewItemTemplateSettingsFrom(abi: abi)
            case "TabViewTabCloseRequestedEventArgs": return makeTabViewTabCloseRequestedEventArgsFrom(abi: abi)
            case "TabViewTabDragCompletedEventArgs": return makeTabViewTabDragCompletedEventArgsFrom(abi: abi)
            case "TabViewTabDragStartingEventArgs": return makeTabViewTabDragStartingEventArgsFrom(abi: abi)
            case "TabViewTabDroppedOutsideEventArgs": return makeTabViewTabDroppedOutsideEventArgsFrom(abi: abi)
            case "TeachingTip": return makeTeachingTipFrom(abi: abi)
            case "TeachingTipClosedEventArgs": return makeTeachingTipClosedEventArgsFrom(abi: abi)
            case "TeachingTipClosingEventArgs": return makeTeachingTipClosingEventArgsFrom(abi: abi)
            case "TeachingTipTemplateSettings": return makeTeachingTipTemplateSettingsFrom(abi: abi)
            case "TextBlock": return makeTextBlockFrom(abi: abi)
            case "TextBox": return makeTextBoxFrom(abi: abi)
            case "TextBoxBeforeTextChangingEventArgs": return makeTextBoxBeforeTextChangingEventArgsFrom(abi: abi)
            case "TextBoxSelectionChangingEventArgs": return makeTextBoxSelectionChangingEventArgsFrom(abi: abi)
            case "TextBoxTextChangingEventArgs": return makeTextBoxTextChangingEventArgsFrom(abi: abi)
            case "TextChangedEventArgs": return makeTextChangedEventArgsFrom(abi: abi)
            case "TextCommandBarFlyout": return makeTextCommandBarFlyoutFrom(abi: abi)
            case "TextCompositionChangedEventArgs": return makeTextCompositionChangedEventArgsFrom(abi: abi)
            case "TextCompositionEndedEventArgs": return makeTextCompositionEndedEventArgsFrom(abi: abi)
            case "TextCompositionStartedEventArgs": return makeTextCompositionStartedEventArgsFrom(abi: abi)
            case "TextControlCopyingToClipboardEventArgs": return makeTextControlCopyingToClipboardEventArgsFrom(abi: abi)
            case "TextControlCuttingToClipboardEventArgs": return makeTextControlCuttingToClipboardEventArgsFrom(abi: abi)
            case "TextControlPasteEventArgs": return makeTextControlPasteEventArgsFrom(abi: abi)
            case "TimePickedEventArgs": return makeTimePickedEventArgsFrom(abi: abi)
            case "TimePicker": return makeTimePickerFrom(abi: abi)
            case "TimePickerFlyout": return makeTimePickerFlyoutFrom(abi: abi)
            case "TimePickerFlyoutPresenter": return makeTimePickerFlyoutPresenterFrom(abi: abi)
            case "TimePickerSelectedValueChangedEventArgs": return makeTimePickerSelectedValueChangedEventArgsFrom(abi: abi)
            case "TimePickerValueChangedEventArgs": return makeTimePickerValueChangedEventArgsFrom(abi: abi)
            case "ToggleMenuFlyoutItem": return makeToggleMenuFlyoutItemFrom(abi: abi)
            case "ToggleSplitButton": return makeToggleSplitButtonFrom(abi: abi)
            case "ToggleSplitButtonIsCheckedChangedEventArgs": return makeToggleSplitButtonIsCheckedChangedEventArgsFrom(abi: abi)
            case "ToggleSwitch": return makeToggleSwitchFrom(abi: abi)
            case "ToolTip": return makeToolTipFrom(abi: abi)
            case "ToolTipService": return makeToolTipServiceFrom(abi: abi)
            case "TreeView": return makeTreeViewFrom(abi: abi)
            case "TreeViewCollapsedEventArgs": return makeTreeViewCollapsedEventArgsFrom(abi: abi)
            case "TreeViewDragItemsCompletedEventArgs": return makeTreeViewDragItemsCompletedEventArgsFrom(abi: abi)
            case "TreeViewDragItemsStartingEventArgs": return makeTreeViewDragItemsStartingEventArgsFrom(abi: abi)
            case "TreeViewExpandingEventArgs": return makeTreeViewExpandingEventArgsFrom(abi: abi)
            case "TreeViewItem": return makeTreeViewItemFrom(abi: abi)
            case "TreeViewItemInvokedEventArgs": return makeTreeViewItemInvokedEventArgsFrom(abi: abi)
            case "TreeViewItemTemplateSettings": return makeTreeViewItemTemplateSettingsFrom(abi: abi)
            case "TreeViewList": return makeTreeViewListFrom(abi: abi)
            case "TreeViewNode": return makeTreeViewNodeFrom(abi: abi)
            case "TreeViewSelectionChangedEventArgs": return makeTreeViewSelectionChangedEventArgsFrom(abi: abi)
            case "TwoPaneView": return makeTwoPaneViewFrom(abi: abi)
            case "UIElementCollection": return makeUIElementCollectionFrom(abi: abi)
            case "UniformGridLayout": return makeUniformGridLayoutFrom(abi: abi)
            case "UserControl": return makeUserControlFrom(abi: abi)
            case "VariableSizedWrapGrid": return makeVariableSizedWrapGridFrom(abi: abi)
            case "Viewbox": return makeViewboxFrom(abi: abi)
            case "VirtualizingLayout": return makeVirtualizingLayoutFrom(abi: abi)
            case "VirtualizingLayoutContext": return makeVirtualizingLayoutContextFrom(abi: abi)
            case "VirtualizingPanel": return makeVirtualizingPanelFrom(abi: abi)
            case "VirtualizingStackPanel": return makeVirtualizingStackPanelFrom(abi: abi)
            case "WebView2": return makeWebView2From(abi: abi)
            case "WrapGrid": return makeWrapGridFrom(abi: abi)
            case "XamlControlsResources": return makeXamlControlsResourcesFrom(abi: abi)
            case "AppBarButtonTemplateSettings": return makeAppBarButtonTemplateSettingsFrom(abi: abi)
            case "AppBarTemplateSettings": return makeAppBarTemplateSettingsFrom(abi: abi)
            case "AppBarToggleButtonTemplateSettings": return makeAppBarToggleButtonTemplateSettingsFrom(abi: abi)
            case "ButtonBase": return makeButtonBaseFrom(abi: abi)
            case "CalendarViewTemplateSettings": return makeCalendarViewTemplateSettingsFrom(abi: abi)
            case "ComboBoxTemplateSettings": return makeComboBoxTemplateSettingsFrom(abi: abi)
            case "CommandBarTemplateSettings": return makeCommandBarTemplateSettingsFrom(abi: abi)
            case "FlyoutBase": return makeFlyoutBaseFrom(abi: abi)
            case "FlyoutBaseClosingEventArgs": return makeFlyoutBaseClosingEventArgsFrom(abi: abi)
            case "FlyoutShowOptions": return makeFlyoutShowOptionsFrom(abi: abi)
            case "GridViewItemTemplateSettings": return makeGridViewItemTemplateSettingsFrom(abi: abi)
            case "ItemsChangedEventArgs": return makeItemsChangedEventArgsFrom(abi: abi)
            case "ListViewItemPresenter": return makeListViewItemPresenterFrom(abi: abi)
            case "ListViewItemTemplateSettings": return makeListViewItemTemplateSettingsFrom(abi: abi)
            case "MenuFlyoutItemTemplateSettings": return makeMenuFlyoutItemTemplateSettingsFrom(abi: abi)
            case "MenuFlyoutPresenterTemplateSettings": return makeMenuFlyoutPresenterTemplateSettingsFrom(abi: abi)
            case "OrientedVirtualizingPanel": return makeOrientedVirtualizingPanelFrom(abi: abi)
            case "PickerFlyoutBase": return makePickerFlyoutBaseFrom(abi: abi)
            case "Popup": return makePopupFrom(abi: abi)
            case "RangeBase": return makeRangeBaseFrom(abi: abi)
            case "RangeBaseValueChangedEventArgs": return makeRangeBaseValueChangedEventArgsFrom(abi: abi)
            case "ScrollControllerAddScrollVelocityRequestedEventArgs": return makeScrollControllerAddScrollVelocityRequestedEventArgsFrom(abi: abi)
            case "ScrollControllerPanRequestedEventArgs": return makeScrollControllerPanRequestedEventArgsFrom(abi: abi)
            case "ScrollControllerScrollByRequestedEventArgs": return makeScrollControllerScrollByRequestedEventArgsFrom(abi: abi)
            case "ScrollControllerScrollToRequestedEventArgs": return makeScrollControllerScrollToRequestedEventArgsFrom(abi: abi)
            case "ScrollPresenter": return makeScrollPresenterFrom(abi: abi)
            case "ScrollSnapPointBase": return makeScrollSnapPointBaseFrom(abi: abi)
            case "Selector": return makeSelectorFrom(abi: abi)
            case "SelectorItem": return makeSelectorItemFrom(abi: abi)
            case "SnapPointBase": return makeSnapPointBaseFrom(abi: abi)
            case "SplitViewTemplateSettings": return makeSplitViewTemplateSettingsFrom(abi: abi)
            case "ToggleButton": return makeToggleButtonFrom(abi: abi)
            case "ToggleSwitchTemplateSettings": return makeToggleSwitchTemplateSettingsFrom(abi: abi)
            case "ToolTipTemplateSettings": return makeToolTipTemplateSettingsFrom(abi: abi)
            case "ZoomSnapPointBase": return makeZoomSnapPointBaseFrom(abi: abi)
            case "Binding": return makeBindingFrom(abi: abi)
            case "BindingBase": return makeBindingBaseFrom(abi: abi)
            case "BindingExpression": return makeBindingExpressionFrom(abi: abi)
            case "BindingExpressionBase": return makeBindingExpressionBaseFrom(abi: abi)
            case "BindingOperations": return makeBindingOperationsFrom(abi: abi)
            case "CollectionViewSource": return makeCollectionViewSourceFrom(abi: abi)
            case "CurrentChangingEventArgs": return makeCurrentChangingEventArgsFrom(abi: abi)
            case "DataErrorsChangedEventArgs": return makeDataErrorsChangedEventArgsFrom(abi: abi)
            case "ItemIndexRange": return makeItemIndexRangeFrom(abi: abi)
            case "PropertyChangedEventArgs": return makePropertyChangedEventArgsFrom(abi: abi)
            case "RelativeSource": return makeRelativeSourceFrom(abi: abi)
            case "Block": return makeBlockFrom(abi: abi)
            case "BlockCollection": return makeBlockCollectionFrom(abi: abi)
            case "Hyperlink": return makeHyperlinkFrom(abi: abi)
            case "HyperlinkClickEventArgs": return makeHyperlinkClickEventArgsFrom(abi: abi)
            case "Inline": return makeInlineFrom(abi: abi)
            case "InlineCollection": return makeInlineCollectionFrom(abi: abi)
            case "Run": return makeRunFrom(abi: abi)
            case "Span": return makeSpanFrom(abi: abi)
            case "TextElement": return makeTextElementFrom(abi: abi)
            case "TextHighlighter": return makeTextHighlighterFrom(abi: abi)
            case "TextPointer": return makeTextPointerFrom(abi: abi)
            case "DesktopWindowXamlSource": return makeDesktopWindowXamlSourceFrom(abi: abi)
            case "DesktopWindowXamlSourceGotFocusEventArgs": return makeDesktopWindowXamlSourceGotFocusEventArgsFrom(abi: abi)
            case "DesktopWindowXamlSourceTakeFocusRequestedEventArgs": return makeDesktopWindowXamlSourceTakeFocusRequestedEventArgsFrom(abi: abi)
            case "ElementCompositionPreview": return makeElementCompositionPreviewFrom(abi: abi)
            case "WindowsXamlManager": return makeWindowsXamlManagerFrom(abi: abi)
            case "XamlShutdownCompletedOnThreadEventArgs": return makeXamlShutdownCompletedOnThreadEventArgsFrom(abi: abi)
            case "XamlSourceFocusNavigationRequest": return makeXamlSourceFocusNavigationRequestFrom(abi: abi)
            case "XamlSourceFocusNavigationResult": return makeXamlSourceFocusNavigationResultFrom(abi: abi)
            case "AccessKeyDisplayDismissedEventArgs": return makeAccessKeyDisplayDismissedEventArgsFrom(abi: abi)
            case "AccessKeyDisplayRequestedEventArgs": return makeAccessKeyDisplayRequestedEventArgsFrom(abi: abi)
            case "AccessKeyInvokedEventArgs": return makeAccessKeyInvokedEventArgsFrom(abi: abi)
            case "CharacterReceivedRoutedEventArgs": return makeCharacterReceivedRoutedEventArgsFrom(abi: abi)
            case "ContextRequestedEventArgs": return makeContextRequestedEventArgsFrom(abi: abi)
            case "DoubleTappedRoutedEventArgs": return makeDoubleTappedRoutedEventArgsFrom(abi: abi)
            case "FindNextElementOptions": return makeFindNextElementOptionsFrom(abi: abi)
            case "FocusManager": return makeFocusManagerFrom(abi: abi)
            case "FocusManagerGotFocusEventArgs": return makeFocusManagerGotFocusEventArgsFrom(abi: abi)
            case "FocusManagerLostFocusEventArgs": return makeFocusManagerLostFocusEventArgsFrom(abi: abi)
            case "FocusMovementResult": return makeFocusMovementResultFrom(abi: abi)
            case "GettingFocusEventArgs": return makeGettingFocusEventArgsFrom(abi: abi)
            case "HoldingRoutedEventArgs": return makeHoldingRoutedEventArgsFrom(abi: abi)
            case "InertiaExpansionBehavior": return makeInertiaExpansionBehaviorFrom(abi: abi)
            case "InertiaRotationBehavior": return makeInertiaRotationBehaviorFrom(abi: abi)
            case "InertiaTranslationBehavior": return makeInertiaTranslationBehaviorFrom(abi: abi)
            case "InputScope": return makeInputScopeFrom(abi: abi)
            case "InputScopeName": return makeInputScopeNameFrom(abi: abi)
            case "KeyRoutedEventArgs": return makeKeyRoutedEventArgsFrom(abi: abi)
            case "KeyboardAccelerator": return makeKeyboardAcceleratorFrom(abi: abi)
            case "KeyboardAcceleratorInvokedEventArgs": return makeKeyboardAcceleratorInvokedEventArgsFrom(abi: abi)
            case "LosingFocusEventArgs": return makeLosingFocusEventArgsFrom(abi: abi)
            case "ManipulationCompletedRoutedEventArgs": return makeManipulationCompletedRoutedEventArgsFrom(abi: abi)
            case "ManipulationDeltaRoutedEventArgs": return makeManipulationDeltaRoutedEventArgsFrom(abi: abi)
            case "ManipulationInertiaStartingRoutedEventArgs": return makeManipulationInertiaStartingRoutedEventArgsFrom(abi: abi)
            case "ManipulationPivot": return makeManipulationPivotFrom(abi: abi)
            case "ManipulationStartedRoutedEventArgs": return makeManipulationStartedRoutedEventArgsFrom(abi: abi)
            case "ManipulationStartingRoutedEventArgs": return makeManipulationStartingRoutedEventArgsFrom(abi: abi)
            case "NoFocusCandidateFoundEventArgs": return makeNoFocusCandidateFoundEventArgsFrom(abi: abi)
            case "Pointer": return makePointerFrom(abi: abi)
            case "PointerRoutedEventArgs": return makePointerRoutedEventArgsFrom(abi: abi)
            case "ProcessKeyboardAcceleratorEventArgs": return makeProcessKeyboardAcceleratorEventArgsFrom(abi: abi)
            case "RightTappedRoutedEventArgs": return makeRightTappedRoutedEventArgsFrom(abi: abi)
            case "TappedRoutedEventArgs": return makeTappedRoutedEventArgsFrom(abi: abi)
            case "NotifyCollectionChangedEventArgs": return makeNotifyCollectionChangedEventArgsFrom(abi: abi)
            case "XamlBindingHelper": return makeXamlBindingHelperFrom(abi: abi)
            case "XamlReader": return makeXamlReaderFrom(abi: abi)
            case "AcrylicBrush": return makeAcrylicBrushFrom(abi: abi)
            case "ArcSegment": return makeArcSegmentFrom(abi: abi)
            case "BezierSegment": return makeBezierSegmentFrom(abi: abi)
            case "BitmapCache": return makeBitmapCacheFrom(abi: abi)
            case "Brush": return makeBrushFrom(abi: abi)
            case "BrushCollection": return makeBrushCollectionFrom(abi: abi)
            case "CacheMode": return makeCacheModeFrom(abi: abi)
            case "CompositeTransform": return makeCompositeTransformFrom(abi: abi)
            case "CompositionTarget": return makeCompositionTargetFrom(abi: abi)
            case "DesktopAcrylicBackdrop": return makeDesktopAcrylicBackdropFrom(abi: abi)
            case "DoubleCollection": return makeDoubleCollectionFrom(abi: abi)
            case "EllipseGeometry": return makeEllipseGeometryFrom(abi: abi)
            case "FontFamily": return makeFontFamilyFrom(abi: abi)
            case "GeneralTransform": return makeGeneralTransformFrom(abi: abi)
            case "Geometry": return makeGeometryFrom(abi: abi)
            case "GeometryCollection": return makeGeometryCollectionFrom(abi: abi)
            case "GeometryGroup": return makeGeometryGroupFrom(abi: abi)
            case "GradientBrush": return makeGradientBrushFrom(abi: abi)
            case "GradientStop": return makeGradientStopFrom(abi: abi)
            case "GradientStopCollection": return makeGradientStopCollectionFrom(abi: abi)
            case "ImageBrush": return makeImageBrushFrom(abi: abi)
            case "ImageSource": return makeImageSourceFrom(abi: abi)
            case "LineGeometry": return makeLineGeometryFrom(abi: abi)
            case "LineSegment": return makeLineSegmentFrom(abi: abi)
            case "LinearGradientBrush": return makeLinearGradientBrushFrom(abi: abi)
            case "LoadedImageSourceLoadCompletedEventArgs": return makeLoadedImageSourceLoadCompletedEventArgsFrom(abi: abi)
            case "LoadedImageSurface": return makeLoadedImageSurfaceFrom(abi: abi)
            case "Matrix3DProjection": return makeMatrix3DProjectionFrom(abi: abi)
            case "MatrixHelper": return makeMatrixHelperFrom(abi: abi)
            case "MatrixTransform": return makeMatrixTransformFrom(abi: abi)
            case "MediaTransportControlsThumbnailRequestedEventArgs": return makeMediaTransportControlsThumbnailRequestedEventArgsFrom(abi: abi)
            case "MicaBackdrop": return makeMicaBackdropFrom(abi: abi)
            case "PathFigure": return makePathFigureFrom(abi: abi)
            case "PathFigureCollection": return makePathFigureCollectionFrom(abi: abi)
            case "PathGeometry": return makePathGeometryFrom(abi: abi)
            case "PathSegment": return makePathSegmentFrom(abi: abi)
            case "PathSegmentCollection": return makePathSegmentCollectionFrom(abi: abi)
            case "PlaneProjection": return makePlaneProjectionFrom(abi: abi)
            case "PointCollection": return makePointCollectionFrom(abi: abi)
            case "PolyBezierSegment": return makePolyBezierSegmentFrom(abi: abi)
            case "PolyLineSegment": return makePolyLineSegmentFrom(abi: abi)
            case "PolyQuadraticBezierSegment": return makePolyQuadraticBezierSegmentFrom(abi: abi)
            case "Projection": return makeProjectionFrom(abi: abi)
            case "QuadraticBezierSegment": return makeQuadraticBezierSegmentFrom(abi: abi)
            case "RadialGradientBrush": return makeRadialGradientBrushFrom(abi: abi)
            case "RectangleGeometry": return makeRectangleGeometryFrom(abi: abi)
            case "RenderedEventArgs": return makeRenderedEventArgsFrom(abi: abi)
            case "RenderingEventArgs": return makeRenderingEventArgsFrom(abi: abi)
            case "RotateTransform": return makeRotateTransformFrom(abi: abi)
            case "ScaleTransform": return makeScaleTransformFrom(abi: abi)
            case "Shadow": return makeShadowFrom(abi: abi)
            case "SkewTransform": return makeSkewTransformFrom(abi: abi)
            case "SolidColorBrush": return makeSolidColorBrushFrom(abi: abi)
            case "SystemBackdrop": return makeSystemBackdropFrom(abi: abi)
            case "ThemeShadow": return makeThemeShadowFrom(abi: abi)
            case "TileBrush": return makeTileBrushFrom(abi: abi)
            case "Transform": return makeTransformFrom(abi: abi)
            case "TransformCollection": return makeTransformCollectionFrom(abi: abi)
            case "TransformGroup": return makeTransformGroupFrom(abi: abi)
            case "TranslateTransform": return makeTranslateTransformFrom(abi: abi)
            case "VisualTreeHelper": return makeVisualTreeHelperFrom(abi: abi)
            case "XamlCompositionBrushBase": return makeXamlCompositionBrushBaseFrom(abi: abi)
            case "XamlLight": return makeXamlLightFrom(abi: abi)
            case "AddDeleteThemeTransition": return makeAddDeleteThemeTransitionFrom(abi: abi)
            case "BackEase": return makeBackEaseFrom(abi: abi)
            case "BasicConnectedAnimationConfiguration": return makeBasicConnectedAnimationConfigurationFrom(abi: abi)
            case "BeginStoryboard": return makeBeginStoryboardFrom(abi: abi)
            case "BounceEase": return makeBounceEaseFrom(abi: abi)
            case "CircleEase": return makeCircleEaseFrom(abi: abi)
            case "ColorAnimation": return makeColorAnimationFrom(abi: abi)
            case "ColorAnimationUsingKeyFrames": return makeColorAnimationUsingKeyFramesFrom(abi: abi)
            case "ColorKeyFrame": return makeColorKeyFrameFrom(abi: abi)
            case "ColorKeyFrameCollection": return makeColorKeyFrameCollectionFrom(abi: abi)
            case "CommonNavigationTransitionInfo": return makeCommonNavigationTransitionInfoFrom(abi: abi)
            case "ConnectedAnimation": return makeConnectedAnimationFrom(abi: abi)
            case "ConnectedAnimationConfiguration": return makeConnectedAnimationConfigurationFrom(abi: abi)
            case "ConnectedAnimationService": return makeConnectedAnimationServiceFrom(abi: abi)
            case "ContentThemeTransition": return makeContentThemeTransitionFrom(abi: abi)
            case "ContinuumNavigationTransitionInfo": return makeContinuumNavigationTransitionInfoFrom(abi: abi)
            case "CubicEase": return makeCubicEaseFrom(abi: abi)
            case "DirectConnectedAnimationConfiguration": return makeDirectConnectedAnimationConfigurationFrom(abi: abi)
            case "DiscreteColorKeyFrame": return makeDiscreteColorKeyFrameFrom(abi: abi)
            case "DiscreteDoubleKeyFrame": return makeDiscreteDoubleKeyFrameFrom(abi: abi)
            case "DiscreteObjectKeyFrame": return makeDiscreteObjectKeyFrameFrom(abi: abi)
            case "DiscretePointKeyFrame": return makeDiscretePointKeyFrameFrom(abi: abi)
            case "DoubleAnimation": return makeDoubleAnimationFrom(abi: abi)
            case "DoubleAnimationUsingKeyFrames": return makeDoubleAnimationUsingKeyFramesFrom(abi: abi)
            case "DoubleKeyFrame": return makeDoubleKeyFrameFrom(abi: abi)
            case "DoubleKeyFrameCollection": return makeDoubleKeyFrameCollectionFrom(abi: abi)
            case "DragItemThemeAnimation": return makeDragItemThemeAnimationFrom(abi: abi)
            case "DragOverThemeAnimation": return makeDragOverThemeAnimationFrom(abi: abi)
            case "DrillInNavigationTransitionInfo": return makeDrillInNavigationTransitionInfoFrom(abi: abi)
            case "DrillInThemeAnimation": return makeDrillInThemeAnimationFrom(abi: abi)
            case "DrillOutThemeAnimation": return makeDrillOutThemeAnimationFrom(abi: abi)
            case "DropTargetItemThemeAnimation": return makeDropTargetItemThemeAnimationFrom(abi: abi)
            case "EasingColorKeyFrame": return makeEasingColorKeyFrameFrom(abi: abi)
            case "EasingDoubleKeyFrame": return makeEasingDoubleKeyFrameFrom(abi: abi)
            case "EasingFunctionBase": return makeEasingFunctionBaseFrom(abi: abi)
            case "EasingPointKeyFrame": return makeEasingPointKeyFrameFrom(abi: abi)
            case "EdgeUIThemeTransition": return makeEdgeUIThemeTransitionFrom(abi: abi)
            case "ElasticEase": return makeElasticEaseFrom(abi: abi)
            case "EntranceNavigationTransitionInfo": return makeEntranceNavigationTransitionInfoFrom(abi: abi)
            case "EntranceThemeTransition": return makeEntranceThemeTransitionFrom(abi: abi)
            case "ExponentialEase": return makeExponentialEaseFrom(abi: abi)
            case "FadeInThemeAnimation": return makeFadeInThemeAnimationFrom(abi: abi)
            case "FadeOutThemeAnimation": return makeFadeOutThemeAnimationFrom(abi: abi)
            case "GravityConnectedAnimationConfiguration": return makeGravityConnectedAnimationConfigurationFrom(abi: abi)
            case "KeySpline": return makeKeySplineFrom(abi: abi)
            case "KeyTimeHelper": return makeKeyTimeHelperFrom(abi: abi)
            case "LinearColorKeyFrame": return makeLinearColorKeyFrameFrom(abi: abi)
            case "LinearDoubleKeyFrame": return makeLinearDoubleKeyFrameFrom(abi: abi)
            case "LinearPointKeyFrame": return makeLinearPointKeyFrameFrom(abi: abi)
            case "NavigationThemeTransition": return makeNavigationThemeTransitionFrom(abi: abi)
            case "NavigationTransitionInfo": return makeNavigationTransitionInfoFrom(abi: abi)
            case "ObjectAnimationUsingKeyFrames": return makeObjectAnimationUsingKeyFramesFrom(abi: abi)
            case "ObjectKeyFrame": return makeObjectKeyFrameFrom(abi: abi)
            case "ObjectKeyFrameCollection": return makeObjectKeyFrameCollectionFrom(abi: abi)
            case "PaneThemeTransition": return makePaneThemeTransitionFrom(abi: abi)
            case "PointAnimation": return makePointAnimationFrom(abi: abi)
            case "PointAnimationUsingKeyFrames": return makePointAnimationUsingKeyFramesFrom(abi: abi)
            case "PointKeyFrame": return makePointKeyFrameFrom(abi: abi)
            case "PointKeyFrameCollection": return makePointKeyFrameCollectionFrom(abi: abi)
            case "PointerDownThemeAnimation": return makePointerDownThemeAnimationFrom(abi: abi)
            case "PointerUpThemeAnimation": return makePointerUpThemeAnimationFrom(abi: abi)
            case "PopInThemeAnimation": return makePopInThemeAnimationFrom(abi: abi)
            case "PopOutThemeAnimation": return makePopOutThemeAnimationFrom(abi: abi)
            case "PopupThemeTransition": return makePopupThemeTransitionFrom(abi: abi)
            case "PowerEase": return makePowerEaseFrom(abi: abi)
            case "QuadraticEase": return makeQuadraticEaseFrom(abi: abi)
            case "QuarticEase": return makeQuarticEaseFrom(abi: abi)
            case "QuinticEase": return makeQuinticEaseFrom(abi: abi)
            case "ReorderThemeTransition": return makeReorderThemeTransitionFrom(abi: abi)
            case "RepeatBehaviorHelper": return makeRepeatBehaviorHelperFrom(abi: abi)
            case "RepositionThemeAnimation": return makeRepositionThemeAnimationFrom(abi: abi)
            case "RepositionThemeTransition": return makeRepositionThemeTransitionFrom(abi: abi)
            case "SineEase": return makeSineEaseFrom(abi: abi)
            case "SlideNavigationTransitionInfo": return makeSlideNavigationTransitionInfoFrom(abi: abi)
            case "SplineColorKeyFrame": return makeSplineColorKeyFrameFrom(abi: abi)
            case "SplineDoubleKeyFrame": return makeSplineDoubleKeyFrameFrom(abi: abi)
            case "SplinePointKeyFrame": return makeSplinePointKeyFrameFrom(abi: abi)
            case "SplitCloseThemeAnimation": return makeSplitCloseThemeAnimationFrom(abi: abi)
            case "SplitOpenThemeAnimation": return makeSplitOpenThemeAnimationFrom(abi: abi)
            case "Storyboard": return makeStoryboardFrom(abi: abi)
            case "SuppressNavigationTransitionInfo": return makeSuppressNavigationTransitionInfoFrom(abi: abi)
            case "SwipeBackThemeAnimation": return makeSwipeBackThemeAnimationFrom(abi: abi)
            case "SwipeHintThemeAnimation": return makeSwipeHintThemeAnimationFrom(abi: abi)
            case "Timeline": return makeTimelineFrom(abi: abi)
            case "TimelineCollection": return makeTimelineCollectionFrom(abi: abi)
            case "Transition": return makeTransitionFrom(abi: abi)
            case "TransitionCollection": return makeTransitionCollectionFrom(abi: abi)
            case "BitmapImage": return makeBitmapImageFrom(abi: abi)
            case "BitmapSource": return makeBitmapSourceFrom(abi: abi)
            case "DownloadProgressEventArgs": return makeDownloadProgressEventArgsFrom(abi: abi)
            case "RenderTargetBitmap": return makeRenderTargetBitmapFrom(abi: abi)
            case "SoftwareBitmapSource": return makeSoftwareBitmapSourceFrom(abi: abi)
            case "SurfaceImageSource": return makeSurfaceImageSourceFrom(abi: abi)
            case "SvgImageSource": return makeSvgImageSourceFrom(abi: abi)
            case "SvgImageSourceFailedEventArgs": return makeSvgImageSourceFailedEventArgsFrom(abi: abi)
            case "SvgImageSourceOpenedEventArgs": return makeSvgImageSourceOpenedEventArgsFrom(abi: abi)
            case "VirtualSurfaceImageSource": return makeVirtualSurfaceImageSourceFrom(abi: abi)
            case "WriteableBitmap": return makeWriteableBitmapFrom(abi: abi)
            case "XamlRenderingBackgroundTask": return makeXamlRenderingBackgroundTaskFrom(abi: abi)
            case "Transform3D": return makeTransform3DFrom(abi: abi)
            case "FrameNavigationOptions": return makeFrameNavigationOptionsFrom(abi: abi)
            case "NavigatingCancelEventArgs": return makeNavigatingCancelEventArgsFrom(abi: abi)
            case "NavigationEventArgs": return makeNavigationEventArgsFrom(abi: abi)
            case "NavigationFailedEventArgs": return makeNavigationFailedEventArgsFrom(abi: abi)
            case "PageStackEntry": return makePageStackEntryFrom(abi: abi)
            case "AddPagesEventArgs": return makeAddPagesEventArgsFrom(abi: abi)
            case "GetPreviewPageEventArgs": return makeGetPreviewPageEventArgsFrom(abi: abi)
            case "PaginateEventArgs": return makePaginateEventArgsFrom(abi: abi)
            case "PrintDocument": return makePrintDocumentFrom(abi: abi)
            case "CustomXamlResourceLoader": return makeCustomXamlResourceLoaderFrom(abi: abi)
            case "Ellipse": return makeEllipseFrom(abi: abi)
            case "Line": return makeLineFrom(abi: abi)
            case "Path": return makePathFrom(abi: abi)
            case "Polygon": return makePolygonFrom(abi: abi)
            case "Polyline": return makePolylineFrom(abi: abi)
            case "Rectangle": return makeRectangleFrom(abi: abi)
            case "Shape": return makeShapeFrom(abi: abi)
            case "XamlControlsXamlMetaDataProvider": return makeXamlControlsXamlMetaDataProviderFrom(abi: abi)
            default: return nil
        }
    }
}
