// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CResources_CICustomXamlResourceLoader: WindowsFoundation.IID {
    .init(Data1: 0x2832C2E5, Data2: 0x2ACE, Data3: 0x5993, Data4: ( 0xA1,0x73,0x3C,0x9C,0x3B,0x99,0x2B,0x2E ))// 2832C2E5-2ACE-5993-A173-3C9C3B992B2E
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CResources_CICustomXamlResourceLoaderFactory: WindowsFoundation.IID {
    .init(Data1: 0x174D49A6, Data2: 0xE1E2, Data3: 0x5F7B, Data4: ( 0xA6,0x18,0xA8,0xA9,0x53,0xD1,0xB5,0xA0 ))// 174D49A6-E1E2-5F7B-A618-A8A953D1B5A0
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CResources_CICustomXamlResourceLoaderOverrides: WindowsFoundation.IID {
    .init(Data1: 0x84BB504C, Data2: 0x6730, Data3: 0x586A, Data4: ( 0xBD,0x04,0x91,0x98,0x26,0x4B,0x2D,0xC7 ))// 84BB504C-6730-586A-BD04-9198264B2DC7
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CResources_CICustomXamlResourceLoaderStatics: WindowsFoundation.IID {
    .init(Data1: 0xE08A5A92, Data2: 0xB1A2, Data3: 0x539A, Data4: ( 0x9D,0x4A,0x79,0x94,0xE4,0x46,0x8C,0xD7 ))// E08A5A92-B1A2-539A-9D4A-7994E4468CD7
}

public enum __ABI_Microsoft_UI_Xaml_Resources {
    public class ICustomXamlResourceLoader: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CResources_CICustomXamlResourceLoader }

    }

    public class ICustomXamlResourceLoaderFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CResources_CICustomXamlResourceLoaderFactory }

        internal func CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.CustomXamlResourceLoader.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> ICustomXamlResourceLoader {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _baseInterface = baseInterface?.toIInspectableABI { $0 }
                let (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CResources_CICustomXamlResourceLoaderFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return ICustomXamlResourceLoader(value!)
        }

    }

    public class ICustomXamlResourceLoaderOverrides: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CResources_CICustomXamlResourceLoaderOverrides }

        internal func GetResourceImpl(_ resourceId: String, _ objectType: String, _ propertyName: String, _ propertyType: String) throws -> Any? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let _resourceId = try! HString(resourceId)
                let _objectType = try! HString(objectType)
                let _propertyName = try! HString(propertyName)
                let _propertyType = try! HString(propertyType)
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CResources_CICustomXamlResourceLoaderOverrides.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetResource(pThis, _resourceId.get(), _objectType.get(), _propertyName.get(), _propertyType.get(), &resultAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: result)
        }

    }

    public class ICustomXamlResourceLoaderStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CResources_CICustomXamlResourceLoaderStatics }

        internal func get_CurrentImpl() throws -> WinUI.CustomXamlResourceLoader? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CResources_CICustomXamlResourceLoaderStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_CurrentImpl(_ value: WinUI.CustomXamlResourceLoader?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CResources_CICustomXamlResourceLoaderStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Current(pThis, RawPointer(value)))
            }
        }

    }

    internal typealias ICustomXamlResourceLoaderOverridesWrapper = UnsealedWinRTClassWrapper<WinUI.CustomXamlResourceLoader.ICustomXamlResourceLoaderOverrides>
    internal static var ICustomXamlResourceLoaderOverridesVTable: __x_ABI_CMicrosoft_CUI_CXaml_CResources_CICustomXamlResourceLoaderOverridesVtbl = .init(
        QueryInterface: { ICustomXamlResourceLoaderOverridesWrapper.queryInterface($0, $1, $2) },
        AddRef: { ICustomXamlResourceLoaderOverridesWrapper.addRef($0) },
        Release: { ICustomXamlResourceLoaderOverridesWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Xaml_Resources.ICustomXamlResourceLoaderOverridesWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            guard let instance = ICustomXamlResourceLoaderOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let hstring = instance.GetRuntimeClassName().detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        GetResource: {
            do {
                guard let __unwrapped__instance = ICustomXamlResourceLoaderOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let resourceId: String = .init(from: $1)
                let objectType: String = .init(from: $2)
                let propertyName: String = .init(from: $3)
                let propertyType: String = .init(from: $4)
                let result = try __unwrapped__instance.getResource(resourceId, objectType, propertyName, propertyType)
                let resultWrapper = __ABI_.AnyWrapper(result)
                resultWrapper?.copyTo($5)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )
}
extension ComposableImpl where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CResources_CICustomXamlResourceLoaderOverrides {
    public static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Resources.ICustomXamlResourceLoaderOverridesVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}
