// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contactaddresskind)
public typealias ContactAddressKind = __x_ABI_CWindows_CApplicationModel_CContacts_CContactAddressKind
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contactdatekind)
public typealias ContactDateKind = __x_ABI_CWindows_CApplicationModel_CContacts_CContactDateKind
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contactemailkind)
public typealias ContactEmailKind = __x_ABI_CWindows_CApplicationModel_CContacts_CContactEmailKind
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contactfieldcategory)
public typealias ContactFieldCategory = __x_ABI_CWindows_CApplicationModel_CContacts_CContactFieldCategory
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contactfieldtype)
public typealias ContactFieldType = __x_ABI_CWindows_CApplicationModel_CContacts_CContactFieldType
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contactphonekind)
public typealias ContactPhoneKind = __x_ABI_CWindows_CApplicationModel_CContacts_CContactPhoneKind
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contactrelationship)
public typealias ContactRelationship = __x_ABI_CWindows_CApplicationModel_CContacts_CContactRelationship
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contactselectionmode)
public typealias ContactSelectionMode = __x_ABI_CWindows_CApplicationModel_CContacts_CContactSelectionMode
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contact)
public final class Contact : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel_Contacts.IContact
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CContacts_CIContact
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CContacts_CIContact>?) -> Contact? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public init() {
        super.init(try! RoActivateInstance(HString("Windows.ApplicationModel.Contacts.Contact")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contact.fields)
    public var fields : WindowsFoundation.AnyIVector<AnyIContactField?>! {
        get { try! _default.get_FieldsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contact.name)
    public var name : String {
        get { try! _default.get_NameImpl() }
        set { try! _default.put_NameImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contact.thumbnail)
    public var thumbnail : UWP.AnyIRandomAccessStreamReference! {
        get { try! _default.get_ThumbnailImpl() }
        set { try! _default.put_ThumbnailImpl(newValue) }
    }

    private lazy var _IContact2: __ABI_Windows_ApplicationModel_Contacts.IContact2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contact.addresses)
    public var addresses : WindowsFoundation.AnyIVector<ContactAddress?>! {
        get { try! _IContact2.get_AddressesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contact.connectedserviceaccounts)
    public var connectedServiceAccounts : WindowsFoundation.AnyIVector<ContactConnectedServiceAccount?>! {
        get { try! _IContact2.get_ConnectedServiceAccountsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contact.datasuppliers)
    public var dataSuppliers : WindowsFoundation.AnyIVector<String>! {
        get { try! _IContact2.get_DataSuppliersImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contact.emails)
    public var emails : WindowsFoundation.AnyIVector<ContactEmail?>! {
        get { try! _IContact2.get_EmailsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contact.id)
    public var id : String {
        get { try! _IContact2.get_IdImpl() }
        set { try! _IContact2.put_IdImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contact.importantdates)
    public var importantDates : WindowsFoundation.AnyIVector<ContactDate?>! {
        get { try! _IContact2.get_ImportantDatesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contact.jobinfo)
    public var jobInfo : WindowsFoundation.AnyIVector<ContactJobInfo?>! {
        get { try! _IContact2.get_JobInfoImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contact.notes)
    public var notes : String {
        get { try! _IContact2.get_NotesImpl() }
        set { try! _IContact2.put_NotesImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contact.phones)
    public var phones : WindowsFoundation.AnyIVector<ContactPhone?>! {
        get { try! _IContact2.get_PhonesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contact.providerproperties)
    public var providerProperties : WindowsFoundation.AnyIPropertySet! {
        get { try! _IContact2.get_ProviderPropertiesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contact.significantothers)
    public var significantOthers : WindowsFoundation.AnyIVector<ContactSignificantOther?>! {
        get { try! _IContact2.get_SignificantOthersImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contact.websites)
    public var websites : WindowsFoundation.AnyIVector<ContactWebsite?>! {
        get { try! _IContact2.get_WebsitesImpl() }
    }

    private lazy var _IContactName: __ABI_Windows_ApplicationModel_Contacts.IContactName! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contact.displayname)
    public var displayName : String {
        get { try! _IContactName.get_DisplayNameImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contact.firstname)
    public var firstName : String {
        get { try! _IContactName.get_FirstNameImpl() }
        set { try! _IContactName.put_FirstNameImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contact.honorificnameprefix)
    public var honorificNamePrefix : String {
        get { try! _IContactName.get_HonorificNamePrefixImpl() }
        set { try! _IContactName.put_HonorificNamePrefixImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contact.honorificnamesuffix)
    public var honorificNameSuffix : String {
        get { try! _IContactName.get_HonorificNameSuffixImpl() }
        set { try! _IContactName.put_HonorificNameSuffixImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contact.lastname)
    public var lastName : String {
        get { try! _IContactName.get_LastNameImpl() }
        set { try! _IContactName.put_LastNameImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contact.middlename)
    public var middleName : String {
        get { try! _IContactName.get_MiddleNameImpl() }
        set { try! _IContactName.put_MiddleNameImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contact.yomidisplayname)
    public var yomiDisplayName : String {
        get { try! _IContactName.get_YomiDisplayNameImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contact.yomifamilyname)
    public var yomiFamilyName : String {
        get { try! _IContactName.get_YomiFamilyNameImpl() }
        set { try! _IContactName.put_YomiFamilyNameImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contact.yomigivenname)
    public var yomiGivenName : String {
        get { try! _IContactName.get_YomiGivenNameImpl() }
        set { try! _IContactName.put_YomiGivenNameImpl(newValue) }
    }

    private lazy var _IContact3: __ABI_Windows_ApplicationModel_Contacts.IContact3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contact.aggregateid)
    public var aggregateId : String {
        get { try! _IContact3.get_AggregateIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contact.contactlistid)
    public var contactListId : String {
        get { try! _IContact3.get_ContactListIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contact.displaynameoverride)
    public var displayNameOverride : String {
        get { try! _IContact3.get_DisplayNameOverrideImpl() }
        set { try! _IContact3.put_DisplayNameOverrideImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contact.displaypictureuserupdatetime)
    public var displayPictureUserUpdateTime : WindowsFoundation.DateTime {
        get { try! _IContact3.get_DisplayPictureUserUpdateTimeImpl() }
        set { try! _IContact3.put_DisplayPictureUserUpdateTimeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contact.fullname)
    public var fullName : String {
        get { try! _IContact3.get_FullNameImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contact.isaggregate)
    public var isAggregate : Bool {
        get { try! _IContact3.get_IsAggregateImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contact.isdisplaypicturemanuallyset)
    public var isDisplayPictureManuallySet : Bool {
        get { try! _IContact3.get_IsDisplayPictureManuallySetImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contact.isme)
    public var isMe : Bool {
        get { try! _IContact3.get_IsMeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contact.largedisplaypicture)
    public var largeDisplayPicture : UWP.AnyIRandomAccessStreamReference! {
        get { try! _IContact3.get_LargeDisplayPictureImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contact.nickname)
    public var nickname : String {
        get { try! _IContact3.get_NicknameImpl() }
        set { try! _IContact3.put_NicknameImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contact.remoteid)
    public var remoteId : String {
        get { try! _IContact3.get_RemoteIdImpl() }
        set { try! _IContact3.put_RemoteIdImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contact.ringtonetoken)
    public var ringToneToken : String {
        get { try! _IContact3.get_RingToneTokenImpl() }
        set { try! _IContact3.put_RingToneTokenImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contact.smalldisplaypicture)
    public var smallDisplayPicture : UWP.AnyIRandomAccessStreamReference! {
        get { try! _IContact3.get_SmallDisplayPictureImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contact.sortname)
    public var sortName : String {
        get { try! _IContact3.get_SortNameImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contact.sourcedisplaypicture)
    public var sourceDisplayPicture : UWP.AnyIRandomAccessStreamReference! {
        get { try! _IContact3.get_SourceDisplayPictureImpl() }
        set { try! _IContact3.put_SourceDisplayPictureImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contact.texttonetoken)
    public var textToneToken : String {
        get { try! _IContact3.get_TextToneTokenImpl() }
        set { try! _IContact3.put_TextToneTokenImpl(newValue) }
    }

    deinit {
        _default = nil
        _IContact2 = nil
        _IContactName = nil
        _IContact3 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contactaddress)
public final class ContactAddress : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel_Contacts.IContactAddress
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CContacts_CIContactAddress
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CContacts_CIContactAddress>?) -> ContactAddress? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public init() {
        super.init(try! RoActivateInstance(HString("Windows.ApplicationModel.Contacts.ContactAddress")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contactaddress.country)
    public var country : String {
        get { try! _default.get_CountryImpl() }
        set { try! _default.put_CountryImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contactaddress.description)
    public var description : String {
        get { try! _default.get_DescriptionImpl() }
        set { try! _default.put_DescriptionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contactaddress.kind)
    public var kind : ContactAddressKind {
        get { try! _default.get_KindImpl() }
        set { try! _default.put_KindImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contactaddress.locality)
    public var locality : String {
        get { try! _default.get_LocalityImpl() }
        set { try! _default.put_LocalityImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contactaddress.postalcode)
    public var postalCode : String {
        get { try! _default.get_PostalCodeImpl() }
        set { try! _default.put_PostalCodeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contactaddress.region)
    public var region : String {
        get { try! _default.get_RegionImpl() }
        set { try! _default.put_RegionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contactaddress.streetaddress)
    public var streetAddress : String {
        get { try! _default.get_StreetAddressImpl() }
        set { try! _default.put_StreetAddressImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contactconnectedserviceaccount)
public final class ContactConnectedServiceAccount : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel_Contacts.IContactConnectedServiceAccount
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CContacts_CIContactConnectedServiceAccount
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CContacts_CIContactConnectedServiceAccount>?) -> ContactConnectedServiceAccount? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public init() {
        super.init(try! RoActivateInstance(HString("Windows.ApplicationModel.Contacts.ContactConnectedServiceAccount")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contactconnectedserviceaccount.id)
    public var id : String {
        get { try! _default.get_IdImpl() }
        set { try! _default.put_IdImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contactconnectedserviceaccount.servicename)
    public var serviceName : String {
        get { try! _default.get_ServiceNameImpl() }
        set { try! _default.put_ServiceNameImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contactdate)
public final class ContactDate : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel_Contacts.IContactDate
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CContacts_CIContactDate
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CContacts_CIContactDate>?) -> ContactDate? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public init() {
        super.init(try! RoActivateInstance(HString("Windows.ApplicationModel.Contacts.ContactDate")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contactdate.day)
    public var day : UInt32? {
        get { try! _default.get_DayImpl() }
        set { try! _default.put_DayImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contactdate.description)
    public var description : String {
        get { try! _default.get_DescriptionImpl() }
        set { try! _default.put_DescriptionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contactdate.kind)
    public var kind : ContactDateKind {
        get { try! _default.get_KindImpl() }
        set { try! _default.put_KindImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contactdate.month)
    public var month : UInt32? {
        get { try! _default.get_MonthImpl() }
        set { try! _default.put_MonthImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contactdate.year)
    public var year : Int32? {
        get { try! _default.get_YearImpl() }
        set { try! _default.put_YearImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contactemail)
public final class ContactEmail : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel_Contacts.IContactEmail
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CContacts_CIContactEmail
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CContacts_CIContactEmail>?) -> ContactEmail? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public init() {
        super.init(try! RoActivateInstance(HString("Windows.ApplicationModel.Contacts.ContactEmail")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contactemail.address)
    public var address : String {
        get { try! _default.get_AddressImpl() }
        set { try! _default.put_AddressImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contactemail.description)
    public var description : String {
        get { try! _default.get_DescriptionImpl() }
        set { try! _default.put_DescriptionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contactemail.kind)
    public var kind : ContactEmailKind {
        get { try! _default.get_KindImpl() }
        set { try! _default.put_KindImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contactjobinfo)
public final class ContactJobInfo : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel_Contacts.IContactJobInfo
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CContacts_CIContactJobInfo
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CContacts_CIContactJobInfo>?) -> ContactJobInfo? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public init() {
        super.init(try! RoActivateInstance(HString("Windows.ApplicationModel.Contacts.ContactJobInfo")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contactjobinfo.companyaddress)
    public var companyAddress : String {
        get { try! _default.get_CompanyAddressImpl() }
        set { try! _default.put_CompanyAddressImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contactjobinfo.companyname)
    public var companyName : String {
        get { try! _default.get_CompanyNameImpl() }
        set { try! _default.put_CompanyNameImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contactjobinfo.companyyominame)
    public var companyYomiName : String {
        get { try! _default.get_CompanyYomiNameImpl() }
        set { try! _default.put_CompanyYomiNameImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contactjobinfo.department)
    public var department : String {
        get { try! _default.get_DepartmentImpl() }
        set { try! _default.put_DepartmentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contactjobinfo.description)
    public var description : String {
        get { try! _default.get_DescriptionImpl() }
        set { try! _default.put_DescriptionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contactjobinfo.manager)
    public var manager : String {
        get { try! _default.get_ManagerImpl() }
        set { try! _default.put_ManagerImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contactjobinfo.office)
    public var office : String {
        get { try! _default.get_OfficeImpl() }
        set { try! _default.put_OfficeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contactjobinfo.title)
    public var title : String {
        get { try! _default.get_TitleImpl() }
        set { try! _default.put_TitleImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contactpanel)
public final class ContactPanel : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel_Contacts.IContactPanel
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CContacts_CIContactPanel
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CContacts_CIContactPanel>?) -> ContactPanel? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contactpanel.closepanel)
    public func closePanel() throws {
        try _default.ClosePanelImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contactpanel.headercolor)
    public var headerColor : UWP.Color? {
        get { try! _default.get_HeaderColorImpl() }
        set { try! _default.put_HeaderColorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contactpanel.closing)
    public lazy var closing : Event<TypedEventHandler<ContactPanel?, ContactPanelClosingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ClosingImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ClosingImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contactpanel.launchfullapprequested)
    public lazy var launchFullAppRequested : Event<TypedEventHandler<ContactPanel?, ContactPanelLaunchFullAppRequestedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_LaunchFullAppRequestedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_LaunchFullAppRequestedImpl($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contactpanelclosingeventargs)
public final class ContactPanelClosingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel_Contacts.IContactPanelClosingEventArgs
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CContacts_CIContactPanelClosingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CContacts_CIContactPanelClosingEventArgs>?) -> ContactPanelClosingEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contactpanelclosingeventargs.getdeferral)
    public func getDeferral() throws -> WindowsFoundation.Deferral! {
        try _default.GetDeferralImpl()
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contactpanellaunchfullapprequestedeventargs)
public final class ContactPanelLaunchFullAppRequestedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel_Contacts.IContactPanelLaunchFullAppRequestedEventArgs
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CContacts_CIContactPanelLaunchFullAppRequestedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CContacts_CIContactPanelLaunchFullAppRequestedEventArgs>?) -> ContactPanelLaunchFullAppRequestedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contactpanellaunchfullapprequestedeventargs.handled)
    public var handled : Bool {
        get { try! _default.get_HandledImpl() }
        set { try! _default.put_HandledImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contactphone)
public final class ContactPhone : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel_Contacts.IContactPhone
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CContacts_CIContactPhone
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CContacts_CIContactPhone>?) -> ContactPhone? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public init() {
        super.init(try! RoActivateInstance(HString("Windows.ApplicationModel.Contacts.ContactPhone")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contactphone.description)
    public var description : String {
        get { try! _default.get_DescriptionImpl() }
        set { try! _default.put_DescriptionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contactphone.kind)
    public var kind : ContactPhoneKind {
        get { try! _default.get_KindImpl() }
        set { try! _default.put_KindImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contactphone.number)
    public var number : String {
        get { try! _default.get_NumberImpl() }
        set { try! _default.put_NumberImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contactsignificantother)
public final class ContactSignificantOther : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel_Contacts.IContactSignificantOther
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CContacts_CIContactSignificantOther
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CContacts_CIContactSignificantOther>?) -> ContactSignificantOther? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public init() {
        super.init(try! RoActivateInstance(HString("Windows.ApplicationModel.Contacts.ContactSignificantOther")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contactsignificantother.description)
    public var description : String {
        get { try! _default.get_DescriptionImpl() }
        set { try! _default.put_DescriptionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contactsignificantother.name)
    public var name : String {
        get { try! _default.get_NameImpl() }
        set { try! _default.put_NameImpl(newValue) }
    }

    private lazy var _IContactSignificantOther2: __ABI_Windows_ApplicationModel_Contacts.IContactSignificantOther2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contactsignificantother.relationship)
    public var relationship : ContactRelationship {
        get { try! _IContactSignificantOther2.get_RelationshipImpl() }
        set { try! _IContactSignificantOther2.put_RelationshipImpl(newValue) }
    }

    deinit {
        _default = nil
        _IContactSignificantOther2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contactwebsite)
public final class ContactWebsite : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel_Contacts.IContactWebsite
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CContacts_CIContactWebsite
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CContacts_CIContactWebsite>?) -> ContactWebsite? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public init() {
        super.init(try! RoActivateInstance(HString("Windows.ApplicationModel.Contacts.ContactWebsite")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contactwebsite.description)
    public var description : String {
        get { try! _default.get_DescriptionImpl() }
        set { try! _default.put_DescriptionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contactwebsite.uri)
    public var uri : WindowsFoundation.Uri! {
        get { try! _default.get_UriImpl() }
        set { try! _default.put_UriImpl(newValue) }
    }

    private lazy var _IContactWebsite2: __ABI_Windows_ApplicationModel_Contacts.IContactWebsite2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.contactwebsite.rawvalue)
    public var rawValue : String {
        get { try! _IContactWebsite2.get_RawValueImpl() }
        set { try! _IContactWebsite2.put_RawValueImpl(newValue) }
    }

    deinit {
        _default = nil
        _IContactWebsite2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.icontactfield)
public protocol IContactField : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.icontactfield.category)
    var category: UWP.ContactFieldCategory { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.icontactfield.name)
    var name: String { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.icontactfield.type)
    var type: UWP.ContactFieldType { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.icontactfield.value)
    var value: String { get }
}

extension IContactField {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_ApplicationModel_Contacts.IContactFieldWrapper.IID:
                let wrapper = __ABI_Windows_ApplicationModel_Contacts.IContactFieldWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIContactField = any IContactField

extension UWP.ContactAddressKind {
    public static var home : UWP.ContactAddressKind {
        __x_ABI_CWindows_CApplicationModel_CContacts_CContactAddressKind_Home
    }
    public static var work : UWP.ContactAddressKind {
        __x_ABI_CWindows_CApplicationModel_CContacts_CContactAddressKind_Work
    }
    public static var other : UWP.ContactAddressKind {
        __x_ABI_CWindows_CApplicationModel_CContacts_CContactAddressKind_Other
    }
}
extension UWP.ContactAddressKind: @retroactive Hashable, @retroactive Codable {}

extension UWP.ContactDateKind {
    public static var birthday : UWP.ContactDateKind {
        __x_ABI_CWindows_CApplicationModel_CContacts_CContactDateKind_Birthday
    }
    public static var anniversary : UWP.ContactDateKind {
        __x_ABI_CWindows_CApplicationModel_CContacts_CContactDateKind_Anniversary
    }
    public static var other : UWP.ContactDateKind {
        __x_ABI_CWindows_CApplicationModel_CContacts_CContactDateKind_Other
    }
}
extension UWP.ContactDateKind: @retroactive Hashable, @retroactive Codable {}

extension UWP.ContactEmailKind {
    public static var personal : UWP.ContactEmailKind {
        __x_ABI_CWindows_CApplicationModel_CContacts_CContactEmailKind_Personal
    }
    public static var work : UWP.ContactEmailKind {
        __x_ABI_CWindows_CApplicationModel_CContacts_CContactEmailKind_Work
    }
    public static var other : UWP.ContactEmailKind {
        __x_ABI_CWindows_CApplicationModel_CContacts_CContactEmailKind_Other
    }
}
extension UWP.ContactEmailKind: @retroactive Hashable, @retroactive Codable {}

extension UWP.ContactFieldCategory {
    public static var none : UWP.ContactFieldCategory {
        __x_ABI_CWindows_CApplicationModel_CContacts_CContactFieldCategory_None
    }
    public static var home : UWP.ContactFieldCategory {
        __x_ABI_CWindows_CApplicationModel_CContacts_CContactFieldCategory_Home
    }
    public static var work : UWP.ContactFieldCategory {
        __x_ABI_CWindows_CApplicationModel_CContacts_CContactFieldCategory_Work
    }
    public static var mobile : UWP.ContactFieldCategory {
        __x_ABI_CWindows_CApplicationModel_CContacts_CContactFieldCategory_Mobile
    }
    public static var other : UWP.ContactFieldCategory {
        __x_ABI_CWindows_CApplicationModel_CContacts_CContactFieldCategory_Other
    }
}
extension UWP.ContactFieldCategory: @retroactive Hashable, @retroactive Codable {}

extension UWP.ContactFieldType {
    public static var email : UWP.ContactFieldType {
        __x_ABI_CWindows_CApplicationModel_CContacts_CContactFieldType_Email
    }
    public static var phoneNumber : UWP.ContactFieldType {
        __x_ABI_CWindows_CApplicationModel_CContacts_CContactFieldType_PhoneNumber
    }
    public static var location : UWP.ContactFieldType {
        __x_ABI_CWindows_CApplicationModel_CContacts_CContactFieldType_Location
    }
    public static var instantMessage : UWP.ContactFieldType {
        __x_ABI_CWindows_CApplicationModel_CContacts_CContactFieldType_InstantMessage
    }
    public static var custom : UWP.ContactFieldType {
        __x_ABI_CWindows_CApplicationModel_CContacts_CContactFieldType_Custom
    }
    public static var connectedServiceAccount : UWP.ContactFieldType {
        __x_ABI_CWindows_CApplicationModel_CContacts_CContactFieldType_ConnectedServiceAccount
    }
    public static var importantDate : UWP.ContactFieldType {
        __x_ABI_CWindows_CApplicationModel_CContacts_CContactFieldType_ImportantDate
    }
    public static var address : UWP.ContactFieldType {
        __x_ABI_CWindows_CApplicationModel_CContacts_CContactFieldType_Address
    }
    public static var significantOther : UWP.ContactFieldType {
        __x_ABI_CWindows_CApplicationModel_CContacts_CContactFieldType_SignificantOther
    }
    public static var notes : UWP.ContactFieldType {
        __x_ABI_CWindows_CApplicationModel_CContacts_CContactFieldType_Notes
    }
    public static var website : UWP.ContactFieldType {
        __x_ABI_CWindows_CApplicationModel_CContacts_CContactFieldType_Website
    }
    public static var jobInfo : UWP.ContactFieldType {
        __x_ABI_CWindows_CApplicationModel_CContacts_CContactFieldType_JobInfo
    }
}
extension UWP.ContactFieldType: @retroactive Hashable, @retroactive Codable {}

extension UWP.ContactPhoneKind {
    public static var home : UWP.ContactPhoneKind {
        __x_ABI_CWindows_CApplicationModel_CContacts_CContactPhoneKind_Home
    }
    public static var mobile : UWP.ContactPhoneKind {
        __x_ABI_CWindows_CApplicationModel_CContacts_CContactPhoneKind_Mobile
    }
    public static var work : UWP.ContactPhoneKind {
        __x_ABI_CWindows_CApplicationModel_CContacts_CContactPhoneKind_Work
    }
    public static var other : UWP.ContactPhoneKind {
        __x_ABI_CWindows_CApplicationModel_CContacts_CContactPhoneKind_Other
    }
    public static var pager : UWP.ContactPhoneKind {
        __x_ABI_CWindows_CApplicationModel_CContacts_CContactPhoneKind_Pager
    }
    public static var businessFax : UWP.ContactPhoneKind {
        __x_ABI_CWindows_CApplicationModel_CContacts_CContactPhoneKind_BusinessFax
    }
    public static var homeFax : UWP.ContactPhoneKind {
        __x_ABI_CWindows_CApplicationModel_CContacts_CContactPhoneKind_HomeFax
    }
    public static var company : UWP.ContactPhoneKind {
        __x_ABI_CWindows_CApplicationModel_CContacts_CContactPhoneKind_Company
    }
    public static var assistant : UWP.ContactPhoneKind {
        __x_ABI_CWindows_CApplicationModel_CContacts_CContactPhoneKind_Assistant
    }
    public static var radio : UWP.ContactPhoneKind {
        __x_ABI_CWindows_CApplicationModel_CContacts_CContactPhoneKind_Radio
    }
}
extension UWP.ContactPhoneKind: @retroactive Hashable, @retroactive Codable {}

extension UWP.ContactRelationship {
    public static var other : UWP.ContactRelationship {
        __x_ABI_CWindows_CApplicationModel_CContacts_CContactRelationship_Other
    }
    public static var spouse : UWP.ContactRelationship {
        __x_ABI_CWindows_CApplicationModel_CContacts_CContactRelationship_Spouse
    }
    public static var partner : UWP.ContactRelationship {
        __x_ABI_CWindows_CApplicationModel_CContacts_CContactRelationship_Partner
    }
    public static var sibling : UWP.ContactRelationship {
        __x_ABI_CWindows_CApplicationModel_CContacts_CContactRelationship_Sibling
    }
    public static var parent : UWP.ContactRelationship {
        __x_ABI_CWindows_CApplicationModel_CContacts_CContactRelationship_Parent
    }
    public static var child : UWP.ContactRelationship {
        __x_ABI_CWindows_CApplicationModel_CContacts_CContactRelationship_Child
    }
}
extension UWP.ContactRelationship: @retroactive Hashable, @retroactive Codable {}

extension UWP.ContactSelectionMode {
    public static var contacts : UWP.ContactSelectionMode {
        __x_ABI_CWindows_CApplicationModel_CContacts_CContactSelectionMode_Contacts
    }
    public static var fields : UWP.ContactSelectionMode {
        __x_ABI_CWindows_CApplicationModel_CContacts_CContactSelectionMode_Fields
    }
}
extension UWP.ContactSelectionMode: @retroactive Hashable, @retroactive Codable {}

