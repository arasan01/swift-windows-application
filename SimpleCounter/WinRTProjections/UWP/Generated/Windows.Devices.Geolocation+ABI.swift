// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

private var IID___x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint: WindowsFoundation.IID {
    .init(Data1: 0x6BFA00EB, Data2: 0xE56E, Data3: 0x49BB, Data4: ( 0x9C,0xAF,0xCB,0xAA,0x78,0xA8,0xBC,0xEF ))// 6BFA00EB-E56E-49BB-9CAF-CBAA78A8BCEF
}

private var IID___x_ABI_CWindows_CDevices_CGeolocation_CIGeopointFactory: WindowsFoundation.IID {
    .init(Data1: 0xDB6B8D33, Data2: 0x76BD, Data3: 0x4E30, Data4: ( 0x8A,0xF7,0xA8,0x44,0xDC,0x37,0xB7,0xA0 ))// DB6B8D33-76BD-4E30-8AF7-A844DC37B7A0
}

private var IID___x_ABI_CWindows_CDevices_CGeolocation_CIGeoshape: WindowsFoundation.IID {
    .init(Data1: 0xC99CA2AF, Data2: 0xC729, Data3: 0x43C1, Data4: ( 0x8F,0xAB,0xD6,0xDE,0xC9,0x14,0xDF,0x7E ))// C99CA2AF-C729-43C1-8FAB-D6DEC914DF7E
}

public enum __ABI_Windows_Devices_Geolocation {
    public class IGeopoint: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint }

        internal func get_PositionImpl() throws -> UWP.BasicGeoposition {
            var value: __x_ABI_CWindows_CDevices_CGeolocation_CBasicGeoposition = .init()
            _ = try perform(as: __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Position(pThis, &value))
            }
            return .from(abi: value)
        }

    }

    public class IGeopointFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CDevices_CGeolocation_CIGeopointFactory }

        internal func CreateImpl(_ position: UWP.BasicGeoposition) throws -> IGeopoint {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CDevices_CGeolocation_CIGeopointFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, .from(swift: position), &valueAbi))
                }
            }
            return IGeopoint(value!)
        }

        internal func CreateWithAltitudeReferenceSystemImpl(_ position: UWP.BasicGeoposition, _ altitudeReferenceSystem: UWP.AltitudeReferenceSystem) throws -> IGeopoint {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CDevices_CGeolocation_CIGeopointFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithAltitudeReferenceSystem(pThis, .from(swift: position), altitudeReferenceSystem, &valueAbi))
                }
            }
            return IGeopoint(value!)
        }

        internal func CreateWithAltitudeReferenceSystemAndSpatialReferenceIdImpl(_ position: UWP.BasicGeoposition, _ altitudeReferenceSystem: UWP.AltitudeReferenceSystem, _ spatialReferenceId: UInt32) throws -> IGeopoint {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CDevices_CGeolocation_CIGeopointFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithAltitudeReferenceSystemAndSpatialReferenceId(pThis, .from(swift: position), altitudeReferenceSystem, spatialReferenceId, &valueAbi))
                }
            }
            return IGeopoint(value!)
        }

    }

    public class IGeoshape: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CDevices_CGeolocation_CIGeoshape }

        open func get_GeoshapeTypeImpl() throws -> UWP.GeoshapeType {
            var value: __x_ABI_CWindows_CDevices_CGeolocation_CGeoshapeType = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CDevices_CGeolocation_CIGeoshape.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_GeoshapeType(pThis, &value))
            }
            return value
        }

        open func get_SpatialReferenceIdImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CDevices_CGeolocation_CIGeoshape.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SpatialReferenceId(pThis, &value))
            }
            return value
        }

        open func get_AltitudeReferenceSystemImpl() throws -> UWP.AltitudeReferenceSystem {
            var value: __x_ABI_CWindows_CDevices_CGeolocation_CAltitudeReferenceSystem = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CDevices_CGeolocation_CIGeoshape.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AltitudeReferenceSystem(pThis, &value))
            }
            return value
        }

    }

    internal static var IGeoshapeVTable: __x_ABI_CWindows_CDevices_CGeolocation_CIGeoshapeVtbl = .init(
        QueryInterface: { IGeoshapeWrapper.queryInterface($0, $1, $2) },
        AddRef: { IGeoshapeWrapper.addRef($0) },
        Release: { IGeoshapeWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Devices_Geolocation.IGeoshapeWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Devices.Geolocation.IGeoshape").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_GeoshapeType: {
            guard let __unwrapped__instance = IGeoshapeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.geoshapeType
            $1?.initialize(to: value)
            return S_OK
        },

        get_SpatialReferenceId: {
            guard let __unwrapped__instance = IGeoshapeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.spatialReferenceId
            $1?.initialize(to: value)
            return S_OK
        },

        get_AltitudeReferenceSystem: {
            guard let __unwrapped__instance = IGeoshapeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.altitudeReferenceSystem
            $1?.initialize(to: value)
            return S_OK
        }
    )

    public typealias IGeoshapeWrapper = InterfaceWrapperBase<__IMPL_Windows_Devices_Geolocation.IGeoshapeBridge>
}
extension __x_ABI_CWindows_CDevices_CGeolocation_CBasicGeoposition {
        public static func from(swift: UWP.BasicGeoposition) -> __x_ABI_CWindows_CDevices_CGeolocation_CBasicGeoposition {
            .init(Latitude: swift.latitude, Longitude: swift.longitude, Altitude: swift.altitude)
        }
    }
    