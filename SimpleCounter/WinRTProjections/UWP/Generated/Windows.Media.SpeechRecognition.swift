// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.speechrecognition.speechrecognitionconfidence)
public typealias SpeechRecognitionConfidence = __x_ABI_CWindows_CMedia_CSpeechRecognition_CSpeechRecognitionConfidence
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.speechrecognition.speechrecognitionconstraintprobability)
public typealias SpeechRecognitionConstraintProbability = __x_ABI_CWindows_CMedia_CSpeechRecognition_CSpeechRecognitionConstraintProbability
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.speechrecognition.speechrecognitionconstrainttype)
public typealias SpeechRecognitionConstraintType = __x_ABI_CWindows_CMedia_CSpeechRecognition_CSpeechRecognitionConstraintType
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.speechrecognition.speechrecognitionresultstatus)
public typealias SpeechRecognitionResultStatus = __x_ABI_CWindows_CMedia_CSpeechRecognition_CSpeechRecognitionResultStatus
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.speechrecognition.speechrecognitionresult)
public final class SpeechRecognitionResult : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_SpeechRecognition.ISpeechRecognitionResult
    private typealias CABI = __x_ABI_CWindows_CMedia_CSpeechRecognition_CISpeechRecognitionResult
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CSpeechRecognition_CISpeechRecognitionResult>?) -> SpeechRecognitionResult? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.speechrecognition.speechrecognitionresult.getalternates)
    public func getAlternates(_ maxAlternates: UInt32) throws -> WindowsFoundation.AnyIVectorView<SpeechRecognitionResult?>! {
        try _default.GetAlternatesImpl(maxAlternates)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.speechrecognition.speechrecognitionresult.confidence)
    public var confidence : SpeechRecognitionConfidence {
        get { try! _default.get_ConfidenceImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.speechrecognition.speechrecognitionresult.constraint)
    public var constraint : AnyISpeechRecognitionConstraint! {
        get { try! _default.get_ConstraintImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.speechrecognition.speechrecognitionresult.rawconfidence)
    public var rawConfidence : Double {
        get { try! _default.get_RawConfidenceImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.speechrecognition.speechrecognitionresult.rulepath)
    public var rulePath : WindowsFoundation.AnyIVectorView<String>! {
        get { try! _default.get_RulePathImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.speechrecognition.speechrecognitionresult.semanticinterpretation)
    public var semanticInterpretation : SpeechRecognitionSemanticInterpretation! {
        get { try! _default.get_SemanticInterpretationImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.speechrecognition.speechrecognitionresult.status)
    public var status : SpeechRecognitionResultStatus {
        get { try! _default.get_StatusImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.speechrecognition.speechrecognitionresult.text)
    public var text : String {
        get { try! _default.get_TextImpl() }
    }

    private lazy var _ISpeechRecognitionResult2: __ABI_Windows_Media_SpeechRecognition.ISpeechRecognitionResult2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.speechrecognition.speechrecognitionresult.phraseduration)
    public var phraseDuration : WindowsFoundation.TimeSpan {
        get { try! _ISpeechRecognitionResult2.get_PhraseDurationImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.speechrecognition.speechrecognitionresult.phrasestarttime)
    public var phraseStartTime : WindowsFoundation.DateTime {
        get { try! _ISpeechRecognitionResult2.get_PhraseStartTimeImpl() }
    }

    deinit {
        _default = nil
        _ISpeechRecognitionResult2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.speechrecognition.speechrecognitionsemanticinterpretation)
public final class SpeechRecognitionSemanticInterpretation : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_SpeechRecognition.ISpeechRecognitionSemanticInterpretation
    private typealias CABI = __x_ABI_CWindows_CMedia_CSpeechRecognition_CISpeechRecognitionSemanticInterpretation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CSpeechRecognition_CISpeechRecognitionSemanticInterpretation>?) -> SpeechRecognitionSemanticInterpretation? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.speechrecognition.speechrecognitionsemanticinterpretation.properties)
    public var properties : WindowsFoundation.AnyIMapView<String, WindowsFoundation.AnyIVectorView<String>?>! {
        get { try! _default.get_PropertiesImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.speechrecognition.ispeechrecognitionconstraint)
public protocol ISpeechRecognitionConstraint : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.speechrecognition.ispeechrecognitionconstraint.isenabled)
    var isEnabled: Bool { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.speechrecognition.ispeechrecognitionconstraint.probability)
    var probability: UWP.SpeechRecognitionConstraintProbability { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.speechrecognition.ispeechrecognitionconstraint.tag)
    var tag: String { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.speechrecognition.ispeechrecognitionconstraint.type)
    var type: UWP.SpeechRecognitionConstraintType { get }
}

extension ISpeechRecognitionConstraint {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Media_SpeechRecognition.ISpeechRecognitionConstraintWrapper.IID:
                let wrapper = __ABI_Windows_Media_SpeechRecognition.ISpeechRecognitionConstraintWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyISpeechRecognitionConstraint = any ISpeechRecognitionConstraint

extension UWP.SpeechRecognitionConfidence {
    public static var high : UWP.SpeechRecognitionConfidence {
        __x_ABI_CWindows_CMedia_CSpeechRecognition_CSpeechRecognitionConfidence_High
    }
    public static var medium : UWP.SpeechRecognitionConfidence {
        __x_ABI_CWindows_CMedia_CSpeechRecognition_CSpeechRecognitionConfidence_Medium
    }
    public static var low : UWP.SpeechRecognitionConfidence {
        __x_ABI_CWindows_CMedia_CSpeechRecognition_CSpeechRecognitionConfidence_Low
    }
    public static var rejected : UWP.SpeechRecognitionConfidence {
        __x_ABI_CWindows_CMedia_CSpeechRecognition_CSpeechRecognitionConfidence_Rejected
    }
}
extension UWP.SpeechRecognitionConfidence: @retroactive Hashable, @retroactive Codable {}

extension UWP.SpeechRecognitionConstraintProbability {
    public static var `default` : UWP.SpeechRecognitionConstraintProbability {
        __x_ABI_CWindows_CMedia_CSpeechRecognition_CSpeechRecognitionConstraintProbability_Default
    }
    public static var min : UWP.SpeechRecognitionConstraintProbability {
        __x_ABI_CWindows_CMedia_CSpeechRecognition_CSpeechRecognitionConstraintProbability_Min
    }
    public static var max : UWP.SpeechRecognitionConstraintProbability {
        __x_ABI_CWindows_CMedia_CSpeechRecognition_CSpeechRecognitionConstraintProbability_Max
    }
}
extension UWP.SpeechRecognitionConstraintProbability: @retroactive Hashable, @retroactive Codable {}

extension UWP.SpeechRecognitionConstraintType {
    public static var topic : UWP.SpeechRecognitionConstraintType {
        __x_ABI_CWindows_CMedia_CSpeechRecognition_CSpeechRecognitionConstraintType_Topic
    }
    public static var list : UWP.SpeechRecognitionConstraintType {
        __x_ABI_CWindows_CMedia_CSpeechRecognition_CSpeechRecognitionConstraintType_List
    }
    public static var grammar : UWP.SpeechRecognitionConstraintType {
        __x_ABI_CWindows_CMedia_CSpeechRecognition_CSpeechRecognitionConstraintType_Grammar
    }
    public static var voiceCommandDefinition : UWP.SpeechRecognitionConstraintType {
        __x_ABI_CWindows_CMedia_CSpeechRecognition_CSpeechRecognitionConstraintType_VoiceCommandDefinition
    }
}
extension UWP.SpeechRecognitionConstraintType: @retroactive Hashable, @retroactive Codable {}

extension UWP.SpeechRecognitionResultStatus {
    public static var success : UWP.SpeechRecognitionResultStatus {
        __x_ABI_CWindows_CMedia_CSpeechRecognition_CSpeechRecognitionResultStatus_Success
    }
    public static var topicLanguageNotSupported : UWP.SpeechRecognitionResultStatus {
        __x_ABI_CWindows_CMedia_CSpeechRecognition_CSpeechRecognitionResultStatus_TopicLanguageNotSupported
    }
    public static var grammarLanguageMismatch : UWP.SpeechRecognitionResultStatus {
        __x_ABI_CWindows_CMedia_CSpeechRecognition_CSpeechRecognitionResultStatus_GrammarLanguageMismatch
    }
    public static var grammarCompilationFailure : UWP.SpeechRecognitionResultStatus {
        __x_ABI_CWindows_CMedia_CSpeechRecognition_CSpeechRecognitionResultStatus_GrammarCompilationFailure
    }
    public static var audioQualityFailure : UWP.SpeechRecognitionResultStatus {
        __x_ABI_CWindows_CMedia_CSpeechRecognition_CSpeechRecognitionResultStatus_AudioQualityFailure
    }
    public static var userCanceled : UWP.SpeechRecognitionResultStatus {
        __x_ABI_CWindows_CMedia_CSpeechRecognition_CSpeechRecognitionResultStatus_UserCanceled
    }
    public static var unknown : UWP.SpeechRecognitionResultStatus {
        __x_ABI_CWindows_CMedia_CSpeechRecognition_CSpeechRecognitionResultStatus_Unknown
    }
    public static var timeoutExceeded : UWP.SpeechRecognitionResultStatus {
        __x_ABI_CWindows_CMedia_CSpeechRecognition_CSpeechRecognitionResultStatus_TimeoutExceeded
    }
    public static var pauseLimitExceeded : UWP.SpeechRecognitionResultStatus {
        __x_ABI_CWindows_CMedia_CSpeechRecognition_CSpeechRecognitionResultStatus_PauseLimitExceeded
    }
    public static var networkFailure : UWP.SpeechRecognitionResultStatus {
        __x_ABI_CWindows_CMedia_CSpeechRecognition_CSpeechRecognitionResultStatus_NetworkFailure
    }
    public static var microphoneUnavailable : UWP.SpeechRecognitionResultStatus {
        __x_ABI_CWindows_CMedia_CSpeechRecognition_CSpeechRecognitionResultStatus_MicrophoneUnavailable
    }
}
extension UWP.SpeechRecognitionResultStatus: @retroactive Hashable, @retroactive Codable {}

