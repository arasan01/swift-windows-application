// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.addresourcepackageoptions)
public typealias AddResourcePackageOptions = __x_ABI_CWindows_CApplicationModel_CAddResourcePackageOptions
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.limitedaccessfeaturestatus)
public typealias LimitedAccessFeatureStatus = __x_ABI_CWindows_CApplicationModel_CLimitedAccessFeatureStatus
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagecontentgroupstate)
public typealias PackageContentGroupState = __x_ABI_CWindows_CApplicationModel_CPackageContentGroupState
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagesignaturekind)
public typealias PackageSignatureKind = __x_ABI_CWindows_CApplicationModel_CPackageSignatureKind
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packageupdateavailability)
public typealias PackageUpdateAvailability = __x_ABI_CWindows_CApplicationModel_CPackageUpdateAvailability
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.startuptaskstate)
public typealias StartupTaskState = __x_ABI_CWindows_CApplicationModel_CStartupTaskState
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appdisplayinfo)
public final class AppDisplayInfo : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel.IAppDisplayInfo
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CIAppDisplayInfo
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CIAppDisplayInfo>?) -> AppDisplayInfo? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appdisplayinfo.getlogo)
    public func getLogo(_ size: WindowsFoundation.Size) throws -> UWP.RandomAccessStreamReference! {
        try _default.GetLogoImpl(size)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appdisplayinfo.description)
    public var description : String {
        get { try! _default.get_DescriptionImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appdisplayinfo.displayname)
    public var displayName : String {
        get { try! _default.get_DisplayNameImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appinfo)
public final class AppInfo : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel.IAppInfo
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CIAppInfo
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CIAppInfo>?) -> AppInfo? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appinfo.appusermodelid)
    public var appUserModelId : String {
        get { try! _default.get_AppUserModelIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appinfo.displayinfo)
    public var displayInfo : AppDisplayInfo! {
        get { try! _default.get_DisplayInfoImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appinfo.id)
    public var id : String {
        get { try! _default.get_IdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appinfo.packagefamilyname)
    public var packageFamilyName : String {
        get { try! _default.get_PackageFamilyNameImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appinstallerinfo)
public final class AppInstallerInfo : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel.IAppInstallerInfo
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CIAppInstallerInfo
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CIAppInstallerInfo>?) -> AppInstallerInfo? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appinstallerinfo.uri)
    public var uri : WindowsFoundation.Uri! {
        get { try! _default.get_UriImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appinstance)
public final class AppInstance : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel.IAppInstance
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CIAppInstance
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CIAppInstance>?) -> AppInstance? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IAppInstanceStatics: __ABI_Windows_ApplicationModel.IAppInstanceStatics = try! RoGetActivationFactory(HString("Windows.ApplicationModel.AppInstance"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appinstance.getactivatedeventargs)
    public static func getActivatedEventArgs() -> UWP.AnyIActivatedEventArgs! {
        return try! _IAppInstanceStatics.GetActivatedEventArgsImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appinstance.findorregisterinstanceforkey)
    public static func findOrRegisterInstanceForKey(_ key: String) -> AppInstance! {
        return try! _IAppInstanceStatics.FindOrRegisterInstanceForKeyImpl(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appinstance.unregister)
    public static func unregister() {
        try! _IAppInstanceStatics.UnregisterImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appinstance.getinstances)
    public static func getInstances() -> WindowsFoundation.AnyIVector<AppInstance?>! {
        return try! _IAppInstanceStatics.GetInstancesImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appinstance.recommendedinstance)
    public static var recommendedInstance : AppInstance! {
        get { try! _IAppInstanceStatics.get_RecommendedInstanceImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appinstance.redirectactivationto)
    public func redirectActivationTo() throws {
        try _default.RedirectActivationToImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appinstance.iscurrentinstance)
    public var isCurrentInstance : Bool {
        get { try! _default.get_IsCurrentInstanceImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appinstance.key)
    public var key : String {
        get { try! _default.get_KeyImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.cameraapplicationmanager)
public final class CameraApplicationManager {
    private static let _ICameraApplicationManagerStatics: __ABI_Windows_ApplicationModel.ICameraApplicationManagerStatics = try! RoGetActivationFactory(HString("Windows.ApplicationModel.CameraApplicationManager"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.cameraapplicationmanager.showinstalledapplicationsui)
    public static func showInstalledApplicationsUI() {
        try! _ICameraApplicationManagerStatics.ShowInstalledApplicationsUIImpl()
    }

}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.designmode)
public final class DesignMode {
    private static let _IDesignModeStatics: __ABI_Windows_ApplicationModel.IDesignModeStatics = try! RoGetActivationFactory(HString("Windows.ApplicationModel.DesignMode"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.designmode.designmodeenabled)
    public static var designModeEnabled : Bool {
        get { try! _IDesignModeStatics.get_DesignModeEnabledImpl() }
    }

    private static let _IDesignModeStatics2: __ABI_Windows_ApplicationModel.IDesignModeStatics2 = try! RoGetActivationFactory(HString("Windows.ApplicationModel.DesignMode"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.designmode.designmode2enabled)
    public static var designMode2Enabled : Bool {
        get { try! _IDesignModeStatics2.get_DesignMode2EnabledImpl() }
    }

}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.enteredbackgroundeventargs)
public final class EnteredBackgroundEventArgs : WinRTClass, IEnteredBackgroundEventArgs {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel.IEnteredBackgroundEventArgs
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CIEnteredBackgroundEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CIEnteredBackgroundEventArgs>?) -> EnteredBackgroundEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.enteredbackgroundeventargs.getdeferral)
    public func getDeferral() throws -> WindowsFoundation.Deferral! {
        try _default.GetDeferralImpl()
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.fulltrustprocesslauncher)
public final class FullTrustProcessLauncher {
    private static let _IFullTrustProcessLauncherStatics: __ABI_Windows_ApplicationModel.IFullTrustProcessLauncherStatics = try! RoGetActivationFactory(HString("Windows.ApplicationModel.FullTrustProcessLauncher"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.fulltrustprocesslauncher.launchfulltrustprocessforcurrentappasync)
    public static func launchFullTrustProcessForCurrentAppAsync() -> WindowsFoundation.AnyIAsyncAction! {
        return try! _IFullTrustProcessLauncherStatics.LaunchFullTrustProcessForCurrentAppAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.fulltrustprocesslauncher.launchfulltrustprocessforcurrentappasync)
    public static func launchFullTrustProcessForCurrentAppAsync(_ parameterGroupId: String) -> WindowsFoundation.AnyIAsyncAction! {
        return try! _IFullTrustProcessLauncherStatics.LaunchFullTrustProcessForCurrentAppWithParametersAsyncImpl(parameterGroupId)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.fulltrustprocesslauncher.launchfulltrustprocessforappasync)
    public static func launchFullTrustProcessForAppAsync(_ fullTrustPackageRelativeAppId: String) -> WindowsFoundation.AnyIAsyncAction! {
        return try! _IFullTrustProcessLauncherStatics.LaunchFullTrustProcessForAppAsyncImpl(fullTrustPackageRelativeAppId)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.fulltrustprocesslauncher.launchfulltrustprocessforappasync)
    public static func launchFullTrustProcessForAppAsync(_ fullTrustPackageRelativeAppId: String, _ parameterGroupId: String) -> WindowsFoundation.AnyIAsyncAction! {
        return try! _IFullTrustProcessLauncherStatics.LaunchFullTrustProcessForAppWithParametersAsyncImpl(fullTrustPackageRelativeAppId, parameterGroupId)
    }

}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.leavingbackgroundeventargs)
public final class LeavingBackgroundEventArgs : WinRTClass, ILeavingBackgroundEventArgs {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel.ILeavingBackgroundEventArgs
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CILeavingBackgroundEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CILeavingBackgroundEventArgs>?) -> LeavingBackgroundEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.leavingbackgroundeventargs.getdeferral)
    public func getDeferral() throws -> WindowsFoundation.Deferral! {
        try _default.GetDeferralImpl()
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.limitedaccessfeaturerequestresult)
public final class LimitedAccessFeatureRequestResult : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel.ILimitedAccessFeatureRequestResult
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CILimitedAccessFeatureRequestResult
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CILimitedAccessFeatureRequestResult>?) -> LimitedAccessFeatureRequestResult? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.limitedaccessfeaturerequestresult.estimatedremovaldate)
    public var estimatedRemovalDate : WindowsFoundation.DateTime? {
        get { try! _default.get_EstimatedRemovalDateImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.limitedaccessfeaturerequestresult.featureid)
    public var featureId : String {
        get { try! _default.get_FeatureIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.limitedaccessfeaturerequestresult.status)
    public var status : LimitedAccessFeatureStatus {
        get { try! _default.get_StatusImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.limitedaccessfeatures)
public final class LimitedAccessFeatures {
    private static let _ILimitedAccessFeaturesStatics: __ABI_Windows_ApplicationModel.ILimitedAccessFeaturesStatics = try! RoGetActivationFactory(HString("Windows.ApplicationModel.LimitedAccessFeatures"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.limitedaccessfeatures.tryunlockfeature)
    public static func tryUnlockFeature(_ featureId: String, _ token: String, _ attestation: String) -> LimitedAccessFeatureRequestResult! {
        return try! _ILimitedAccessFeaturesStatics.TryUnlockFeatureImpl(featureId, token, attestation)
    }

}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.package)
public final class Package : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel.IPackage
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CIPackage
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CIPackage>?) -> Package? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IPackageStatics: __ABI_Windows_ApplicationModel.IPackageStatics = try! RoGetActivationFactory(HString("Windows.ApplicationModel.Package"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.package.current)
    public static var current : Package! {
        get { try! _IPackageStatics.get_CurrentImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.package.dependencies)
    public var dependencies : WindowsFoundation.AnyIVectorView<Package?>! {
        get { try! _default.get_DependenciesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.package.id)
    public var id : PackageId! {
        get { try! _default.get_IdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.package.installedlocation)
    public var installedLocation : UWP.StorageFolder! {
        get { try! _default.get_InstalledLocationImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.package.isframework)
    public var isFramework : Bool {
        get { try! _default.get_IsFrameworkImpl() }
    }

    private lazy var _IPackage2: __ABI_Windows_ApplicationModel.IPackage2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.package.description)
    public var description : String {
        get { try! _IPackage2.get_DescriptionImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.package.displayname)
    public var displayName : String {
        get { try! _IPackage2.get_DisplayNameImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.package.isbundle)
    public var isBundle : Bool {
        get { try! _IPackage2.get_IsBundleImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.package.isdevelopmentmode)
    public var isDevelopmentMode : Bool {
        get { try! _IPackage2.get_IsDevelopmentModeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.package.isresourcepackage)
    public var isResourcePackage : Bool {
        get { try! _IPackage2.get_IsResourcePackageImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.package.logo)
    public var logo : WindowsFoundation.Uri! {
        get { try! _IPackage2.get_LogoImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.package.publisherdisplayname)
    public var publisherDisplayName : String {
        get { try! _IPackage2.get_PublisherDisplayNameImpl() }
    }

    private lazy var _IPackage3: __ABI_Windows_ApplicationModel.IPackage3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.package.getapplistentriesasync)
    public func getAppListEntriesAsync() throws -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<UWP.AppListEntry?>?>! {
        try _IPackage3.GetAppListEntriesAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.package.installeddate)
    public var installedDate : WindowsFoundation.DateTime {
        get { try! _IPackage3.get_InstalledDateImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.package.status)
    public var status : PackageStatus! {
        get { try! _IPackage3.get_StatusImpl() }
    }

    private lazy var _IPackageWithMetadata: __ABI_Windows_ApplicationModel.IPackageWithMetadata! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.package.getthumbnailtoken)
    public func getThumbnailToken() throws -> String {
        try _IPackageWithMetadata.GetThumbnailTokenImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.package.launch)
    public func launch(_ parameters: String) throws {
        try _IPackageWithMetadata.LaunchImpl(parameters)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.package.installdate)
    public var installDate : WindowsFoundation.DateTime {
        get { try! _IPackageWithMetadata.get_InstallDateImpl() }
    }

    private lazy var _IPackage4: __ABI_Windows_ApplicationModel.IPackage4! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.package.verifycontentintegrityasync)
    public func verifyContentIntegrityAsync() throws -> WindowsFoundation.AnyIAsyncOperation<Bool>! {
        try _IPackage4.VerifyContentIntegrityAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.package.isoptional)
    public var isOptional : Bool {
        get { try! _IPackage4.get_IsOptionalImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.package.signaturekind)
    public var signatureKind : PackageSignatureKind {
        get { try! _IPackage4.get_SignatureKindImpl() }
    }

    private lazy var _IPackage5: __ABI_Windows_ApplicationModel.IPackage5! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.package.getcontentgroupsasync)
    public func getContentGroupsAsync() throws -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVector<PackageContentGroup?>?>! {
        try _IPackage5.GetContentGroupsAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.package.getcontentgroupasync)
    public func getContentGroupAsync(_ name: String) throws -> WindowsFoundation.AnyIAsyncOperation<PackageContentGroup?>! {
        try _IPackage5.GetContentGroupAsyncImpl(name)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.package.stagecontentgroupsasync)
    public func stageContentGroupsAsync(_ names: WindowsFoundation.AnyIIterable<String>!) throws -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVector<PackageContentGroup?>?>! {
        try _IPackage5.StageContentGroupsAsyncImpl(names)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.package.stagecontentgroupsasync)
    public func stageContentGroupsAsync(_ names: WindowsFoundation.AnyIIterable<String>!, _ moveToHeadOfQueue: Bool) throws -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVector<PackageContentGroup?>?>! {
        try _IPackage5.StageContentGroupsWithPriorityAsyncImpl(names, moveToHeadOfQueue)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.package.setinuseasync)
    public func setInUseAsync(_ inUse: Bool) throws -> WindowsFoundation.AnyIAsyncOperation<Bool>! {
        try _IPackage5.SetInUseAsyncImpl(inUse)
    }

    private lazy var _IPackage6: __ABI_Windows_ApplicationModel.IPackage6! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.package.getappinstallerinfo)
    public func getAppInstallerInfo() throws -> AppInstallerInfo! {
        try _IPackage6.GetAppInstallerInfoImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.package.checkupdateavailabilityasync)
    public func checkUpdateAvailabilityAsync() throws -> WindowsFoundation.AnyIAsyncOperation<PackageUpdateAvailabilityResult?>! {
        try _IPackage6.CheckUpdateAvailabilityAsyncImpl()
    }

    private lazy var _IPackage7: __ABI_Windows_ApplicationModel.IPackage7! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.package.effectivelocation)
    public var effectiveLocation : UWP.StorageFolder! {
        get { try! _IPackage7.get_EffectiveLocationImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.package.mutablelocation)
    public var mutableLocation : UWP.StorageFolder! {
        get { try! _IPackage7.get_MutableLocationImpl() }
    }

    deinit {
        _default = nil
        _IPackage2 = nil
        _IPackage3 = nil
        _IPackageWithMetadata = nil
        _IPackage4 = nil
        _IPackage5 = nil
        _IPackage6 = nil
        _IPackage7 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagecatalog)
public final class PackageCatalog : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel.IPackageCatalog
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CIPackageCatalog
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CIPackageCatalog>?) -> PackageCatalog? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IPackageCatalogStatics: __ABI_Windows_ApplicationModel.IPackageCatalogStatics = try! RoGetActivationFactory(HString("Windows.ApplicationModel.PackageCatalog"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagecatalog.openforcurrentpackage)
    public static func openForCurrentPackage() -> PackageCatalog! {
        return try! _IPackageCatalogStatics.OpenForCurrentPackageImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagecatalog.openforcurrentuser)
    public static func openForCurrentUser() -> PackageCatalog! {
        return try! _IPackageCatalogStatics.OpenForCurrentUserImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagecatalog.packageinstalling)
    public lazy var packageInstalling : Event<TypedEventHandler<PackageCatalog?, PackageInstallingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PackageInstallingImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PackageInstallingImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagecatalog.packagestaging)
    public lazy var packageStaging : Event<TypedEventHandler<PackageCatalog?, PackageStagingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PackageStagingImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PackageStagingImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagecatalog.packagestatuschanged)
    public lazy var packageStatusChanged : Event<TypedEventHandler<PackageCatalog?, PackageStatusChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PackageStatusChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PackageStatusChangedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagecatalog.packageuninstalling)
    public lazy var packageUninstalling : Event<TypedEventHandler<PackageCatalog?, PackageUninstallingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PackageUninstallingImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PackageUninstallingImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagecatalog.packageupdating)
    public lazy var packageUpdating : Event<TypedEventHandler<PackageCatalog?, PackageUpdatingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PackageUpdatingImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PackageUpdatingImpl($0)
       }
      )
    }()

    private lazy var _IPackageCatalog2: __ABI_Windows_ApplicationModel.IPackageCatalog2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagecatalog.addoptionalpackageasync)
    public func addOptionalPackageAsync(_ optionalPackageFamilyName: String) throws -> WindowsFoundation.AnyIAsyncOperation<PackageCatalogAddOptionalPackageResult?>! {
        try _IPackageCatalog2.AddOptionalPackageAsyncImpl(optionalPackageFamilyName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagecatalog.packagecontentgroupstaging)
    public lazy var packageContentGroupStaging : Event<TypedEventHandler<PackageCatalog?, PackageContentGroupStagingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._IPackageCatalog2 else { return .init() }
          return try! this.add_PackageContentGroupStagingImpl($0)
        },
        remove: { [weak self] in
         try? self?._IPackageCatalog2.remove_PackageContentGroupStagingImpl($0)
       }
      )
    }()

    private lazy var _IPackageCatalog3: __ABI_Windows_ApplicationModel.IPackageCatalog3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagecatalog.removeoptionalpackagesasync)
    public func removeOptionalPackagesAsync(_ optionalPackageFamilyNames: WindowsFoundation.AnyIIterable<String>!) throws -> WindowsFoundation.AnyIAsyncOperation<PackageCatalogRemoveOptionalPackagesResult?>! {
        try _IPackageCatalog3.RemoveOptionalPackagesAsyncImpl(optionalPackageFamilyNames)
    }

    private lazy var _IPackageCatalog4: __ABI_Windows_ApplicationModel.IPackageCatalog4! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagecatalog.addresourcepackageasync)
    public func addResourcePackageAsync(_ resourcePackageFamilyName: String, _ resourceID: String, _ options: AddResourcePackageOptions) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<PackageCatalogAddResourcePackageResult?, PackageInstallProgress>! {
        try _IPackageCatalog4.AddResourcePackageAsyncImpl(resourcePackageFamilyName, resourceID, options)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagecatalog.removeresourcepackagesasync)
    public func removeResourcePackagesAsync(_ resourcePackages: WindowsFoundation.AnyIIterable<Package?>!) throws -> WindowsFoundation.AnyIAsyncOperation<PackageCatalogRemoveResourcePackagesResult?>! {
        try _IPackageCatalog4.RemoveResourcePackagesAsyncImpl(resourcePackages)
    }

    deinit {
        _default = nil
        _IPackageCatalog2 = nil
        _IPackageCatalog3 = nil
        _IPackageCatalog4 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagecatalogaddoptionalpackageresult)
public final class PackageCatalogAddOptionalPackageResult : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel.IPackageCatalogAddOptionalPackageResult
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CIPackageCatalogAddOptionalPackageResult
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CIPackageCatalogAddOptionalPackageResult>?) -> PackageCatalogAddOptionalPackageResult? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagecatalogaddoptionalpackageresult.extendederror)
    public var extendedError : HRESULT {
        get { try! _default.get_ExtendedErrorImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagecatalogaddoptionalpackageresult.package)
    public var package : Package! {
        get { try! _default.get_PackageImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagecatalogaddresourcepackageresult)
public final class PackageCatalogAddResourcePackageResult : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel.IPackageCatalogAddResourcePackageResult
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CIPackageCatalogAddResourcePackageResult
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CIPackageCatalogAddResourcePackageResult>?) -> PackageCatalogAddResourcePackageResult? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagecatalogaddresourcepackageresult.extendederror)
    public var extendedError : HRESULT {
        get { try! _default.get_ExtendedErrorImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagecatalogaddresourcepackageresult.iscomplete)
    public var isComplete : Bool {
        get { try! _default.get_IsCompleteImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagecatalogaddresourcepackageresult.package)
    public var package : Package! {
        get { try! _default.get_PackageImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagecatalogremoveoptionalpackagesresult)
public final class PackageCatalogRemoveOptionalPackagesResult : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel.IPackageCatalogRemoveOptionalPackagesResult
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CIPackageCatalogRemoveOptionalPackagesResult
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CIPackageCatalogRemoveOptionalPackagesResult>?) -> PackageCatalogRemoveOptionalPackagesResult? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagecatalogremoveoptionalpackagesresult.extendederror)
    public var extendedError : HRESULT {
        get { try! _default.get_ExtendedErrorImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagecatalogremoveoptionalpackagesresult.packagesremoved)
    public var packagesRemoved : WindowsFoundation.AnyIVectorView<Package?>! {
        get { try! _default.get_PackagesRemovedImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagecatalogremoveresourcepackagesresult)
public final class PackageCatalogRemoveResourcePackagesResult : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel.IPackageCatalogRemoveResourcePackagesResult
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CIPackageCatalogRemoveResourcePackagesResult
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CIPackageCatalogRemoveResourcePackagesResult>?) -> PackageCatalogRemoveResourcePackagesResult? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagecatalogremoveresourcepackagesresult.extendederror)
    public var extendedError : HRESULT {
        get { try! _default.get_ExtendedErrorImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagecatalogremoveresourcepackagesresult.packagesremoved)
    public var packagesRemoved : WindowsFoundation.AnyIVectorView<Package?>! {
        get { try! _default.get_PackagesRemovedImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagecontentgroup)
public final class PackageContentGroup : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel.IPackageContentGroup
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CIPackageContentGroup
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CIPackageContentGroup>?) -> PackageContentGroup? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IPackageContentGroupStatics: __ABI_Windows_ApplicationModel.IPackageContentGroupStatics = try! RoGetActivationFactory(HString("Windows.ApplicationModel.PackageContentGroup"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagecontentgroup.requiredgroupname)
    public static var requiredGroupName : String {
        get { try! _IPackageContentGroupStatics.get_RequiredGroupNameImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagecontentgroup.isrequired)
    public var isRequired : Bool {
        get { try! _default.get_IsRequiredImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagecontentgroup.name)
    public var name : String {
        get { try! _default.get_NameImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagecontentgroup.package)
    public var package : Package! {
        get { try! _default.get_PackageImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagecontentgroup.state)
    public var state : PackageContentGroupState {
        get { try! _default.get_StateImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagecontentgroupstagingeventargs)
public final class PackageContentGroupStagingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel.IPackageContentGroupStagingEventArgs
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CIPackageContentGroupStagingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CIPackageContentGroupStagingEventArgs>?) -> PackageContentGroupStagingEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagecontentgroupstagingeventargs.activityid)
    public var activityId : Foundation.UUID {
        get { try! _default.get_ActivityIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagecontentgroupstagingeventargs.contentgroupname)
    public var contentGroupName : String {
        get { try! _default.get_ContentGroupNameImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagecontentgroupstagingeventargs.errorcode)
    public var errorCode : HRESULT {
        get { try! _default.get_ErrorCodeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagecontentgroupstagingeventargs.iscomplete)
    public var isComplete : Bool {
        get { try! _default.get_IsCompleteImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagecontentgroupstagingeventargs.iscontentgrouprequired)
    public var isContentGroupRequired : Bool {
        get { try! _default.get_IsContentGroupRequiredImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagecontentgroupstagingeventargs.package)
    public var package : Package! {
        get { try! _default.get_PackageImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagecontentgroupstagingeventargs.progress)
    public var progress : Double {
        get { try! _default.get_ProgressImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packageid)
public final class PackageId : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel.IPackageId
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CIPackageId
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CIPackageId>?) -> PackageId? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packageid.architecture)
    public var architecture : UWP.ProcessorArchitecture {
        get { try! _default.get_ArchitectureImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packageid.familyname)
    public var familyName : String {
        get { try! _default.get_FamilyNameImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packageid.fullname)
    public var fullName : String {
        get { try! _default.get_FullNameImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packageid.name)
    public var name : String {
        get { try! _default.get_NameImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packageid.publisher)
    public var publisher : String {
        get { try! _default.get_PublisherImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packageid.publisherid)
    public var publisherId : String {
        get { try! _default.get_PublisherIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packageid.resourceid)
    public var resourceId : String {
        get { try! _default.get_ResourceIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packageid.version)
    public var version : PackageVersion {
        get { try! _default.get_VersionImpl() }
    }

    private lazy var _IPackageIdWithMetadata: __ABI_Windows_ApplicationModel.IPackageIdWithMetadata! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packageid.author)
    public var author : String {
        get { try! _IPackageIdWithMetadata.get_AuthorImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packageid.productid)
    public var productId : String {
        get { try! _IPackageIdWithMetadata.get_ProductIdImpl() }
    }

    deinit {
        _default = nil
        _IPackageIdWithMetadata = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packageinstallingeventargs)
public final class PackageInstallingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel.IPackageInstallingEventArgs
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CIPackageInstallingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CIPackageInstallingEventArgs>?) -> PackageInstallingEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packageinstallingeventargs.activityid)
    public var activityId : Foundation.UUID {
        get { try! _default.get_ActivityIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packageinstallingeventargs.errorcode)
    public var errorCode : HRESULT {
        get { try! _default.get_ErrorCodeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packageinstallingeventargs.iscomplete)
    public var isComplete : Bool {
        get { try! _default.get_IsCompleteImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packageinstallingeventargs.package)
    public var package : Package! {
        get { try! _default.get_PackageImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packageinstallingeventargs.progress)
    public var progress : Double {
        get { try! _default.get_ProgressImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagestagingeventargs)
public final class PackageStagingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel.IPackageStagingEventArgs
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CIPackageStagingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CIPackageStagingEventArgs>?) -> PackageStagingEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagestagingeventargs.activityid)
    public var activityId : Foundation.UUID {
        get { try! _default.get_ActivityIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagestagingeventargs.errorcode)
    public var errorCode : HRESULT {
        get { try! _default.get_ErrorCodeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagestagingeventargs.iscomplete)
    public var isComplete : Bool {
        get { try! _default.get_IsCompleteImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagestagingeventargs.package)
    public var package : Package! {
        get { try! _default.get_PackageImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagestagingeventargs.progress)
    public var progress : Double {
        get { try! _default.get_ProgressImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagestatus)
public final class PackageStatus : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel.IPackageStatus
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CIPackageStatus
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CIPackageStatus>?) -> PackageStatus? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagestatus.verifyisok)
    public func verifyIsOK() throws -> Bool {
        try _default.VerifyIsOKImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagestatus.dataoffline)
    public var dataOffline : Bool {
        get { try! _default.get_DataOfflineImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagestatus.dependencyissue)
    public var dependencyIssue : Bool {
        get { try! _default.get_DependencyIssueImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagestatus.deploymentinprogress)
    public var deploymentInProgress : Bool {
        get { try! _default.get_DeploymentInProgressImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagestatus.disabled)
    public var disabled : Bool {
        get { try! _default.get_DisabledImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagestatus.licenseissue)
    public var licenseIssue : Bool {
        get { try! _default.get_LicenseIssueImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagestatus.modified)
    public var modified : Bool {
        get { try! _default.get_ModifiedImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagestatus.needsremediation)
    public var needsRemediation : Bool {
        get { try! _default.get_NeedsRemediationImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagestatus.notavailable)
    public var notAvailable : Bool {
        get { try! _default.get_NotAvailableImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagestatus.packageoffline)
    public var packageOffline : Bool {
        get { try! _default.get_PackageOfflineImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagestatus.servicing)
    public var servicing : Bool {
        get { try! _default.get_ServicingImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagestatus.tampered)
    public var tampered : Bool {
        get { try! _default.get_TamperedImpl() }
    }

    private lazy var _IPackageStatus2: __ABI_Windows_ApplicationModel.IPackageStatus2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagestatus.ispartiallystaged)
    public var isPartiallyStaged : Bool {
        get { try! _IPackageStatus2.get_IsPartiallyStagedImpl() }
    }

    deinit {
        _default = nil
        _IPackageStatus2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagestatuschangedeventargs)
public final class PackageStatusChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel.IPackageStatusChangedEventArgs
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CIPackageStatusChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CIPackageStatusChangedEventArgs>?) -> PackageStatusChangedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packagestatuschangedeventargs.package)
    public var package : Package! {
        get { try! _default.get_PackageImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packageuninstallingeventargs)
public final class PackageUninstallingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel.IPackageUninstallingEventArgs
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CIPackageUninstallingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CIPackageUninstallingEventArgs>?) -> PackageUninstallingEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packageuninstallingeventargs.activityid)
    public var activityId : Foundation.UUID {
        get { try! _default.get_ActivityIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packageuninstallingeventargs.errorcode)
    public var errorCode : HRESULT {
        get { try! _default.get_ErrorCodeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packageuninstallingeventargs.iscomplete)
    public var isComplete : Bool {
        get { try! _default.get_IsCompleteImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packageuninstallingeventargs.package)
    public var package : Package! {
        get { try! _default.get_PackageImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packageuninstallingeventargs.progress)
    public var progress : Double {
        get { try! _default.get_ProgressImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packageupdateavailabilityresult)
public final class PackageUpdateAvailabilityResult : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel.IPackageUpdateAvailabilityResult
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CIPackageUpdateAvailabilityResult
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CIPackageUpdateAvailabilityResult>?) -> PackageUpdateAvailabilityResult? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packageupdateavailabilityresult.availability)
    public var availability : PackageUpdateAvailability {
        get { try! _default.get_AvailabilityImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packageupdateavailabilityresult.extendederror)
    public var extendedError : HRESULT {
        get { try! _default.get_ExtendedErrorImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packageupdatingeventargs)
public final class PackageUpdatingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel.IPackageUpdatingEventArgs
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CIPackageUpdatingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CIPackageUpdatingEventArgs>?) -> PackageUpdatingEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packageupdatingeventargs.activityid)
    public var activityId : Foundation.UUID {
        get { try! _default.get_ActivityIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packageupdatingeventargs.errorcode)
    public var errorCode : HRESULT {
        get { try! _default.get_ErrorCodeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packageupdatingeventargs.iscomplete)
    public var isComplete : Bool {
        get { try! _default.get_IsCompleteImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packageupdatingeventargs.progress)
    public var progress : Double {
        get { try! _default.get_ProgressImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packageupdatingeventargs.sourcepackage)
    public var sourcePackage : Package! {
        get { try! _default.get_SourcePackageImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packageupdatingeventargs.targetpackage)
    public var targetPackage : Package! {
        get { try! _default.get_TargetPackageImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.startuptask)
public final class StartupTask : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel.IStartupTask
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CIStartupTask
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CIStartupTask>?) -> StartupTask? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IStartupTaskStatics: __ABI_Windows_ApplicationModel.IStartupTaskStatics = try! RoGetActivationFactory(HString("Windows.ApplicationModel.StartupTask"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.startuptask.getforcurrentpackageasync)
    public static func getForCurrentPackageAsync() -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<StartupTask?>?>! {
        return try! _IStartupTaskStatics.GetForCurrentPackageAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.startuptask.getasync)
    public static func getAsync(_ taskId: String) -> WindowsFoundation.AnyIAsyncOperation<StartupTask?>! {
        return try! _IStartupTaskStatics.GetAsyncImpl(taskId)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.startuptask.requestenableasync)
    public func requestEnableAsync() throws -> WindowsFoundation.AnyIAsyncOperation<StartupTaskState>! {
        try _default.RequestEnableAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.startuptask.disable)
    public func disable() throws {
        try _default.DisableImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.startuptask.state)
    public var state : StartupTaskState {
        get { try! _default.get_StateImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.startuptask.taskid)
    public var taskId : String {
        get { try! _default.get_TaskIdImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.suspendingdeferral)
public final class SuspendingDeferral : WinRTClass, ISuspendingDeferral {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel.ISuspendingDeferral
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CISuspendingDeferral
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CISuspendingDeferral>?) -> SuspendingDeferral? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.suspendingdeferral.complete)
    public func complete() throws {
        try _default.CompleteImpl()
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.suspendingeventargs)
public final class SuspendingEventArgs : WinRTClass, ISuspendingEventArgs {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel.ISuspendingEventArgs
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CISuspendingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CISuspendingEventArgs>?) -> SuspendingEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.suspendingeventargs.suspendingoperation)
    public var suspendingOperation : SuspendingOperation! {
        get { try! _default.get_SuspendingOperationImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.suspendingoperation)
public final class SuspendingOperation : WinRTClass, ISuspendingOperation {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel.ISuspendingOperation
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CISuspendingOperation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CISuspendingOperation>?) -> SuspendingOperation? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.suspendingoperation.getdeferral)
    public func getDeferral() throws -> SuspendingDeferral! {
        try _default.GetDeferralImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.suspendingoperation.deadline)
    public var deadline : WindowsFoundation.DateTime {
        get { try! _default.get_DeadlineImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packageinstallprogress)
public struct PackageInstallProgress: Hashable, Codable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packageinstallprogress.percentcomplete)
    public var percentComplete: UInt32 = 0
    public init() {}
    public init(percentComplete: UInt32) {
        self.percentComplete = percentComplete
    }
    public static func from(abi: __x_ABI_CWindows_CApplicationModel_CPackageInstallProgress) -> PackageInstallProgress {
        .init(percentComplete: abi.PercentComplete)
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packageversion)
public struct PackageVersion: Hashable, Codable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packageversion.major)
    public var major: UInt16 = 0
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packageversion.minor)
    public var minor: UInt16 = 0
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packageversion.build)
    public var build: UInt16 = 0
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.packageversion.revision)
    public var revision: UInt16 = 0
    public init() {}
    public init(major: UInt16, minor: UInt16, build: UInt16, revision: UInt16) {
        self.major = major
        self.minor = minor
        self.build = build
        self.revision = revision
    }
    public static func from(abi: __x_ABI_CWindows_CApplicationModel_CPackageVersion) -> PackageVersion {
        .init(major: abi.Major, minor: abi.Minor, build: abi.Build, revision: abi.Revision)
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.ienteredbackgroundeventargs)
public protocol IEnteredBackgroundEventArgs : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.ienteredbackgroundeventargs.getdeferral)
    func getDeferral() throws -> WindowsFoundation.Deferral!
}

extension IEnteredBackgroundEventArgs {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_ApplicationModel.IEnteredBackgroundEventArgsWrapper.IID:
                let wrapper = __ABI_Windows_ApplicationModel.IEnteredBackgroundEventArgsWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIEnteredBackgroundEventArgs = any IEnteredBackgroundEventArgs

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.ileavingbackgroundeventargs)
public protocol ILeavingBackgroundEventArgs : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.ileavingbackgroundeventargs.getdeferral)
    func getDeferral() throws -> WindowsFoundation.Deferral!
}

extension ILeavingBackgroundEventArgs {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_ApplicationModel.ILeavingBackgroundEventArgsWrapper.IID:
                let wrapper = __ABI_Windows_ApplicationModel.ILeavingBackgroundEventArgsWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyILeavingBackgroundEventArgs = any ILeavingBackgroundEventArgs

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.isuspendingdeferral)
public protocol ISuspendingDeferral : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.isuspendingdeferral.complete)
    func complete() throws
}

extension ISuspendingDeferral {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_ApplicationModel.ISuspendingDeferralWrapper.IID:
                let wrapper = __ABI_Windows_ApplicationModel.ISuspendingDeferralWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyISuspendingDeferral = any ISuspendingDeferral

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.isuspendingeventargs)
public protocol ISuspendingEventArgs : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.isuspendingeventargs.suspendingoperation)
    var suspendingOperation: UWP.SuspendingOperation! { get }
}

extension ISuspendingEventArgs {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_ApplicationModel.ISuspendingEventArgsWrapper.IID:
                let wrapper = __ABI_Windows_ApplicationModel.ISuspendingEventArgsWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyISuspendingEventArgs = any ISuspendingEventArgs

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.isuspendingoperation)
public protocol ISuspendingOperation : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.isuspendingoperation.getdeferral)
    func getDeferral() throws -> UWP.SuspendingDeferral!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.isuspendingoperation.deadline)
    var deadline: WindowsFoundation.DateTime { get }
}

extension ISuspendingOperation {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_ApplicationModel.ISuspendingOperationWrapper.IID:
                let wrapper = __ABI_Windows_ApplicationModel.ISuspendingOperationWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyISuspendingOperation = any ISuspendingOperation

extension UWP.AddResourcePackageOptions {
    public static var none : UWP.AddResourcePackageOptions {
        __x_ABI_CWindows_CApplicationModel_CAddResourcePackageOptions_None
    }
    public static var forceTargetAppShutdown : UWP.AddResourcePackageOptions {
        __x_ABI_CWindows_CApplicationModel_CAddResourcePackageOptions_ForceTargetAppShutdown
    }
    public static var applyUpdateIfAvailable : UWP.AddResourcePackageOptions {
        __x_ABI_CWindows_CApplicationModel_CAddResourcePackageOptions_ApplyUpdateIfAvailable
    }
}
extension UWP.AddResourcePackageOptions: @retroactive Hashable, @retroactive Codable {}

extension UWP.LimitedAccessFeatureStatus {
    public static var unavailable : UWP.LimitedAccessFeatureStatus {
        __x_ABI_CWindows_CApplicationModel_CLimitedAccessFeatureStatus_Unavailable
    }
    public static var available : UWP.LimitedAccessFeatureStatus {
        __x_ABI_CWindows_CApplicationModel_CLimitedAccessFeatureStatus_Available
    }
    public static var availableWithoutToken : UWP.LimitedAccessFeatureStatus {
        __x_ABI_CWindows_CApplicationModel_CLimitedAccessFeatureStatus_AvailableWithoutToken
    }
    public static var unknown : UWP.LimitedAccessFeatureStatus {
        __x_ABI_CWindows_CApplicationModel_CLimitedAccessFeatureStatus_Unknown
    }
}
extension UWP.LimitedAccessFeatureStatus: @retroactive Hashable, @retroactive Codable {}

extension UWP.PackageContentGroupState {
    public static var notStaged : UWP.PackageContentGroupState {
        __x_ABI_CWindows_CApplicationModel_CPackageContentGroupState_NotStaged
    }
    public static var queued : UWP.PackageContentGroupState {
        __x_ABI_CWindows_CApplicationModel_CPackageContentGroupState_Queued
    }
    public static var staging : UWP.PackageContentGroupState {
        __x_ABI_CWindows_CApplicationModel_CPackageContentGroupState_Staging
    }
    public static var staged : UWP.PackageContentGroupState {
        __x_ABI_CWindows_CApplicationModel_CPackageContentGroupState_Staged
    }
}
extension UWP.PackageContentGroupState: @retroactive Hashable, @retroactive Codable {}

extension UWP.PackageSignatureKind {
    public static var none : UWP.PackageSignatureKind {
        __x_ABI_CWindows_CApplicationModel_CPackageSignatureKind_None
    }
    public static var developer : UWP.PackageSignatureKind {
        __x_ABI_CWindows_CApplicationModel_CPackageSignatureKind_Developer
    }
    public static var enterprise : UWP.PackageSignatureKind {
        __x_ABI_CWindows_CApplicationModel_CPackageSignatureKind_Enterprise
    }
    public static var store : UWP.PackageSignatureKind {
        __x_ABI_CWindows_CApplicationModel_CPackageSignatureKind_Store
    }
    public static var system : UWP.PackageSignatureKind {
        __x_ABI_CWindows_CApplicationModel_CPackageSignatureKind_System
    }
}
extension UWP.PackageSignatureKind: @retroactive Hashable, @retroactive Codable {}

extension UWP.PackageUpdateAvailability {
    public static var unknown : UWP.PackageUpdateAvailability {
        __x_ABI_CWindows_CApplicationModel_CPackageUpdateAvailability_Unknown
    }
    public static var noUpdates : UWP.PackageUpdateAvailability {
        __x_ABI_CWindows_CApplicationModel_CPackageUpdateAvailability_NoUpdates
    }
    public static var available : UWP.PackageUpdateAvailability {
        __x_ABI_CWindows_CApplicationModel_CPackageUpdateAvailability_Available
    }
    public static var required : UWP.PackageUpdateAvailability {
        __x_ABI_CWindows_CApplicationModel_CPackageUpdateAvailability_Required
    }
    public static var error : UWP.PackageUpdateAvailability {
        __x_ABI_CWindows_CApplicationModel_CPackageUpdateAvailability_Error
    }
}
extension UWP.PackageUpdateAvailability: @retroactive Hashable, @retroactive Codable {}

extension UWP.StartupTaskState {
    public static var disabled : UWP.StartupTaskState {
        __x_ABI_CWindows_CApplicationModel_CStartupTaskState_Disabled
    }
    public static var disabledByUser : UWP.StartupTaskState {
        __x_ABI_CWindows_CApplicationModel_CStartupTaskState_DisabledByUser
    }
    public static var enabled : UWP.StartupTaskState {
        __x_ABI_CWindows_CApplicationModel_CStartupTaskState_Enabled
    }
    public static var disabledByPolicy : UWP.StartupTaskState {
        __x_ABI_CWindows_CApplicationModel_CStartupTaskState_DisabledByPolicy
    }
    public static var enabledByPolicy : UWP.StartupTaskState {
        __x_ABI_CWindows_CApplicationModel_CStartupTaskState_EnabledByPolicy
    }
}
extension UWP.StartupTaskState: @retroactive Hashable, @retroactive Codable {}

