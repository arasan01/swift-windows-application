// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.appointmentbusystatus)
public typealias AppointmentBusyStatus = __x_ABI_CWindows_CApplicationModel_CAppointments_CAppointmentBusyStatus
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.appointmentdaysofweek)
public typealias AppointmentDaysOfWeek = __x_ABI_CWindows_CApplicationModel_CAppointments_CAppointmentDaysOfWeek
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.appointmentdetailskind)
public typealias AppointmentDetailsKind = __x_ABI_CWindows_CApplicationModel_CAppointments_CAppointmentDetailsKind
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.appointmentparticipantresponse)
public typealias AppointmentParticipantResponse = __x_ABI_CWindows_CApplicationModel_CAppointments_CAppointmentParticipantResponse
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.appointmentparticipantrole)
public typealias AppointmentParticipantRole = __x_ABI_CWindows_CApplicationModel_CAppointments_CAppointmentParticipantRole
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.appointmentrecurrenceunit)
public typealias AppointmentRecurrenceUnit = __x_ABI_CWindows_CApplicationModel_CAppointments_CAppointmentRecurrenceUnit
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.appointmentsensitivity)
public typealias AppointmentSensitivity = __x_ABI_CWindows_CApplicationModel_CAppointments_CAppointmentSensitivity
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.appointmentweekofmonth)
public typealias AppointmentWeekOfMonth = __x_ABI_CWindows_CApplicationModel_CAppointments_CAppointmentWeekOfMonth
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.recurrencetype)
public typealias RecurrenceType = __x_ABI_CWindows_CApplicationModel_CAppointments_CRecurrenceType
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.appointment)
public final class Appointment : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel_Appointments.IAppointment
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CAppointments_CIAppointment
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CAppointments_CIAppointment>?) -> Appointment? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public init() {
        super.init(try! RoActivateInstance(HString("Windows.ApplicationModel.Appointments.Appointment")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.appointment.allday)
    public var allDay : Bool {
        get { try! _default.get_AllDayImpl() }
        set { try! _default.put_AllDayImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.appointment.busystatus)
    public var busyStatus : AppointmentBusyStatus {
        get { try! _default.get_BusyStatusImpl() }
        set { try! _default.put_BusyStatusImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.appointment.details)
    public var details : String {
        get { try! _default.get_DetailsImpl() }
        set { try! _default.put_DetailsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.appointment.duration)
    public var duration : WindowsFoundation.TimeSpan {
        get { try! _default.get_DurationImpl() }
        set { try! _default.put_DurationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.appointment.invitees)
    public var invitees : WindowsFoundation.AnyIVector<AppointmentInvitee?>! {
        get { try! _default.get_InviteesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.appointment.location)
    public var location : String {
        get { try! _default.get_LocationImpl() }
        set { try! _default.put_LocationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.appointment.organizer)
    public var organizer : AppointmentOrganizer! {
        get { try! _default.get_OrganizerImpl() }
        set { try! _default.put_OrganizerImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.appointment.recurrence)
    public var recurrence : AppointmentRecurrence! {
        get { try! _default.get_RecurrenceImpl() }
        set { try! _default.put_RecurrenceImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.appointment.reminder)
    public var reminder : WindowsFoundation.TimeSpan? {
        get { try! _default.get_ReminderImpl() }
        set { try! _default.put_ReminderImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.appointment.sensitivity)
    public var sensitivity : AppointmentSensitivity {
        get { try! _default.get_SensitivityImpl() }
        set { try! _default.put_SensitivityImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.appointment.starttime)
    public var startTime : WindowsFoundation.DateTime {
        get { try! _default.get_StartTimeImpl() }
        set { try! _default.put_StartTimeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.appointment.subject)
    public var subject : String {
        get { try! _default.get_SubjectImpl() }
        set { try! _default.put_SubjectImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.appointment.uri)
    public var uri : WindowsFoundation.Uri! {
        get { try! _default.get_UriImpl() }
        set { try! _default.put_UriImpl(newValue) }
    }

    private lazy var _IAppointment2: __ABI_Windows_ApplicationModel_Appointments.IAppointment2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.appointment.allownewtimeproposal)
    public var allowNewTimeProposal : Bool {
        get { try! _IAppointment2.get_AllowNewTimeProposalImpl() }
        set { try! _IAppointment2.put_AllowNewTimeProposalImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.appointment.calendarid)
    public var calendarId : String {
        get { try! _IAppointment2.get_CalendarIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.appointment.hasinvitees)
    public var hasInvitees : Bool {
        get { try! _IAppointment2.get_HasInviteesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.appointment.iscanceledmeeting)
    public var isCanceledMeeting : Bool {
        get { try! _IAppointment2.get_IsCanceledMeetingImpl() }
        set { try! _IAppointment2.put_IsCanceledMeetingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.appointment.isorganizedbyuser)
    public var isOrganizedByUser : Bool {
        get { try! _IAppointment2.get_IsOrganizedByUserImpl() }
        set { try! _IAppointment2.put_IsOrganizedByUserImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.appointment.isresponserequested)
    public var isResponseRequested : Bool {
        get { try! _IAppointment2.get_IsResponseRequestedImpl() }
        set { try! _IAppointment2.put_IsResponseRequestedImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.appointment.localid)
    public var localId : String {
        get { try! _IAppointment2.get_LocalIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.appointment.onlinemeetinglink)
    public var onlineMeetingLink : String {
        get { try! _IAppointment2.get_OnlineMeetingLinkImpl() }
        set { try! _IAppointment2.put_OnlineMeetingLinkImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.appointment.originalstarttime)
    public var originalStartTime : WindowsFoundation.DateTime? {
        get { try! _IAppointment2.get_OriginalStartTimeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.appointment.replytime)
    public var replyTime : WindowsFoundation.DateTime? {
        get { try! _IAppointment2.get_ReplyTimeImpl() }
        set { try! _IAppointment2.put_ReplyTimeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.appointment.roamingid)
    public var roamingId : String {
        get { try! _IAppointment2.get_RoamingIdImpl() }
        set { try! _IAppointment2.put_RoamingIdImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.appointment.userresponse)
    public var userResponse : AppointmentParticipantResponse {
        get { try! _IAppointment2.get_UserResponseImpl() }
        set { try! _IAppointment2.put_UserResponseImpl(newValue) }
    }

    private lazy var _IAppointment3: __ABI_Windows_ApplicationModel_Appointments.IAppointment3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.appointment.changenumber)
    public var changeNumber : UInt64 {
        get { try! _IAppointment3.get_ChangeNumberImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.appointment.detailskind)
    public var detailsKind : AppointmentDetailsKind {
        get { try! _IAppointment3.get_DetailsKindImpl() }
        set { try! _IAppointment3.put_DetailsKindImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.appointment.remotechangenumber)
    public var remoteChangeNumber : UInt64 {
        get { try! _IAppointment3.get_RemoteChangeNumberImpl() }
        set { try! _IAppointment3.put_RemoteChangeNumberImpl(newValue) }
    }

    deinit {
        _default = nil
        _IAppointment2 = nil
        _IAppointment3 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.appointmentinvitee)
public final class AppointmentInvitee : WinRTClass, IAppointmentParticipant {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel_Appointments.IAppointmentInvitee
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CAppointments_CIAppointmentInvitee
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CAppointments_CIAppointmentInvitee>?) -> AppointmentInvitee? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    override public init() {
        super.init(try! RoActivateInstance(HString("Windows.ApplicationModel.Appointments.AppointmentInvitee")))
    }

    private lazy var _IAppointmentParticipant: __ABI_Windows_ApplicationModel_Appointments.IAppointmentParticipant! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.appointmentinvitee.address)
    public var address : String {
        get { try! _IAppointmentParticipant.get_AddressImpl() }
        set { try! _IAppointmentParticipant.put_AddressImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.appointmentinvitee.displayname)
    public var displayName : String {
        get { try! _IAppointmentParticipant.get_DisplayNameImpl() }
        set { try! _IAppointmentParticipant.put_DisplayNameImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.appointmentinvitee.response)
    public var response : AppointmentParticipantResponse {
        get { try! _default.get_ResponseImpl() }
        set { try! _default.put_ResponseImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.appointmentinvitee.role)
    public var role : AppointmentParticipantRole {
        get { try! _default.get_RoleImpl() }
        set { try! _default.put_RoleImpl(newValue) }
    }

    deinit {
        _IAppointmentParticipant = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.appointmentorganizer)
public final class AppointmentOrganizer : WinRTClass, IAppointmentParticipant {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel_Appointments.IAppointmentParticipant
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CAppointments_CIAppointmentParticipant
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CAppointments_CIAppointmentParticipant>?) -> AppointmentOrganizer? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    override public init() {
        super.init(try! RoActivateInstance(HString("Windows.ApplicationModel.Appointments.AppointmentOrganizer")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.appointmentorganizer.address)
    public var address : String {
        get { try! _default.get_AddressImpl() }
        set { try! _default.put_AddressImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.appointmentorganizer.displayname)
    public var displayName : String {
        get { try! _default.get_DisplayNameImpl() }
        set { try! _default.put_DisplayNameImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.appointmentrecurrence)
public final class AppointmentRecurrence : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel_Appointments.IAppointmentRecurrence
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CAppointments_CIAppointmentRecurrence
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CAppointments_CIAppointmentRecurrence>?) -> AppointmentRecurrence? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public init() {
        super.init(try! RoActivateInstance(HString("Windows.ApplicationModel.Appointments.AppointmentRecurrence")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.appointmentrecurrence.day)
    public var day : UInt32 {
        get { try! _default.get_DayImpl() }
        set { try! _default.put_DayImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.appointmentrecurrence.daysofweek)
    public var daysOfWeek : AppointmentDaysOfWeek {
        get { try! _default.get_DaysOfWeekImpl() }
        set { try! _default.put_DaysOfWeekImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.appointmentrecurrence.interval)
    public var interval : UInt32 {
        get { try! _default.get_IntervalImpl() }
        set { try! _default.put_IntervalImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.appointmentrecurrence.month)
    public var month : UInt32 {
        get { try! _default.get_MonthImpl() }
        set { try! _default.put_MonthImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.appointmentrecurrence.occurrences)
    public var occurrences : UInt32? {
        get { try! _default.get_OccurrencesImpl() }
        set { try! _default.put_OccurrencesImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.appointmentrecurrence.unit)
    public var unit : AppointmentRecurrenceUnit {
        get { try! _default.get_UnitImpl() }
        set { try! _default.put_UnitImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.appointmentrecurrence.until)
    public var until : WindowsFoundation.DateTime? {
        get { try! _default.get_UntilImpl() }
        set { try! _default.put_UntilImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.appointmentrecurrence.weekofmonth)
    public var weekOfMonth : AppointmentWeekOfMonth {
        get { try! _default.get_WeekOfMonthImpl() }
        set { try! _default.put_WeekOfMonthImpl(newValue) }
    }

    private lazy var _IAppointmentRecurrence2: __ABI_Windows_ApplicationModel_Appointments.IAppointmentRecurrence2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.appointmentrecurrence.recurrencetype)
    public var recurrenceType : RecurrenceType {
        get { try! _IAppointmentRecurrence2.get_RecurrenceTypeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.appointmentrecurrence.timezone)
    public var timeZone : String {
        get { try! _IAppointmentRecurrence2.get_TimeZoneImpl() }
        set { try! _IAppointmentRecurrence2.put_TimeZoneImpl(newValue) }
    }

    private lazy var _IAppointmentRecurrence3: __ABI_Windows_ApplicationModel_Appointments.IAppointmentRecurrence3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.appointmentrecurrence.calendaridentifier)
    public var calendarIdentifier : String {
        get { try! _IAppointmentRecurrence3.get_CalendarIdentifierImpl() }
    }

    deinit {
        _default = nil
        _IAppointmentRecurrence2 = nil
        _IAppointmentRecurrence3 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.iappointmentparticipant)
public protocol IAppointmentParticipant : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.iappointmentparticipant.address)
    var address: String { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appointments.iappointmentparticipant.displayname)
    var displayName: String { get set }
}

extension IAppointmentParticipant {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_ApplicationModel_Appointments.IAppointmentParticipantWrapper.IID:
                let wrapper = __ABI_Windows_ApplicationModel_Appointments.IAppointmentParticipantWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIAppointmentParticipant = any IAppointmentParticipant

extension UWP.AppointmentBusyStatus {
    public static var busy : UWP.AppointmentBusyStatus {
        __x_ABI_CWindows_CApplicationModel_CAppointments_CAppointmentBusyStatus_Busy
    }
    public static var tentative : UWP.AppointmentBusyStatus {
        __x_ABI_CWindows_CApplicationModel_CAppointments_CAppointmentBusyStatus_Tentative
    }
    public static var free : UWP.AppointmentBusyStatus {
        __x_ABI_CWindows_CApplicationModel_CAppointments_CAppointmentBusyStatus_Free
    }
    public static var outOfOffice : UWP.AppointmentBusyStatus {
        __x_ABI_CWindows_CApplicationModel_CAppointments_CAppointmentBusyStatus_OutOfOffice
    }
    public static var workingElsewhere : UWP.AppointmentBusyStatus {
        __x_ABI_CWindows_CApplicationModel_CAppointments_CAppointmentBusyStatus_WorkingElsewhere
    }
}
extension UWP.AppointmentBusyStatus: @retroactive Hashable, @retroactive Codable {}

extension UWP.AppointmentDaysOfWeek {
    public static var none : UWP.AppointmentDaysOfWeek {
        __x_ABI_CWindows_CApplicationModel_CAppointments_CAppointmentDaysOfWeek_None
    }
    public static var sunday : UWP.AppointmentDaysOfWeek {
        __x_ABI_CWindows_CApplicationModel_CAppointments_CAppointmentDaysOfWeek_Sunday
    }
    public static var monday : UWP.AppointmentDaysOfWeek {
        __x_ABI_CWindows_CApplicationModel_CAppointments_CAppointmentDaysOfWeek_Monday
    }
    public static var tuesday : UWP.AppointmentDaysOfWeek {
        __x_ABI_CWindows_CApplicationModel_CAppointments_CAppointmentDaysOfWeek_Tuesday
    }
    public static var wednesday : UWP.AppointmentDaysOfWeek {
        __x_ABI_CWindows_CApplicationModel_CAppointments_CAppointmentDaysOfWeek_Wednesday
    }
    public static var thursday : UWP.AppointmentDaysOfWeek {
        __x_ABI_CWindows_CApplicationModel_CAppointments_CAppointmentDaysOfWeek_Thursday
    }
    public static var friday : UWP.AppointmentDaysOfWeek {
        __x_ABI_CWindows_CApplicationModel_CAppointments_CAppointmentDaysOfWeek_Friday
    }
    public static var saturday : UWP.AppointmentDaysOfWeek {
        __x_ABI_CWindows_CApplicationModel_CAppointments_CAppointmentDaysOfWeek_Saturday
    }
}
extension UWP.AppointmentDaysOfWeek: @retroactive Hashable, @retroactive Codable {}

extension UWP.AppointmentDetailsKind {
    public static var plainText : UWP.AppointmentDetailsKind {
        __x_ABI_CWindows_CApplicationModel_CAppointments_CAppointmentDetailsKind_PlainText
    }
    public static var html : UWP.AppointmentDetailsKind {
        __x_ABI_CWindows_CApplicationModel_CAppointments_CAppointmentDetailsKind_Html
    }
}
extension UWP.AppointmentDetailsKind: @retroactive Hashable, @retroactive Codable {}

extension UWP.AppointmentParticipantResponse {
    public static var none : UWP.AppointmentParticipantResponse {
        __x_ABI_CWindows_CApplicationModel_CAppointments_CAppointmentParticipantResponse_None
    }
    public static var tentative : UWP.AppointmentParticipantResponse {
        __x_ABI_CWindows_CApplicationModel_CAppointments_CAppointmentParticipantResponse_Tentative
    }
    public static var accepted : UWP.AppointmentParticipantResponse {
        __x_ABI_CWindows_CApplicationModel_CAppointments_CAppointmentParticipantResponse_Accepted
    }
    public static var declined : UWP.AppointmentParticipantResponse {
        __x_ABI_CWindows_CApplicationModel_CAppointments_CAppointmentParticipantResponse_Declined
    }
    public static var unknown : UWP.AppointmentParticipantResponse {
        __x_ABI_CWindows_CApplicationModel_CAppointments_CAppointmentParticipantResponse_Unknown
    }
}
extension UWP.AppointmentParticipantResponse: @retroactive Hashable, @retroactive Codable {}

extension UWP.AppointmentParticipantRole {
    public static var requiredAttendee : UWP.AppointmentParticipantRole {
        __x_ABI_CWindows_CApplicationModel_CAppointments_CAppointmentParticipantRole_RequiredAttendee
    }
    public static var optionalAttendee : UWP.AppointmentParticipantRole {
        __x_ABI_CWindows_CApplicationModel_CAppointments_CAppointmentParticipantRole_OptionalAttendee
    }
    public static var resource : UWP.AppointmentParticipantRole {
        __x_ABI_CWindows_CApplicationModel_CAppointments_CAppointmentParticipantRole_Resource
    }
}
extension UWP.AppointmentParticipantRole: @retroactive Hashable, @retroactive Codable {}

extension UWP.AppointmentRecurrenceUnit {
    public static var daily : UWP.AppointmentRecurrenceUnit {
        __x_ABI_CWindows_CApplicationModel_CAppointments_CAppointmentRecurrenceUnit_Daily
    }
    public static var weekly : UWP.AppointmentRecurrenceUnit {
        __x_ABI_CWindows_CApplicationModel_CAppointments_CAppointmentRecurrenceUnit_Weekly
    }
    public static var monthly : UWP.AppointmentRecurrenceUnit {
        __x_ABI_CWindows_CApplicationModel_CAppointments_CAppointmentRecurrenceUnit_Monthly
    }
    public static var monthlyOnDay : UWP.AppointmentRecurrenceUnit {
        __x_ABI_CWindows_CApplicationModel_CAppointments_CAppointmentRecurrenceUnit_MonthlyOnDay
    }
    public static var yearly : UWP.AppointmentRecurrenceUnit {
        __x_ABI_CWindows_CApplicationModel_CAppointments_CAppointmentRecurrenceUnit_Yearly
    }
    public static var yearlyOnDay : UWP.AppointmentRecurrenceUnit {
        __x_ABI_CWindows_CApplicationModel_CAppointments_CAppointmentRecurrenceUnit_YearlyOnDay
    }
}
extension UWP.AppointmentRecurrenceUnit: @retroactive Hashable, @retroactive Codable {}

extension UWP.AppointmentSensitivity {
    public static var `public` : UWP.AppointmentSensitivity {
        __x_ABI_CWindows_CApplicationModel_CAppointments_CAppointmentSensitivity_Public
    }
    public static var `private` : UWP.AppointmentSensitivity {
        __x_ABI_CWindows_CApplicationModel_CAppointments_CAppointmentSensitivity_Private
    }
}
extension UWP.AppointmentSensitivity: @retroactive Hashable, @retroactive Codable {}

extension UWP.AppointmentWeekOfMonth {
    public static var first : UWP.AppointmentWeekOfMonth {
        __x_ABI_CWindows_CApplicationModel_CAppointments_CAppointmentWeekOfMonth_First
    }
    public static var second : UWP.AppointmentWeekOfMonth {
        __x_ABI_CWindows_CApplicationModel_CAppointments_CAppointmentWeekOfMonth_Second
    }
    public static var third : UWP.AppointmentWeekOfMonth {
        __x_ABI_CWindows_CApplicationModel_CAppointments_CAppointmentWeekOfMonth_Third
    }
    public static var fourth : UWP.AppointmentWeekOfMonth {
        __x_ABI_CWindows_CApplicationModel_CAppointments_CAppointmentWeekOfMonth_Fourth
    }
    public static var last : UWP.AppointmentWeekOfMonth {
        __x_ABI_CWindows_CApplicationModel_CAppointments_CAppointmentWeekOfMonth_Last
    }
}
extension UWP.AppointmentWeekOfMonth: @retroactive Hashable, @retroactive Codable {}

extension UWP.RecurrenceType {
    public static var master : UWP.RecurrenceType {
        __x_ABI_CWindows_CApplicationModel_CAppointments_CRecurrenceType_Master
    }
    public static var instance : UWP.RecurrenceType {
        __x_ABI_CWindows_CApplicationModel_CAppointments_CRecurrenceType_Instance
    }
    public static var exceptionInstance : UWP.RecurrenceType {
        __x_ABI_CWindows_CApplicationModel_CAppointments_CRecurrenceType_ExceptionInstance
    }
}
extension UWP.RecurrenceType: @retroactive Hashable, @retroactive Codable {}

