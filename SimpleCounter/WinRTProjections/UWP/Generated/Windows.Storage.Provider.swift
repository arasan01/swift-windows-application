// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.provider.cachedfiletarget)
public typealias CachedFileTarget = __x_ABI_CWindows_CStorage_CProvider_CCachedFileTarget
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.provider.fileupdatestatus)
public typealias FileUpdateStatus = __x_ABI_CWindows_CStorage_CProvider_CFileUpdateStatus
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.provider.uistatus)
public typealias UIStatus = __x_ABI_CWindows_CStorage_CProvider_CUIStatus
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.provider.cachedfileupdaterui)
public final class CachedFileUpdaterUI : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Storage_Provider.ICachedFileUpdaterUI
    private typealias CABI = __x_ABI_CWindows_CStorage_CProvider_CICachedFileUpdaterUI
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CStorage_CProvider_CICachedFileUpdaterUI>?) -> CachedFileUpdaterUI? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.provider.cachedfileupdaterui.title)
    public var title : String {
        get { try! _default.get_TitleImpl() }
        set { try! _default.put_TitleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.provider.cachedfileupdaterui.uistatus)
    public var uiStatus : UIStatus {
        get { try! _default.get_UIStatusImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.provider.cachedfileupdaterui.updatetarget)
    public var updateTarget : CachedFileTarget {
        get { try! _default.get_UpdateTargetImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.provider.cachedfileupdaterui.fileupdaterequested)
    public lazy var fileUpdateRequested : Event<TypedEventHandler<CachedFileUpdaterUI?, FileUpdateRequestedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_FileUpdateRequestedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_FileUpdateRequestedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.provider.cachedfileupdaterui.uirequested)
    public lazy var uiRequested : Event<TypedEventHandler<CachedFileUpdaterUI?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_UIRequestedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_UIRequestedImpl($0)
       }
      )
    }()

    private lazy var _ICachedFileUpdaterUI2: __ABI_Windows_Storage_Provider.ICachedFileUpdaterUI2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.provider.cachedfileupdaterui.getdeferral)
    public func getDeferral() throws -> FileUpdateRequestDeferral! {
        try _ICachedFileUpdaterUI2.GetDeferralImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.provider.cachedfileupdaterui.updaterequest)
    public var updateRequest : FileUpdateRequest! {
        get { try! _ICachedFileUpdaterUI2.get_UpdateRequestImpl() }
    }

    deinit {
        _default = nil
        _ICachedFileUpdaterUI2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.provider.fileupdaterequest)
public final class FileUpdateRequest : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Storage_Provider.IFileUpdateRequest
    private typealias CABI = __x_ABI_CWindows_CStorage_CProvider_CIFileUpdateRequest
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CStorage_CProvider_CIFileUpdateRequest>?) -> FileUpdateRequest? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.provider.fileupdaterequest.getdeferral)
    public func getDeferral() throws -> FileUpdateRequestDeferral! {
        try _default.GetDeferralImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.provider.fileupdaterequest.updatelocalfile)
    public func updateLocalFile(_ value: UWP.AnyIStorageFile!) throws {
        try _default.UpdateLocalFileImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.provider.fileupdaterequest.contentid)
    public var contentId : String {
        get { try! _default.get_ContentIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.provider.fileupdaterequest.file)
    public var file : UWP.StorageFile! {
        get { try! _default.get_FileImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.provider.fileupdaterequest.status)
    public var status : FileUpdateStatus {
        get { try! _default.get_StatusImpl() }
        set { try! _default.put_StatusImpl(newValue) }
    }

    private lazy var _IFileUpdateRequest2: __ABI_Windows_Storage_Provider.IFileUpdateRequest2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.provider.fileupdaterequest.userinputneededmessage)
    public var userInputNeededMessage : String {
        get { try! _IFileUpdateRequest2.get_UserInputNeededMessageImpl() }
        set { try! _IFileUpdateRequest2.put_UserInputNeededMessageImpl(newValue) }
    }

    deinit {
        _default = nil
        _IFileUpdateRequest2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.provider.fileupdaterequestdeferral)
public final class FileUpdateRequestDeferral : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Storage_Provider.IFileUpdateRequestDeferral
    private typealias CABI = __x_ABI_CWindows_CStorage_CProvider_CIFileUpdateRequestDeferral
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CStorage_CProvider_CIFileUpdateRequestDeferral>?) -> FileUpdateRequestDeferral? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.provider.fileupdaterequestdeferral.complete)
    public func complete() throws {
        try _default.CompleteImpl()
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.provider.fileupdaterequestedeventargs)
public final class FileUpdateRequestedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Storage_Provider.IFileUpdateRequestedEventArgs
    private typealias CABI = __x_ABI_CWindows_CStorage_CProvider_CIFileUpdateRequestedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CStorage_CProvider_CIFileUpdateRequestedEventArgs>?) -> FileUpdateRequestedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.provider.fileupdaterequestedeventargs.request)
    public var request : FileUpdateRequest! {
        get { try! _default.get_RequestImpl() }
    }

    deinit {
        _default = nil
    }
}

extension UWP.CachedFileTarget {
    public static var local : UWP.CachedFileTarget {
        __x_ABI_CWindows_CStorage_CProvider_CCachedFileTarget_Local
    }
    public static var remote : UWP.CachedFileTarget {
        __x_ABI_CWindows_CStorage_CProvider_CCachedFileTarget_Remote
    }
}
extension UWP.CachedFileTarget: @retroactive Hashable, @retroactive Codable {}

extension UWP.FileUpdateStatus {
    public static var incomplete : UWP.FileUpdateStatus {
        __x_ABI_CWindows_CStorage_CProvider_CFileUpdateStatus_Incomplete
    }
    public static var complete : UWP.FileUpdateStatus {
        __x_ABI_CWindows_CStorage_CProvider_CFileUpdateStatus_Complete
    }
    public static var userInputNeeded : UWP.FileUpdateStatus {
        __x_ABI_CWindows_CStorage_CProvider_CFileUpdateStatus_UserInputNeeded
    }
    public static var currentlyUnavailable : UWP.FileUpdateStatus {
        __x_ABI_CWindows_CStorage_CProvider_CFileUpdateStatus_CurrentlyUnavailable
    }
    public static var failed : UWP.FileUpdateStatus {
        __x_ABI_CWindows_CStorage_CProvider_CFileUpdateStatus_Failed
    }
    public static var completeAndRenamed : UWP.FileUpdateStatus {
        __x_ABI_CWindows_CStorage_CProvider_CFileUpdateStatus_CompleteAndRenamed
    }
}
extension UWP.FileUpdateStatus: @retroactive Hashable, @retroactive Codable {}

extension UWP.UIStatus {
    public static var unavailable : UWP.UIStatus {
        __x_ABI_CWindows_CStorage_CProvider_CUIStatus_Unavailable
    }
    public static var hidden : UWP.UIStatus {
        __x_ABI_CWindows_CStorage_CProvider_CUIStatus_Hidden
    }
    public static var visible : UWP.UIStatus {
        __x_ABI_CWindows_CStorage_CProvider_CUIStatus_Visible
    }
    public static var complete : UWP.UIStatus {
        __x_ABI_CWindows_CStorage_CProvider_CUIStatus_Complete
    }
}
extension UWP.UIStatus: @retroactive Hashable, @retroactive Codable {}

