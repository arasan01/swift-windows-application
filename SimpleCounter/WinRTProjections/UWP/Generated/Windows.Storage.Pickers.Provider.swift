// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pickers.provider.addfileresult)
public typealias AddFileResult = __x_ABI_CWindows_CStorage_CPickers_CProvider_CAddFileResult
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pickers.provider.fileselectionmode)
public typealias FileSelectionMode = __x_ABI_CWindows_CStorage_CPickers_CProvider_CFileSelectionMode
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pickers.provider.setfilenameresult)
public typealias SetFileNameResult = __x_ABI_CWindows_CStorage_CPickers_CProvider_CSetFileNameResult
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pickers.provider.fileopenpickerui)
public final class FileOpenPickerUI : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Storage_Pickers_Provider.IFileOpenPickerUI
    private typealias CABI = __x_ABI_CWindows_CStorage_CPickers_CProvider_CIFileOpenPickerUI
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CStorage_CPickers_CProvider_CIFileOpenPickerUI>?) -> FileOpenPickerUI? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pickers.provider.fileopenpickerui.addfile)
    public func addFile(_ id: String, _ file: UWP.AnyIStorageFile!) throws -> AddFileResult {
        try _default.AddFileImpl(id, file)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pickers.provider.fileopenpickerui.removefile)
    public func removeFile(_ id: String) throws {
        try _default.RemoveFileImpl(id)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pickers.provider.fileopenpickerui.containsfile)
    public func containsFile(_ id: String) throws -> Bool {
        try _default.ContainsFileImpl(id)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pickers.provider.fileopenpickerui.canaddfile)
    public func canAddFile(_ file: UWP.AnyIStorageFile!) throws -> Bool {
        try _default.CanAddFileImpl(file)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pickers.provider.fileopenpickerui.allowedfiletypes)
    public var allowedFileTypes : WindowsFoundation.AnyIVectorView<String>! {
        get { try! _default.get_AllowedFileTypesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pickers.provider.fileopenpickerui.selectionmode)
    public var selectionMode : FileSelectionMode {
        get { try! _default.get_SelectionModeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pickers.provider.fileopenpickerui.settingsidentifier)
    public var settingsIdentifier : String {
        get { try! _default.get_SettingsIdentifierImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pickers.provider.fileopenpickerui.title)
    public var title : String {
        get { try! _default.get_TitleImpl() }
        set { try! _default.put_TitleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pickers.provider.fileopenpickerui.closing)
    public lazy var closing : Event<TypedEventHandler<FileOpenPickerUI?, PickerClosingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ClosingImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ClosingImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pickers.provider.fileopenpickerui.fileremoved)
    public lazy var fileRemoved : Event<TypedEventHandler<FileOpenPickerUI?, FileRemovedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_FileRemovedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_FileRemovedImpl($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pickers.provider.fileremovedeventargs)
public final class FileRemovedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Storage_Pickers_Provider.IFileRemovedEventArgs
    private typealias CABI = __x_ABI_CWindows_CStorage_CPickers_CProvider_CIFileRemovedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CStorage_CPickers_CProvider_CIFileRemovedEventArgs>?) -> FileRemovedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pickers.provider.fileremovedeventargs.id)
    public var id : String {
        get { try! _default.get_IdImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pickers.provider.filesavepickerui)
public final class FileSavePickerUI : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Storage_Pickers_Provider.IFileSavePickerUI
    private typealias CABI = __x_ABI_CWindows_CStorage_CPickers_CProvider_CIFileSavePickerUI
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CStorage_CPickers_CProvider_CIFileSavePickerUI>?) -> FileSavePickerUI? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pickers.provider.filesavepickerui.trysetfilename)
    public func trySetFileName(_ value: String) throws -> SetFileNameResult {
        try _default.TrySetFileNameImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pickers.provider.filesavepickerui.allowedfiletypes)
    public var allowedFileTypes : WindowsFoundation.AnyIVectorView<String>! {
        get { try! _default.get_AllowedFileTypesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pickers.provider.filesavepickerui.filename)
    public var fileName : String {
        get { try! _default.get_FileNameImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pickers.provider.filesavepickerui.settingsidentifier)
    public var settingsIdentifier : String {
        get { try! _default.get_SettingsIdentifierImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pickers.provider.filesavepickerui.title)
    public var title : String {
        get { try! _default.get_TitleImpl() }
        set { try! _default.put_TitleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pickers.provider.filesavepickerui.filenamechanged)
    public lazy var fileNameChanged : Event<TypedEventHandler<FileSavePickerUI?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_FileNameChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_FileNameChangedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pickers.provider.filesavepickerui.targetfilerequested)
    public lazy var targetFileRequested : Event<TypedEventHandler<FileSavePickerUI?, TargetFileRequestedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_TargetFileRequestedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_TargetFileRequestedImpl($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pickers.provider.pickerclosingdeferral)
public final class PickerClosingDeferral : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Storage_Pickers_Provider.IPickerClosingDeferral
    private typealias CABI = __x_ABI_CWindows_CStorage_CPickers_CProvider_CIPickerClosingDeferral
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CStorage_CPickers_CProvider_CIPickerClosingDeferral>?) -> PickerClosingDeferral? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pickers.provider.pickerclosingdeferral.complete)
    public func complete() throws {
        try _default.CompleteImpl()
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pickers.provider.pickerclosingeventargs)
public final class PickerClosingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Storage_Pickers_Provider.IPickerClosingEventArgs
    private typealias CABI = __x_ABI_CWindows_CStorage_CPickers_CProvider_CIPickerClosingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CStorage_CPickers_CProvider_CIPickerClosingEventArgs>?) -> PickerClosingEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pickers.provider.pickerclosingeventargs.closingoperation)
    public var closingOperation : PickerClosingOperation! {
        get { try! _default.get_ClosingOperationImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pickers.provider.pickerclosingeventargs.iscanceled)
    public var isCanceled : Bool {
        get { try! _default.get_IsCanceledImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pickers.provider.pickerclosingoperation)
public final class PickerClosingOperation : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Storage_Pickers_Provider.IPickerClosingOperation
    private typealias CABI = __x_ABI_CWindows_CStorage_CPickers_CProvider_CIPickerClosingOperation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CStorage_CPickers_CProvider_CIPickerClosingOperation>?) -> PickerClosingOperation? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pickers.provider.pickerclosingoperation.getdeferral)
    public func getDeferral() throws -> PickerClosingDeferral! {
        try _default.GetDeferralImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pickers.provider.pickerclosingoperation.deadline)
    public var deadline : WindowsFoundation.DateTime {
        get { try! _default.get_DeadlineImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pickers.provider.targetfilerequest)
public final class TargetFileRequest : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Storage_Pickers_Provider.ITargetFileRequest
    private typealias CABI = __x_ABI_CWindows_CStorage_CPickers_CProvider_CITargetFileRequest
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CStorage_CPickers_CProvider_CITargetFileRequest>?) -> TargetFileRequest? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pickers.provider.targetfilerequest.getdeferral)
    public func getDeferral() throws -> TargetFileRequestDeferral! {
        try _default.GetDeferralImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pickers.provider.targetfilerequest.targetfile)
    public var targetFile : UWP.AnyIStorageFile! {
        get { try! _default.get_TargetFileImpl() }
        set { try! _default.put_TargetFileImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pickers.provider.targetfilerequestdeferral)
public final class TargetFileRequestDeferral : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Storage_Pickers_Provider.ITargetFileRequestDeferral
    private typealias CABI = __x_ABI_CWindows_CStorage_CPickers_CProvider_CITargetFileRequestDeferral
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CStorage_CPickers_CProvider_CITargetFileRequestDeferral>?) -> TargetFileRequestDeferral? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pickers.provider.targetfilerequestdeferral.complete)
    public func complete() throws {
        try _default.CompleteImpl()
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pickers.provider.targetfilerequestedeventargs)
public final class TargetFileRequestedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Storage_Pickers_Provider.ITargetFileRequestedEventArgs
    private typealias CABI = __x_ABI_CWindows_CStorage_CPickers_CProvider_CITargetFileRequestedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CStorage_CPickers_CProvider_CITargetFileRequestedEventArgs>?) -> TargetFileRequestedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.pickers.provider.targetfilerequestedeventargs.request)
    public var request : TargetFileRequest! {
        get { try! _default.get_RequestImpl() }
    }

    deinit {
        _default = nil
    }
}

extension UWP.AddFileResult {
    public static var added : UWP.AddFileResult {
        __x_ABI_CWindows_CStorage_CPickers_CProvider_CAddFileResult_Added
    }
    public static var alreadyAdded : UWP.AddFileResult {
        __x_ABI_CWindows_CStorage_CPickers_CProvider_CAddFileResult_AlreadyAdded
    }
    public static var notAllowed : UWP.AddFileResult {
        __x_ABI_CWindows_CStorage_CPickers_CProvider_CAddFileResult_NotAllowed
    }
    public static var unavailable : UWP.AddFileResult {
        __x_ABI_CWindows_CStorage_CPickers_CProvider_CAddFileResult_Unavailable
    }
}
extension UWP.AddFileResult: @retroactive Hashable, @retroactive Codable {}

extension UWP.FileSelectionMode {
    public static var single : UWP.FileSelectionMode {
        __x_ABI_CWindows_CStorage_CPickers_CProvider_CFileSelectionMode_Single
    }
    public static var multiple : UWP.FileSelectionMode {
        __x_ABI_CWindows_CStorage_CPickers_CProvider_CFileSelectionMode_Multiple
    }
}
extension UWP.FileSelectionMode: @retroactive Hashable, @retroactive Codable {}

extension UWP.SetFileNameResult {
    public static var succeeded : UWP.SetFileNameResult {
        __x_ABI_CWindows_CStorage_CPickers_CProvider_CSetFileNameResult_Succeeded
    }
    public static var notAllowed : UWP.SetFileNameResult {
        __x_ABI_CWindows_CStorage_CPickers_CProvider_CSetFileNameResult_NotAllowed
    }
    public static var unavailable : UWP.SetFileNameResult {
        __x_ABI_CWindows_CStorage_CPickers_CProvider_CSetFileNameResult_Unavailable
    }
}
extension UWP.SetFileNameResult: @retroactive Hashable, @retroactive Codable {}

