// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.calls.lockscreencallendcalldeferral)
public final class LockScreenCallEndCallDeferral : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel_Calls.ILockScreenCallEndCallDeferral
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CCalls_CILockScreenCallEndCallDeferral
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CCalls_CILockScreenCallEndCallDeferral>?) -> LockScreenCallEndCallDeferral? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.calls.lockscreencallendcalldeferral.complete)
    public func complete() throws {
        try _default.CompleteImpl()
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.calls.lockscreencallendrequestedeventargs)
public final class LockScreenCallEndRequestedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel_Calls.ILockScreenCallEndRequestedEventArgs
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CCalls_CILockScreenCallEndRequestedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CCalls_CILockScreenCallEndRequestedEventArgs>?) -> LockScreenCallEndRequestedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.calls.lockscreencallendrequestedeventargs.getdeferral)
    public func getDeferral() throws -> LockScreenCallEndCallDeferral! {
        try _default.GetDeferralImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.calls.lockscreencallendrequestedeventargs.deadline)
    public var deadline : WindowsFoundation.DateTime {
        get { try! _default.get_DeadlineImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.calls.lockscreencallui)
public final class LockScreenCallUI : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel_Calls.ILockScreenCallUI
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CCalls_CILockScreenCallUI
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CCalls_CILockScreenCallUI>?) -> LockScreenCallUI? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.calls.lockscreencallui.dismiss)
    public func dismiss() throws {
        try _default.DismissImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.calls.lockscreencallui.calltitle)
    public var callTitle : String {
        get { try! _default.get_CallTitleImpl() }
        set { try! _default.put_CallTitleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.calls.lockscreencallui.closed)
    public lazy var closed : Event<TypedEventHandler<LockScreenCallUI?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ClosedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ClosedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.calls.lockscreencallui.endrequested)
    public lazy var endRequested : Event<TypedEventHandler<LockScreenCallUI?, LockScreenCallEndRequestedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_EndRequestedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_EndRequestedImpl($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

