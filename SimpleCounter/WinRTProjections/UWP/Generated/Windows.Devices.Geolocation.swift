// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.devices.geolocation.altitudereferencesystem)
public typealias AltitudeReferenceSystem = __x_ABI_CWindows_CDevices_CGeolocation_CAltitudeReferenceSystem
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.devices.geolocation.geoshapetype)
public typealias GeoshapeType = __x_ABI_CWindows_CDevices_CGeolocation_CGeoshapeType
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.devices.geolocation.geopoint)
public final class Geopoint : WinRTClass, IGeoshape {
    private typealias SwiftABI = __ABI_Windows_Devices_Geolocation.IGeopoint
    private typealias CABI = __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint>?) -> Geopoint? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _IGeopointFactory: __ABI_Windows_Devices_Geolocation.IGeopointFactory = try! RoGetActivationFactory(HString("Windows.Devices.Geolocation.Geopoint"))
    public init(_ position: BasicGeoposition) {
        super.init(try! Self._IGeopointFactory.CreateImpl(position))
    }

    public init(_ position: BasicGeoposition, _ altitudeReferenceSystem: AltitudeReferenceSystem) {
        super.init(try! Self._IGeopointFactory.CreateWithAltitudeReferenceSystemImpl(position, altitudeReferenceSystem))
    }

    public init(_ position: BasicGeoposition, _ altitudeReferenceSystem: AltitudeReferenceSystem, _ spatialReferenceId: UInt32) {
        super.init(try! Self._IGeopointFactory.CreateWithAltitudeReferenceSystemAndSpatialReferenceIdImpl(position, altitudeReferenceSystem, spatialReferenceId))
    }

    private lazy var _IGeoshape: __ABI_Windows_Devices_Geolocation.IGeoshape! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.devices.geolocation.geopoint.altitudereferencesystem)
    public var altitudeReferenceSystem : AltitudeReferenceSystem {
        get { try! _IGeoshape.get_AltitudeReferenceSystemImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.devices.geolocation.geopoint.geoshapetype)
    public var geoshapeType : GeoshapeType {
        get { try! _IGeoshape.get_GeoshapeTypeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.devices.geolocation.geopoint.spatialreferenceid)
    public var spatialReferenceId : UInt32 {
        get { try! _IGeoshape.get_SpatialReferenceIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.devices.geolocation.geopoint.position)
    public var position : BasicGeoposition {
        get { try! _default.get_PositionImpl() }
    }

    deinit {
        _IGeoshape = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.devices.geolocation.basicgeoposition)
public struct BasicGeoposition: Hashable, Codable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.devices.geolocation.basicgeoposition.latitude)
    public var latitude: Double = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.devices.geolocation.basicgeoposition.longitude)
    public var longitude: Double = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.devices.geolocation.basicgeoposition.altitude)
    public var altitude: Double = 0.0
    public init() {}
    public init(latitude: Double, longitude: Double, altitude: Double) {
        self.latitude = latitude
        self.longitude = longitude
        self.altitude = altitude
    }
    public static func from(abi: __x_ABI_CWindows_CDevices_CGeolocation_CBasicGeoposition) -> BasicGeoposition {
        .init(latitude: abi.Latitude, longitude: abi.Longitude, altitude: abi.Altitude)
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.devices.geolocation.igeoshape)
public protocol IGeoshape : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.devices.geolocation.igeoshape.altitudereferencesystem)
    var altitudeReferenceSystem: UWP.AltitudeReferenceSystem { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.devices.geolocation.igeoshape.geoshapetype)
    var geoshapeType: UWP.GeoshapeType { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.devices.geolocation.igeoshape.spatialreferenceid)
    var spatialReferenceId: UInt32 { get }
}

extension IGeoshape {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Devices_Geolocation.IGeoshapeWrapper.IID:
                let wrapper = __ABI_Windows_Devices_Geolocation.IGeoshapeWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIGeoshape = any IGeoshape

extension UWP.AltitudeReferenceSystem {
    public static var unspecified : UWP.AltitudeReferenceSystem {
        __x_ABI_CWindows_CDevices_CGeolocation_CAltitudeReferenceSystem_Unspecified
    }
    public static var terrain : UWP.AltitudeReferenceSystem {
        __x_ABI_CWindows_CDevices_CGeolocation_CAltitudeReferenceSystem_Terrain
    }
    public static var ellipsoid : UWP.AltitudeReferenceSystem {
        __x_ABI_CWindows_CDevices_CGeolocation_CAltitudeReferenceSystem_Ellipsoid
    }
    public static var geoid : UWP.AltitudeReferenceSystem {
        __x_ABI_CWindows_CDevices_CGeolocation_CAltitudeReferenceSystem_Geoid
    }
    public static var surface : UWP.AltitudeReferenceSystem {
        __x_ABI_CWindows_CDevices_CGeolocation_CAltitudeReferenceSystem_Surface
    }
}
extension UWP.AltitudeReferenceSystem: @retroactive Hashable, @retroactive Codable {}

extension UWP.GeoshapeType {
    public static var geopoint : UWP.GeoshapeType {
        __x_ABI_CWindows_CDevices_CGeolocation_CGeoshapeType_Geopoint
    }
    public static var geocircle : UWP.GeoshapeType {
        __x_ABI_CWindows_CDevices_CGeolocation_CGeoshapeType_Geocircle
    }
    public static var geopath : UWP.GeoshapeType {
        __x_ABI_CWindows_CDevices_CGeolocation_CGeoshapeType_Geopath
    }
    public static var geoboundingBox : UWP.GeoshapeType {
        __x_ABI_CWindows_CDevices_CGeolocation_CGeoshapeType_GeoboundingBox
    }
}
extension UWP.GeoshapeType: @retroactive Hashable, @retroactive Codable {}

