// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

private var IID___x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor: WindowsFoundation.IID {
    .init(Data1: 0x1E3692E4, Data2: 0x4027, Data3: 0x4847, Data4: ( 0xA7,0x0B,0xDF,0x1D,0x9A,0x2A,0x7B,0x04 ))// 1E3692E4-4027-4847-A70B-DF1D9A2A7B04
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2: WindowsFoundation.IID {
    .init(Data1: 0x2E68F1F6, Data2: 0xA448, Data3: 0x497B, Data4: ( 0x88,0x40,0x85,0x08,0x26,0x65,0xAC,0xF9 ))// 2E68F1F6-A448-497B-8840-85082665ACF9
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor3: WindowsFoundation.IID {
    .init(Data1: 0x4D220DA1, Data2: 0x8E83, Data3: 0x44EF, Data4: ( 0x89,0x73,0x2F,0x63,0xE9,0x93,0xF3,0x6B ))// 4D220DA1-8E83-44EF-8973-2F63E993F36B
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorFactory: WindowsFoundation.IID {
    .init(Data1: 0x4A86CE9E, Data2: 0x4CB1, Data3: 0x4380, Data4: ( 0x8E,0x0C,0x83,0x50,0x4B,0x7F,0x5B,0xF3 ))// 4A86CE9E-4CB1-4380-8E0C-83504B7F5BF3
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIAudioTrack: WindowsFoundation.IID {
    .init(Data1: 0xF23B6E77, Data2: 0x3EF7, Data3: 0x40DE, Data4: ( 0xB9,0x43,0x06,0x8B,0x13,0x21,0x70,0x1D ))// F23B6E77-3EF7-40DE-B943-068B1321701D
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xEEDDB9B9, Data2: 0xBB7C, Data3: 0x4112, Data4: ( 0xBF,0x76,0x93,0x84,0x67,0x6F,0x82,0x4B ))// EEDDB9B9-BB7C-4112-BF76-9384676F824B
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo: WindowsFoundation.IID {
    .init(Data1: 0x178BEFF7, Data2: 0xCC39, Data3: 0x44A6, Data4: ( 0xB9,0x51,0x4A,0x56,0x53,0xF0,0x73,0xFA ))// 178BEFF7-CC39-44A6-B951-4A5653F073FA
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIChapterCue: WindowsFoundation.IID {
    .init(Data1: 0x72A98001, Data2: 0xD38A, Data3: 0x4C0A, Data4: ( 0x8F,0xA6,0x75,0xCD,0xDA,0xF4,0x66,0x4C ))// 72A98001-D38A-4C0A-8FA6-75CDDAF4664C
}

private var IID___x_ABI_CWindows_CMedia_CCore_CICodecInfo: WindowsFoundation.IID {
    .init(Data1: 0x51E89F85, Data2: 0xEA97, Data3: 0x499C, Data4: ( 0x86,0xAC,0x4C,0xE5,0xE7,0x3F,0x3A,0x42 ))// 51E89F85-EA97-499C-86AC-4CE5E73F3A42
}

private var IID___x_ABI_CWindows_CMedia_CCore_CICodecQuery: WindowsFoundation.IID {
    .init(Data1: 0x222A953A, Data2: 0xAF61, Data3: 0x4E04, Data4: ( 0x80,0x8A,0xA4,0x63,0x4E,0x2F,0x3A,0xC4 ))// 222A953A-AF61-4E04-808A-A4634E2F3AC4
}

private var IID___x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics: WindowsFoundation.IID {
    .init(Data1: 0xA66AC4F2, Data2: 0x888B, Data3: 0x4224, Data4: ( 0x8C,0xF6,0x2A,0x8D,0x4E,0xB0,0x23,0x82 ))// A66AC4F2-888B-4224-8CF6-2A8D4EB02382
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIDataCue: WindowsFoundation.IID {
    .init(Data1: 0x7C7F676D, Data2: 0x1FBC, Data3: 0x4E2D, Data4: ( 0x9A,0x87,0xEE,0x38,0xBD,0x1D,0xC6,0x37 ))// 7C7F676D-1FBC-4E2D-9A87-EE38BD1DC637
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIDataCue2: WindowsFoundation.IID {
    .init(Data1: 0xBC561B15, Data2: 0x95F2, Data3: 0x49E8, Data4: ( 0x96,0xF1,0x8D,0xD5,0xDA,0xC6,0x8D,0x93 ))// BC561B15-95F2-49E8-96F1-8DD5DAC68D93
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x19918426, Data2: 0xC65B, Data3: 0x46BA, Data4: ( 0x85,0xF8,0x13,0x88,0x05,0x76,0xC9,0x0A ))// 19918426-C65B-46BA-85F8-13880576C90A
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect: WindowsFoundation.IID {
    .init(Data1: 0xAE15EBD2, Data2: 0x0542, Data3: 0x42A9, Data4: ( 0xBC,0x90,0xF2,0x83,0xA2,0x9F,0x46,0xC1 ))// AE15EBD2-0542-42A9-BC90-F283A29F46C1
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition: WindowsFoundation.IID {
    .init(Data1: 0x43DCA081, Data2: 0xB848, Data3: 0x4F33, Data4: ( 0xB7,0x02,0x1F,0xD2,0x62,0x4F,0xB0,0x16 ))// 43DCA081-B848-4F33-B702-1FD2624FB016
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrame: WindowsFoundation.IID {
    .init(Data1: 0x8AB08993, Data2: 0x5DC8, Data3: 0x447B, Data4: ( 0xA2,0x47,0x52,0x70,0xBD,0x80,0x2E,0xCE ))// 8AB08993-5DC8-447B-A247-5270BD802ECE
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControl: WindowsFoundation.IID {
    .init(Data1: 0x55F1A7AE, Data2: 0xD957, Data3: 0x4DC9, Data4: ( 0x9D,0x1C,0x85,0x53,0xA8,0x2A,0x7D,0x99 ))// 55F1A7AE-D957-4DC9-9D1C-8553A82A7D99
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutput: WindowsFoundation.IID {
    .init(Data1: 0x0F57806B, Data2: 0x253B, Data3: 0x4119, Data4: ( 0xBB,0x40,0x3A,0x90,0xE5,0x13,0x84,0xF7 ))// 0F57806B-253B-4119-BB40-3A90E51384F7
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIImageCue: WindowsFoundation.IID {
    .init(Data1: 0x52828282, Data2: 0x367B, Data3: 0x440B, Data4: ( 0x91,0x16,0x3C,0x84,0x57,0x0D,0xD2,0x70 ))// 52828282-367B-440B-9116-3C84570DD270
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x25BC45E1, Data2: 0x9B08, Data3: 0x4C2E, Data4: ( 0xA8,0x55,0x45,0x42,0xF1,0xA7,0x5D,0xEB ))// 25BC45E1-9B08-4C2E-A855-4542F1A75DEB
}

private var IID___x_ABI_CWindows_CMedia_CCore_CILowLightFusionResult: WindowsFoundation.IID {
    .init(Data1: 0x78EDBE35, Data2: 0x27A0, Data3: 0x42E0, Data4: ( 0x9C,0xD3,0x73,0x8D,0x20,0x89,0xDE,0x9C ))// 78EDBE35-27A0-42E0-9CD3-738D2089DE9C
}

private var IID___x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics: WindowsFoundation.IID {
    .init(Data1: 0x5305016D, Data2: 0xC29E, Data3: 0x40E2, Data4: ( 0x87,0xA9,0x9E,0x1F,0xD2,0xF1,0x92,0xF5 ))// 5305016D-C29E-40E2-87A9-9E1FD2F192F5
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIMediaBinder: WindowsFoundation.IID {
    .init(Data1: 0x2B7E40AA, Data2: 0xDE07, Data3: 0x424F, Data4: ( 0x83,0xF1,0xF1,0xDE,0x46,0xC4,0xFA,0x2E ))// 2B7E40AA-DE07-424F-83F1-F1DE46C4FA2E
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xB61CB25A, Data2: 0x1B6D, Data3: 0x4630, Data4: ( 0xA8,0x6D,0x2F,0x08,0x37,0xF7,0x12,0xE5 ))// B61CB25A-1B6D-4630-A86D-2F0837F712E5
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2: WindowsFoundation.IID {
    .init(Data1: 0x0464CCEB, Data2: 0xBB5A, Data3: 0x482F, Data4: ( 0xB8,0xBA,0xF0,0x28,0x4C,0x69,0x65,0x67 ))// 0464CCEB-BB5A-482F-B8BA-F0284C696567
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs3: WindowsFoundation.IID {
    .init(Data1: 0xF8EB475E, Data2: 0x19BE, Data3: 0x44FC, Data4: ( 0xA5,0xED,0x7A,0xBA,0x31,0x50,0x37,0xF9 ))// F8EB475E-19BE-44FC-A5ED-7ABA315037F9
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIMediaCue: WindowsFoundation.IID {
    .init(Data1: 0xC7D15E5D, Data2: 0x59DC, Data3: 0x431F, Data4: ( 0xA0,0xEE,0x27,0x74,0x43,0x23,0xB3,0x6D ))// C7D15E5D-59DC-431F-A0EE-27744323B36D
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xD12F47F7, Data2: 0x5FA4, Data3: 0x4E68, Data4: ( 0x9F,0xE5,0x32,0x16,0x0D,0xCE,0xE5,0x7E ))// D12F47F7-5FA4-4E68-9FE5-32160DCEE57E
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIMediaSource: WindowsFoundation.IID {
    .init(Data1: 0xE7BFB599, Data2: 0xA09D, Data3: 0x4C21, Data4: ( 0xBC,0xDF,0x20,0xAF,0x4F,0x86,0xB3,0xD9 ))// E7BFB599-A09D-4C21-BCDF-20AF4F86B3D9
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIMediaSource2: WindowsFoundation.IID {
    .init(Data1: 0x2EB61048, Data2: 0x655F, Data3: 0x4C37, Data4: ( 0xB8,0x13,0xB4,0xE4,0x5D,0xFA,0x0A,0xBE ))// 2EB61048-655F-4C37-B813-B4E45DFA0ABE
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIMediaSource3: WindowsFoundation.IID {
    .init(Data1: 0xB59F0D9B, Data2: 0x4B6E, Data3: 0x41ED, Data4: ( 0xBB,0xB4,0x7C,0x75,0x09,0xA9,0x94,0xAD ))// B59F0D9B-4B6E-41ED-BBB4-7C7509A994AD
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIMediaSource4: WindowsFoundation.IID {
    .init(Data1: 0xBDAFAD57, Data2: 0x8EFF, Data3: 0x4C63, Data4: ( 0x85,0xA6,0x84,0xDE,0x0A,0xE3,0xE4,0xF2 ))// BDAFAD57-8EFF-4C63-85A6-84DE0AE3E4F2
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIMediaSource5: WindowsFoundation.IID {
    .init(Data1: 0x331A22AE, Data2: 0xED2E, Data3: 0x4A22, Data4: ( 0x94,0xC8,0xB7,0x43,0xA9,0x2B,0x30,0x22 ))// 331A22AE-ED2E-4A22-94C8-B743A92B3022
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection: WindowsFoundation.IID {
    .init(Data1: 0x61E1EA97, Data2: 0x1916, Data3: 0x4810, Data4: ( 0xB7,0xF4,0xB6,0x42,0xBE,0x82,0x95,0x96 ))// 61E1EA97-1916-4810-B7F4-B642BE829596
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionFactory: WindowsFoundation.IID {
    .init(Data1: 0x65B912EB, Data2: 0x80B9, Data3: 0x44F9, Data4: ( 0x9C,0x1E,0xE1,0x20,0xF6,0xD9,0x28,0x38 ))// 65B912EB-80B9-44F9-9C1E-E120F6D92838
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIMediaSourceError: WindowsFoundation.IID {
    .init(Data1: 0x5C0A8965, Data2: 0x37C5, Data3: 0x4E9D, Data4: ( 0x8D,0x21,0x1C,0xDE,0xE9,0x0C,0xEC,0xC6 ))// 5C0A8965-37C5-4E9D-8D21-1CDEE90CECC6
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xFC682CEB, Data2: 0xE281, Data3: 0x477C, Data4: ( 0xA8,0xE0,0x1A,0xCD,0x65,0x41,0x14,0xC8 ))// FC682CEB-E281-477C-A8E0-1ACD654114C8
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x0A30AF82, Data2: 0x9071, Data3: 0x4BAC, Data4: ( 0xBC,0x39,0xCA,0x2A,0x93,0xB7,0x17,0xA9 ))// 0A30AF82-9071-4BAC-BC39-CA2A93B717A9
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics: WindowsFoundation.IID {
    .init(Data1: 0xF77D6FA4, Data2: 0x4652, Data3: 0x410E, Data4: ( 0xB1,0xD8,0xE9,0xA5,0xE2,0x45,0xA4,0x5C ))// F77D6FA4-4652-410E-B1D8-E9A5E245A45C
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics2: WindowsFoundation.IID {
    .init(Data1: 0xEEE161A4, Data2: 0x7F13, Data3: 0x4896, Data4: ( 0xB8,0xCB,0xDF,0x0D,0xE5,0xBC,0xB9,0xF1 ))// EEE161A4-7F13-4896-B8CB-DF0DE5BCB9F1
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics3: WindowsFoundation.IID {
    .init(Data1: 0x453A30D6, Data2: 0x2BEA, Data3: 0x4122, Data4: ( 0x9F,0x73,0xEA,0xCE,0x04,0x52,0x6E,0x35 ))// 453A30D6-2BEA-4122-9F73-EACE04526E35
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics4: WindowsFoundation.IID {
    .init(Data1: 0x281B3BFC, Data2: 0xE50A, Data3: 0x4428, Data4: ( 0xA5,0x00,0x9C,0x4E,0xD9,0x18,0xD3,0xF0 ))// 281B3BFC-E50A-4428-A500-9C4ED918D3F0
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor: WindowsFoundation.IID {
    .init(Data1: 0x80F16E6E, Data2: 0x92F7, Data3: 0x451E, Data4: ( 0x97,0xD2,0xAF,0xD8,0x07,0x42,0xDA,0x70 ))// 80F16E6E-92F7-451E-97D2-AFD80742DA70
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2: WindowsFoundation.IID {
    .init(Data1: 0x5073010F, Data2: 0xE8B2, Data3: 0x4071, Data4: ( 0xB0,0x0B,0xEB,0xF3,0x37,0xA7,0x6B,0x58 ))// 5073010F-E8B2-4071-B00B-EBF337A76B58
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample: WindowsFoundation.IID {
    .init(Data1: 0x5C8DB627, Data2: 0x4B80, Data3: 0x4361, Data4: ( 0x98,0x37,0x6C,0xB7,0x48,0x1A,0xD9,0xD6 ))// 5C8DB627-4B80-4361-9837-6CB7481AD9D6
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample2: WindowsFoundation.IID {
    .init(Data1: 0x45078691, Data2: 0xFCE8, Data3: 0x4746, Data4: ( 0xA1,0xC8,0x10,0xC2,0x5D,0x3D,0x7C,0xD3 ))// 45078691-FCE8-4746-A1C8-10C25D3D7CD3
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties: WindowsFoundation.IID {
    .init(Data1: 0x4EB88292, Data2: 0xECDF, Data3: 0x493E, Data4: ( 0x84,0x1D,0xDD,0x4A,0xDD,0x7C,0xAC,0xA2 ))// 4EB88292-ECDF-493E-841D-DD4ADD7CACA2
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics: WindowsFoundation.IID {
    .init(Data1: 0xDFDF218F, Data2: 0xA6CF, Data3: 0x4579, Data4: ( 0xBE,0x41,0x73,0xDD,0x94,0x1A,0xD9,0x72 ))// DFDF218F-A6CF-4579-BE41-73DD941AD972
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics2: WindowsFoundation.IID {
    .init(Data1: 0x9EFE9521, Data2: 0x6D46, Data3: 0x494C, Data4: ( 0xA2,0xF8,0xD6,0x62,0x92,0x2E,0x2D,0xD7 ))// 9EFE9521-6D46-494C-A2F8-D662922E2DD7
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource: WindowsFoundation.IID {
    .init(Data1: 0x3712D543, Data2: 0x45EB, Data3: 0x4138, Data4: ( 0xAA,0x62,0xC0,0x1E,0x26,0xF3,0x84,0x3F ))// 3712D543-45EB-4138-AA62-C01E26F3843F
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2: WindowsFoundation.IID {
    .init(Data1: 0xEC55D0AD, Data2: 0x2E6A, Data3: 0x4F74, Data4: ( 0xAD,0xBB,0xB5,0x62,0xD1,0x53,0x38,0x49 ))// EC55D0AD-2E6A-4F74-ADBB-B562D1533849
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3: WindowsFoundation.IID {
    .init(Data1: 0x6A2A2746, Data2: 0x3DDD, Data3: 0x4DDF, Data4: ( 0xA1,0x21,0x94,0x04,0x5E,0xCF,0x94,0x40 ))// 6A2A2746-3DDD-4DDF-A121-94045ECF9440
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4: WindowsFoundation.IID {
    .init(Data1: 0x1D0CFCAB, Data2: 0x830D, Data3: 0x417C, Data4: ( 0xA3,0xA9,0x24,0x54,0xFD,0x64,0x15,0xC7 ))// 1D0CFCAB-830D-417C-A3A9-2454FD6415C7
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xCD8C7EB2, Data2: 0x4816, Data3: 0x4E24, Data4: ( 0x88,0xF0,0x49,0x1E,0xF7,0x38,0x64,0x06 ))// CD8C7EB2-4816-4E24-88F0-491EF7386406
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequest: WindowsFoundation.IID {
    .init(Data1: 0x907C00E9, Data2: 0x18A3, Data3: 0x4951, Data4: ( 0x88,0x7A,0x2C,0x1E,0xEB,0xD5,0xC6,0x9E ))// 907C00E9-18A3-4951-887A-2C1EEBD5C69E
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactory: WindowsFoundation.IID {
    .init(Data1: 0xEF77E0D9, Data2: 0xD158, Data3: 0x4B7A, Data4: ( 0x86,0x3F,0x20,0x33,0x42,0xFB,0xFD,0x41 ))// EF77E0D9-D158-4B7A-863F-203342FBFD41
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x9D697B05, Data2: 0xD4F2, Data3: 0x4C7A, Data4: ( 0x9D,0xFE,0x8D,0x6C,0xD0,0xB3,0xEE,0x84 ))// 9D697B05-D4F2-4C7A-9DFE-8D6CD0B3EE84
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest: WindowsFoundation.IID {
    .init(Data1: 0x4DB341A9, Data2: 0x3501, Data3: 0x4D9B, Data4: ( 0x83,0xF9,0x8F,0x23,0x5C,0x82,0x25,0x32 ))// 4DB341A9-3501-4D9B-83F9-8F235C822532
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferral: WindowsFoundation.IID {
    .init(Data1: 0x7895CC02, Data2: 0xF982, Data3: 0x43C8, Data4: ( 0x9D,0x16,0xC6,0x2D,0x99,0x93,0x19,0xBE ))// 7895CC02-F982-43C8-9D16-C62D999319BE
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x10F9BB9E, Data2: 0x71C5, Data3: 0x492F, Data4: ( 0x84,0x7F,0x0D,0xA1,0xF3,0x5E,0x81,0xF8 ))// 10F9BB9E-71C5-492F-847F-0DA1F35E81F8
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xF41468F2, Data2: 0xC274, Data3: 0x4940, Data4: ( 0xA5,0xBB,0x28,0xA5,0x72,0x45,0x2F,0xA7 ))// F41468F2-C274-4940-A5BB-28A572452FA7
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest: WindowsFoundation.IID {
    .init(Data1: 0x2A9093E4, Data2: 0x35C4, Data3: 0x4B1B, Data4: ( 0xA7,0x91,0x0D,0x99,0xDB,0x56,0xDD,0x1D ))// 2A9093E4-35C4-4B1B-A791-0D99DB56DD1D
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferral: WindowsFoundation.IID {
    .init(Data1: 0x3F1356A5, Data2: 0x6340, Data3: 0x4DC4, Data4: ( 0x99,0x10,0x06,0x8E,0xD9,0xF5,0x98,0xF8 ))// 3F1356A5-6340-4DC4-9910-068ED9F598F8
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest: WindowsFoundation.IID {
    .init(Data1: 0x41B8808E, Data2: 0x38A9, Data3: 0x4EC3, Data4: ( 0x9B,0xA0,0xB6,0x9B,0x85,0x50,0x1E,0x90 ))// 41B8808E-38A9-4EC3-9BA0-B69B85501E90
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferral: WindowsFoundation.IID {
    .init(Data1: 0xBEE3D835, Data2: 0xA505, Data3: 0x4F9A, Data4: ( 0xB9,0x43,0x2B,0x8C,0xB1,0xB4,0xBB,0xD9 ))// BEE3D835-A505-4F9A-B943-2B8CB1B4BBD9
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x42202B72, Data2: 0x6EA1, Data3: 0x4677, Data4: ( 0x98,0x1E,0x35,0x0A,0x0D,0xA4,0x12,0xAA ))// 42202B72-6EA1-4677-981E-350A0DA412AA
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIMediaTrack: WindowsFoundation.IID {
    .init(Data1: 0x03E1FAFC, Data2: 0xC931, Data3: 0x491A, Data4: ( 0xB4,0x6B,0xC1,0x0E,0xE8,0xC2,0x56,0xB7 ))// 03E1FAFC-C931-491A-B46B-C10EE8C256B7
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer: WindowsFoundation.IID {
    .init(Data1: 0x0C1AA3E3, Data2: 0xDF8D, Data3: 0x4079, Data4: ( 0xA3,0xFE,0x68,0x49,0x18,0x4B,0x4E,0x2F ))// 0C1AA3E3-DF8D-4079-A3FE-6849184B4E2F
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList: WindowsFoundation.IID {
    .init(Data1: 0x95FAE8E7, Data2: 0xA8E7, Data3: 0x4EBF, Data4: ( 0x89,0x27,0x14,0x5E,0x94,0x0B,0xA5,0x11 ))// 95FAE8E7-A8E7-4EBF-8927-145E940BA511
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIMseStreamSource: WindowsFoundation.IID {
    .init(Data1: 0xB0B4198D, Data2: 0x02F4, Data3: 0x4923, Data4: ( 0x88,0xDD,0x81,0xBC,0x3F,0x36,0x0F,0xFA ))// B0B4198D-02F4-4923-88DD-81BC3F360FFA
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2: WindowsFoundation.IID {
    .init(Data1: 0x66F57D37, Data2: 0xF9E7, Data3: 0x418A, Data4: ( 0x9C,0xDE,0xA0,0x20,0xE9,0x56,0x55,0x2B ))// 66F57D37-F9E7-418A-9CDE-A020E956552B
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceStatics: WindowsFoundation.IID {
    .init(Data1: 0x465C679D, Data2: 0xD570, Data3: 0x43CE, Data4: ( 0xBA,0x21,0x0B,0xFF,0x5F,0x3F,0xBD,0x0A ))// 465C679D-D570-43CE-BA21-0BFF5F3FBD0A
}

private var IID___x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect: WindowsFoundation.IID {
    .init(Data1: 0xC04BA319, Data2: 0xCA41, Data3: 0x4813, Data4: ( 0xBF,0xFD,0x7B,0x08,0xB0,0xED,0x25,0x57 ))// C04BA319-CA41-4813-BFFD-7B08B0ED2557
}

private var IID___x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame: WindowsFoundation.IID {
    .init(Data1: 0xD8B10E4C, Data2: 0x7FD9, Data3: 0x42E1, Data4: ( 0x85,0xEB,0x65,0x72,0xC2,0x97,0xC9,0x87 ))// D8B10E4C-7FD9-42E1-85EB-6572C297C987
}

private var IID___x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame2: WindowsFoundation.IID {
    .init(Data1: 0x2D4E29BE, Data2: 0x061F, Data3: 0x47AE, Data4: ( 0x99,0x15,0x02,0x52,0x4B,0x5F,0x9A,0x5F ))// 2D4E29BE-061F-47AE-9915-02524B5F9A5F
}

private var IID___x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x146B9588, Data2: 0x2851, Data3: 0x45E4, Data4: ( 0xAD,0x55,0x44,0xCF,0x8D,0xF8,0xDB,0x4D ))// 146B9588-2851-45E4-AD55-44CF8DF8DB4D
}

private var IID___x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList: WindowsFoundation.IID {
    .init(Data1: 0x77206F1F, Data2: 0xC34F, Data3: 0x494F, Data4: ( 0x80,0x77,0x2B,0xAD,0x9F,0xF4,0xEC,0xF1 ))// 77206F1F-C34F-494F-8077-2BAD9FF4ECF1
}

private var IID___x_ABI_CWindows_CMedia_CCore_CISpeechCue: WindowsFoundation.IID {
    .init(Data1: 0xAEE254DC, Data2: 0x1725, Data3: 0x4BAD, Data4: ( 0x80,0x43,0xA9,0x84,0x99,0xB0,0x17,0xA2 ))// AEE254DC-1725-4BAD-8043-A98499B017A2
}

private var IID___x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptor: WindowsFoundation.IID {
    .init(Data1: 0x133336BF, Data2: 0x296A, Data3: 0x463E, Data4: ( 0x9F,0xF9,0x01,0xCD,0x25,0x69,0x14,0x08 ))// 133336BF-296A-463E-9FF9-01CD25691408
}

private var IID___x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorFactory: WindowsFoundation.IID {
    .init(Data1: 0xC027DE30, Data2: 0x7362, Data3: 0x4FF9, Data4: ( 0x98,0xB1,0x2D,0xFD,0x0B,0x8D,0x1C,0xAE ))// C027DE30-7362-4FF9-98B1-2DFD0B8D1CAE
}

private var IID___x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack: WindowsFoundation.IID {
    .init(Data1: 0x9E6AED9E, Data2: 0xF67A, Data3: 0x49A9, Data4: ( 0xB3,0x30,0xCF,0x03,0xB0,0xE9,0xCF,0x07 ))// 9E6AED9E-F67A-49A9-B330-CF03B0E9CF07
}

private var IID___x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2: WindowsFoundation.IID {
    .init(Data1: 0x21B4B648, Data2: 0x9F9D, Data3: 0x40BA, Data4: ( 0xA8,0xF3,0x1A,0x92,0x75,0x3A,0xEF,0x0B ))// 21B4B648-9F9D-40BA-A8F3-1A92753AEF0B
}

private var IID___x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError: WindowsFoundation.IID {
    .init(Data1: 0xB3767915, Data2: 0x4114, Data3: 0x4819, Data4: ( 0xB9,0xD9,0xDD,0x76,0x08,0x9E,0x72,0xF8 ))// B3767915-4114-4819-B9D9-DD76089E72F8
}

private var IID___x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFactory: WindowsFoundation.IID {
    .init(Data1: 0x8DD57611, Data2: 0x97B3, Data3: 0x4E1F, Data4: ( 0x85,0x2C,0x0F,0x48,0x2C,0x81,0xAD,0x26 ))// 8DD57611-97B3-4E1F-852C-0F482C81AD26
}

private var IID___x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xA57FC9D1, Data2: 0x6789, Data3: 0x4D4D, Data4: ( 0xB0,0x7F,0x84,0xB4,0xF3,0x1A,0xCB,0x70 ))// A57FC9D1-6789-4D4D-B07F-84B4F31ACB70
}

private var IID___x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackProvider: WindowsFoundation.IID {
    .init(Data1: 0x3B7F2024, Data2: 0xF74E, Data3: 0x4ADE, Data4: ( 0x93,0xC5,0x21,0x9D,0xA0,0x5B,0x68,0x56 ))// 3B7F2024-F74E-4ADE-93C5-219DA05B6856
}

private var IID___x_ABI_CWindows_CMedia_CCore_CITimedTextCue: WindowsFoundation.IID {
    .init(Data1: 0x51C79E51, Data2: 0x3B86, Data3: 0x494D, Data4: ( 0xB3,0x59,0xBB,0x2E,0xA7,0xAC,0xA9,0xA9 ))// 51C79E51-3B86-494D-B359-BB2EA7ACA9A9
}

private var IID___x_ABI_CWindows_CMedia_CCore_CITimedTextLine: WindowsFoundation.IID {
    .init(Data1: 0x978D7CE2, Data2: 0x7308, Data3: 0x4C66, Data4: ( 0xBE,0x50,0x65,0x77,0x72,0x89,0xF5,0xDF ))// 978D7CE2-7308-4C66-BE50-65777289F5DF
}

private var IID___x_ABI_CWindows_CMedia_CCore_CITimedTextRegion: WindowsFoundation.IID {
    .init(Data1: 0x1ED0881F, Data2: 0x8A06, Data3: 0x4222, Data4: ( 0x9F,0x59,0xB2,0x1B,0xF4,0x01,0x24,0xB4 ))// 1ED0881F-8A06-4222-9F59-B21BF40124B4
}

private var IID___x_ABI_CWindows_CMedia_CCore_CITimedTextSource: WindowsFoundation.IID {
    .init(Data1: 0xC4ED9BA6, Data2: 0x101F, Data3: 0x404D, Data4: ( 0xA9,0x49,0x82,0xF3,0x3F,0xCD,0x93,0xB7 ))// C4ED9BA6-101F-404D-A949-82F33FCD93B7
}

private var IID___x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x48907C9C, Data2: 0xDCD8, Data3: 0x4C33, Data4: ( 0x9A,0xD3,0x6C,0xDC,0xE7,0xB1,0xC5,0x66 ))// 48907C9C-DCD8-4C33-9AD3-6CDCE7B1C566
}

private var IID___x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics: WindowsFoundation.IID {
    .init(Data1: 0x7E311853, Data2: 0x9ABA, Data3: 0x4AC4, Data4: ( 0xBB,0x98,0x2F,0xB1,0x76,0xC3,0xBF,0xDD ))// 7E311853-9ABA-4AC4-BB98-2FB176C3BFDD
}

private var IID___x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2: WindowsFoundation.IID {
    .init(Data1: 0xB66B7602, Data2: 0x923E, Data3: 0x43FA, Data4: ( 0x96,0x33,0x58,0x70,0x75,0x81,0x2D,0xB5 ))// B66B7602-923E-43FA-9633-587075812DB5
}

private var IID___x_ABI_CWindows_CMedia_CCore_CITimedTextStyle: WindowsFoundation.IID {
    .init(Data1: 0x1BB2384D, Data2: 0xA825, Data3: 0x40C2, Data4: ( 0xA7,0xF5,0x28,0x1E,0xAE,0xDF,0x3B,0x55 ))// 1BB2384D-A825-40C2-A7F5-281EAEDF3B55
}

private var IID___x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2: WindowsFoundation.IID {
    .init(Data1: 0x655F492D, Data2: 0x6111, Data3: 0x4787, Data4: ( 0x89,0xCC,0x68,0x6F,0xEC,0xE5,0x7E,0x14 ))// 655F492D-6111-4787-89CC-686FECE57E14
}

private var IID___x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat: WindowsFoundation.IID {
    .init(Data1: 0xD713502F, Data2: 0x3261, Data3: 0x4722, Data4: ( 0xA0,0xC2,0xB9,0x37,0xB2,0x39,0x0F,0x14 ))// D713502F-3261-4722-A0C2-B937B2390F14
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect: WindowsFoundation.IID {
    .init(Data1: 0x0808A650, Data2: 0x9698, Data3: 0x4E57, Data4: ( 0x87,0x7B,0xBD,0x7C,0xB2,0xEE,0x0F,0x8A ))// 0808A650-9698-4E57-877B-BD7CB2EE0F8A
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x187EFF28, Data2: 0x67BB, Data3: 0x4713, Data4: ( 0xB9,0x00,0x41,0x68,0xDA,0x16,0x45,0x29 ))// 187EFF28-67BB-4713-B900-4168DA164529
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor: WindowsFoundation.IID {
    .init(Data1: 0x12EE0D55, Data2: 0x9C2B, Data3: 0x4440, Data4: ( 0x80,0x57,0x2C,0x7A,0x90,0xF0,0xCB,0xEC ))// 12EE0D55-9C2B-4440-8057-2C7A90F0CBEC
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor2: WindowsFoundation.IID {
    .init(Data1: 0x8B306E10, Data2: 0x453E, Data3: 0x4088, Data4: ( 0x83,0x2D,0xC3,0x6F,0xA4,0xF9,0x4A,0xF3 ))// 8B306E10-453E-4088-832D-C36FA4F94AF3
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorFactory: WindowsFoundation.IID {
    .init(Data1: 0x494EF6D1, Data2: 0xBB75, Data3: 0x43D2, Data4: ( 0x9E,0x5E,0x7B,0x79,0xA3,0xAF,0xCE,0xD4 ))// 494EF6D1-BB75-43D2-9E5E-7B79A3AFCED4
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIVideoTrack: WindowsFoundation.IID {
    .init(Data1: 0x99F3B7F3, Data2: 0xE298, Data3: 0x4396, Data4: ( 0xBB,0x6A,0xA5,0x1B,0xE6,0xA2,0xA2,0x0A ))// 99F3B7F3-E298-4396-BB6A-A51BE6A2A20A
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x7679E231, Data2: 0x04F9, Data3: 0x4C82, Data4: ( 0xA4,0xEE,0x86,0x02,0xC8,0xBB,0x47,0x54 ))// 7679E231-04F9-4C82-A4EE-8602C8BB4754
}

private var IID___x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfo: WindowsFoundation.IID {
    .init(Data1: 0x4BB534A0, Data2: 0xFC5F, Data3: 0x450D, Data4: ( 0x8F,0xF0,0x77,0x8D,0x59,0x04,0x86,0xDE ))// 4BB534A0-FC5F-450D-8FF0-778D590486DE
}

public enum __ABI_Windows_Media_Core {
    public class IAudioStreamDescriptor: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor }

        internal func get_EncodingPropertiesImpl() throws -> UWP.AudioEncodingProperties? {
            let (encodingProperties) = try ComPtrs.initialize { encodingPropertiesAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_EncodingProperties(pThis, &encodingPropertiesAbi))
                }
            }
            return .from(abi: encodingProperties)
        }

    }

    public class IAudioStreamDescriptor2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2 }

        internal func put_LeadingEncoderPaddingImpl(_ value: UInt32?) throws {
            let valueWrapper = UWP.__x_ABI_C__FIReference_1_UINT32Wrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LeadingEncoderPadding(pThis, _value))
            }
        }

        internal func get_LeadingEncoderPaddingImpl() throws -> UInt32? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_LeadingEncoderPadding(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIReference_1_UINT32Wrapper.unwrapFrom(abi: value)
        }

        internal func put_TrailingEncoderPaddingImpl(_ value: UInt32?) throws {
            let valueWrapper = UWP.__x_ABI_C__FIReference_1_UINT32Wrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TrailingEncoderPadding(pThis, _value))
            }
        }

        internal func get_TrailingEncoderPaddingImpl() throws -> UInt32? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TrailingEncoderPadding(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIReference_1_UINT32Wrapper.unwrapFrom(abi: value)
        }

    }

    public class IAudioStreamDescriptor3: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor3 }

        internal func CopyImpl() throws -> UWP.AudioStreamDescriptor? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor3.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Copy(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IAudioStreamDescriptorFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorFactory }

        internal func CreateImpl(_ encodingProperties: UWP.AudioEncodingProperties?) throws -> IAudioStreamDescriptor {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, RawPointer(encodingProperties), &resultAbi))
                }
            }
            return IAudioStreamDescriptor(result!)
        }

    }

    public class IAudioTrack: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIAudioTrack }

        internal func add_OpenFailedImpl(_ handler: TypedEventHandler<UWP.AudioTrack?, UWP.AudioTrackOpenFailedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CAudioTrack___x_ABI_CWindows__CMedia__CCore__CAudioTrackOpenFailedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIAudioTrack.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_OpenFailed(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_OpenFailedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIAudioTrack.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_OpenFailed(pThis, token))
            }
        }

        internal func GetEncodingPropertiesImpl() throws -> UWP.AudioEncodingProperties? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIAudioTrack.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetEncodingProperties(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_PlaybackItemImpl() throws -> UWP.MediaPlaybackItem? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIAudioTrack.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PlaybackItem(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_NameImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIAudioTrack.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Name(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_SupportInfoImpl() throws -> UWP.AudioTrackSupportInfo? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIAudioTrack.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SupportInfo(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IAudioTrackOpenFailedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgs }

        internal func get_ExtendedErrorImpl() throws -> HRESULT {
            var value: HRESULT = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExtendedError(pThis, &value))
            }
            return value
        }

    }

    public class IAudioTrackSupportInfo: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo }

        internal func get_DecoderStatusImpl() throws -> UWP.MediaDecoderStatus {
            var value: __x_ABI_CWindows_CMedia_CCore_CMediaDecoderStatus = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DecoderStatus(pThis, &value))
            }
            return value
        }

        internal func get_DegradationImpl() throws -> UWP.AudioDecoderDegradation {
            var value: __x_ABI_CWindows_CMedia_CCore_CAudioDecoderDegradation = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Degradation(pThis, &value))
            }
            return value
        }

        internal func get_DegradationReasonImpl() throws -> UWP.AudioDecoderDegradationReason {
            var value: __x_ABI_CWindows_CMedia_CCore_CAudioDecoderDegradationReason = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DegradationReason(pThis, &value))
            }
            return value
        }

        internal func get_MediaSourceStatusImpl() throws -> UWP.MediaSourceStatus {
            var value: __x_ABI_CWindows_CMedia_CCore_CMediaSourceStatus = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MediaSourceStatus(pThis, &value))
            }
            return value
        }

    }

    public class IChapterCue: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIChapterCue }

        internal func put_TitleImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIChapterCue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Title(pThis, _value.get()))
            }
        }

        internal func get_TitleImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIChapterCue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Title(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class ICodecInfo: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CICodecInfo }

        internal func get_KindImpl() throws -> UWP.CodecKind {
            var value: __x_ABI_CWindows_CMedia_CCore_CCodecKind = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CICodecInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Kind(pThis, &value))
            }
            return value
        }

        internal func get_CategoryImpl() throws -> UWP.CodecCategory {
            var value: __x_ABI_CWindows_CMedia_CCore_CCodecCategory = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CICodecInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Category(pThis, &value))
            }
            return value
        }

        internal func get_SubtypesImpl() throws -> WindowsFoundation.AnyIVectorView<String>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CICodecInfo.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Subtypes(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1_HSTRINGWrapper.unwrapFrom(abi: value)
        }

        internal func get_DisplayNameImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CICodecInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DisplayName(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_IsTrustedImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CICodecInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTrusted(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class ICodecQuery: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CICodecQuery }

        internal func FindAllAsyncImpl(_ kind: UWP.CodecKind, _ category: UWP.CodecCategory, _ subType: String) throws -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<UWP.CodecInfo?>?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _subType = try! HString(subType)
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CICodecQuery.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.FindAllAsync(pThis, kind, category, _subType.get(), &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CCodecInfoWrapper.unwrapFrom(abi: value)
        }

    }

    public class ICodecSubtypesStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics }

        internal func get_VideoFormatDV25Impl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VideoFormatDV25(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_VideoFormatDV50Impl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VideoFormatDV50(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_VideoFormatDvcImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VideoFormatDvc(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_VideoFormatDvh1Impl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VideoFormatDvh1(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_VideoFormatDvhDImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VideoFormatDvhD(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_VideoFormatDvsdImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VideoFormatDvsd(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_VideoFormatDvslImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VideoFormatDvsl(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_VideoFormatH263Impl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VideoFormatH263(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_VideoFormatH264Impl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VideoFormatH264(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_VideoFormatH265Impl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VideoFormatH265(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_VideoFormatH264ESImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VideoFormatH264ES(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_VideoFormatHevcImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VideoFormatHevc(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_VideoFormatHevcESImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VideoFormatHevcES(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_VideoFormatM4S2Impl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VideoFormatM4S2(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_VideoFormatMjpgImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VideoFormatMjpg(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_VideoFormatMP43Impl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VideoFormatMP43(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_VideoFormatMP4SImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VideoFormatMP4S(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_VideoFormatMP4VImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VideoFormatMP4V(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_VideoFormatMpeg2Impl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VideoFormatMpeg2(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_VideoFormatVP80Impl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VideoFormatVP80(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_VideoFormatVP90Impl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VideoFormatVP90(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_VideoFormatMpg1Impl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VideoFormatMpg1(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_VideoFormatMss1Impl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VideoFormatMss1(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_VideoFormatMss2Impl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VideoFormatMss2(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_VideoFormatWmv1Impl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VideoFormatWmv1(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_VideoFormatWmv2Impl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VideoFormatWmv2(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_VideoFormatWmv3Impl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VideoFormatWmv3(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_VideoFormatWvc1Impl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VideoFormatWvc1(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_VideoFormat420OImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VideoFormat420O(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_AudioFormatAacImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AudioFormatAac(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_AudioFormatAdtsImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AudioFormatAdts(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_AudioFormatAlacImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AudioFormatAlac(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_AudioFormatAmrNBImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AudioFormatAmrNB(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_AudioFormatAmrWBImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AudioFormatAmrWB(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_AudioFormatAmrWPImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AudioFormatAmrWP(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_AudioFormatDolbyAC3Impl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AudioFormatDolbyAC3(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_AudioFormatDolbyAC3SpdifImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AudioFormatDolbyAC3Spdif(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_AudioFormatDolbyDDPlusImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AudioFormatDolbyDDPlus(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_AudioFormatDrmImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AudioFormatDrm(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_AudioFormatDtsImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AudioFormatDts(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_AudioFormatFlacImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AudioFormatFlac(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_AudioFormatFloatImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AudioFormatFloat(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_AudioFormatMP3Impl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AudioFormatMP3(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_AudioFormatMPegImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AudioFormatMPeg(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_AudioFormatMsp1Impl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AudioFormatMsp1(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_AudioFormatOpusImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AudioFormatOpus(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_AudioFormatPcmImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AudioFormatPcm(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_AudioFormatWmaSpdifImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AudioFormatWmaSpdif(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_AudioFormatWMAudioLosslessImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AudioFormatWMAudioLossless(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_AudioFormatWMAudioV8Impl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AudioFormatWMAudioV8(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_AudioFormatWMAudioV9Impl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AudioFormatWMAudioV9(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class IDataCue: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIDataCue }

        internal func put_DataImpl(_ value: UWP.AnyIBuffer?) throws {
            let valueWrapper = __ABI_Windows_Storage_Streams.IBufferWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIDataCue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Data(pThis, _value))
            }
        }

        internal func get_DataImpl() throws -> UWP.AnyIBuffer? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIDataCue.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Data(pThis, &valueAbi))
                }
            }
            return __ABI_Windows_Storage_Streams.IBufferWrapper.unwrapFrom(abi: value)
        }

    }

    public class IDataCue2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIDataCue2 }

        internal func get_PropertiesImpl() throws -> WindowsFoundation.PropertySet? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIDataCue2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Properties(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IFaceDetectedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgs }

        internal func get_ResultFrameImpl() throws -> UWP.FaceDetectionEffectFrame? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ResultFrame(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IFaceDetectionEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect }

        internal func put_EnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Enabled(pThis, .init(from: value)))
            }
        }

        internal func get_EnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Enabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_DesiredDetectionIntervalImpl(_ value: WindowsFoundation.TimeSpan) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DesiredDetectionInterval(pThis, .from(swift: value)))
            }
        }

        internal func get_DesiredDetectionIntervalImpl() throws -> WindowsFoundation.TimeSpan {
            var value: __x_ABI_CWindows_CFoundation_CTimeSpan = .init()
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DesiredDetectionInterval(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func add_FaceDetectedImpl(_ handler: TypedEventHandler<UWP.FaceDetectionEffect?, UWP.FaceDetectedEventArgs?>?) throws -> EventRegistrationToken {
            var cookie: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CFaceDetectionEffect___x_ABI_CWindows__CMedia__CCore__CFaceDetectedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_FaceDetected(pThis, _handler, &cookie))
            }
            return cookie
        }

        internal func remove_FaceDetectedImpl(_ cookie: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_FaceDetected(pThis, cookie))
            }
        }

    }

    public class IFaceDetectionEffectDefinition: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition }

        internal func put_DetectionModeImpl(_ value: UWP.FaceDetectionMode) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DetectionMode(pThis, value))
            }
        }

        internal func get_DetectionModeImpl() throws -> UWP.FaceDetectionMode {
            var value: __x_ABI_CWindows_CMedia_CCore_CFaceDetectionMode = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DetectionMode(pThis, &value))
            }
            return value
        }

        internal func put_SynchronousDetectionEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SynchronousDetectionEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_SynchronousDetectionEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SynchronousDetectionEnabled(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class IFaceDetectionEffectFrame: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrame }

        internal func get_DetectedFacesImpl() throws -> WindowsFoundation.AnyIVectorView<UWP.DetectedFace?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrame.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DetectedFaces(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CFaceAnalysis__CDetectedFaceWrapper.unwrapFrom(abi: value)
        }

    }

    public class IHighDynamicRangeControl: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControl }

        internal func put_EnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Enabled(pThis, .init(from: value)))
            }
        }

        internal func get_EnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Enabled(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class IHighDynamicRangeOutput: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutput }

        internal func get_CertaintyImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutput.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Certainty(pThis, &value))
            }
            return value
        }

        internal func get_FrameControllersImpl() throws -> WindowsFoundation.AnyIVectorView<UWP.FrameController?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutput.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FrameControllers(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CDevices__CCore__CFrameControllerWrapper.unwrapFrom(abi: value)
        }

    }

    public class IImageCue: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIImageCue }

        internal func get_PositionImpl() throws -> UWP.TimedTextPoint {
            var value: __x_ABI_CWindows_CMedia_CCore_CTimedTextPoint = .init()
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIImageCue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Position(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_PositionImpl(_ value: UWP.TimedTextPoint) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIImageCue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Position(pThis, .from(swift: value)))
            }
        }

        internal func get_ExtentImpl() throws -> UWP.TimedTextSize {
            var value: __x_ABI_CWindows_CMedia_CCore_CTimedTextSize = .init()
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIImageCue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Extent(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_ExtentImpl(_ value: UWP.TimedTextSize) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIImageCue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Extent(pThis, .from(swift: value)))
            }
        }

        internal func put_SoftwareBitmapImpl(_ value: UWP.SoftwareBitmap?) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIImageCue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SoftwareBitmap(pThis, RawPointer(value)))
            }
        }

        internal func get_SoftwareBitmapImpl() throws -> UWP.SoftwareBitmap? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIImageCue.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SoftwareBitmap(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IInitializeMediaStreamSourceRequestedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs }

        internal func get_SourceImpl() throws -> UWP.MediaStreamSource? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_RandomAccessStreamImpl() throws -> UWP.AnyIRandomAccessStream? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_RandomAccessStream(pThis, &valueAbi))
                }
            }
            return __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper.unwrapFrom(abi: value)
        }

        internal func GetDeferralImpl() throws -> WindowsFoundation.Deferral? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDeferral(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class ILowLightFusionResult: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CILowLightFusionResult }

        internal func get_FrameImpl() throws -> UWP.SoftwareBitmap? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CILowLightFusionResult.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Frame(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class ILowLightFusionStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics }

        internal func get_SupportedBitmapPixelFormatsImpl() throws -> WindowsFoundation.AnyIVectorView<UWP.BitmapPixelFormat>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SupportedBitmapPixelFormats(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPixelFormatWrapper.unwrapFrom(abi: value)
        }

        internal func get_MaxSupportedFrameCountImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxSupportedFrameCount(pThis, &value))
            }
            return value
        }

        internal func FuseAsyncImpl(_ frameSet: WindowsFoundation.AnyIIterable<UWP.SoftwareBitmap?>?) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<UWP.LowLightFusionResult?, Double>? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let frameSetWrapper = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmapWrapper(frameSet)
                let _frameSet = try! frameSetWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.FuseAsync(pThis, _frameSet, &resultAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CMedia__CCore__CLowLightFusionResult_doubleWrapper.unwrapFrom(abi: result)
        }

    }

    public class IMediaBinder: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIMediaBinder }

        internal func add_BindingImpl(_ handler: TypedEventHandler<UWP.MediaBinder?, UWP.MediaBindingEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaBinder___x_ABI_CWindows__CMedia__CCore__CMediaBindingEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaBinder.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Binding(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_BindingImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaBinder.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Binding(pThis, token))
            }
        }

        internal func get_TokenImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaBinder.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Token(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_TokenImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaBinder.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Token(pThis, _value.get()))
            }
        }

        internal func get_SourceImpl() throws -> UWP.MediaSource? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaBinder.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IMediaBindingEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs }

        internal func add_CanceledImpl(_ handler: TypedEventHandler<UWP.MediaBindingEventArgs?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaBindingEventArgs_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Canceled(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_CanceledImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Canceled(pThis, token))
            }
        }

        internal func get_MediaBinderImpl() throws -> UWP.MediaBinder? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MediaBinder(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func GetDeferralImpl() throws -> WindowsFoundation.Deferral? {
            let (deferral) = try ComPtrs.initialize { deferralAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDeferral(pThis, &deferralAbi))
                }
            }
            return .from(abi: deferral)
        }

        internal func SetUriImpl(_ uri: WindowsFoundation.Uri?) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetUri(pThis, RawPointer(uri)))
            }
        }

        internal func SetStreamImpl(_ stream: UWP.AnyIRandomAccessStream?, _ contentType: String) throws {
            let streamWrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper(stream)
            let _stream = try! streamWrapper?.toABI { $0 }
            let _contentType = try! HString(contentType)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetStream(pThis, _stream, _contentType.get()))
            }
        }

        internal func SetStreamReferenceImpl(_ stream: UWP.AnyIRandomAccessStreamReference?, _ contentType: String) throws {
            let streamWrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamReferenceWrapper(stream)
            let _stream = try! streamWrapper?.toABI { $0 }
            let _contentType = try! HString(contentType)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetStreamReference(pThis, _stream, _contentType.get()))
            }
        }

    }

    public class IMediaBindingEventArgs2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2 }

        internal func SetAdaptiveMediaSourceImpl(_ mediaSource: UWP.AdaptiveMediaSource?) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetAdaptiveMediaSource(pThis, RawPointer(mediaSource)))
            }
        }

        internal func SetStorageFileImpl(_ file: UWP.AnyIStorageFile?) throws {
            let fileWrapper = __ABI_Windows_Storage.IStorageFileWrapper(file)
            let _file = try! fileWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetStorageFile(pThis, _file))
            }
        }

    }

    public class IMediaBindingEventArgs3: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs3 }

        internal func SetDownloadOperationImpl(_ downloadOperation: UWP.DownloadOperation?) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetDownloadOperation(pThis, RawPointer(downloadOperation)))
            }
        }

    }

    public class IMediaCue: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIMediaCue }

        open func put_StartTimeImpl(_ value: WindowsFoundation.TimeSpan) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaCue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_StartTime(pThis, .from(swift: value)))
            }
        }

        open func get_StartTimeImpl() throws -> WindowsFoundation.TimeSpan {
            var value: __x_ABI_CWindows_CFoundation_CTimeSpan = .init()
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaCue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_StartTime(pThis, &value))
            }
            return .from(abi: value)
        }

        open func put_DurationImpl(_ value: WindowsFoundation.TimeSpan) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaCue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Duration(pThis, .from(swift: value)))
            }
        }

        open func get_DurationImpl() throws -> WindowsFoundation.TimeSpan {
            var value: __x_ABI_CWindows_CFoundation_CTimeSpan = .init()
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaCue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Duration(pThis, &value))
            }
            return .from(abi: value)
        }

        open func put_IdImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaCue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Id(pThis, _value.get()))
            }
        }

        open func get_IdImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaCue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Id(pThis, &value))
            }
            return .init(from: value)
        }

    }

    internal static var IMediaCueVTable: __x_ABI_CWindows_CMedia_CCore_CIMediaCueVtbl = .init(
        QueryInterface: { IMediaCueWrapper.queryInterface($0, $1, $2) },
        AddRef: { IMediaCueWrapper.addRef($0) },
        Release: { IMediaCueWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Media_Core.IMediaCueWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Media.Core.IMediaCue").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        put_StartTime: {
            guard let __unwrapped__instance = IMediaCueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: WindowsFoundation.TimeSpan = .from(abi: $1)
            __unwrapped__instance.startTime = value
            return S_OK
        },

        get_StartTime: {
            guard let __unwrapped__instance = IMediaCueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.startTime
            $1?.initialize(to: .from(swift: value))
            return S_OK
        },

        put_Duration: {
            guard let __unwrapped__instance = IMediaCueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: WindowsFoundation.TimeSpan = .from(abi: $1)
            __unwrapped__instance.duration = value
            return S_OK
        },

        get_Duration: {
            guard let __unwrapped__instance = IMediaCueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.duration
            $1?.initialize(to: .from(swift: value))
            return S_OK
        },

        put_Id: {
            guard let __unwrapped__instance = IMediaCueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: String = .init(from: $1)
            __unwrapped__instance.id = value
            return S_OK
        },

        get_Id: {
            guard let __unwrapped__instance = IMediaCueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.id
            $1?.initialize(to: try! HString(value).detach())
            return S_OK
        }
    )

    public typealias IMediaCueWrapper = InterfaceWrapperBase<__IMPL_Windows_Media_Core.IMediaCueBridge>
    public class IMediaCueEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgs }

        internal func get_CueImpl() throws -> UWP.AnyIMediaCue? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Cue(pThis, &valueAbi))
                }
            }
            return __ABI_Windows_Media_Core.IMediaCueWrapper.unwrapFrom(abi: value)
        }

    }

    public class IMediaSource: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIMediaSource }

    }

    internal static var IMediaSourceVTable: __x_ABI_CWindows_CMedia_CCore_CIMediaSourceVtbl = .init(
        QueryInterface: { IMediaSourceWrapper.queryInterface($0, $1, $2) },
        AddRef: { IMediaSourceWrapper.addRef($0) },
        Release: { IMediaSourceWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Media_Core.IMediaSourceWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Media.Core.IMediaSource").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        }
    )

    public typealias IMediaSourceWrapper = InterfaceWrapperBase<__IMPL_Windows_Media_Core.IMediaSourceBridge>
    public class IMediaSource2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIMediaSource2 }

        internal func add_OpenOperationCompletedImpl(_ handler: TypedEventHandler<UWP.MediaSource?, UWP.MediaSourceOpenOperationCompletedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaSource___x_ABI_CWindows__CMedia__CCore__CMediaSourceOpenOperationCompletedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaSource2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_OpenOperationCompleted(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_OpenOperationCompletedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaSource2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_OpenOperationCompleted(pThis, token))
            }
        }

        internal func get_CustomPropertiesImpl() throws -> WindowsFoundation.ValueSet? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaSource2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CustomProperties(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_DurationImpl() throws -> WindowsFoundation.TimeSpan? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaSource2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Duration(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpanWrapper.unwrapFrom(abi: value)
        }

        internal func get_IsOpenImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaSource2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsOpen(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_ExternalTimedTextSourcesImpl() throws -> WindowsFoundation.AnyIObservableVector<UWP.TimedTextSource?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaSource2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExternalTimedTextSources(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSourceWrapper.unwrapFrom(abi: value)
        }

        internal func get_ExternalTimedMetadataTracksImpl() throws -> WindowsFoundation.AnyIObservableVector<UWP.TimedMetadataTrack?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaSource2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExternalTimedMetadataTracks(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIObservableVector_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrackWrapper.unwrapFrom(abi: value)
        }

    }

    public class IMediaSource3: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIMediaSource3 }

        internal func add_StateChangedImpl(_ handler: TypedEventHandler<UWP.MediaSource?, UWP.MediaSourceStateChangedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaSource___x_ABI_CWindows__CMedia__CCore__CMediaSourceStateChangedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaSource3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_StateChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_StateChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaSource3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_StateChanged(pThis, token))
            }
        }

        internal func get_StateImpl() throws -> UWP.MediaSourceState {
            var value: __x_ABI_CWindows_CMedia_CCore_CMediaSourceState = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaSource3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_State(pThis, &value))
            }
            return value
        }

        internal func ResetImpl() throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaSource3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Reset(pThis))
            }
        }

    }

    public class IMediaSource4: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIMediaSource4 }

        internal func get_AdaptiveMediaSourceImpl() throws -> UWP.AdaptiveMediaSource? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaSource4.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_AdaptiveMediaSource(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_MediaStreamSourceImpl() throws -> UWP.MediaStreamSource? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaSource4.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MediaStreamSource(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_MseStreamSourceImpl() throws -> UWP.MseStreamSource? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaSource4.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MseStreamSource(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_UriImpl() throws -> WindowsFoundation.Uri? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaSource4.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Uri(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func OpenAsyncImpl() throws -> WindowsFoundation.AnyIAsyncAction? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaSource4.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.OpenAsync(pThis, &operationAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: operation)
        }

    }

    public class IMediaSource5: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIMediaSource5 }

        internal func get_DownloadOperationImpl() throws -> UWP.DownloadOperation? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaSource5.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DownloadOperation(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IMediaSourceAppServiceConnection: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection }

        internal func add_InitializeMediaStreamSourceRequestedImpl(_ handler: TypedEventHandler<UWP.MediaSourceAppServiceConnection?, UWP.InitializeMediaStreamSourceRequestedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaSourceAppServiceConnection___x_ABI_CWindows__CMedia__CCore__CInitializeMediaStreamSourceRequestedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_InitializeMediaStreamSourceRequested(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_InitializeMediaStreamSourceRequestedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_InitializeMediaStreamSourceRequested(pThis, token))
            }
        }

        internal func StartImpl() throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Start(pThis))
            }
        }

    }

    public class IMediaSourceAppServiceConnectionFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionFactory }

        internal func CreateImpl(_ appServiceConnection: UWP.AppServiceConnection?) throws -> IMediaSourceAppServiceConnection {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, RawPointer(appServiceConnection), &resultAbi))
                }
            }
            return IMediaSourceAppServiceConnection(result!)
        }

    }

    public class IMediaSourceError: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIMediaSourceError }

        internal func get_ExtendedErrorImpl() throws -> HRESULT {
            var value: HRESULT = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaSourceError.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExtendedError(pThis, &value))
            }
            return value
        }

    }

    public class IMediaSourceOpenOperationCompletedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgs }

        internal func get_ErrorImpl() throws -> UWP.MediaSourceError? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Error(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IMediaSourceStateChangedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgs }

        internal func get_OldStateImpl() throws -> UWP.MediaSourceState {
            var value: __x_ABI_CWindows_CMedia_CCore_CMediaSourceState = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_OldState(pThis, &value))
            }
            return value
        }

        internal func get_NewStateImpl() throws -> UWP.MediaSourceState {
            var value: __x_ABI_CWindows_CMedia_CCore_CMediaSourceState = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NewState(pThis, &value))
            }
            return value
        }

    }

    public class IMediaSourceStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics }

        internal func CreateFromAdaptiveMediaSourceImpl(_ mediaSource: UWP.AdaptiveMediaSource?) throws -> UWP.MediaSource? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromAdaptiveMediaSource(pThis, RawPointer(mediaSource), &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func CreateFromMediaStreamSourceImpl(_ mediaSource: UWP.MediaStreamSource?) throws -> UWP.MediaSource? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromMediaStreamSource(pThis, RawPointer(mediaSource), &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func CreateFromMseStreamSourceImpl(_ mediaSource: UWP.MseStreamSource?) throws -> UWP.MediaSource? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromMseStreamSource(pThis, RawPointer(mediaSource), &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func CreateFromIMediaSourceImpl(_ mediaSource: UWP.AnyIMediaSource?) throws -> UWP.MediaSource? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let mediaSourceWrapper = __ABI_Windows_Media_Core.IMediaSourceWrapper(mediaSource)
                let _mediaSource = try! mediaSourceWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromIMediaSource(pThis, _mediaSource, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func CreateFromStorageFileImpl(_ file: UWP.AnyIStorageFile?) throws -> UWP.MediaSource? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let fileWrapper = __ABI_Windows_Storage.IStorageFileWrapper(file)
                let _file = try! fileWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromStorageFile(pThis, _file, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func CreateFromStreamImpl(_ stream: UWP.AnyIRandomAccessStream?, _ contentType: String) throws -> UWP.MediaSource? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let streamWrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper(stream)
                let _stream = try! streamWrapper?.toABI { $0 }
                let _contentType = try! HString(contentType)
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromStream(pThis, _stream, _contentType.get(), &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func CreateFromStreamReferenceImpl(_ stream: UWP.AnyIRandomAccessStreamReference?, _ contentType: String) throws -> UWP.MediaSource? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let streamWrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamReferenceWrapper(stream)
                let _stream = try! streamWrapper?.toABI { $0 }
                let _contentType = try! HString(contentType)
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromStreamReference(pThis, _stream, _contentType.get(), &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func CreateFromUriImpl(_ uri: WindowsFoundation.Uri?) throws -> UWP.MediaSource? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromUri(pThis, RawPointer(uri), &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IMediaSourceStatics2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics2 }

        internal func CreateFromMediaBinderImpl(_ binder: UWP.MediaBinder?) throws -> UWP.MediaSource? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromMediaBinder(pThis, RawPointer(binder), &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IMediaSourceStatics3: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics3 }

        internal func CreateFromMediaFrameSourceImpl(_ frameSource: UWP.MediaFrameSource?) throws -> UWP.MediaSource? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics3.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromMediaFrameSource(pThis, RawPointer(frameSource), &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IMediaSourceStatics4: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics4 }

        internal func CreateFromDownloadOperationImpl(_ downloadOperation: UWP.DownloadOperation?) throws -> UWP.MediaSource? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics4.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromDownloadOperation(pThis, RawPointer(downloadOperation), &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IMediaStreamDescriptor: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor }

        open func get_IsSelectedImpl() throws -> Bool {
            var selected: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSelected(pThis, &selected))
            }
            return .init(from: selected)
        }

        open func put_NameImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Name(pThis, _value.get()))
            }
        }

        open func get_NameImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Name(pThis, &value))
            }
            return .init(from: value)
        }

        open func put_LanguageImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Language(pThis, _value.get()))
            }
        }

        open func get_LanguageImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Language(pThis, &value))
            }
            return .init(from: value)
        }

    }

    internal static var IMediaStreamDescriptorVTable: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptorVtbl = .init(
        QueryInterface: { IMediaStreamDescriptorWrapper.queryInterface($0, $1, $2) },
        AddRef: { IMediaStreamDescriptorWrapper.addRef($0) },
        Release: { IMediaStreamDescriptorWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Media_Core.IMediaStreamDescriptorWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Media.Core.IMediaStreamDescriptor").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_IsSelected: {
            guard let __unwrapped__instance = IMediaStreamDescriptorWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let selected = __unwrapped__instance.isSelected
            $1?.initialize(to: .init(from: selected))
            return S_OK
        },

        put_Name: {
            guard let __unwrapped__instance = IMediaStreamDescriptorWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: String = .init(from: $1)
            __unwrapped__instance.name = value
            return S_OK
        },

        get_Name: {
            guard let __unwrapped__instance = IMediaStreamDescriptorWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.name
            $1?.initialize(to: try! HString(value).detach())
            return S_OK
        },

        put_Language: {
            guard let __unwrapped__instance = IMediaStreamDescriptorWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: String = .init(from: $1)
            __unwrapped__instance.language = value
            return S_OK
        },

        get_Language: {
            guard let __unwrapped__instance = IMediaStreamDescriptorWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.language
            $1?.initialize(to: try! HString(value).detach())
            return S_OK
        }
    )

    public typealias IMediaStreamDescriptorWrapper = InterfaceWrapperBase<__IMPL_Windows_Media_Core.IMediaStreamDescriptorBridge>
    public class IMediaStreamDescriptor2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2 }

        open func put_LabelImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Label(pThis, _value.get()))
            }
        }

        open func get_LabelImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Label(pThis, &value))
            }
            return .init(from: value)
        }

    }

    internal static var IMediaStreamDescriptor2VTable: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2Vtbl = .init(
        QueryInterface: { IMediaStreamDescriptor2Wrapper.queryInterface($0, $1, $2) },
        AddRef: { IMediaStreamDescriptor2Wrapper.addRef($0) },
        Release: { IMediaStreamDescriptor2Wrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Media_Core.IMediaStreamDescriptor2Wrapper.IID
            iids[3] = __ABI_Windows_Media_Core.IMediaStreamDescriptorWrapper.IID
            $1!.pointee = 4
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Media.Core.IMediaStreamDescriptor2").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        put_Label: {
            guard let __unwrapped__instance = IMediaStreamDescriptor2Wrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: String = .init(from: $1)
            __unwrapped__instance.label = value
            return S_OK
        },

        get_Label: {
            guard let __unwrapped__instance = IMediaStreamDescriptor2Wrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.label
            $1?.initialize(to: try! HString(value).detach())
            return S_OK
        }
    )

    public typealias IMediaStreamDescriptor2Wrapper = InterfaceWrapperBase<__IMPL_Windows_Media_Core.IMediaStreamDescriptor2Bridge>
    public class IMediaStreamSample: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample }

        internal func add_ProcessedImpl(_ handler: TypedEventHandler<UWP.MediaStreamSample?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSample_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Processed(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ProcessedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Processed(pThis, token))
            }
        }

        internal func get_BufferImpl() throws -> UWP.Buffer? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Buffer(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_TimestampImpl() throws -> WindowsFoundation.TimeSpan {
            var value: __x_ABI_CWindows_CFoundation_CTimeSpan = .init()
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Timestamp(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_ExtendedPropertiesImpl() throws -> UWP.MediaStreamSamplePropertySet? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExtendedProperties(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ProtectionImpl() throws -> UWP.MediaStreamSampleProtectionProperties? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Protection(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_DecodeTimestampImpl(_ value: WindowsFoundation.TimeSpan) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DecodeTimestamp(pThis, .from(swift: value)))
            }
        }

        internal func get_DecodeTimestampImpl() throws -> WindowsFoundation.TimeSpan {
            var value: __x_ABI_CWindows_CFoundation_CTimeSpan = .init()
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DecodeTimestamp(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_DurationImpl(_ value: WindowsFoundation.TimeSpan) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Duration(pThis, .from(swift: value)))
            }
        }

        internal func get_DurationImpl() throws -> WindowsFoundation.TimeSpan {
            var value: __x_ABI_CWindows_CFoundation_CTimeSpan = .init()
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Duration(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_KeyFrameImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_KeyFrame(pThis, .init(from: value)))
            }
        }

        internal func get_KeyFrameImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_KeyFrame(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_DiscontinuousImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Discontinuous(pThis, .init(from: value)))
            }
        }

        internal func get_DiscontinuousImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Discontinuous(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class IMediaStreamSample2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample2 }

        internal func get_Direct3D11SurfaceImpl() throws -> UWP.AnyIDirect3DSurface? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Direct3D11Surface(pThis, &valueAbi))
                }
            }
            return __ABI_Windows_Graphics_DirectX_Direct3D11.IDirect3DSurfaceWrapper.unwrapFrom(abi: value)
        }

    }

    public class IMediaStreamSampleProtectionProperties: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties }

    }

    public class IMediaStreamSampleStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics }

        internal func CreateFromBufferImpl(_ buffer: UWP.AnyIBuffer?, _ timestamp: WindowsFoundation.TimeSpan) throws -> UWP.MediaStreamSample? {
            let (value) = try ComPtrs.initialize { valueAbi in
                let bufferWrapper = __ABI_Windows_Storage_Streams.IBufferWrapper(buffer)
                let _buffer = try! bufferWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromBuffer(pThis, _buffer, .from(swift: timestamp), &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func CreateFromStreamAsyncImpl(_ stream: UWP.AnyIInputStream?, _ count: UInt32, _ timestamp: WindowsFoundation.TimeSpan) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.MediaStreamSample?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                let streamWrapper = __ABI_Windows_Storage_Streams.IInputStreamWrapper(stream)
                let _stream = try! streamWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromStreamAsync(pThis, _stream, count, .from(swift: timestamp), &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CCore__CMediaStreamSampleWrapper.unwrapFrom(abi: value)
        }

    }

    public class IMediaStreamSampleStatics2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics2 }

        internal func CreateFromDirect3D11SurfaceImpl(_ surface: UWP.AnyIDirect3DSurface?, _ timestamp: WindowsFoundation.TimeSpan) throws -> UWP.MediaStreamSample? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let surfaceWrapper = __ABI_Windows_Graphics_DirectX_Direct3D11.IDirect3DSurfaceWrapper(surface)
                let _surface = try! surfaceWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromDirect3D11Surface(pThis, _surface, .from(swift: timestamp), &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IMediaStreamSource: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource }

        internal func add_ClosedImpl(_ handler: TypedEventHandler<UWP.MediaStreamSource?, UWP.MediaStreamSourceClosedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceClosedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Closed(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ClosedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Closed(pThis, token))
            }
        }

        internal func add_StartingImpl(_ handler: TypedEventHandler<UWP.MediaStreamSource?, UWP.MediaStreamSourceStartingEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceStartingEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Starting(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_StartingImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Starting(pThis, token))
            }
        }

        internal func add_PausedImpl(_ handler: TypedEventHandler<UWP.MediaStreamSource?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Paused(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_PausedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Paused(pThis, token))
            }
        }

        internal func add_SampleRequestedImpl(_ handler: TypedEventHandler<UWP.MediaStreamSource?, UWP.MediaStreamSourceSampleRequestedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceSampleRequestedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_SampleRequested(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_SampleRequestedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_SampleRequested(pThis, token))
            }
        }

        internal func add_SwitchStreamsRequestedImpl(_ handler: TypedEventHandler<UWP.MediaStreamSource?, UWP.MediaStreamSourceSwitchStreamsRequestedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceSwitchStreamsRequestedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_SwitchStreamsRequested(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_SwitchStreamsRequestedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_SwitchStreamsRequested(pThis, token))
            }
        }

        internal func NotifyErrorImpl(_ errorStatus: UWP.MediaStreamSourceErrorStatus) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.NotifyError(pThis, errorStatus))
            }
        }

        internal func AddStreamDescriptorImpl(_ descriptor: UWP.AnyIMediaStreamDescriptor?) throws {
            let descriptorWrapper = __ABI_Windows_Media_Core.IMediaStreamDescriptorWrapper(descriptor)
            let _descriptor = try! descriptorWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.AddStreamDescriptor(pThis, _descriptor))
            }
        }

        internal func put_MediaProtectionManagerImpl(_ value: UWP.MediaProtectionManager?) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MediaProtectionManager(pThis, RawPointer(value)))
            }
        }

        internal func get_MediaProtectionManagerImpl() throws -> UWP.MediaProtectionManager? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MediaProtectionManager(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_DurationImpl(_ value: WindowsFoundation.TimeSpan) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Duration(pThis, .from(swift: value)))
            }
        }

        internal func get_DurationImpl() throws -> WindowsFoundation.TimeSpan {
            var value: __x_ABI_CWindows_CFoundation_CTimeSpan = .init()
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Duration(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_CanSeekImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CanSeek(pThis, .init(from: value)))
            }
        }

        internal func get_CanSeekImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanSeek(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_BufferTimeImpl(_ value: WindowsFoundation.TimeSpan) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BufferTime(pThis, .from(swift: value)))
            }
        }

        internal func get_BufferTimeImpl() throws -> WindowsFoundation.TimeSpan {
            var value: __x_ABI_CWindows_CFoundation_CTimeSpan = .init()
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BufferTime(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func SetBufferedRangeImpl(_ startOffset: WindowsFoundation.TimeSpan, _ endOffset: WindowsFoundation.TimeSpan) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetBufferedRange(pThis, .from(swift: startOffset), .from(swift: endOffset)))
            }
        }

        internal func get_MusicPropertiesImpl() throws -> UWP.MusicProperties? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MusicProperties(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_VideoPropertiesImpl() throws -> UWP.VideoProperties? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_VideoProperties(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_ThumbnailImpl(_ value: UWP.AnyIRandomAccessStreamReference?) throws {
            let valueWrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamReferenceWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Thumbnail(pThis, _value))
            }
        }

        internal func get_ThumbnailImpl() throws -> UWP.AnyIRandomAccessStreamReference? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Thumbnail(pThis, &valueAbi))
                }
            }
            return __ABI_Windows_Storage_Streams.IRandomAccessStreamReferenceWrapper.unwrapFrom(abi: value)
        }

    }

    public class IMediaStreamSource2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2 }

        internal func add_SampleRenderedImpl(_ handler: TypedEventHandler<UWP.MediaStreamSource?, UWP.MediaStreamSourceSampleRenderedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMediaStreamSource___x_ABI_CWindows__CMedia__CCore__CMediaStreamSourceSampleRenderedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_SampleRendered(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_SampleRenderedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_SampleRendered(pThis, token))
            }
        }

    }

    public class IMediaStreamSource3: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3 }

        internal func put_MaxSupportedPlaybackRateImpl(_ value: Double?) throws {
            let valueWrapper = UWP.__x_ABI_C__FIReference_1_doubleWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MaxSupportedPlaybackRate(pThis, _value))
            }
        }

        internal func get_MaxSupportedPlaybackRateImpl() throws -> Double? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxSupportedPlaybackRate(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIReference_1_doubleWrapper.unwrapFrom(abi: value)
        }

    }

    public class IMediaStreamSource4: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4 }

        internal func put_IsLiveImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsLive(pThis, .init(from: value)))
            }
        }

        internal func get_IsLiveImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsLive(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class IMediaStreamSourceClosedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgs }

        internal func get_RequestImpl() throws -> UWP.MediaStreamSourceClosedRequest? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Request(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IMediaStreamSourceClosedRequest: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequest }

        internal func get_ReasonImpl() throws -> UWP.MediaStreamSourceClosedReason {
            var value: __x_ABI_CWindows_CMedia_CCore_CMediaStreamSourceClosedReason = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequest.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Reason(pThis, &value))
            }
            return value
        }

    }

    public class IMediaStreamSourceFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactory }

        internal func CreateFromDescriptorImpl(_ descriptor: UWP.AnyIMediaStreamDescriptor?) throws -> IMediaStreamSource {
            let (result) = try ComPtrs.initialize { resultAbi in
                let descriptorWrapper = __ABI_Windows_Media_Core.IMediaStreamDescriptorWrapper(descriptor)
                let _descriptor = try! descriptorWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromDescriptor(pThis, _descriptor, &resultAbi))
                }
            }
            return IMediaStreamSource(result!)
        }

        internal func CreateFromDescriptorsImpl(_ descriptor: UWP.AnyIMediaStreamDescriptor?, _ descriptor2: UWP.AnyIMediaStreamDescriptor?) throws -> IMediaStreamSource {
            let (result) = try ComPtrs.initialize { resultAbi in
                let descriptorWrapper = __ABI_Windows_Media_Core.IMediaStreamDescriptorWrapper(descriptor)
                let _descriptor = try! descriptorWrapper?.toABI { $0 }
                let descriptor2Wrapper = __ABI_Windows_Media_Core.IMediaStreamDescriptorWrapper(descriptor2)
                let _descriptor2 = try! descriptor2Wrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromDescriptors(pThis, _descriptor, _descriptor2, &resultAbi))
                }
            }
            return IMediaStreamSource(result!)
        }

    }

    public class IMediaStreamSourceSampleRenderedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgs }

        internal func get_SampleLagImpl() throws -> WindowsFoundation.TimeSpan {
            var value: __x_ABI_CWindows_CFoundation_CTimeSpan = .init()
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SampleLag(pThis, &value))
            }
            return .from(abi: value)
        }

    }

    public class IMediaStreamSourceSampleRequest: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest }

        internal func get_StreamDescriptorImpl() throws -> UWP.AnyIMediaStreamDescriptor? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_StreamDescriptor(pThis, &valueAbi))
                }
            }
            return __ABI_Windows_Media_Core.IMediaStreamDescriptorWrapper.unwrapFrom(abi: value)
        }

        internal func GetDeferralImpl() throws -> UWP.MediaStreamSourceSampleRequestDeferral? {
            let (deferral) = try ComPtrs.initialize { deferralAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDeferral(pThis, &deferralAbi))
                }
            }
            return .from(abi: deferral)
        }

        internal func put_SampleImpl(_ value: UWP.MediaStreamSample?) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Sample(pThis, RawPointer(value)))
            }
        }

        internal func get_SampleImpl() throws -> UWP.MediaStreamSample? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Sample(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func ReportSampleProgressImpl(_ progress: UInt32) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReportSampleProgress(pThis, progress))
            }
        }

    }

    public class IMediaStreamSourceSampleRequestDeferral: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferral }

        internal func CompleteImpl() throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferral.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Complete(pThis))
            }
        }

    }

    public class IMediaStreamSourceSampleRequestedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgs }

        internal func get_RequestImpl() throws -> UWP.MediaStreamSourceSampleRequest? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Request(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IMediaStreamSourceStartingEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgs }

        internal func get_RequestImpl() throws -> UWP.MediaStreamSourceStartingRequest? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Request(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IMediaStreamSourceStartingRequest: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest }

        internal func get_StartPositionImpl() throws -> WindowsFoundation.TimeSpan? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_StartPosition(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpanWrapper.unwrapFrom(abi: value)
        }

        internal func GetDeferralImpl() throws -> UWP.MediaStreamSourceStartingRequestDeferral? {
            let (deferral) = try ComPtrs.initialize { deferralAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDeferral(pThis, &deferralAbi))
                }
            }
            return .from(abi: deferral)
        }

        internal func SetActualStartPositionImpl(_ position: WindowsFoundation.TimeSpan) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetActualStartPosition(pThis, .from(swift: position)))
            }
        }

    }

    public class IMediaStreamSourceStartingRequestDeferral: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferral }

        internal func CompleteImpl() throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferral.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Complete(pThis))
            }
        }

    }

    public class IMediaStreamSourceSwitchStreamsRequest: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest }

        internal func get_OldStreamDescriptorImpl() throws -> UWP.AnyIMediaStreamDescriptor? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_OldStreamDescriptor(pThis, &valueAbi))
                }
            }
            return __ABI_Windows_Media_Core.IMediaStreamDescriptorWrapper.unwrapFrom(abi: value)
        }

        internal func get_NewStreamDescriptorImpl() throws -> UWP.AnyIMediaStreamDescriptor? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_NewStreamDescriptor(pThis, &valueAbi))
                }
            }
            return __ABI_Windows_Media_Core.IMediaStreamDescriptorWrapper.unwrapFrom(abi: value)
        }

        internal func GetDeferralImpl() throws -> UWP.MediaStreamSourceSwitchStreamsRequestDeferral? {
            let (deferral) = try ComPtrs.initialize { deferralAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDeferral(pThis, &deferralAbi))
                }
            }
            return .from(abi: deferral)
        }

    }

    public class IMediaStreamSourceSwitchStreamsRequestDeferral: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferral }

        internal func CompleteImpl() throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferral.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Complete(pThis))
            }
        }

    }

    public class IMediaStreamSourceSwitchStreamsRequestedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgs }

        internal func get_RequestImpl() throws -> UWP.MediaStreamSourceSwitchStreamsRequest? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Request(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IMediaTrack: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIMediaTrack }

        open func get_IdImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaTrack.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Id(pThis, &value))
            }
            return .init(from: value)
        }

        open func get_LanguageImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaTrack.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Language(pThis, &value))
            }
            return .init(from: value)
        }

        open func get_TrackKindImpl() throws -> UWP.MediaTrackKind {
            var value: __x_ABI_CWindows_CMedia_CCore_CMediaTrackKind = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaTrack.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TrackKind(pThis, &value))
            }
            return value
        }

        open func put_LabelImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaTrack.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Label(pThis, _value.get()))
            }
        }

        open func get_LabelImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMediaTrack.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Label(pThis, &value))
            }
            return .init(from: value)
        }

    }

    internal static var IMediaTrackVTable: __x_ABI_CWindows_CMedia_CCore_CIMediaTrackVtbl = .init(
        QueryInterface: { IMediaTrackWrapper.queryInterface($0, $1, $2) },
        AddRef: { IMediaTrackWrapper.addRef($0) },
        Release: { IMediaTrackWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Media_Core.IMediaTrackWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Media.Core.IMediaTrack").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_Id: {
            guard let __unwrapped__instance = IMediaTrackWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.id
            $1?.initialize(to: try! HString(value).detach())
            return S_OK
        },

        get_Language: {
            guard let __unwrapped__instance = IMediaTrackWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.language
            $1?.initialize(to: try! HString(value).detach())
            return S_OK
        },

        get_TrackKind: {
            guard let __unwrapped__instance = IMediaTrackWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.trackKind
            $1?.initialize(to: value)
            return S_OK
        },

        put_Label: {
            guard let __unwrapped__instance = IMediaTrackWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: String = .init(from: $1)
            __unwrapped__instance.label = value
            return S_OK
        },

        get_Label: {
            guard let __unwrapped__instance = IMediaTrackWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.label
            $1?.initialize(to: try! HString(value).detach())
            return S_OK
        }
    )

    public typealias IMediaTrackWrapper = InterfaceWrapperBase<__IMPL_Windows_Media_Core.IMediaTrackBridge>
    public class IMseSourceBuffer: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer }

        internal func add_UpdateStartingImpl(_ handler: TypedEventHandler<UWP.MseSourceBuffer?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_UpdateStarting(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_UpdateStartingImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_UpdateStarting(pThis, token))
            }
        }

        internal func add_UpdatedImpl(_ handler: TypedEventHandler<UWP.MseSourceBuffer?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Updated(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_UpdatedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Updated(pThis, token))
            }
        }

        internal func add_UpdateEndedImpl(_ handler: TypedEventHandler<UWP.MseSourceBuffer?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_UpdateEnded(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_UpdateEndedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_UpdateEnded(pThis, token))
            }
        }

        internal func add_ErrorOccurredImpl(_ handler: TypedEventHandler<UWP.MseSourceBuffer?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ErrorOccurred(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ErrorOccurredImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ErrorOccurred(pThis, token))
            }
        }

        internal func add_AbortedImpl(_ handler: TypedEventHandler<UWP.MseSourceBuffer?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseSourceBuffer_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Aborted(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_AbortedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Aborted(pThis, token))
            }
        }

        internal func get_ModeImpl() throws -> UWP.MseAppendMode {
            var value: __x_ABI_CWindows_CMedia_CCore_CMseAppendMode = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Mode(pThis, &value))
            }
            return value
        }

        internal func put_ModeImpl(_ value: UWP.MseAppendMode) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Mode(pThis, value))
            }
        }

        internal func get_IsUpdatingImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsUpdating(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_BufferedImpl() throws -> WindowsFoundation.AnyIVectorView<UWP.MseTimeRange>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Buffered(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRangeWrapper.unwrapFrom(abi: value)
        }

        internal func get_TimestampOffsetImpl() throws -> WindowsFoundation.TimeSpan {
            var value: __x_ABI_CWindows_CFoundation_CTimeSpan = .init()
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TimestampOffset(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_TimestampOffsetImpl(_ value: WindowsFoundation.TimeSpan) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TimestampOffset(pThis, .from(swift: value)))
            }
        }

        internal func get_AppendWindowStartImpl() throws -> WindowsFoundation.TimeSpan {
            var value: __x_ABI_CWindows_CFoundation_CTimeSpan = .init()
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AppendWindowStart(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_AppendWindowStartImpl(_ value: WindowsFoundation.TimeSpan) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AppendWindowStart(pThis, .from(swift: value)))
            }
        }

        internal func get_AppendWindowEndImpl() throws -> WindowsFoundation.TimeSpan? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_AppendWindowEnd(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpanWrapper.unwrapFrom(abi: value)
        }

        internal func put_AppendWindowEndImpl(_ value: WindowsFoundation.TimeSpan?) throws {
            let valueWrapper = UWP.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpanWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AppendWindowEnd(pThis, _value))
            }
        }

        internal func AppendBufferImpl(_ buffer: UWP.AnyIBuffer?) throws {
            let bufferWrapper = __ABI_Windows_Storage_Streams.IBufferWrapper(buffer)
            let _buffer = try! bufferWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.AppendBuffer(pThis, _buffer))
            }
        }

        internal func AppendStreamImpl(_ stream: UWP.AnyIInputStream?) throws {
            let streamWrapper = __ABI_Windows_Storage_Streams.IInputStreamWrapper(stream)
            let _stream = try! streamWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.AppendStream(pThis, _stream))
            }
        }

        internal func AppendStreamMaxSizeImpl(_ stream: UWP.AnyIInputStream?, _ maxSize: UInt64) throws {
            let streamWrapper = __ABI_Windows_Storage_Streams.IInputStreamWrapper(stream)
            let _stream = try! streamWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.AppendStreamMaxSize(pThis, _stream, maxSize))
            }
        }

        internal func AbortImpl() throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Abort(pThis))
            }
        }

        internal func RemoveImpl(_ start: WindowsFoundation.TimeSpan, _ end: WindowsFoundation.TimeSpan?) throws {
            let endWrapper = UWP.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpanWrapper(end)
            let _end = try! endWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Remove(pThis, .from(swift: start), _end))
            }
        }

    }

    public class IMseSourceBufferList: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList }

        internal func add_SourceBufferAddedImpl(_ handler: TypedEventHandler<UWP.MseSourceBufferList?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseSourceBufferList_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_SourceBufferAdded(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_SourceBufferAddedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_SourceBufferAdded(pThis, token))
            }
        }

        internal func add_SourceBufferRemovedImpl(_ handler: TypedEventHandler<UWP.MseSourceBufferList?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseSourceBufferList_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_SourceBufferRemoved(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_SourceBufferRemovedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_SourceBufferRemoved(pThis, token))
            }
        }

        internal func get_BuffersImpl() throws -> WindowsFoundation.AnyIVectorView<UWP.MseSourceBuffer?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Buffers(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CMseSourceBufferWrapper.unwrapFrom(abi: value)
        }

    }

    public class IMseStreamSource: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIMseStreamSource }

        internal func add_OpenedImpl(_ handler: TypedEventHandler<UWP.MseStreamSource?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseStreamSource_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Opened(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_OpenedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Opened(pThis, token))
            }
        }

        internal func add_EndedImpl(_ handler: TypedEventHandler<UWP.MseStreamSource?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseStreamSource_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Ended(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_EndedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Ended(pThis, token))
            }
        }

        internal func add_ClosedImpl(_ handler: TypedEventHandler<UWP.MseStreamSource?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CMseStreamSource_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Closed(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ClosedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Closed(pThis, token))
            }
        }

        internal func get_SourceBuffersImpl() throws -> UWP.MseSourceBufferList? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SourceBuffers(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ActiveSourceBuffersImpl() throws -> UWP.MseSourceBufferList? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ActiveSourceBuffers(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ReadyStateImpl() throws -> UWP.MseReadyState {
            var value: __x_ABI_CWindows_CMedia_CCore_CMseReadyState = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ReadyState(pThis, &value))
            }
            return value
        }

        internal func get_DurationImpl() throws -> WindowsFoundation.TimeSpan? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Duration(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpanWrapper.unwrapFrom(abi: value)
        }

        internal func put_DurationImpl(_ value: WindowsFoundation.TimeSpan?) throws {
            let valueWrapper = UWP.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpanWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Duration(pThis, _value))
            }
        }

        internal func AddSourceBufferImpl(_ mimeType: String) throws -> UWP.MseSourceBuffer? {
            let (buffer) = try ComPtrs.initialize { bufferAbi in
                let _mimeType = try! HString(mimeType)
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.AddSourceBuffer(pThis, _mimeType.get(), &bufferAbi))
                }
            }
            return .from(abi: buffer)
        }

        internal func RemoveSourceBufferImpl(_ buffer: UWP.MseSourceBuffer?) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveSourceBuffer(pThis, RawPointer(buffer)))
            }
        }

        internal func EndOfStreamImpl(_ status: UWP.MseEndOfStreamStatus) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.EndOfStream(pThis, status))
            }
        }

    }

    public class IMseStreamSource2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2 }

        internal func get_LiveSeekableRangeImpl() throws -> UWP.MseTimeRange? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_LiveSeekableRange(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIReference_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRangeWrapper.unwrapFrom(abi: value)
        }

        internal func put_LiveSeekableRangeImpl(_ value: UWP.MseTimeRange?) throws {
            let valueWrapper = UWP.__x_ABI_C__FIReference_1___x_ABI_CWindows__CMedia__CCore__CMseTimeRangeWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LiveSeekableRange(pThis, _value))
            }
        }

    }

    public class IMseStreamSourceStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceStatics }

        internal func IsContentTypeSupportedImpl(_ contentType: String) throws -> Bool {
            var value: boolean = 0
            let _contentType = try! HString(contentType)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsContentTypeSupported(pThis, _contentType.get(), &value))
            }
            return .init(from: value)
        }

    }

    public class ISceneAnalysisEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect }

        internal func get_HighDynamicRangeAnalyzerImpl() throws -> UWP.HighDynamicRangeControl? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HighDynamicRangeAnalyzer(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_DesiredAnalysisIntervalImpl(_ value: WindowsFoundation.TimeSpan) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DesiredAnalysisInterval(pThis, .from(swift: value)))
            }
        }

        internal func get_DesiredAnalysisIntervalImpl() throws -> WindowsFoundation.TimeSpan {
            var value: __x_ABI_CWindows_CFoundation_CTimeSpan = .init()
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DesiredAnalysisInterval(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func add_SceneAnalyzedImpl(_ handler: TypedEventHandler<UWP.SceneAnalysisEffect?, UWP.SceneAnalyzedEventArgs?>?) throws -> EventRegistrationToken {
            var cookie: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CSceneAnalysisEffect___x_ABI_CWindows__CMedia__CCore__CSceneAnalyzedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_SceneAnalyzed(pThis, _handler, &cookie))
            }
            return cookie
        }

        internal func remove_SceneAnalyzedImpl(_ cookie: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_SceneAnalyzed(pThis, cookie))
            }
        }

    }

    public class ISceneAnalysisEffectFrame: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame }

        internal func get_FrameControlValuesImpl() throws -> UWP.CapturedFrameControlValues? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FrameControlValues(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_HighDynamicRangeImpl() throws -> UWP.HighDynamicRangeOutput? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HighDynamicRange(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class ISceneAnalysisEffectFrame2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame2 }

        internal func get_AnalysisRecommendationImpl() throws -> UWP.SceneAnalysisRecommendation {
            var value: __x_ABI_CWindows_CMedia_CCore_CSceneAnalysisRecommendation = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AnalysisRecommendation(pThis, &value))
            }
            return value
        }

    }

    public class ISceneAnalyzedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgs }

        internal func get_ResultFrameImpl() throws -> UWP.SceneAnalysisEffectFrame? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ResultFrame(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class ISingleSelectMediaTrackList: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList }

        open func add_SelectedIndexChangedImpl(_ handler: TypedEventHandler<UWP.AnyISingleSelectMediaTrackList?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CISingleSelectMediaTrackList_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_SelectedIndexChanged(pThis, _handler, &token))
            }
            return token
        }

        open func remove_SelectedIndexChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_SelectedIndexChanged(pThis, token))
            }
        }

        open func put_SelectedIndexImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SelectedIndex(pThis, value))
            }
        }

        open func get_SelectedIndexImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectedIndex(pThis, &value))
            }
            return value
        }

    }

    internal static var ISingleSelectMediaTrackListVTable: __x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackListVtbl = .init(
        QueryInterface: { ISingleSelectMediaTrackListWrapper.queryInterface($0, $1, $2) },
        AddRef: { ISingleSelectMediaTrackListWrapper.addRef($0) },
        Release: { ISingleSelectMediaTrackListWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Media_Core.ISingleSelectMediaTrackListWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Media.Core.ISingleSelectMediaTrackList").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        add_SelectedIndexChanged: {
            guard let __unwrapped__instance = ISingleSelectMediaTrackListWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            guard let handler = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CISingleSelectMediaTrackList_IInspectableWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
            let token = __unwrapped__instance.selectedIndexChanged.addHandler(handler)
            $2?.initialize(to: .from(swift: token))
            return S_OK
        },

        remove_SelectedIndexChanged: {
            guard let __unwrapped__instance = ISingleSelectMediaTrackListWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let token: EventRegistrationToken = $1
            __unwrapped__instance.selectedIndexChanged.removeHandler(token)
            return S_OK
        },

        put_SelectedIndex: {
            guard let __unwrapped__instance = ISingleSelectMediaTrackListWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: Int32 = $1
            __unwrapped__instance.selectedIndex = value
            return S_OK
        },

        get_SelectedIndex: {
            guard let __unwrapped__instance = ISingleSelectMediaTrackListWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.selectedIndex
            $1?.initialize(to: value)
            return S_OK
        }
    )

    public typealias ISingleSelectMediaTrackListWrapper = InterfaceWrapperBase<__IMPL_Windows_Media_Core.ISingleSelectMediaTrackListBridge>
    public class ISpeechCue: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CISpeechCue }

        internal func get_TextImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CISpeechCue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Text(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_TextImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CISpeechCue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Text(pThis, _value.get()))
            }
        }

        internal func get_StartPositionInInputImpl() throws -> Int32? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CISpeechCue.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_StartPositionInInput(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIReference_1_intWrapper.unwrapFrom(abi: value)
        }

        internal func put_StartPositionInInputImpl(_ value: Int32?) throws {
            let valueWrapper = UWP.__x_ABI_C__FIReference_1_intWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CISpeechCue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_StartPositionInInput(pThis, _value))
            }
        }

        internal func get_EndPositionInInputImpl() throws -> Int32? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CISpeechCue.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_EndPositionInInput(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIReference_1_intWrapper.unwrapFrom(abi: value)
        }

        internal func put_EndPositionInInputImpl(_ value: Int32?) throws {
            let valueWrapper = UWP.__x_ABI_C__FIReference_1_intWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CISpeechCue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_EndPositionInInput(pThis, _value))
            }
        }

    }

    public class ITimedMetadataStreamDescriptor: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptor }

        internal func get_EncodingPropertiesImpl() throws -> UWP.TimedMetadataEncodingProperties? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptor.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_EncodingProperties(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func CopyImpl() throws -> UWP.TimedMetadataStreamDescriptor? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptor.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Copy(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class ITimedMetadataStreamDescriptorFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorFactory }

        internal func CreateImpl(_ encodingProperties: UWP.TimedMetadataEncodingProperties?) throws -> IMediaStreamDescriptor {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, RawPointer(encodingProperties), &resultAbi))
                }
            }
            return IMediaStreamDescriptor(result!)
        }

    }

    public class ITimedMetadataTrack: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack }

        internal func add_CueEnteredImpl(_ handler: TypedEventHandler<UWP.TimedMetadataTrack?, UWP.MediaCueEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack___x_ABI_CWindows__CMedia__CCore__CMediaCueEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_CueEntered(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_CueEnteredImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_CueEntered(pThis, token))
            }
        }

        internal func add_CueExitedImpl(_ handler: TypedEventHandler<UWP.TimedMetadataTrack?, UWP.MediaCueEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack___x_ABI_CWindows__CMedia__CCore__CMediaCueEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_CueExited(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_CueExitedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_CueExited(pThis, token))
            }
        }

        internal func add_TrackFailedImpl(_ handler: TypedEventHandler<UWP.TimedMetadataTrack?, UWP.TimedMetadataTrackFailedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrack___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrackFailedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_TrackFailed(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_TrackFailedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_TrackFailed(pThis, token))
            }
        }

        internal func get_CuesImpl() throws -> WindowsFoundation.AnyIVectorView<UWP.AnyIMediaCue?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Cues(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CIMediaCueWrapper.unwrapFrom(abi: value)
        }

        internal func get_ActiveCuesImpl() throws -> WindowsFoundation.AnyIVectorView<UWP.AnyIMediaCue?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ActiveCues(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CIMediaCueWrapper.unwrapFrom(abi: value)
        }

        internal func get_TimedMetadataKindImpl() throws -> UWP.TimedMetadataKind {
            var value: __x_ABI_CWindows_CMedia_CCore_CTimedMetadataKind = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TimedMetadataKind(pThis, &value))
            }
            return value
        }

        internal func get_DispatchTypeImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DispatchType(pThis, &value))
            }
            return .init(from: value)
        }

        internal func AddCueImpl(_ cue: UWP.AnyIMediaCue?) throws {
            let cueWrapper = __ABI_Windows_Media_Core.IMediaCueWrapper(cue)
            let _cue = try! cueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.AddCue(pThis, _cue))
            }
        }

        internal func RemoveCueImpl(_ cue: UWP.AnyIMediaCue?) throws {
            let cueWrapper = __ABI_Windows_Media_Core.IMediaCueWrapper(cue)
            let _cue = try! cueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveCue(pThis, _cue))
            }
        }

    }

    public class ITimedMetadataTrack2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2 }

        internal func get_PlaybackItemImpl() throws -> UWP.MediaPlaybackItem? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PlaybackItem(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_NameImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Name(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class ITimedMetadataTrackError: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError }

        internal func get_ErrorCodeImpl() throws -> UWP.TimedMetadataTrackErrorCode {
            var value: __x_ABI_CWindows_CMedia_CCore_CTimedMetadataTrackErrorCode = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ErrorCode(pThis, &value))
            }
            return value
        }

        internal func get_ExtendedErrorImpl() throws -> HRESULT {
            var value: HRESULT = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExtendedError(pThis, &value))
            }
            return value
        }

    }

    public class ITimedMetadataTrackFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFactory }

        internal func CreateImpl(_ id: String, _ language: String, _ kind: UWP.TimedMetadataKind) throws -> ITimedMetadataTrack {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _id = try! HString(id)
                let _language = try! HString(language)
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, _id.get(), _language.get(), kind, &valueAbi))
                }
            }
            return ITimedMetadataTrack(value!)
        }

    }

    public class ITimedMetadataTrackFailedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgs }

        internal func get_ErrorImpl() throws -> UWP.TimedMetadataTrackError? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Error(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class ITimedMetadataTrackProvider: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackProvider }

        open func get_TimedMetadataTracksImpl() throws -> WindowsFoundation.AnyIVectorView<UWP.TimedMetadataTrack?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackProvider.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TimedMetadataTracks(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrackWrapper.unwrapFrom(abi: value)
        }

    }

    internal static var ITimedMetadataTrackProviderVTable: __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackProviderVtbl = .init(
        QueryInterface: { ITimedMetadataTrackProviderWrapper.queryInterface($0, $1, $2) },
        AddRef: { ITimedMetadataTrackProviderWrapper.addRef($0) },
        Release: { ITimedMetadataTrackProviderWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Media_Core.ITimedMetadataTrackProviderWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Media.Core.ITimedMetadataTrackProvider").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_TimedMetadataTracks: {
            guard let __unwrapped__instance = ITimedMetadataTrackProviderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.timedMetadataTracks
            let valueWrapper = UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrackWrapper(value)
            valueWrapper?.copyTo($1)
            return S_OK
        }
    )

    public typealias ITimedMetadataTrackProviderWrapper = InterfaceWrapperBase<__IMPL_Windows_Media_Core.ITimedMetadataTrackProviderBridge>
    public class ITimedTextCue: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CITimedTextCue }

        internal func get_CueRegionImpl() throws -> UWP.TimedTextRegion? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextCue.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CueRegion(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_CueRegionImpl(_ value: UWP.TimedTextRegion?) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextCue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CueRegion(pThis, RawPointer(value)))
            }
        }

        internal func get_CueStyleImpl() throws -> UWP.TimedTextStyle? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextCue.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CueStyle(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_CueStyleImpl(_ value: UWP.TimedTextStyle?) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextCue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CueStyle(pThis, RawPointer(value)))
            }
        }

        internal func get_LinesImpl() throws -> WindowsFoundation.AnyIVector<UWP.TimedTextLine?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextCue.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Lines(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextLineWrapper.unwrapFrom(abi: value)
        }

    }

    public class ITimedTextLine: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CITimedTextLine }

        internal func get_TextImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextLine.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Text(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_TextImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextLine.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Text(pThis, _value.get()))
            }
        }

        internal func get_SubformatsImpl() throws -> WindowsFoundation.AnyIVector<UWP.TimedTextSubformat?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextLine.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Subformats(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedTextSubformatWrapper.unwrapFrom(abi: value)
        }

    }

    public class ITimedTextRegion: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CITimedTextRegion }

        internal func get_NameImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Name(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_NameImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Name(pThis, _value.get()))
            }
        }

        internal func get_PositionImpl() throws -> UWP.TimedTextPoint {
            var value: __x_ABI_CWindows_CMedia_CCore_CTimedTextPoint = .init()
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Position(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_PositionImpl(_ value: UWP.TimedTextPoint) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Position(pThis, .from(swift: value)))
            }
        }

        internal func get_ExtentImpl() throws -> UWP.TimedTextSize {
            var value: __x_ABI_CWindows_CMedia_CCore_CTimedTextSize = .init()
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Extent(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_ExtentImpl(_ value: UWP.TimedTextSize) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Extent(pThis, .from(swift: value)))
            }
        }

        internal func get_BackgroundImpl() throws -> UWP.Color {
            var value: __x_ABI_CWindows_CUI_CColor = .init()
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Background(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_BackgroundImpl(_ value: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Background(pThis, .from(swift: value)))
            }
        }

        internal func get_WritingModeImpl() throws -> UWP.TimedTextWritingMode {
            var value: __x_ABI_CWindows_CMedia_CCore_CTimedTextWritingMode = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_WritingMode(pThis, &value))
            }
            return value
        }

        internal func put_WritingModeImpl(_ value: UWP.TimedTextWritingMode) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_WritingMode(pThis, value))
            }
        }

        internal func get_DisplayAlignmentImpl() throws -> UWP.TimedTextDisplayAlignment {
            var value: __x_ABI_CWindows_CMedia_CCore_CTimedTextDisplayAlignment = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DisplayAlignment(pThis, &value))
            }
            return value
        }

        internal func put_DisplayAlignmentImpl(_ value: UWP.TimedTextDisplayAlignment) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DisplayAlignment(pThis, value))
            }
        }

        internal func get_LineHeightImpl() throws -> UWP.TimedTextDouble {
            var value: __x_ABI_CWindows_CMedia_CCore_CTimedTextDouble = .init()
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LineHeight(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_LineHeightImpl(_ value: UWP.TimedTextDouble) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LineHeight(pThis, .from(swift: value)))
            }
        }

        internal func get_IsOverflowClippedImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsOverflowClipped(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsOverflowClippedImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsOverflowClipped(pThis, .init(from: value)))
            }
        }

        internal func get_PaddingImpl() throws -> UWP.TimedTextPadding {
            var value: __x_ABI_CWindows_CMedia_CCore_CTimedTextPadding = .init()
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Padding(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_PaddingImpl(_ value: UWP.TimedTextPadding) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Padding(pThis, .from(swift: value)))
            }
        }

        internal func get_TextWrappingImpl() throws -> UWP.TimedTextWrapping {
            var value: __x_ABI_CWindows_CMedia_CCore_CTimedTextWrapping = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextWrapping(pThis, &value))
            }
            return value
        }

        internal func put_TextWrappingImpl(_ value: UWP.TimedTextWrapping) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TextWrapping(pThis, value))
            }
        }

        internal func get_ZIndexImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ZIndex(pThis, &value))
            }
            return value
        }

        internal func put_ZIndexImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ZIndex(pThis, value))
            }
        }

        internal func get_ScrollModeImpl() throws -> UWP.TimedTextScrollMode {
            var value: __x_ABI_CWindows_CMedia_CCore_CTimedTextScrollMode = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ScrollMode(pThis, &value))
            }
            return value
        }

        internal func put_ScrollModeImpl(_ value: UWP.TimedTextScrollMode) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ScrollMode(pThis, value))
            }
        }

    }

    public class ITimedTextSource: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CITimedTextSource }

        internal func add_ResolvedImpl(_ handler: TypedEventHandler<UWP.TimedTextSource?, UWP.TimedTextSourceResolveResultEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CTimedTextSource___x_ABI_CWindows__CMedia__CCore__CTimedTextSourceResolveResultEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Resolved(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ResolvedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Resolved(pThis, token))
            }
        }

    }

    public class ITimedTextSourceResolveResultEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgs }

        internal func get_ErrorImpl() throws -> UWP.TimedMetadataTrackError? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Error(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_TracksImpl() throws -> WindowsFoundation.AnyIVectorView<UWP.TimedMetadataTrack?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Tracks(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataTrackWrapper.unwrapFrom(abi: value)
        }

    }

    public class ITimedTextSourceStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics }

        internal func CreateFromStreamImpl(_ stream: UWP.AnyIRandomAccessStream?) throws -> UWP.TimedTextSource? {
            let (value) = try ComPtrs.initialize { valueAbi in
                let streamWrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper(stream)
                let _stream = try! streamWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromStream(pThis, _stream, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func CreateFromUriImpl(_ uri: WindowsFoundation.Uri?) throws -> UWP.TimedTextSource? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromUri(pThis, RawPointer(uri), &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func CreateFromStreamWithLanguageImpl(_ stream: UWP.AnyIRandomAccessStream?, _ defaultLanguage: String) throws -> UWP.TimedTextSource? {
            let (value) = try ComPtrs.initialize { valueAbi in
                let streamWrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper(stream)
                let _stream = try! streamWrapper?.toABI { $0 }
                let _defaultLanguage = try! HString(defaultLanguage)
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromStreamWithLanguage(pThis, _stream, _defaultLanguage.get(), &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func CreateFromUriWithLanguageImpl(_ uri: WindowsFoundation.Uri?, _ defaultLanguage: String) throws -> UWP.TimedTextSource? {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _defaultLanguage = try! HString(defaultLanguage)
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromUriWithLanguage(pThis, RawPointer(uri), _defaultLanguage.get(), &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class ITimedTextSourceStatics2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2 }

        internal func CreateFromStreamWithIndexImpl(_ stream: UWP.AnyIRandomAccessStream?, _ indexStream: UWP.AnyIRandomAccessStream?) throws -> UWP.TimedTextSource? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let streamWrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper(stream)
                let _stream = try! streamWrapper?.toABI { $0 }
                let indexStreamWrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper(indexStream)
                let _indexStream = try! indexStreamWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromStreamWithIndex(pThis, _stream, _indexStream, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func CreateFromUriWithIndexImpl(_ uri: WindowsFoundation.Uri?, _ indexUri: WindowsFoundation.Uri?) throws -> UWP.TimedTextSource? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromUriWithIndex(pThis, RawPointer(uri), RawPointer(indexUri), &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func CreateFromStreamWithIndexAndLanguageImpl(_ stream: UWP.AnyIRandomAccessStream?, _ indexStream: UWP.AnyIRandomAccessStream?, _ defaultLanguage: String) throws -> UWP.TimedTextSource? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let streamWrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper(stream)
                let _stream = try! streamWrapper?.toABI { $0 }
                let indexStreamWrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper(indexStream)
                let _indexStream = try! indexStreamWrapper?.toABI { $0 }
                let _defaultLanguage = try! HString(defaultLanguage)
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromStreamWithIndexAndLanguage(pThis, _stream, _indexStream, _defaultLanguage.get(), &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func CreateFromUriWithIndexAndLanguageImpl(_ uri: WindowsFoundation.Uri?, _ indexUri: WindowsFoundation.Uri?, _ defaultLanguage: String) throws -> UWP.TimedTextSource? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let _defaultLanguage = try! HString(defaultLanguage)
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromUriWithIndexAndLanguage(pThis, RawPointer(uri), RawPointer(indexUri), _defaultLanguage.get(), &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class ITimedTextStyle: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CITimedTextStyle }

        internal func get_NameImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Name(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_NameImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Name(pThis, _value.get()))
            }
        }

        internal func get_FontFamilyImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontFamily(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_FontFamilyImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontFamily(pThis, _value.get()))
            }
        }

        internal func get_FontSizeImpl() throws -> UWP.TimedTextDouble {
            var value: __x_ABI_CWindows_CMedia_CCore_CTimedTextDouble = .init()
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontSize(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_FontSizeImpl(_ value: UWP.TimedTextDouble) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontSize(pThis, .from(swift: value)))
            }
        }

        internal func get_FontWeightImpl() throws -> UWP.TimedTextWeight {
            var value: __x_ABI_CWindows_CMedia_CCore_CTimedTextWeight = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontWeight(pThis, &value))
            }
            return value
        }

        internal func put_FontWeightImpl(_ value: UWP.TimedTextWeight) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontWeight(pThis, value))
            }
        }

        internal func get_ForegroundImpl() throws -> UWP.Color {
            var value: __x_ABI_CWindows_CUI_CColor = .init()
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Foreground(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_ForegroundImpl(_ value: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Foreground(pThis, .from(swift: value)))
            }
        }

        internal func get_BackgroundImpl() throws -> UWP.Color {
            var value: __x_ABI_CWindows_CUI_CColor = .init()
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Background(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_BackgroundImpl(_ value: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Background(pThis, .from(swift: value)))
            }
        }

        internal func get_IsBackgroundAlwaysShownImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsBackgroundAlwaysShown(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsBackgroundAlwaysShownImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsBackgroundAlwaysShown(pThis, .init(from: value)))
            }
        }

        internal func get_FlowDirectionImpl() throws -> UWP.TimedTextFlowDirection {
            var value: __x_ABI_CWindows_CMedia_CCore_CTimedTextFlowDirection = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FlowDirection(pThis, &value))
            }
            return value
        }

        internal func put_FlowDirectionImpl(_ value: UWP.TimedTextFlowDirection) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FlowDirection(pThis, value))
            }
        }

        internal func get_LineAlignmentImpl() throws -> UWP.TimedTextLineAlignment {
            var value: __x_ABI_CWindows_CMedia_CCore_CTimedTextLineAlignment = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LineAlignment(pThis, &value))
            }
            return value
        }

        internal func put_LineAlignmentImpl(_ value: UWP.TimedTextLineAlignment) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LineAlignment(pThis, value))
            }
        }

        internal func get_OutlineColorImpl() throws -> UWP.Color {
            var value: __x_ABI_CWindows_CUI_CColor = .init()
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_OutlineColor(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_OutlineColorImpl(_ value: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_OutlineColor(pThis, .from(swift: value)))
            }
        }

        internal func get_OutlineThicknessImpl() throws -> UWP.TimedTextDouble {
            var value: __x_ABI_CWindows_CMedia_CCore_CTimedTextDouble = .init()
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_OutlineThickness(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_OutlineThicknessImpl(_ value: UWP.TimedTextDouble) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_OutlineThickness(pThis, .from(swift: value)))
            }
        }

        internal func get_OutlineRadiusImpl() throws -> UWP.TimedTextDouble {
            var value: __x_ABI_CWindows_CMedia_CCore_CTimedTextDouble = .init()
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_OutlineRadius(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_OutlineRadiusImpl(_ value: UWP.TimedTextDouble) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_OutlineRadius(pThis, .from(swift: value)))
            }
        }

    }

    public class ITimedTextStyle2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2 }

        internal func get_FontStyleImpl() throws -> UWP.TimedTextFontStyle {
            var value: __x_ABI_CWindows_CMedia_CCore_CTimedTextFontStyle = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontStyle(pThis, &value))
            }
            return value
        }

        internal func put_FontStyleImpl(_ value: UWP.TimedTextFontStyle) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontStyle(pThis, value))
            }
        }

        internal func get_IsUnderlineEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsUnderlineEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsUnderlineEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsUnderlineEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_IsLineThroughEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsLineThroughEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsLineThroughEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsLineThroughEnabled(pThis, .init(from: value)))
            }
        }

        internal func get_IsOverlineEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsOverlineEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IsOverlineEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsOverlineEnabled(pThis, .init(from: value)))
            }
        }

    }

    public class ITimedTextSubformat: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat }

        internal func get_StartIndexImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_StartIndex(pThis, &value))
            }
            return value
        }

        internal func put_StartIndexImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_StartIndex(pThis, value))
            }
        }

        internal func get_LengthImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Length(pThis, &value))
            }
            return value
        }

        internal func put_LengthImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Length(pThis, value))
            }
        }

        internal func get_SubformatStyleImpl() throws -> UWP.TimedTextStyle? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SubformatStyle(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_SubformatStyleImpl(_ value: UWP.TimedTextStyle?) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SubformatStyle(pThis, RawPointer(value)))
            }
        }

    }

    public class IVideoStabilizationEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect }

        internal func put_EnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Enabled(pThis, .init(from: value)))
            }
        }

        internal func get_EnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Enabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func add_EnabledChangedImpl(_ handler: TypedEventHandler<UWP.VideoStabilizationEffect?, UWP.VideoStabilizationEffectEnabledChangedEventArgs?>?) throws -> EventRegistrationToken {
            var cookie: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CVideoStabilizationEffect___x_ABI_CWindows__CMedia__CCore__CVideoStabilizationEffectEnabledChangedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_EnabledChanged(pThis, _handler, &cookie))
            }
            return cookie
        }

        internal func remove_EnabledChangedImpl(_ cookie: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_EnabledChanged(pThis, cookie))
            }
        }

        internal func GetRecommendedStreamConfigurationImpl(_ controller: UWP.VideoDeviceController?, _ desiredProperties: UWP.VideoEncodingProperties?) throws -> UWP.VideoStreamConfiguration? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetRecommendedStreamConfiguration(pThis, RawPointer(controller), RawPointer(desiredProperties), &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IVideoStabilizationEffectEnabledChangedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgs }

        internal func get_ReasonImpl() throws -> UWP.VideoStabilizationEffectEnabledChangedReason {
            var value: __x_ABI_CWindows_CMedia_CCore_CVideoStabilizationEffectEnabledChangedReason = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Reason(pThis, &value))
            }
            return value
        }

    }

    public class IVideoStreamDescriptor: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor }

        internal func get_EncodingPropertiesImpl() throws -> UWP.VideoEncodingProperties? {
            let (encodingProperties) = try ComPtrs.initialize { encodingPropertiesAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_EncodingProperties(pThis, &encodingPropertiesAbi))
                }
            }
            return .from(abi: encodingProperties)
        }

    }

    public class IVideoStreamDescriptor2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor2 }

        internal func CopyImpl() throws -> UWP.VideoStreamDescriptor? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Copy(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IVideoStreamDescriptorFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorFactory }

        internal func CreateImpl(_ encodingProperties: UWP.VideoEncodingProperties?) throws -> IVideoStreamDescriptor {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, RawPointer(encodingProperties), &resultAbi))
                }
            }
            return IVideoStreamDescriptor(result!)
        }

    }

    public class IVideoTrack: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIVideoTrack }

        internal func add_OpenFailedImpl(_ handler: TypedEventHandler<UWP.VideoTrack?, UWP.VideoTrackOpenFailedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CCore__CVideoTrack___x_ABI_CWindows__CMedia__CCore__CVideoTrackOpenFailedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIVideoTrack.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_OpenFailed(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_OpenFailedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIVideoTrack.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_OpenFailed(pThis, token))
            }
        }

        internal func GetEncodingPropertiesImpl() throws -> UWP.VideoEncodingProperties? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIVideoTrack.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetEncodingProperties(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_PlaybackItemImpl() throws -> UWP.MediaPlaybackItem? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIVideoTrack.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PlaybackItem(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_NameImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIVideoTrack.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Name(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_SupportInfoImpl() throws -> UWP.VideoTrackSupportInfo? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIVideoTrack.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SupportInfo(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IVideoTrackOpenFailedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgs }

        internal func get_ExtendedErrorImpl() throws -> HRESULT {
            var value: HRESULT = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExtendedError(pThis, &value))
            }
            return value
        }

    }

    public class IVideoTrackSupportInfo: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfo }

        internal func get_DecoderStatusImpl() throws -> UWP.MediaDecoderStatus {
            var value: __x_ABI_CWindows_CMedia_CCore_CMediaDecoderStatus = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DecoderStatus(pThis, &value))
            }
            return value
        }

        internal func get_MediaSourceStatusImpl() throws -> UWP.MediaSourceStatus {
            var value: __x_ABI_CWindows_CMedia_CCore_CMediaSourceStatus = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MediaSourceStatus(pThis, &value))
            }
            return value
        }

    }

}
extension __x_ABI_CWindows_CMedia_CCore_CMseTimeRange {
        public static func from(swift: UWP.MseTimeRange) -> __x_ABI_CWindows_CMedia_CCore_CMseTimeRange {
            .init(Start: .from(swift: swift.start), End: .from(swift: swift.end))
        }
    }
    extension __x_ABI_CWindows_CMedia_CCore_CTimedTextDouble {
        public static func from(swift: UWP.TimedTextDouble) -> __x_ABI_CWindows_CMedia_CCore_CTimedTextDouble {
            .init(Value: swift.value, Unit: swift.unit)
        }
    }
    extension __x_ABI_CWindows_CMedia_CCore_CTimedTextPadding {
        public static func from(swift: UWP.TimedTextPadding) -> __x_ABI_CWindows_CMedia_CCore_CTimedTextPadding {
            .init(Before: swift.before, After: swift.after, Start: swift.start, End: swift.end, Unit: swift.unit)
        }
    }
    extension __x_ABI_CWindows_CMedia_CCore_CTimedTextPoint {
        public static func from(swift: UWP.TimedTextPoint) -> __x_ABI_CWindows_CMedia_CCore_CTimedTextPoint {
            .init(X: swift.x, Y: swift.y, Unit: swift.unit)
        }
    }
    extension __x_ABI_CWindows_CMedia_CCore_CTimedTextSize {
        public static func from(swift: UWP.TimedTextSize) -> __x_ABI_CWindows_CMedia_CCore_CTimedTextSize {
            .init(Height: swift.height, Width: swift.width, Unit: swift.unit)
        }
    }
    