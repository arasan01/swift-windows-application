// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.windowmanagement.windowingenvironmentkind)
public typealias WindowingEnvironmentKind = __x_ABI_CWindows_CUI_CWindowManagement_CWindowingEnvironmentKind
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.windowmanagement.displayregion)
public final class DisplayRegion : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_UI_WindowManagement.IDisplayRegion
    private typealias CABI = __x_ABI_CWindows_CUI_CWindowManagement_CIDisplayRegion
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CWindowManagement_CIDisplayRegion>?) -> DisplayRegion? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.windowmanagement.displayregion.displaymonitordeviceid)
    public var displayMonitorDeviceId : String {
        get { try! _default.get_DisplayMonitorDeviceIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.windowmanagement.displayregion.isvisible)
    public var isVisible : Bool {
        get { try! _default.get_IsVisibleImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.windowmanagement.displayregion.windowingenvironment)
    public var windowingEnvironment : WindowingEnvironment! {
        get { try! _default.get_WindowingEnvironmentImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.windowmanagement.displayregion.workareaoffset)
    public var workAreaOffset : WindowsFoundation.Point {
        get { try! _default.get_WorkAreaOffsetImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.windowmanagement.displayregion.workareasize)
    public var workAreaSize : WindowsFoundation.Size {
        get { try! _default.get_WorkAreaSizeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.windowmanagement.displayregion.changed)
    public lazy var changed : Event<TypedEventHandler<DisplayRegion?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ChangedImpl($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.windowmanagement.windowingenvironment)
public final class WindowingEnvironment : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_UI_WindowManagement.IWindowingEnvironment
    private typealias CABI = __x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironment
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironment>?) -> WindowingEnvironment? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IWindowingEnvironmentStatics: __ABI_Windows_UI_WindowManagement.IWindowingEnvironmentStatics = try! RoGetActivationFactory(HString("Windows.UI.WindowManagement.WindowingEnvironment"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.windowmanagement.windowingenvironment.findall)
    public static func findAll() -> WindowsFoundation.AnyIVectorView<WindowingEnvironment?>! {
        return try! _IWindowingEnvironmentStatics.FindAllImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.windowmanagement.windowingenvironment.findall)
    public static func findAll(_ kind: WindowingEnvironmentKind) -> WindowsFoundation.AnyIVectorView<WindowingEnvironment?>! {
        return try! _IWindowingEnvironmentStatics.FindAllWithKindImpl(kind)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.windowmanagement.windowingenvironment.getdisplayregions)
    public func getDisplayRegions() throws -> WindowsFoundation.AnyIVectorView<DisplayRegion?>! {
        try _default.GetDisplayRegionsImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.windowmanagement.windowingenvironment.isenabled)
    public var isEnabled : Bool {
        get { try! _default.get_IsEnabledImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.windowmanagement.windowingenvironment.kind)
    public var kind : WindowingEnvironmentKind {
        get { try! _default.get_KindImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.windowmanagement.windowingenvironment.changed)
    public lazy var changed : Event<TypedEventHandler<WindowingEnvironment?, WindowingEnvironmentChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ChangedImpl($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.windowmanagement.windowingenvironmentchangedeventargs)
public final class WindowingEnvironmentChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_UI_WindowManagement.IWindowingEnvironmentChangedEventArgs
    private typealias CABI = __x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentChangedEventArgs>?) -> WindowingEnvironmentChangedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    deinit {
        _default = nil
    }
}

extension UWP.WindowingEnvironmentKind {
    public static var unknown : UWP.WindowingEnvironmentKind {
        __x_ABI_CWindows_CUI_CWindowManagement_CWindowingEnvironmentKind_Unknown
    }
    public static var overlapped : UWP.WindowingEnvironmentKind {
        __x_ABI_CWindows_CUI_CWindowManagement_CWindowingEnvironmentKind_Overlapped
    }
    public static var tiled : UWP.WindowingEnvironmentKind {
        __x_ABI_CWindows_CUI_CWindowManagement_CWindowingEnvironmentKind_Tiled
    }
}
extension UWP.WindowingEnvironmentKind: @retroactive Hashable, @retroactive Codable {}

