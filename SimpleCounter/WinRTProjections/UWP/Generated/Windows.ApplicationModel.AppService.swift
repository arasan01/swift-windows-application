// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appservice.appserviceclosedstatus)
public typealias AppServiceClosedStatus = __x_ABI_CWindows_CApplicationModel_CAppService_CAppServiceClosedStatus
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appservice.appserviceconnectionstatus)
public typealias AppServiceConnectionStatus = __x_ABI_CWindows_CApplicationModel_CAppService_CAppServiceConnectionStatus
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appservice.appserviceresponsestatus)
public typealias AppServiceResponseStatus = __x_ABI_CWindows_CApplicationModel_CAppService_CAppServiceResponseStatus
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appservice.statelessappserviceresponsestatus)
public typealias StatelessAppServiceResponseStatus = __x_ABI_CWindows_CApplicationModel_CAppService_CStatelessAppServiceResponseStatus
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appservice.appserviceclosedeventargs)
public final class AppServiceClosedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel_AppService.IAppServiceClosedEventArgs
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CAppService_CIAppServiceClosedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CAppService_CIAppServiceClosedEventArgs>?) -> AppServiceClosedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appservice.appserviceclosedeventargs.status)
    public var status : AppServiceClosedStatus {
        get { try! _default.get_StatusImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appservice.appserviceconnection)
public final class AppServiceConnection : WinRTClass, WindowsFoundation.IClosable {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel_AppService.IAppServiceConnection
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CAppService_CIAppServiceConnection
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CAppService_CIAppServiceConnection>?) -> AppServiceConnection? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    override public init() {
        super.init(try! RoActivateInstance(HString("Windows.ApplicationModel.AppService.AppServiceConnection")))
    }

    private static let _IAppServiceConnectionStatics: __ABI_Windows_ApplicationModel_AppService.IAppServiceConnectionStatics = try! RoGetActivationFactory(HString("Windows.ApplicationModel.AppService.AppServiceConnection"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appservice.appserviceconnection.sendstatelessmessageasync)
    public static func sendStatelessMessageAsync(_ connection: AppServiceConnection!, _ connectionRequest: UWP.RemoteSystemConnectionRequest!, _ message: WindowsFoundation.ValueSet!) -> WindowsFoundation.AnyIAsyncOperation<StatelessAppServiceResponse?>! {
        return try! _IAppServiceConnectionStatics.SendStatelessMessageAsyncImpl(connection, connectionRequest, message)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appservice.appserviceconnection.openasync)
    public func openAsync() throws -> WindowsFoundation.AnyIAsyncOperation<AppServiceConnectionStatus>! {
        try _default.OpenAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appservice.appserviceconnection.sendmessageasync)
    public func sendMessageAsync(_ message: WindowsFoundation.ValueSet!) throws -> WindowsFoundation.AnyIAsyncOperation<AppServiceResponse?>! {
        try _default.SendMessageAsyncImpl(message)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appservice.appserviceconnection.appservicename)
    public var appServiceName : String {
        get { try! _default.get_AppServiceNameImpl() }
        set { try! _default.put_AppServiceNameImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appservice.appserviceconnection.packagefamilyname)
    public var packageFamilyName : String {
        get { try! _default.get_PackageFamilyNameImpl() }
        set { try! _default.put_PackageFamilyNameImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appservice.appserviceconnection.requestreceived)
    public lazy var requestReceived : Event<TypedEventHandler<AppServiceConnection?, AppServiceRequestReceivedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_RequestReceivedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_RequestReceivedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appservice.appserviceconnection.serviceclosed)
    public lazy var serviceClosed : Event<TypedEventHandler<AppServiceConnection?, AppServiceClosedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ServiceClosedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ServiceClosedImpl($0)
       }
      )
    }()

    private lazy var _IAppServiceConnection2: __ABI_Windows_ApplicationModel_AppService.IAppServiceConnection2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appservice.appserviceconnection.openremoteasync)
    public func openRemoteAsync(_ remoteSystemConnectionRequest: UWP.RemoteSystemConnectionRequest!) throws -> WindowsFoundation.AnyIAsyncOperation<AppServiceConnectionStatus>! {
        try _IAppServiceConnection2.OpenRemoteAsyncImpl(remoteSystemConnectionRequest)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appservice.appserviceconnection.user)
    public var user : UWP.User! {
        get { try! _IAppServiceConnection2.get_UserImpl() }
        set { try! _IAppServiceConnection2.put_UserImpl(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appservice.appserviceconnection.close)
    public func close() throws {
        try _IClosable.CloseImpl()
    }

    deinit {
        _default = nil
        _IAppServiceConnection2 = nil
        _IClosable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appservice.appservicedeferral)
public final class AppServiceDeferral : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel_AppService.IAppServiceDeferral
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CAppService_CIAppServiceDeferral
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CAppService_CIAppServiceDeferral>?) -> AppServiceDeferral? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appservice.appservicedeferral.complete)
    public func complete() throws {
        try _default.CompleteImpl()
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appservice.appservicerequest)
public final class AppServiceRequest : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel_AppService.IAppServiceRequest
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CAppService_CIAppServiceRequest
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CAppService_CIAppServiceRequest>?) -> AppServiceRequest? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appservice.appservicerequest.sendresponseasync)
    public func sendResponseAsync(_ message: WindowsFoundation.ValueSet!) throws -> WindowsFoundation.AnyIAsyncOperation<AppServiceResponseStatus>! {
        try _default.SendResponseAsyncImpl(message)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appservice.appservicerequest.message)
    public var message : WindowsFoundation.ValueSet! {
        get { try! _default.get_MessageImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appservice.appservicerequestreceivedeventargs)
public final class AppServiceRequestReceivedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel_AppService.IAppServiceRequestReceivedEventArgs
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CAppService_CIAppServiceRequestReceivedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CAppService_CIAppServiceRequestReceivedEventArgs>?) -> AppServiceRequestReceivedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appservice.appservicerequestreceivedeventargs.getdeferral)
    public func getDeferral() throws -> AppServiceDeferral! {
        try _default.GetDeferralImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appservice.appservicerequestreceivedeventargs.request)
    public var request : AppServiceRequest! {
        get { try! _default.get_RequestImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appservice.appserviceresponse)
public final class AppServiceResponse : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel_AppService.IAppServiceResponse
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CAppService_CIAppServiceResponse
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CAppService_CIAppServiceResponse>?) -> AppServiceResponse? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appservice.appserviceresponse.message)
    public var message : WindowsFoundation.ValueSet! {
        get { try! _default.get_MessageImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appservice.appserviceresponse.status)
    public var status : AppServiceResponseStatus {
        get { try! _default.get_StatusImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appservice.statelessappserviceresponse)
public final class StatelessAppServiceResponse : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel_AppService.IStatelessAppServiceResponse
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CAppService_CIStatelessAppServiceResponse
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CAppService_CIStatelessAppServiceResponse>?) -> StatelessAppServiceResponse? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appservice.statelessappserviceresponse.message)
    public var message : WindowsFoundation.ValueSet! {
        get { try! _default.get_MessageImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.appservice.statelessappserviceresponse.status)
    public var status : StatelessAppServiceResponseStatus {
        get { try! _default.get_StatusImpl() }
    }

    deinit {
        _default = nil
    }
}

extension UWP.AppServiceClosedStatus {
    public static var completed : UWP.AppServiceClosedStatus {
        __x_ABI_CWindows_CApplicationModel_CAppService_CAppServiceClosedStatus_Completed
    }
    public static var canceled : UWP.AppServiceClosedStatus {
        __x_ABI_CWindows_CApplicationModel_CAppService_CAppServiceClosedStatus_Canceled
    }
    public static var resourceLimitsExceeded : UWP.AppServiceClosedStatus {
        __x_ABI_CWindows_CApplicationModel_CAppService_CAppServiceClosedStatus_ResourceLimitsExceeded
    }
    public static var unknown : UWP.AppServiceClosedStatus {
        __x_ABI_CWindows_CApplicationModel_CAppService_CAppServiceClosedStatus_Unknown
    }
}
extension UWP.AppServiceClosedStatus: @retroactive Hashable, @retroactive Codable {}

extension UWP.AppServiceConnectionStatus {
    public static var success : UWP.AppServiceConnectionStatus {
        __x_ABI_CWindows_CApplicationModel_CAppService_CAppServiceConnectionStatus_Success
    }
    public static var appNotInstalled : UWP.AppServiceConnectionStatus {
        __x_ABI_CWindows_CApplicationModel_CAppService_CAppServiceConnectionStatus_AppNotInstalled
    }
    public static var appUnavailable : UWP.AppServiceConnectionStatus {
        __x_ABI_CWindows_CApplicationModel_CAppService_CAppServiceConnectionStatus_AppUnavailable
    }
    public static var appServiceUnavailable : UWP.AppServiceConnectionStatus {
        __x_ABI_CWindows_CApplicationModel_CAppService_CAppServiceConnectionStatus_AppServiceUnavailable
    }
    public static var unknown : UWP.AppServiceConnectionStatus {
        __x_ABI_CWindows_CApplicationModel_CAppService_CAppServiceConnectionStatus_Unknown
    }
    public static var remoteSystemUnavailable : UWP.AppServiceConnectionStatus {
        __x_ABI_CWindows_CApplicationModel_CAppService_CAppServiceConnectionStatus_RemoteSystemUnavailable
    }
    public static var remoteSystemNotSupportedByApp : UWP.AppServiceConnectionStatus {
        __x_ABI_CWindows_CApplicationModel_CAppService_CAppServiceConnectionStatus_RemoteSystemNotSupportedByApp
    }
    public static var notAuthorized : UWP.AppServiceConnectionStatus {
        __x_ABI_CWindows_CApplicationModel_CAppService_CAppServiceConnectionStatus_NotAuthorized
    }
}
extension UWP.AppServiceConnectionStatus: @retroactive Hashable, @retroactive Codable {}

extension UWP.AppServiceResponseStatus {
    public static var success : UWP.AppServiceResponseStatus {
        __x_ABI_CWindows_CApplicationModel_CAppService_CAppServiceResponseStatus_Success
    }
    public static var failure : UWP.AppServiceResponseStatus {
        __x_ABI_CWindows_CApplicationModel_CAppService_CAppServiceResponseStatus_Failure
    }
    public static var resourceLimitsExceeded : UWP.AppServiceResponseStatus {
        __x_ABI_CWindows_CApplicationModel_CAppService_CAppServiceResponseStatus_ResourceLimitsExceeded
    }
    public static var unknown : UWP.AppServiceResponseStatus {
        __x_ABI_CWindows_CApplicationModel_CAppService_CAppServiceResponseStatus_Unknown
    }
    public static var remoteSystemUnavailable : UWP.AppServiceResponseStatus {
        __x_ABI_CWindows_CApplicationModel_CAppService_CAppServiceResponseStatus_RemoteSystemUnavailable
    }
    public static var messageSizeTooLarge : UWP.AppServiceResponseStatus {
        __x_ABI_CWindows_CApplicationModel_CAppService_CAppServiceResponseStatus_MessageSizeTooLarge
    }
}
extension UWP.AppServiceResponseStatus: @retroactive Hashable, @retroactive Codable {}

extension UWP.StatelessAppServiceResponseStatus {
    public static var success : UWP.StatelessAppServiceResponseStatus {
        __x_ABI_CWindows_CApplicationModel_CAppService_CStatelessAppServiceResponseStatus_Success
    }
    public static var appNotInstalled : UWP.StatelessAppServiceResponseStatus {
        __x_ABI_CWindows_CApplicationModel_CAppService_CStatelessAppServiceResponseStatus_AppNotInstalled
    }
    public static var appUnavailable : UWP.StatelessAppServiceResponseStatus {
        __x_ABI_CWindows_CApplicationModel_CAppService_CStatelessAppServiceResponseStatus_AppUnavailable
    }
    public static var appServiceUnavailable : UWP.StatelessAppServiceResponseStatus {
        __x_ABI_CWindows_CApplicationModel_CAppService_CStatelessAppServiceResponseStatus_AppServiceUnavailable
    }
    public static var remoteSystemUnavailable : UWP.StatelessAppServiceResponseStatus {
        __x_ABI_CWindows_CApplicationModel_CAppService_CStatelessAppServiceResponseStatus_RemoteSystemUnavailable
    }
    public static var remoteSystemNotSupportedByApp : UWP.StatelessAppServiceResponseStatus {
        __x_ABI_CWindows_CApplicationModel_CAppService_CStatelessAppServiceResponseStatus_RemoteSystemNotSupportedByApp
    }
    public static var notAuthorized : UWP.StatelessAppServiceResponseStatus {
        __x_ABI_CWindows_CApplicationModel_CAppService_CStatelessAppServiceResponseStatus_NotAuthorized
    }
    public static var resourceLimitsExceeded : UWP.StatelessAppServiceResponseStatus {
        __x_ABI_CWindows_CApplicationModel_CAppService_CStatelessAppServiceResponseStatus_ResourceLimitsExceeded
    }
    public static var messageSizeTooLarge : UWP.StatelessAppServiceResponseStatus {
        __x_ABI_CWindows_CApplicationModel_CAppService_CStatelessAppServiceResponseStatus_MessageSizeTooLarge
    }
    public static var failure : UWP.StatelessAppServiceResponseStatus {
        __x_ABI_CWindows_CApplicationModel_CAppService_CStatelessAppServiceResponseStatus_Failure
    }
    public static var unknown : UWP.StatelessAppServiceResponseStatus {
        __x_ABI_CWindows_CApplicationModel_CAppService_CStatelessAppServiceResponseStatus_Unknown
    }
}
extension UWP.StatelessAppServiceResponseStatus: @retroactive Hashable, @retroactive Codable {}

