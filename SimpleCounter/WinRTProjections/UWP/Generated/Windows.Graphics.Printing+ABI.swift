// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

private var IID___x_ABI_CWindows_CGraphics_CPrinting_CIPrintDocumentSource: WindowsFoundation.IID {
    .init(Data1: 0xDEDC0C30, Data2: 0xF1EB, Data3: 0x47DF, Data4: ( 0xAA,0xE6,0xED,0x54,0x27,0x51,0x1F,0x01 ))// DEDC0C30-F1EB-47DF-AAE6-ED5427511F01
}

private var IID___x_ABI_CWindows_CGraphics_CPrinting_CIPrintPageInfo: WindowsFoundation.IID {
    .init(Data1: 0xDD4BE9C9, Data2: 0xA6A1, Data3: 0x4ADA, Data4: ( 0x93,0x0E,0xDA,0x87,0x2A,0x4F,0x23,0xD3 ))// DD4BE9C9-A6A1-4ADA-930E-DA872A4F23D3
}

private var IID___x_ABI_CWindows_CGraphics_CPrinting_CIPrintPageRange: WindowsFoundation.IID {
    .init(Data1: 0xF8A06C54, Data2: 0x6E7C, Data3: 0x51C5, Data4: ( 0x57,0xFD,0x06,0x60,0xC2,0xD7,0x15,0x13 ))// F8A06C54-6E7C-51C5-57FD-0660C2D71513
}

private var IID___x_ABI_CWindows_CGraphics_CPrinting_CIPrintPageRangeFactory: WindowsFoundation.IID {
    .init(Data1: 0x408FD45F, Data2: 0xE047, Data3: 0x5F85, Data4: ( 0x71,0x29,0xFB,0x08,0x5A,0x4F,0xAD,0x14 ))// 408FD45F-E047-5F85-7129-FB085A4FAD14
}

private var IID___x_ABI_CWindows_CGraphics_CPrinting_CIPrintPageRangeOptions: WindowsFoundation.IID {
    .init(Data1: 0xCE6DB728, Data2: 0x1357, Data3: 0x46B2, Data4: ( 0xA9,0x23,0x79,0xF9,0x95,0xF4,0x48,0xFC ))// CE6DB728-1357-46B2-A923-79F995F448FC
}

private var IID___x_ABI_CWindows_CGraphics_CPrinting_CIPrintTaskOptions: WindowsFoundation.IID {
    .init(Data1: 0x5A0A66BB, Data2: 0xD289, Data3: 0x41BB, Data4: ( 0x96,0xDD,0x57,0xE2,0x83,0x38,0xAE,0x3F ))// 5A0A66BB-D289-41BB-96DD-57E28338AE3F
}

private var IID___x_ABI_CWindows_CGraphics_CPrinting_CIPrintTaskOptions2: WindowsFoundation.IID {
    .init(Data1: 0xEB9B1606, Data2: 0x9A36, Data3: 0x4B59, Data4: ( 0x86,0x17,0xB2,0x17,0x84,0x92,0x62,0xE1 ))// EB9B1606-9A36-4B59-8617-B217849262E1
}

private var IID___x_ABI_CWindows_CGraphics_CPrinting_CIPrintTaskOptionsCore: WindowsFoundation.IID {
    .init(Data1: 0x1BDBB474, Data2: 0x4ED1, Data3: 0x41EB, Data4: ( 0xBE,0x3C,0x72,0xD1,0x8E,0xD6,0x73,0x37 ))// 1BDBB474-4ED1-41EB-BE3C-72D18ED67337
}

private var IID___x_ABI_CWindows_CGraphics_CPrinting_CIPrintTaskOptionsCoreProperties: WindowsFoundation.IID {
    .init(Data1: 0xC1B71832, Data2: 0x9E93, Data3: 0x4E55, Data4: ( 0x81,0x4B,0x33,0x26,0xA5,0x9E,0xFC,0xE1 ))// C1B71832-9E93-4E55-814B-3326A59EFCE1
}

private var IID___x_ABI_CWindows_CGraphics_CPrinting_CIPrintTaskOptionsCoreUIConfiguration: WindowsFoundation.IID {
    .init(Data1: 0x62E69E23, Data2: 0x9A1E, Data3: 0x4336, Data4: ( 0xB7,0x4F,0x3C,0xC7,0xF4,0xCF,0xF7,0x09 ))// 62E69E23-9A1E-4336-B74F-3CC7F4CFF709
}

public enum __ABI_Windows_Graphics_Printing {
    public class IPrintDocumentSource: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CGraphics_CPrinting_CIPrintDocumentSource }

    }

    internal static var IPrintDocumentSourceVTable: __x_ABI_CWindows_CGraphics_CPrinting_CIPrintDocumentSourceVtbl = .init(
        QueryInterface: { IPrintDocumentSourceWrapper.queryInterface($0, $1, $2) },
        AddRef: { IPrintDocumentSourceWrapper.addRef($0) },
        Release: { IPrintDocumentSourceWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Graphics_Printing.IPrintDocumentSourceWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Graphics.Printing.IPrintDocumentSource").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        }
    )

    public typealias IPrintDocumentSourceWrapper = InterfaceWrapperBase<__IMPL_Windows_Graphics_Printing.IPrintDocumentSourceBridge>
    public class IPrintPageInfo: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CGraphics_CPrinting_CIPrintPageInfo }

        internal func put_MediaSizeImpl(_ value: UWP.PrintMediaSize) throws {
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CPrinting_CIPrintPageInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MediaSize(pThis, value))
            }
        }

        internal func get_MediaSizeImpl() throws -> UWP.PrintMediaSize {
            var value: __x_ABI_CWindows_CGraphics_CPrinting_CPrintMediaSize = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CPrinting_CIPrintPageInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MediaSize(pThis, &value))
            }
            return value
        }

        internal func put_PageSizeImpl(_ value: WindowsFoundation.Size) throws {
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CPrinting_CIPrintPageInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PageSize(pThis, .from(swift: value)))
            }
        }

        internal func get_PageSizeImpl() throws -> WindowsFoundation.Size {
            var value: __x_ABI_CWindows_CFoundation_CSize = .init()
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CPrinting_CIPrintPageInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PageSize(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_DpiXImpl(_ value: UInt32) throws {
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CPrinting_CIPrintPageInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DpiX(pThis, value))
            }
        }

        internal func get_DpiXImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CPrinting_CIPrintPageInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DpiX(pThis, &value))
            }
            return value
        }

        internal func put_DpiYImpl(_ value: UInt32) throws {
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CPrinting_CIPrintPageInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DpiY(pThis, value))
            }
        }

        internal func get_DpiYImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CPrinting_CIPrintPageInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DpiY(pThis, &value))
            }
            return value
        }

        internal func put_OrientationImpl(_ value: UWP.PrintOrientation) throws {
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CPrinting_CIPrintPageInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Orientation(pThis, value))
            }
        }

        internal func get_OrientationImpl() throws -> UWP.PrintOrientation {
            var value: __x_ABI_CWindows_CGraphics_CPrinting_CPrintOrientation = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CPrinting_CIPrintPageInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Orientation(pThis, &value))
            }
            return value
        }

    }

    public class IPrintPageRange: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CGraphics_CPrinting_CIPrintPageRange }

        internal func get_FirstPageNumberImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CPrinting_CIPrintPageRange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FirstPageNumber(pThis, &value))
            }
            return value
        }

        internal func get_LastPageNumberImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CPrinting_CIPrintPageRange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LastPageNumber(pThis, &value))
            }
            return value
        }

    }

    public class IPrintPageRangeFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CGraphics_CPrinting_CIPrintPageRangeFactory }

        internal func CreateImpl(_ firstPage: Int32, _ lastPage: Int32) throws -> IPrintPageRange {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CGraphics_CPrinting_CIPrintPageRangeFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, firstPage, lastPage, &resultAbi))
                }
            }
            return IPrintPageRange(result!)
        }

        internal func CreateWithSinglePageImpl(_ page: Int32) throws -> IPrintPageRange {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CGraphics_CPrinting_CIPrintPageRangeFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithSinglePage(pThis, page, &resultAbi))
                }
            }
            return IPrintPageRange(result!)
        }

    }

    public class IPrintPageRangeOptions: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CGraphics_CPrinting_CIPrintPageRangeOptions }

        internal func put_AllowAllPagesImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CPrinting_CIPrintPageRangeOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AllowAllPages(pThis, .init(from: value)))
            }
        }

        internal func get_AllowAllPagesImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CPrinting_CIPrintPageRangeOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AllowAllPages(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_AllowCurrentPageImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CPrinting_CIPrintPageRangeOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AllowCurrentPage(pThis, .init(from: value)))
            }
        }

        internal func get_AllowCurrentPageImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CPrinting_CIPrintPageRangeOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AllowCurrentPage(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_AllowCustomSetOfPagesImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CPrinting_CIPrintPageRangeOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AllowCustomSetOfPages(pThis, .init(from: value)))
            }
        }

        internal func get_AllowCustomSetOfPagesImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CPrinting_CIPrintPageRangeOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AllowCustomSetOfPages(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class IPrintTaskOptions: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CGraphics_CPrinting_CIPrintTaskOptions }

        internal func put_BorderingImpl(_ value: UWP.PrintBordering) throws {
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CPrinting_CIPrintTaskOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Bordering(pThis, value))
            }
        }

        internal func get_BorderingImpl() throws -> UWP.PrintBordering {
            var value: __x_ABI_CWindows_CGraphics_CPrinting_CPrintBordering = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CPrinting_CIPrintTaskOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Bordering(pThis, &value))
            }
            return value
        }

        internal func GetPagePrintTicketImpl(_ printPageInfo: UWP.PrintPageInfo?) throws -> UWP.AnyIRandomAccessStream? {
            let (printTicket) = try ComPtrs.initialize { printTicketAbi in
                _ = try perform(as: __x_ABI_CWindows_CGraphics_CPrinting_CIPrintTaskOptions.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetPagePrintTicket(pThis, RawPointer(printPageInfo), &printTicketAbi))
                }
            }
            return __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper.unwrapFrom(abi: printTicket)
        }

    }

    public class IPrintTaskOptions2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CGraphics_CPrinting_CIPrintTaskOptions2 }

        internal func get_PageRangeOptionsImpl() throws -> UWP.PrintPageRangeOptions? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CGraphics_CPrinting_CIPrintTaskOptions2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PageRangeOptions(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_CustomPageRangesImpl() throws -> WindowsFoundation.AnyIVector<UWP.PrintPageRange?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CGraphics_CPrinting_CIPrintTaskOptions2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CustomPageRanges(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVector_1___x_ABI_CWindows__CGraphics__CPrinting__CPrintPageRangeWrapper.unwrapFrom(abi: value)
        }

    }

    public class IPrintTaskOptionsCore: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CGraphics_CPrinting_CIPrintTaskOptionsCore }

        open func GetPageDescriptionImpl(_ jobPageNumber: UInt32) throws -> UWP.PrintPageDescription {
            var description: __x_ABI_CWindows_CGraphics_CPrinting_CPrintPageDescription = .init()
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CPrinting_CIPrintTaskOptionsCore.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetPageDescription(pThis, jobPageNumber, &description))
            }
            return .from(abi: description)
        }

    }

    internal static var IPrintTaskOptionsCoreVTable: __x_ABI_CWindows_CGraphics_CPrinting_CIPrintTaskOptionsCoreVtbl = .init(
        QueryInterface: { IPrintTaskOptionsCoreWrapper.queryInterface($0, $1, $2) },
        AddRef: { IPrintTaskOptionsCoreWrapper.addRef($0) },
        Release: { IPrintTaskOptionsCoreWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Graphics_Printing.IPrintTaskOptionsCoreWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Graphics.Printing.IPrintTaskOptionsCore").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        GetPageDescription: {
            do {
                guard let __unwrapped__instance = IPrintTaskOptionsCoreWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let jobPageNumber: UInt32 = $1
                let description = try __unwrapped__instance.getPageDescription(jobPageNumber)
                $2?.initialize(to: .from(swift: description))
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )

    public typealias IPrintTaskOptionsCoreWrapper = InterfaceWrapperBase<__IMPL_Windows_Graphics_Printing.IPrintTaskOptionsCoreBridge>
    public class IPrintTaskOptionsCoreProperties: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CGraphics_CPrinting_CIPrintTaskOptionsCoreProperties }

        open func put_MediaSizeImpl(_ value: UWP.PrintMediaSize) throws {
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CPrinting_CIPrintTaskOptionsCoreProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MediaSize(pThis, value))
            }
        }

        open func get_MediaSizeImpl() throws -> UWP.PrintMediaSize {
            var value: __x_ABI_CWindows_CGraphics_CPrinting_CPrintMediaSize = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CPrinting_CIPrintTaskOptionsCoreProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MediaSize(pThis, &value))
            }
            return value
        }

        open func put_MediaTypeImpl(_ value: UWP.PrintMediaType) throws {
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CPrinting_CIPrintTaskOptionsCoreProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MediaType(pThis, value))
            }
        }

        open func get_MediaTypeImpl() throws -> UWP.PrintMediaType {
            var value: __x_ABI_CWindows_CGraphics_CPrinting_CPrintMediaType = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CPrinting_CIPrintTaskOptionsCoreProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MediaType(pThis, &value))
            }
            return value
        }

        open func put_OrientationImpl(_ value: UWP.PrintOrientation) throws {
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CPrinting_CIPrintTaskOptionsCoreProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Orientation(pThis, value))
            }
        }

        open func get_OrientationImpl() throws -> UWP.PrintOrientation {
            var value: __x_ABI_CWindows_CGraphics_CPrinting_CPrintOrientation = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CPrinting_CIPrintTaskOptionsCoreProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Orientation(pThis, &value))
            }
            return value
        }

        open func put_PrintQualityImpl(_ value: UWP.PrintQuality) throws {
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CPrinting_CIPrintTaskOptionsCoreProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PrintQuality(pThis, value))
            }
        }

        open func get_PrintQualityImpl() throws -> UWP.PrintQuality {
            var value: __x_ABI_CWindows_CGraphics_CPrinting_CPrintQuality = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CPrinting_CIPrintTaskOptionsCoreProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PrintQuality(pThis, &value))
            }
            return value
        }

        open func put_ColorModeImpl(_ value: UWP.PrintColorMode) throws {
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CPrinting_CIPrintTaskOptionsCoreProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ColorMode(pThis, value))
            }
        }

        open func get_ColorModeImpl() throws -> UWP.PrintColorMode {
            var value: __x_ABI_CWindows_CGraphics_CPrinting_CPrintColorMode = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CPrinting_CIPrintTaskOptionsCoreProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ColorMode(pThis, &value))
            }
            return value
        }

        open func put_DuplexImpl(_ value: UWP.PrintDuplex) throws {
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CPrinting_CIPrintTaskOptionsCoreProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Duplex(pThis, value))
            }
        }

        open func get_DuplexImpl() throws -> UWP.PrintDuplex {
            var value: __x_ABI_CWindows_CGraphics_CPrinting_CPrintDuplex = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CPrinting_CIPrintTaskOptionsCoreProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Duplex(pThis, &value))
            }
            return value
        }

        open func put_CollationImpl(_ value: UWP.PrintCollation) throws {
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CPrinting_CIPrintTaskOptionsCoreProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Collation(pThis, value))
            }
        }

        open func get_CollationImpl() throws -> UWP.PrintCollation {
            var value: __x_ABI_CWindows_CGraphics_CPrinting_CPrintCollation = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CPrinting_CIPrintTaskOptionsCoreProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Collation(pThis, &value))
            }
            return value
        }

        open func put_StapleImpl(_ value: UWP.PrintStaple) throws {
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CPrinting_CIPrintTaskOptionsCoreProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Staple(pThis, value))
            }
        }

        open func get_StapleImpl() throws -> UWP.PrintStaple {
            var value: __x_ABI_CWindows_CGraphics_CPrinting_CPrintStaple = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CPrinting_CIPrintTaskOptionsCoreProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Staple(pThis, &value))
            }
            return value
        }

        open func put_HolePunchImpl(_ value: UWP.PrintHolePunch) throws {
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CPrinting_CIPrintTaskOptionsCoreProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HolePunch(pThis, value))
            }
        }

        open func get_HolePunchImpl() throws -> UWP.PrintHolePunch {
            var value: __x_ABI_CWindows_CGraphics_CPrinting_CPrintHolePunch = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CPrinting_CIPrintTaskOptionsCoreProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HolePunch(pThis, &value))
            }
            return value
        }

        open func put_BindingImpl(_ value: UWP.PrintBinding) throws {
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CPrinting_CIPrintTaskOptionsCoreProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Binding(pThis, value))
            }
        }

        open func get_BindingImpl() throws -> UWP.PrintBinding {
            var value: __x_ABI_CWindows_CGraphics_CPrinting_CPrintBinding = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CPrinting_CIPrintTaskOptionsCoreProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Binding(pThis, &value))
            }
            return value
        }

        open func get_MinCopiesImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CPrinting_CIPrintTaskOptionsCoreProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MinCopies(pThis, &value))
            }
            return value
        }

        open func get_MaxCopiesImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CPrinting_CIPrintTaskOptionsCoreProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxCopies(pThis, &value))
            }
            return value
        }

        open func put_NumberOfCopiesImpl(_ value: UInt32) throws {
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CPrinting_CIPrintTaskOptionsCoreProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_NumberOfCopies(pThis, value))
            }
        }

        open func get_NumberOfCopiesImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CPrinting_CIPrintTaskOptionsCoreProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NumberOfCopies(pThis, &value))
            }
            return value
        }

    }

    internal static var IPrintTaskOptionsCorePropertiesVTable: __x_ABI_CWindows_CGraphics_CPrinting_CIPrintTaskOptionsCorePropertiesVtbl = .init(
        QueryInterface: { IPrintTaskOptionsCorePropertiesWrapper.queryInterface($0, $1, $2) },
        AddRef: { IPrintTaskOptionsCorePropertiesWrapper.addRef($0) },
        Release: { IPrintTaskOptionsCorePropertiesWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Graphics_Printing.IPrintTaskOptionsCorePropertiesWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        put_MediaSize: {
            guard let __unwrapped__instance = IPrintTaskOptionsCorePropertiesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: UWP.PrintMediaSize = $1
            __unwrapped__instance.mediaSize = value
            return S_OK
        },

        get_MediaSize: {
            guard let __unwrapped__instance = IPrintTaskOptionsCorePropertiesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.mediaSize
            $1?.initialize(to: value)
            return S_OK
        },

        put_MediaType: {
            guard let __unwrapped__instance = IPrintTaskOptionsCorePropertiesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: UWP.PrintMediaType = $1
            __unwrapped__instance.mediaType = value
            return S_OK
        },

        get_MediaType: {
            guard let __unwrapped__instance = IPrintTaskOptionsCorePropertiesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.mediaType
            $1?.initialize(to: value)
            return S_OK
        },

        put_Orientation: {
            guard let __unwrapped__instance = IPrintTaskOptionsCorePropertiesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: UWP.PrintOrientation = $1
            __unwrapped__instance.orientation = value
            return S_OK
        },

        get_Orientation: {
            guard let __unwrapped__instance = IPrintTaskOptionsCorePropertiesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.orientation
            $1?.initialize(to: value)
            return S_OK
        },

        put_PrintQuality: {
            guard let __unwrapped__instance = IPrintTaskOptionsCorePropertiesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: UWP.PrintQuality = $1
            __unwrapped__instance.printQuality = value
            return S_OK
        },

        get_PrintQuality: {
            guard let __unwrapped__instance = IPrintTaskOptionsCorePropertiesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.printQuality
            $1?.initialize(to: value)
            return S_OK
        },

        put_ColorMode: {
            guard let __unwrapped__instance = IPrintTaskOptionsCorePropertiesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: UWP.PrintColorMode = $1
            __unwrapped__instance.colorMode = value
            return S_OK
        },

        get_ColorMode: {
            guard let __unwrapped__instance = IPrintTaskOptionsCorePropertiesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.colorMode
            $1?.initialize(to: value)
            return S_OK
        },

        put_Duplex: {
            guard let __unwrapped__instance = IPrintTaskOptionsCorePropertiesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: UWP.PrintDuplex = $1
            __unwrapped__instance.duplex = value
            return S_OK
        },

        get_Duplex: {
            guard let __unwrapped__instance = IPrintTaskOptionsCorePropertiesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.duplex
            $1?.initialize(to: value)
            return S_OK
        },

        put_Collation: {
            guard let __unwrapped__instance = IPrintTaskOptionsCorePropertiesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: UWP.PrintCollation = $1
            __unwrapped__instance.collation = value
            return S_OK
        },

        get_Collation: {
            guard let __unwrapped__instance = IPrintTaskOptionsCorePropertiesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.collation
            $1?.initialize(to: value)
            return S_OK
        },

        put_Staple: {
            guard let __unwrapped__instance = IPrintTaskOptionsCorePropertiesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: UWP.PrintStaple = $1
            __unwrapped__instance.staple = value
            return S_OK
        },

        get_Staple: {
            guard let __unwrapped__instance = IPrintTaskOptionsCorePropertiesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.staple
            $1?.initialize(to: value)
            return S_OK
        },

        put_HolePunch: {
            guard let __unwrapped__instance = IPrintTaskOptionsCorePropertiesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: UWP.PrintHolePunch = $1
            __unwrapped__instance.holePunch = value
            return S_OK
        },

        get_HolePunch: {
            guard let __unwrapped__instance = IPrintTaskOptionsCorePropertiesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.holePunch
            $1?.initialize(to: value)
            return S_OK
        },

        put_Binding: {
            guard let __unwrapped__instance = IPrintTaskOptionsCorePropertiesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: UWP.PrintBinding = $1
            __unwrapped__instance.binding = value
            return S_OK
        },

        get_Binding: {
            guard let __unwrapped__instance = IPrintTaskOptionsCorePropertiesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.binding
            $1?.initialize(to: value)
            return S_OK
        },

        get_MinCopies: {
            guard let __unwrapped__instance = IPrintTaskOptionsCorePropertiesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.minCopies
            $1?.initialize(to: value)
            return S_OK
        },

        get_MaxCopies: {
            guard let __unwrapped__instance = IPrintTaskOptionsCorePropertiesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.maxCopies
            $1?.initialize(to: value)
            return S_OK
        },

        put_NumberOfCopies: {
            guard let __unwrapped__instance = IPrintTaskOptionsCorePropertiesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: UInt32 = $1
            __unwrapped__instance.numberOfCopies = value
            return S_OK
        },

        get_NumberOfCopies: {
            guard let __unwrapped__instance = IPrintTaskOptionsCorePropertiesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.numberOfCopies
            $1?.initialize(to: value)
            return S_OK
        }
    )

    public typealias IPrintTaskOptionsCorePropertiesWrapper = InterfaceWrapperBase<__IMPL_Windows_Graphics_Printing.IPrintTaskOptionsCorePropertiesBridge>
    public class IPrintTaskOptionsCoreUIConfiguration: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CGraphics_CPrinting_CIPrintTaskOptionsCoreUIConfiguration }

        open func get_DisplayedOptionsImpl() throws -> WindowsFoundation.AnyIVector<String>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CGraphics_CPrinting_CIPrintTaskOptionsCoreUIConfiguration.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DisplayedOptions(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVector_1_HSTRINGWrapper.unwrapFrom(abi: value)
        }

    }

    internal static var IPrintTaskOptionsCoreUIConfigurationVTable: __x_ABI_CWindows_CGraphics_CPrinting_CIPrintTaskOptionsCoreUIConfigurationVtbl = .init(
        QueryInterface: { IPrintTaskOptionsCoreUIConfigurationWrapper.queryInterface($0, $1, $2) },
        AddRef: { IPrintTaskOptionsCoreUIConfigurationWrapper.addRef($0) },
        Release: { IPrintTaskOptionsCoreUIConfigurationWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Graphics_Printing.IPrintTaskOptionsCoreUIConfigurationWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Graphics.Printing.IPrintTaskOptionsCoreUIConfiguration").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_DisplayedOptions: {
            guard let __unwrapped__instance = IPrintTaskOptionsCoreUIConfigurationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.displayedOptions
            let valueWrapper = UWP.__x_ABI_C__FIVector_1_HSTRINGWrapper(value)
            valueWrapper?.copyTo($1)
            return S_OK
        }
    )

    public typealias IPrintTaskOptionsCoreUIConfigurationWrapper = InterfaceWrapperBase<__IMPL_Windows_Graphics_Printing.IPrintTaskOptionsCoreUIConfigurationBridge>
}
extension __x_ABI_CWindows_CGraphics_CPrinting_CPrintPageDescription {
        public static func from(swift: UWP.PrintPageDescription) -> __x_ABI_CWindows_CGraphics_CPrinting_CPrintPageDescription {
            .init(PageSize: .from(swift: swift.pageSize), ImageableRect: .from(swift: swift.imageableRect), DpiX: swift.dpiX, DpiY: swift.dpiY)
        }
    }
    