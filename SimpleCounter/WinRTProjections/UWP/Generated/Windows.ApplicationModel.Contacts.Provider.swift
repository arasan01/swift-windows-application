// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.provider.addcontactresult)
public typealias AddContactResult = __x_ABI_CWindows_CApplicationModel_CContacts_CProvider_CAddContactResult
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.provider.contactpickerui)
public final class ContactPickerUI : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel_Contacts_Provider.IContactPickerUI
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CContacts_CProvider_CIContactPickerUI
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CContacts_CProvider_CIContactPickerUI>?) -> ContactPickerUI? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.provider.contactpickerui.addcontact)
    public func addContact(_ id: String, _ contact: UWP.Contact!) throws -> AddContactResult {
        try _default.AddContactImpl(id, contact)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.provider.contactpickerui.removecontact)
    public func removeContact(_ id: String) throws {
        try _default.RemoveContactImpl(id)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.provider.contactpickerui.containscontact)
    public func containsContact(_ id: String) throws -> Bool {
        try _default.ContainsContactImpl(id)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.provider.contactpickerui.desiredfields)
    public var desiredFields : WindowsFoundation.AnyIVectorView<String>! {
        get { try! _default.get_DesiredFieldsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.provider.contactpickerui.selectionmode)
    public var selectionMode : UWP.ContactSelectionMode {
        get { try! _default.get_SelectionModeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.provider.contactpickerui.contactremoved)
    public lazy var contactRemoved : Event<TypedEventHandler<ContactPickerUI?, ContactRemovedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ContactRemovedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ContactRemovedImpl($0)
       }
      )
    }()

    private lazy var _IContactPickerUI2: __ABI_Windows_ApplicationModel_Contacts_Provider.IContactPickerUI2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.provider.contactpickerui.addcontact)
    public func addContact(_ contact: UWP.Contact!) throws -> AddContactResult {
        try _IContactPickerUI2.AddContactImpl(contact)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.provider.contactpickerui.desiredfieldswithcontactfieldtype)
    public var desiredFieldsWithContactFieldType : WindowsFoundation.AnyIVector<UWP.ContactFieldType>! {
        get { try! _IContactPickerUI2.get_DesiredFieldsWithContactFieldTypeImpl() }
    }

    deinit {
        _default = nil
        _IContactPickerUI2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.provider.contactremovedeventargs)
public final class ContactRemovedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_ApplicationModel_Contacts_Provider.IContactRemovedEventArgs
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CContacts_CProvider_CIContactRemovedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CContacts_CProvider_CIContactRemovedEventArgs>?) -> ContactRemovedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.contacts.provider.contactremovedeventargs.id)
    public var id : String {
        get { try! _default.get_IdImpl() }
    }

    deinit {
        _default = nil
    }
}

extension UWP.AddContactResult {
    public static var added : UWP.AddContactResult {
        __x_ABI_CWindows_CApplicationModel_CContacts_CProvider_CAddContactResult_Added
    }
    public static var alreadyAdded : UWP.AddContactResult {
        __x_ABI_CWindows_CApplicationModel_CContacts_CProvider_CAddContactResult_AlreadyAdded
    }
    public static var unavailable : UWP.AddContactResult {
        __x_ABI_CWindows_CApplicationModel_CContacts_CProvider_CAddContactResult_Unavailable
    }
}
extension UWP.AddContactResult: @retroactive Hashable, @retroactive Codable {}

