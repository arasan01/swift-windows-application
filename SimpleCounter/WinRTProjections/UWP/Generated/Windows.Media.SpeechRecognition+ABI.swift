// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

private var IID___x_ABI_CWindows_CMedia_CSpeechRecognition_CISpeechRecognitionConstraint: WindowsFoundation.IID {
    .init(Data1: 0x79AC1628, Data2: 0x4D68, Data3: 0x43C4, Data4: ( 0x89,0x11,0x40,0xDC,0x41,0x01,0xB5,0x5B ))// 79AC1628-4D68-43C4-8911-40DC4101B55B
}

private var IID___x_ABI_CWindows_CMedia_CSpeechRecognition_CISpeechRecognitionResult: WindowsFoundation.IID {
    .init(Data1: 0x4E303157, Data2: 0x034E, Data3: 0x4652, Data4: ( 0x85,0x7E,0xD0,0x45,0x4C,0xC4,0xBE,0xEC ))// 4E303157-034E-4652-857E-D0454CC4BEEC
}

private var IID___x_ABI_CWindows_CMedia_CSpeechRecognition_CISpeechRecognitionResult2: WindowsFoundation.IID {
    .init(Data1: 0xAF7ED1BA, Data2: 0x451B, Data3: 0x4166, Data4: ( 0xA0,0xC1,0x1F,0xFE,0x84,0x03,0x2D,0x03 ))// AF7ED1BA-451B-4166-A0C1-1FFE84032D03
}

private var IID___x_ABI_CWindows_CMedia_CSpeechRecognition_CISpeechRecognitionSemanticInterpretation: WindowsFoundation.IID {
    .init(Data1: 0xAAE1DA9B, Data2: 0x7E32, Data3: 0x4C1F, Data4: ( 0x89,0xFE,0x0C,0x65,0xF4,0x86,0xF5,0x2E ))// AAE1DA9B-7E32-4C1F-89FE-0C65F486F52E
}

public enum __ABI_Windows_Media_SpeechRecognition {
    public class ISpeechRecognitionConstraint: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CSpeechRecognition_CISpeechRecognitionConstraint }

        open func get_IsEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CSpeechRecognition_CISpeechRecognitionConstraint.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        open func put_IsEnabledImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CSpeechRecognition_CISpeechRecognitionConstraint.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsEnabled(pThis, .init(from: value)))
            }
        }

        open func get_TagImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CSpeechRecognition_CISpeechRecognitionConstraint.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Tag(pThis, &value))
            }
            return .init(from: value)
        }

        open func put_TagImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CSpeechRecognition_CISpeechRecognitionConstraint.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Tag(pThis, _value.get()))
            }
        }

        open func get_TypeImpl() throws -> UWP.SpeechRecognitionConstraintType {
            var value: __x_ABI_CWindows_CMedia_CSpeechRecognition_CSpeechRecognitionConstraintType = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CSpeechRecognition_CISpeechRecognitionConstraint.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Type(pThis, &value))
            }
            return value
        }

        open func get_ProbabilityImpl() throws -> UWP.SpeechRecognitionConstraintProbability {
            var value: __x_ABI_CWindows_CMedia_CSpeechRecognition_CSpeechRecognitionConstraintProbability = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CSpeechRecognition_CISpeechRecognitionConstraint.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Probability(pThis, &value))
            }
            return value
        }

        open func put_ProbabilityImpl(_ value: UWP.SpeechRecognitionConstraintProbability) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CSpeechRecognition_CISpeechRecognitionConstraint.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Probability(pThis, value))
            }
        }

    }

    internal static var ISpeechRecognitionConstraintVTable: __x_ABI_CWindows_CMedia_CSpeechRecognition_CISpeechRecognitionConstraintVtbl = .init(
        QueryInterface: { ISpeechRecognitionConstraintWrapper.queryInterface($0, $1, $2) },
        AddRef: { ISpeechRecognitionConstraintWrapper.addRef($0) },
        Release: { ISpeechRecognitionConstraintWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Media_SpeechRecognition.ISpeechRecognitionConstraintWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_IsEnabled: {
            guard let __unwrapped__instance = ISpeechRecognitionConstraintWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.isEnabled
            $1?.initialize(to: .init(from: value))
            return S_OK
        },

        put_IsEnabled: {
            guard let __unwrapped__instance = ISpeechRecognitionConstraintWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: Bool = .init(from: $1)
            __unwrapped__instance.isEnabled = value
            return S_OK
        },

        get_Tag: {
            guard let __unwrapped__instance = ISpeechRecognitionConstraintWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.tag
            $1?.initialize(to: try! HString(value).detach())
            return S_OK
        },

        put_Tag: {
            guard let __unwrapped__instance = ISpeechRecognitionConstraintWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: String = .init(from: $1)
            __unwrapped__instance.tag = value
            return S_OK
        },

        get_Type: {
            guard let __unwrapped__instance = ISpeechRecognitionConstraintWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.type
            $1?.initialize(to: value)
            return S_OK
        },

        get_Probability: {
            guard let __unwrapped__instance = ISpeechRecognitionConstraintWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.probability
            $1?.initialize(to: value)
            return S_OK
        },

        put_Probability: {
            guard let __unwrapped__instance = ISpeechRecognitionConstraintWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: UWP.SpeechRecognitionConstraintProbability = $1
            __unwrapped__instance.probability = value
            return S_OK
        }
    )

    public typealias ISpeechRecognitionConstraintWrapper = InterfaceWrapperBase<__IMPL_Windows_Media_SpeechRecognition.ISpeechRecognitionConstraintBridge>
    public class ISpeechRecognitionResult: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CSpeechRecognition_CISpeechRecognitionResult }

        internal func get_StatusImpl() throws -> UWP.SpeechRecognitionResultStatus {
            var value: __x_ABI_CWindows_CMedia_CSpeechRecognition_CSpeechRecognitionResultStatus = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CSpeechRecognition_CISpeechRecognitionResult.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Status(pThis, &value))
            }
            return value
        }

        internal func get_TextImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CSpeechRecognition_CISpeechRecognitionResult.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Text(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_ConfidenceImpl() throws -> UWP.SpeechRecognitionConfidence {
            var value: __x_ABI_CWindows_CMedia_CSpeechRecognition_CSpeechRecognitionConfidence = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CSpeechRecognition_CISpeechRecognitionResult.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Confidence(pThis, &value))
            }
            return value
        }

        internal func get_SemanticInterpretationImpl() throws -> UWP.SpeechRecognitionSemanticInterpretation? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CSpeechRecognition_CISpeechRecognitionResult.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SemanticInterpretation(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func GetAlternatesImpl(_ maxAlternates: UInt32) throws -> WindowsFoundation.AnyIVectorView<UWP.SpeechRecognitionResult?>? {
            let (alternates) = try ComPtrs.initialize { alternatesAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CSpeechRecognition_CISpeechRecognitionResult.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetAlternates(pThis, maxAlternates, &alternatesAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CSpeechRecognition__CSpeechRecognitionResultWrapper.unwrapFrom(abi: alternates)
        }

        internal func get_ConstraintImpl() throws -> UWP.AnyISpeechRecognitionConstraint? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CSpeechRecognition_CISpeechRecognitionResult.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Constraint(pThis, &valueAbi))
                }
            }
            return __ABI_Windows_Media_SpeechRecognition.ISpeechRecognitionConstraintWrapper.unwrapFrom(abi: value)
        }

        internal func get_RulePathImpl() throws -> WindowsFoundation.AnyIVectorView<String>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CSpeechRecognition_CISpeechRecognitionResult.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_RulePath(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1_HSTRINGWrapper.unwrapFrom(abi: value)
        }

        internal func get_RawConfidenceImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CSpeechRecognition_CISpeechRecognitionResult.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_RawConfidence(pThis, &value))
            }
            return value
        }

    }

    public class ISpeechRecognitionResult2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CSpeechRecognition_CISpeechRecognitionResult2 }

        internal func get_PhraseStartTimeImpl() throws -> WindowsFoundation.DateTime {
            var value: __x_ABI_CWindows_CFoundation_CDateTime = .init()
            _ = try perform(as: __x_ABI_CWindows_CMedia_CSpeechRecognition_CISpeechRecognitionResult2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PhraseStartTime(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_PhraseDurationImpl() throws -> WindowsFoundation.TimeSpan {
            var value: __x_ABI_CWindows_CFoundation_CTimeSpan = .init()
            _ = try perform(as: __x_ABI_CWindows_CMedia_CSpeechRecognition_CISpeechRecognitionResult2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PhraseDuration(pThis, &value))
            }
            return .from(abi: value)
        }

    }

    public class ISpeechRecognitionSemanticInterpretation: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CSpeechRecognition_CISpeechRecognitionSemanticInterpretation }

        internal func get_PropertiesImpl() throws -> WindowsFoundation.AnyIMapView<String, WindowsFoundation.AnyIVectorView<String>?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CSpeechRecognition_CISpeechRecognitionSemanticInterpretation.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Properties(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVectorView_1_HSTRINGWrapper.unwrapFrom(abi: value)
        }

    }

}
