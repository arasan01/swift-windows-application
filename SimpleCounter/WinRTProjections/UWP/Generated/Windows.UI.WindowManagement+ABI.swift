// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

private var IID___x_ABI_CWindows_CUI_CWindowManagement_CIDisplayRegion: WindowsFoundation.IID {
    .init(Data1: 0xDB50C3A2, Data2: 0x4094, Data3: 0x5F47, Data4: ( 0x8C,0xB1,0xEA,0x01,0xDD,0xAF,0xAA,0x94 ))// DB50C3A2-4094-5F47-8CB1-EA01DDAFAA94
}

private var IID___x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironment: WindowsFoundation.IID {
    .init(Data1: 0x264363C0, Data2: 0x2A49, Data3: 0x5417, Data4: ( 0xB3,0xAE,0x48,0xA7,0x1C,0x63,0xA3,0xBD ))// 264363C0-2A49-5417-B3AE-48A71C63A3BD
}

private var IID___x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentChangedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x4160CFC6, Data2: 0x023D, Data3: 0x5E9A, Data4: ( 0xB4,0x31,0x35,0x0E,0x67,0xDC,0x97,0x8A ))// 4160CFC6-023D-5E9A-B431-350E67DC978A
}

private var IID___x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentStatics: WindowsFoundation.IID {
    .init(Data1: 0x874E9FB7, Data2: 0xC642, Data3: 0x55AB, Data4: ( 0x8A,0xA2,0x16,0x2F,0x73,0x4A,0x9A,0x72 ))// 874E9FB7-C642-55AB-8AA2-162F734A9A72
}

public enum __ABI_Windows_UI_WindowManagement {
    public class IDisplayRegion: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CWindowManagement_CIDisplayRegion }

        internal func get_DisplayMonitorDeviceIdImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CUI_CWindowManagement_CIDisplayRegion.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DisplayMonitorDeviceId(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_IsVisibleImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CUI_CWindowManagement_CIDisplayRegion.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsVisible(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_WorkAreaOffsetImpl() throws -> WindowsFoundation.Point {
            var value: __x_ABI_CWindows_CFoundation_CPoint = .init()
            _ = try perform(as: __x_ABI_CWindows_CUI_CWindowManagement_CIDisplayRegion.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_WorkAreaOffset(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_WorkAreaSizeImpl() throws -> WindowsFoundation.Size {
            var value: __x_ABI_CWindows_CFoundation_CSize = .init()
            _ = try perform(as: __x_ABI_CWindows_CUI_CWindowManagement_CIDisplayRegion.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_WorkAreaSize(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_WindowingEnvironmentImpl() throws -> UWP.WindowingEnvironment? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CWindowManagement_CIDisplayRegion.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_WindowingEnvironment(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func add_ChangedImpl(_ handler: TypedEventHandler<UWP.DisplayRegion?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegion_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CUI_CWindowManagement_CIDisplayRegion.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Changed(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CUI_CWindowManagement_CIDisplayRegion.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Changed(pThis, token))
            }
        }

    }

    public class IWindowingEnvironment: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironment }

        internal func get_IsEnabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironment.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_KindImpl() throws -> UWP.WindowingEnvironmentKind {
            var value: __x_ABI_CWindows_CUI_CWindowManagement_CWindowingEnvironmentKind = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironment.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Kind(pThis, &value))
            }
            return value
        }

        internal func GetDisplayRegionsImpl() throws -> WindowsFoundation.AnyIVectorView<UWP.DisplayRegion?>? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironment.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDisplayRegions(pThis, &resultAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CDisplayRegionWrapper.unwrapFrom(abi: result)
        }

        internal func add_ChangedImpl(_ handler: TypedEventHandler<UWP.WindowingEnvironment?, UWP.WindowingEnvironmentChangedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironment___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironmentChangedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironment.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Changed(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironment.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Changed(pThis, token))
            }
        }

    }

    public class IWindowingEnvironmentChangedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentChangedEventArgs }

    }

    public class IWindowingEnvironmentStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentStatics }

        internal func FindAllImpl() throws -> WindowsFoundation.AnyIVectorView<UWP.WindowingEnvironment?>? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.FindAll(pThis, &resultAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironmentWrapper.unwrapFrom(abi: result)
        }

        internal func FindAllWithKindImpl(_ kind: UWP.WindowingEnvironmentKind) throws -> WindowsFoundation.AnyIVectorView<UWP.WindowingEnvironment?>? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CWindowManagement_CIWindowingEnvironmentStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.FindAllWithKind(pThis, kind, &resultAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CWindowManagement__CWindowingEnvironmentWrapper.unwrapFrom(abi: result)
        }

    }

}
