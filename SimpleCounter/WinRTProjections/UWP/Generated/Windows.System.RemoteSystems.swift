// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.remotesystems.remotesystemaccessstatus)
public typealias RemoteSystemAccessStatus = __x_ABI_CWindows_CSystem_CRemoteSystems_CRemoteSystemAccessStatus
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.remotesystems.remotesystemauthorizationkind)
public typealias RemoteSystemAuthorizationKind = __x_ABI_CWindows_CSystem_CRemoteSystems_CRemoteSystemAuthorizationKind
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.remotesystems.remotesystemplatform)
public typealias RemoteSystemPlatform = __x_ABI_CWindows_CSystem_CRemoteSystems_CRemoteSystemPlatform
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.remotesystems.remotesystemstatus)
public typealias RemoteSystemStatus = __x_ABI_CWindows_CSystem_CRemoteSystems_CRemoteSystemStatus
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.remotesystems.remotesystemwatchererror)
public typealias RemoteSystemWatcherError = __x_ABI_CWindows_CSystem_CRemoteSystems_CRemoteSystemWatcherError
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.remotesystems.remotesystem)
public final class RemoteSystem : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_System_RemoteSystems.IRemoteSystem
    private typealias CABI = __x_ABI_CWindows_CSystem_CRemoteSystems_CIRemoteSystem
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CSystem_CRemoteSystems_CIRemoteSystem>?) -> RemoteSystem? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IRemoteSystemStatics: __ABI_Windows_System_RemoteSystems.IRemoteSystemStatics = try! RoGetActivationFactory(HString("Windows.System.RemoteSystems.RemoteSystem"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.remotesystems.remotesystem.findbyhostnameasync)
    public static func findByHostNameAsync(_ hostName: UWP.HostName!) -> WindowsFoundation.AnyIAsyncOperation<RemoteSystem?>! {
        return try! _IRemoteSystemStatics.FindByHostNameAsyncImpl(hostName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.remotesystems.remotesystem.createwatcher)
    public static func createWatcher() -> RemoteSystemWatcher! {
        return try! _IRemoteSystemStatics.CreateWatcherImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.remotesystems.remotesystem.createwatcher)
    public static func createWatcher(_ filters: WindowsFoundation.AnyIIterable<AnyIRemoteSystemFilter?>!) -> RemoteSystemWatcher! {
        return try! _IRemoteSystemStatics.CreateWatcherWithFiltersImpl(filters)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.remotesystems.remotesystem.requestaccessasync)
    public static func requestAccessAsync() -> WindowsFoundation.AnyIAsyncOperation<RemoteSystemAccessStatus>! {
        return try! _IRemoteSystemStatics.RequestAccessAsyncImpl()
    }

    private static let _IRemoteSystemStatics2: __ABI_Windows_System_RemoteSystems.IRemoteSystemStatics2 = try! RoGetActivationFactory(HString("Windows.System.RemoteSystems.RemoteSystem"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.remotesystems.remotesystem.isauthorizationkindenabled)
    public static func isAuthorizationKindEnabled(_ kind: RemoteSystemAuthorizationKind) -> Bool {
        return try! _IRemoteSystemStatics2.IsAuthorizationKindEnabledImpl(kind)
    }

    private static let _IRemoteSystemStatics3: __ABI_Windows_System_RemoteSystems.IRemoteSystemStatics3 = try! RoGetActivationFactory(HString("Windows.System.RemoteSystems.RemoteSystem"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.remotesystems.remotesystem.createwatcherforuser)
    public static func createWatcherForUser(_ user: UWP.User!) -> RemoteSystemWatcher! {
        return try! _IRemoteSystemStatics3.CreateWatcherForUserImpl(user)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.remotesystems.remotesystem.createwatcherforuser)
    public static func createWatcherForUser(_ user: UWP.User!, _ filters: WindowsFoundation.AnyIIterable<AnyIRemoteSystemFilter?>!) -> RemoteSystemWatcher! {
        return try! _IRemoteSystemStatics3.CreateWatcherWithFiltersForUserImpl(user, filters)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.remotesystems.remotesystem.displayname)
    public var displayName : String {
        get { try! _default.get_DisplayNameImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.remotesystems.remotesystem.id)
    public var id : String {
        get { try! _default.get_IdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.remotesystems.remotesystem.isavailablebyproximity)
    public var isAvailableByProximity : Bool {
        get { try! _default.get_IsAvailableByProximityImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.remotesystems.remotesystem.kind)
    public var kind : String {
        get { try! _default.get_KindImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.remotesystems.remotesystem.status)
    public var status : RemoteSystemStatus {
        get { try! _default.get_StatusImpl() }
    }

    private lazy var _IRemoteSystem2: __ABI_Windows_System_RemoteSystems.IRemoteSystem2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.remotesystems.remotesystem.getcapabilitysupportedasync)
    public func getCapabilitySupportedAsync(_ capabilityName: String) throws -> WindowsFoundation.AnyIAsyncOperation<Bool>! {
        try _IRemoteSystem2.GetCapabilitySupportedAsyncImpl(capabilityName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.remotesystems.remotesystem.isavailablebyspatialproximity)
    public var isAvailableBySpatialProximity : Bool {
        get { try! _IRemoteSystem2.get_IsAvailableBySpatialProximityImpl() }
    }

    private lazy var _IRemoteSystem3: __ABI_Windows_System_RemoteSystems.IRemoteSystem3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.remotesystems.remotesystem.manufacturerdisplayname)
    public var manufacturerDisplayName : String {
        get { try! _IRemoteSystem3.get_ManufacturerDisplayNameImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.remotesystems.remotesystem.modeldisplayname)
    public var modelDisplayName : String {
        get { try! _IRemoteSystem3.get_ModelDisplayNameImpl() }
    }

    private lazy var _IRemoteSystem4: __ABI_Windows_System_RemoteSystems.IRemoteSystem4! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.remotesystems.remotesystem.platform)
    public var platform : RemoteSystemPlatform {
        get { try! _IRemoteSystem4.get_PlatformImpl() }
    }

    private lazy var _IRemoteSystem5: __ABI_Windows_System_RemoteSystems.IRemoteSystem5! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.remotesystems.remotesystem.apps)
    public var apps : WindowsFoundation.AnyIVectorView<RemoteSystemApp?>! {
        get { try! _IRemoteSystem5.get_AppsImpl() }
    }

    private lazy var _IRemoteSystem6: __ABI_Windows_System_RemoteSystems.IRemoteSystem6! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.remotesystems.remotesystem.user)
    public var user : UWP.User! {
        get { try! _IRemoteSystem6.get_UserImpl() }
    }

    deinit {
        _default = nil
        _IRemoteSystem2 = nil
        _IRemoteSystem3 = nil
        _IRemoteSystem4 = nil
        _IRemoteSystem5 = nil
        _IRemoteSystem6 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.remotesystems.remotesystemaddedeventargs)
public final class RemoteSystemAddedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_System_RemoteSystems.IRemoteSystemAddedEventArgs
    private typealias CABI = __x_ABI_CWindows_CSystem_CRemoteSystems_CIRemoteSystemAddedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CSystem_CRemoteSystems_CIRemoteSystemAddedEventArgs>?) -> RemoteSystemAddedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.remotesystems.remotesystemaddedeventargs.remotesystem)
    public var remoteSystem : RemoteSystem! {
        get { try! _default.get_RemoteSystemImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.remotesystems.remotesystemapp)
public final class RemoteSystemApp : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_System_RemoteSystems.IRemoteSystemApp
    private typealias CABI = __x_ABI_CWindows_CSystem_CRemoteSystems_CIRemoteSystemApp
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CSystem_CRemoteSystems_CIRemoteSystemApp>?) -> RemoteSystemApp? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.remotesystems.remotesystemapp.attributes)
    public var attributes : WindowsFoundation.AnyIMapView<String, String>! {
        get { try! _default.get_AttributesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.remotesystems.remotesystemapp.displayname)
    public var displayName : String {
        get { try! _default.get_DisplayNameImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.remotesystems.remotesystemapp.id)
    public var id : String {
        get { try! _default.get_IdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.remotesystems.remotesystemapp.isavailablebyproximity)
    public var isAvailableByProximity : Bool {
        get { try! _default.get_IsAvailableByProximityImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.remotesystems.remotesystemapp.isavailablebyspatialproximity)
    public var isAvailableBySpatialProximity : Bool {
        get { try! _default.get_IsAvailableBySpatialProximityImpl() }
    }

    private lazy var _IRemoteSystemApp2: __ABI_Windows_System_RemoteSystems.IRemoteSystemApp2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.remotesystems.remotesystemapp.connectiontoken)
    public var connectionToken : String {
        get { try! _IRemoteSystemApp2.get_ConnectionTokenImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.remotesystems.remotesystemapp.user)
    public var user : UWP.User! {
        get { try! _IRemoteSystemApp2.get_UserImpl() }
    }

    deinit {
        _default = nil
        _IRemoteSystemApp2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.remotesystems.remotesystemconnectionrequest)
public final class RemoteSystemConnectionRequest : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_System_RemoteSystems.IRemoteSystemConnectionRequest
    private typealias CABI = __x_ABI_CWindows_CSystem_CRemoteSystems_CIRemoteSystemConnectionRequest
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CSystem_CRemoteSystems_CIRemoteSystemConnectionRequest>?) -> RemoteSystemConnectionRequest? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IRemoteSystemConnectionRequestFactory: __ABI_Windows_System_RemoteSystems.IRemoteSystemConnectionRequestFactory = try! RoGetActivationFactory(HString("Windows.System.RemoteSystems.RemoteSystemConnectionRequest"))
    public init(_ remoteSystem: RemoteSystem!) {
        super.init(try! Self._IRemoteSystemConnectionRequestFactory.CreateImpl(remoteSystem))
    }

    private static let _IRemoteSystemConnectionRequestStatics: __ABI_Windows_System_RemoteSystems.IRemoteSystemConnectionRequestStatics = try! RoGetActivationFactory(HString("Windows.System.RemoteSystems.RemoteSystemConnectionRequest"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.remotesystems.remotesystemconnectionrequest.createforapp)
    public static func createForApp(_ remoteSystemApp: RemoteSystemApp!) -> RemoteSystemConnectionRequest! {
        return try! _IRemoteSystemConnectionRequestStatics.CreateForAppImpl(remoteSystemApp)
    }

    private static let _IRemoteSystemConnectionRequestStatics2: __ABI_Windows_System_RemoteSystems.IRemoteSystemConnectionRequestStatics2 = try! RoGetActivationFactory(HString("Windows.System.RemoteSystems.RemoteSystemConnectionRequest"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.remotesystems.remotesystemconnectionrequest.createfromconnectiontoken)
    public static func createFromConnectionToken(_ connectionToken: String) -> RemoteSystemConnectionRequest! {
        return try! _IRemoteSystemConnectionRequestStatics2.CreateFromConnectionTokenImpl(connectionToken)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.remotesystems.remotesystemconnectionrequest.createfromconnectiontokenforuser)
    public static func createFromConnectionTokenForUser(_ user: UWP.User!, _ connectionToken: String) -> RemoteSystemConnectionRequest! {
        return try! _IRemoteSystemConnectionRequestStatics2.CreateFromConnectionTokenForUserImpl(user, connectionToken)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.remotesystems.remotesystemconnectionrequest.remotesystem)
    public var remoteSystem : RemoteSystem! {
        get { try! _default.get_RemoteSystemImpl() }
    }

    private lazy var _IRemoteSystemConnectionRequest2: __ABI_Windows_System_RemoteSystems.IRemoteSystemConnectionRequest2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.remotesystems.remotesystemconnectionrequest.remotesystemapp)
    public var remoteSystemApp : RemoteSystemApp! {
        get { try! _IRemoteSystemConnectionRequest2.get_RemoteSystemAppImpl() }
    }

    private lazy var _IRemoteSystemConnectionRequest3: __ABI_Windows_System_RemoteSystems.IRemoteSystemConnectionRequest3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.remotesystems.remotesystemconnectionrequest.connectiontoken)
    public var connectionToken : String {
        get { try! _IRemoteSystemConnectionRequest3.get_ConnectionTokenImpl() }
    }

    deinit {
        _default = nil
        _IRemoteSystemConnectionRequest2 = nil
        _IRemoteSystemConnectionRequest3 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.remotesystems.remotesystemenumerationcompletedeventargs)
public final class RemoteSystemEnumerationCompletedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_System_RemoteSystems.IRemoteSystemEnumerationCompletedEventArgs
    private typealias CABI = __x_ABI_CWindows_CSystem_CRemoteSystems_CIRemoteSystemEnumerationCompletedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CSystem_CRemoteSystems_CIRemoteSystemEnumerationCompletedEventArgs>?) -> RemoteSystemEnumerationCompletedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.remotesystems.remotesystemremovedeventargs)
public final class RemoteSystemRemovedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_System_RemoteSystems.IRemoteSystemRemovedEventArgs
    private typealias CABI = __x_ABI_CWindows_CSystem_CRemoteSystems_CIRemoteSystemRemovedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CSystem_CRemoteSystems_CIRemoteSystemRemovedEventArgs>?) -> RemoteSystemRemovedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.remotesystems.remotesystemremovedeventargs.remotesystemid)
    public var remoteSystemId : String {
        get { try! _default.get_RemoteSystemIdImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.remotesystems.remotesystemupdatedeventargs)
public final class RemoteSystemUpdatedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_System_RemoteSystems.IRemoteSystemUpdatedEventArgs
    private typealias CABI = __x_ABI_CWindows_CSystem_CRemoteSystems_CIRemoteSystemUpdatedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CSystem_CRemoteSystems_CIRemoteSystemUpdatedEventArgs>?) -> RemoteSystemUpdatedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.remotesystems.remotesystemupdatedeventargs.remotesystem)
    public var remoteSystem : RemoteSystem! {
        get { try! _default.get_RemoteSystemImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.remotesystems.remotesystemwatcher)
public final class RemoteSystemWatcher : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_System_RemoteSystems.IRemoteSystemWatcher
    private typealias CABI = __x_ABI_CWindows_CSystem_CRemoteSystems_CIRemoteSystemWatcher
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CSystem_CRemoteSystems_CIRemoteSystemWatcher>?) -> RemoteSystemWatcher? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.remotesystems.remotesystemwatcher.start)
    public func start() throws {
        try _default.StartImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.remotesystems.remotesystemwatcher.stop)
    public func stop() throws {
        try _default.StopImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.remotesystems.remotesystemwatcher.remotesystemadded)
    public lazy var remoteSystemAdded : Event<TypedEventHandler<RemoteSystemWatcher?, RemoteSystemAddedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_RemoteSystemAddedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_RemoteSystemAddedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.remotesystems.remotesystemwatcher.remotesystemremoved)
    public lazy var remoteSystemRemoved : Event<TypedEventHandler<RemoteSystemWatcher?, RemoteSystemRemovedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_RemoteSystemRemovedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_RemoteSystemRemovedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.remotesystems.remotesystemwatcher.remotesystemupdated)
    public lazy var remoteSystemUpdated : Event<TypedEventHandler<RemoteSystemWatcher?, RemoteSystemUpdatedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_RemoteSystemUpdatedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_RemoteSystemUpdatedImpl($0)
       }
      )
    }()

    private lazy var _IRemoteSystemWatcher2: __ABI_Windows_System_RemoteSystems.IRemoteSystemWatcher2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.remotesystems.remotesystemwatcher.enumerationcompleted)
    public lazy var enumerationCompleted : Event<TypedEventHandler<RemoteSystemWatcher?, RemoteSystemEnumerationCompletedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._IRemoteSystemWatcher2 else { return .init() }
          return try! this.add_EnumerationCompletedImpl($0)
        },
        remove: { [weak self] in
         try? self?._IRemoteSystemWatcher2.remove_EnumerationCompletedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.remotesystems.remotesystemwatcher.erroroccurred)
    public lazy var errorOccurred : Event<TypedEventHandler<RemoteSystemWatcher?, RemoteSystemWatcherErrorOccurredEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._IRemoteSystemWatcher2 else { return .init() }
          return try! this.add_ErrorOccurredImpl($0)
        },
        remove: { [weak self] in
         try? self?._IRemoteSystemWatcher2.remove_ErrorOccurredImpl($0)
       }
      )
    }()

    private lazy var _IRemoteSystemWatcher3: __ABI_Windows_System_RemoteSystems.IRemoteSystemWatcher3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.remotesystems.remotesystemwatcher.user)
    public var user : UWP.User! {
        get { try! _IRemoteSystemWatcher3.get_UserImpl() }
    }

    deinit {
        _default = nil
        _IRemoteSystemWatcher2 = nil
        _IRemoteSystemWatcher3 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.remotesystems.remotesystemwatchererroroccurredeventargs)
public final class RemoteSystemWatcherErrorOccurredEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_System_RemoteSystems.IRemoteSystemWatcherErrorOccurredEventArgs
    private typealias CABI = __x_ABI_CWindows_CSystem_CRemoteSystems_CIRemoteSystemWatcherErrorOccurredEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CSystem_CRemoteSystems_CIRemoteSystemWatcherErrorOccurredEventArgs>?) -> RemoteSystemWatcherErrorOccurredEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.remotesystems.remotesystemwatchererroroccurredeventargs.error)
    public var error : RemoteSystemWatcherError {
        get { try! _default.get_ErrorImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.remotesystems.iremotesystemfilter)
public protocol IRemoteSystemFilter : WinRTInterface {
}

extension IRemoteSystemFilter {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_System_RemoteSystems.IRemoteSystemFilterWrapper.IID:
                let wrapper = __ABI_Windows_System_RemoteSystems.IRemoteSystemFilterWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIRemoteSystemFilter = any IRemoteSystemFilter

extension UWP.RemoteSystemAccessStatus {
    public static var unspecified : UWP.RemoteSystemAccessStatus {
        __x_ABI_CWindows_CSystem_CRemoteSystems_CRemoteSystemAccessStatus_Unspecified
    }
    public static var allowed : UWP.RemoteSystemAccessStatus {
        __x_ABI_CWindows_CSystem_CRemoteSystems_CRemoteSystemAccessStatus_Allowed
    }
    public static var deniedByUser : UWP.RemoteSystemAccessStatus {
        __x_ABI_CWindows_CSystem_CRemoteSystems_CRemoteSystemAccessStatus_DeniedByUser
    }
    public static var deniedBySystem : UWP.RemoteSystemAccessStatus {
        __x_ABI_CWindows_CSystem_CRemoteSystems_CRemoteSystemAccessStatus_DeniedBySystem
    }
}
extension UWP.RemoteSystemAccessStatus: @retroactive Hashable, @retroactive Codable {}

extension UWP.RemoteSystemAuthorizationKind {
    public static var sameUser : UWP.RemoteSystemAuthorizationKind {
        __x_ABI_CWindows_CSystem_CRemoteSystems_CRemoteSystemAuthorizationKind_SameUser
    }
    public static var anonymous : UWP.RemoteSystemAuthorizationKind {
        __x_ABI_CWindows_CSystem_CRemoteSystems_CRemoteSystemAuthorizationKind_Anonymous
    }
}
extension UWP.RemoteSystemAuthorizationKind: @retroactive Hashable, @retroactive Codable {}

extension UWP.RemoteSystemPlatform {
    public static var unknown : UWP.RemoteSystemPlatform {
        __x_ABI_CWindows_CSystem_CRemoteSystems_CRemoteSystemPlatform_Unknown
    }
    public static var windows : UWP.RemoteSystemPlatform {
        __x_ABI_CWindows_CSystem_CRemoteSystems_CRemoteSystemPlatform_Windows
    }
    public static var android : UWP.RemoteSystemPlatform {
        __x_ABI_CWindows_CSystem_CRemoteSystems_CRemoteSystemPlatform_Android
    }
    public static var ios : UWP.RemoteSystemPlatform {
        __x_ABI_CWindows_CSystem_CRemoteSystems_CRemoteSystemPlatform_Ios
    }
    public static var linux : UWP.RemoteSystemPlatform {
        __x_ABI_CWindows_CSystem_CRemoteSystems_CRemoteSystemPlatform_Linux
    }
}
extension UWP.RemoteSystemPlatform: @retroactive Hashable, @retroactive Codable {}

extension UWP.RemoteSystemStatus {
    public static var unavailable : UWP.RemoteSystemStatus {
        __x_ABI_CWindows_CSystem_CRemoteSystems_CRemoteSystemStatus_Unavailable
    }
    public static var discoveringAvailability : UWP.RemoteSystemStatus {
        __x_ABI_CWindows_CSystem_CRemoteSystems_CRemoteSystemStatus_DiscoveringAvailability
    }
    public static var available : UWP.RemoteSystemStatus {
        __x_ABI_CWindows_CSystem_CRemoteSystems_CRemoteSystemStatus_Available
    }
    public static var unknown : UWP.RemoteSystemStatus {
        __x_ABI_CWindows_CSystem_CRemoteSystems_CRemoteSystemStatus_Unknown
    }
}
extension UWP.RemoteSystemStatus: @retroactive Hashable, @retroactive Codable {}

extension UWP.RemoteSystemWatcherError {
    public static var unknown : UWP.RemoteSystemWatcherError {
        __x_ABI_CWindows_CSystem_CRemoteSystems_CRemoteSystemWatcherError_Unknown
    }
    public static var internetNotAvailable : UWP.RemoteSystemWatcherError {
        __x_ABI_CWindows_CSystem_CRemoteSystems_CRemoteSystemWatcherError_InternetNotAvailable
    }
    public static var authenticationError : UWP.RemoteSystemWatcherError {
        __x_ABI_CWindows_CSystem_CRemoteSystems_CRemoteSystemWatcherError_AuthenticationError
    }
}
extension UWP.RemoteSystemWatcherError: @retroactive Hashable, @retroactive Codable {}

