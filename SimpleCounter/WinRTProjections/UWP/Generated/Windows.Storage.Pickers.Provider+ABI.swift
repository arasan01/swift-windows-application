// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

private var IID___x_ABI_CWindows_CStorage_CPickers_CProvider_CIFileOpenPickerUI: WindowsFoundation.IID {
    .init(Data1: 0xDDA45A10, Data2: 0xF9D4, Data3: 0x40C4, Data4: ( 0x8A,0xF5,0xC5,0xB6,0xB5,0xA6,0x1D,0x1D ))// DDA45A10-F9D4-40C4-8AF5-C5B6B5A61D1D
}

private var IID___x_ABI_CWindows_CStorage_CPickers_CProvider_CIFileRemovedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x13043DA7, Data2: 0x7FCA, Data3: 0x4C2B, Data4: ( 0x9E,0xCA,0x68,0x90,0xF9,0xF0,0x01,0x85 ))// 13043DA7-7FCA-4C2B-9ECA-6890F9F00185
}

private var IID___x_ABI_CWindows_CStorage_CPickers_CProvider_CIFileSavePickerUI: WindowsFoundation.IID {
    .init(Data1: 0x9656C1E7, Data2: 0x3E56, Data3: 0x43CC, Data4: ( 0x8A,0x39,0x33,0xC7,0x3D,0x9D,0x54,0x2B ))// 9656C1E7-3E56-43CC-8A39-33C73D9D542B
}

private var IID___x_ABI_CWindows_CStorage_CPickers_CProvider_CIPickerClosingDeferral: WindowsFoundation.IID {
    .init(Data1: 0x7AF7F71E, Data2: 0x1A67, Data3: 0x4A31, Data4: ( 0xAE,0x80,0xE9,0x07,0x70,0x8A,0x61,0x9B ))// 7AF7F71E-1A67-4A31-AE80-E907708A619B
}

private var IID___x_ABI_CWindows_CStorage_CPickers_CProvider_CIPickerClosingEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x7E59F224, Data2: 0xB332, Data3: 0x4F12, Data4: ( 0x8B,0x9F,0xA8,0xC2,0xF0,0x6B,0x32,0xCD ))// 7E59F224-B332-4F12-8B9F-A8C2F06B32CD
}

private var IID___x_ABI_CWindows_CStorage_CPickers_CProvider_CIPickerClosingOperation: WindowsFoundation.IID {
    .init(Data1: 0x4CE9FB84, Data2: 0xBEEE, Data3: 0x4E39, Data4: ( 0xA7,0x73,0xFC,0x5F,0x0E,0xAE,0x32,0x8D ))// 4CE9FB84-BEEE-4E39-A773-FC5F0EAE328D
}

private var IID___x_ABI_CWindows_CStorage_CPickers_CProvider_CITargetFileRequest: WindowsFoundation.IID {
    .init(Data1: 0x42BD3355, Data2: 0x7F88, Data3: 0x478B, Data4: ( 0x8E,0x81,0x69,0x0B,0x20,0x34,0x06,0x78 ))// 42BD3355-7F88-478B-8E81-690B20340678
}

private var IID___x_ABI_CWindows_CStorage_CPickers_CProvider_CITargetFileRequestDeferral: WindowsFoundation.IID {
    .init(Data1: 0x4AEE9D91, Data2: 0xBF15, Data3: 0x4DA9, Data4: ( 0x95,0xF6,0xF6,0xB7,0xD5,0x58,0x22,0x5B ))// 4AEE9D91-BF15-4DA9-95F6-F6B7D558225B
}

private var IID___x_ABI_CWindows_CStorage_CPickers_CProvider_CITargetFileRequestedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xB163DBC1, Data2: 0x1B51, Data3: 0x4C89, Data4: ( 0xA5,0x91,0x0F,0xD4,0x0B,0x3C,0x57,0xC9 ))// B163DBC1-1B51-4C89-A591-0FD40B3C57C9
}

public enum __ABI_Windows_Storage_Pickers_Provider {
    public class IFileOpenPickerUI: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CStorage_CPickers_CProvider_CIFileOpenPickerUI }

        internal func AddFileImpl(_ id: String, _ file: UWP.AnyIStorageFile?) throws -> UWP.AddFileResult {
            var addResult: __x_ABI_CWindows_CStorage_CPickers_CProvider_CAddFileResult = .init(0)
            let _id = try! HString(id)
            let fileWrapper = __ABI_Windows_Storage.IStorageFileWrapper(file)
            let _file = try! fileWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CProvider_CIFileOpenPickerUI.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.AddFile(pThis, _id.get(), _file, &addResult))
            }
            return addResult
        }

        internal func RemoveFileImpl(_ id: String) throws {
            let _id = try! HString(id)
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CProvider_CIFileOpenPickerUI.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveFile(pThis, _id.get()))
            }
        }

        internal func ContainsFileImpl(_ id: String) throws -> Bool {
            var isContained: boolean = 0
            let _id = try! HString(id)
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CProvider_CIFileOpenPickerUI.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ContainsFile(pThis, _id.get(), &isContained))
            }
            return .init(from: isContained)
        }

        internal func CanAddFileImpl(_ file: UWP.AnyIStorageFile?) throws -> Bool {
            var canAdd: boolean = 0
            let fileWrapper = __ABI_Windows_Storage.IStorageFileWrapper(file)
            let _file = try! fileWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CProvider_CIFileOpenPickerUI.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CanAddFile(pThis, _file, &canAdd))
            }
            return .init(from: canAdd)
        }

        internal func get_AllowedFileTypesImpl() throws -> WindowsFoundation.AnyIVectorView<String>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CProvider_CIFileOpenPickerUI.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_AllowedFileTypes(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1_HSTRINGWrapper.unwrapFrom(abi: value)
        }

        internal func get_SelectionModeImpl() throws -> UWP.FileSelectionMode {
            var value: __x_ABI_CWindows_CStorage_CPickers_CProvider_CFileSelectionMode = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CProvider_CIFileOpenPickerUI.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionMode(pThis, &value))
            }
            return value
        }

        internal func get_SettingsIdentifierImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CProvider_CIFileOpenPickerUI.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SettingsIdentifier(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_TitleImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CProvider_CIFileOpenPickerUI.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Title(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_TitleImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CProvider_CIFileOpenPickerUI.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Title(pThis, _value.get()))
            }
        }

        internal func add_FileRemovedImpl(_ handler: TypedEventHandler<UWP.FileOpenPickerUI?, UWP.FileRemovedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CStorage__CPickers__CProvider__CFileOpenPickerUI___x_ABI_CWindows__CStorage__CPickers__CProvider__CFileRemovedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CProvider_CIFileOpenPickerUI.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_FileRemoved(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_FileRemovedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CProvider_CIFileOpenPickerUI.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_FileRemoved(pThis, token))
            }
        }

        internal func add_ClosingImpl(_ handler: TypedEventHandler<UWP.FileOpenPickerUI?, UWP.PickerClosingEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CStorage__CPickers__CProvider__CFileOpenPickerUI___x_ABI_CWindows__CStorage__CPickers__CProvider__CPickerClosingEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CProvider_CIFileOpenPickerUI.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Closing(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ClosingImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CProvider_CIFileOpenPickerUI.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Closing(pThis, token))
            }
        }

    }

    public class IFileRemovedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CStorage_CPickers_CProvider_CIFileRemovedEventArgs }

        internal func get_IdImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CProvider_CIFileRemovedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Id(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class IFileSavePickerUI: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CStorage_CPickers_CProvider_CIFileSavePickerUI }

        internal func get_TitleImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CProvider_CIFileSavePickerUI.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Title(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_TitleImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CProvider_CIFileSavePickerUI.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Title(pThis, _value.get()))
            }
        }

        internal func get_AllowedFileTypesImpl() throws -> WindowsFoundation.AnyIVectorView<String>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CProvider_CIFileSavePickerUI.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_AllowedFileTypes(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1_HSTRINGWrapper.unwrapFrom(abi: value)
        }

        internal func get_SettingsIdentifierImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CProvider_CIFileSavePickerUI.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SettingsIdentifier(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_FileNameImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CProvider_CIFileSavePickerUI.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FileName(pThis, &value))
            }
            return .init(from: value)
        }

        internal func TrySetFileNameImpl(_ value: String) throws -> UWP.SetFileNameResult {
            var result: __x_ABI_CWindows_CStorage_CPickers_CProvider_CSetFileNameResult = .init(0)
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CProvider_CIFileSavePickerUI.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.TrySetFileName(pThis, _value.get(), &result))
            }
            return result
        }

        internal func add_FileNameChangedImpl(_ handler: TypedEventHandler<UWP.FileSavePickerUI?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CStorage__CPickers__CProvider__CFileSavePickerUI_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CProvider_CIFileSavePickerUI.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_FileNameChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_FileNameChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CProvider_CIFileSavePickerUI.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_FileNameChanged(pThis, token))
            }
        }

        internal func add_TargetFileRequestedImpl(_ handler: TypedEventHandler<UWP.FileSavePickerUI?, UWP.TargetFileRequestedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CStorage__CPickers__CProvider__CFileSavePickerUI___x_ABI_CWindows__CStorage__CPickers__CProvider__CTargetFileRequestedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CProvider_CIFileSavePickerUI.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_TargetFileRequested(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_TargetFileRequestedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CProvider_CIFileSavePickerUI.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_TargetFileRequested(pThis, token))
            }
        }

    }

    public class IPickerClosingDeferral: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CStorage_CPickers_CProvider_CIPickerClosingDeferral }

        internal func CompleteImpl() throws {
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CProvider_CIPickerClosingDeferral.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Complete(pThis))
            }
        }

    }

    public class IPickerClosingEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CStorage_CPickers_CProvider_CIPickerClosingEventArgs }

        internal func get_ClosingOperationImpl() throws -> UWP.PickerClosingOperation? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CProvider_CIPickerClosingEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ClosingOperation(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IsCanceledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CProvider_CIPickerClosingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsCanceled(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class IPickerClosingOperation: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CStorage_CPickers_CProvider_CIPickerClosingOperation }

        internal func GetDeferralImpl() throws -> UWP.PickerClosingDeferral? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CProvider_CIPickerClosingOperation.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDeferral(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_DeadlineImpl() throws -> WindowsFoundation.DateTime {
            var value: __x_ABI_CWindows_CFoundation_CDateTime = .init()
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CProvider_CIPickerClosingOperation.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Deadline(pThis, &value))
            }
            return .from(abi: value)
        }

    }

    public class ITargetFileRequest: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CStorage_CPickers_CProvider_CITargetFileRequest }

        internal func get_TargetFileImpl() throws -> UWP.AnyIStorageFile? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CProvider_CITargetFileRequest.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TargetFile(pThis, &valueAbi))
                }
            }
            return __ABI_Windows_Storage.IStorageFileWrapper.unwrapFrom(abi: value)
        }

        internal func put_TargetFileImpl(_ value: UWP.AnyIStorageFile?) throws {
            let valueWrapper = __ABI_Windows_Storage.IStorageFileWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CProvider_CITargetFileRequest.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TargetFile(pThis, _value))
            }
        }

        internal func GetDeferralImpl() throws -> UWP.TargetFileRequestDeferral? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CProvider_CITargetFileRequest.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDeferral(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class ITargetFileRequestDeferral: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CStorage_CPickers_CProvider_CITargetFileRequestDeferral }

        internal func CompleteImpl() throws {
            _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CProvider_CITargetFileRequestDeferral.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Complete(pThis))
            }
        }

    }

    public class ITargetFileRequestedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CStorage_CPickers_CProvider_CITargetFileRequestedEventArgs }

        internal func get_RequestImpl() throws -> UWP.TargetFileRequest? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CStorage_CPickers_CProvider_CITargetFileRequestedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Request(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

}
