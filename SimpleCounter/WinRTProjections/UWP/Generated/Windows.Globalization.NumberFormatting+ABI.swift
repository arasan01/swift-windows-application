// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

private var IID___x_ABI_CWindows_CGlobalization_CNumberFormatting_CINumberFormatter2: WindowsFoundation.IID {
    .init(Data1: 0xD4A8C1F0, Data2: 0x80D0, Data3: 0x4B0D, Data4: ( 0xA8,0x9E,0x88,0x2C,0x1E,0x8F,0x83,0x10 ))// D4A8C1F0-80D0-4B0D-A89E-882C1E8F8310
}

public enum __ABI_Windows_Globalization_NumberFormatting {
    public class INumberFormatter2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CGlobalization_CNumberFormatting_CINumberFormatter2 }

        open func FormatIntImpl(_ value: Int64) throws -> String {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CGlobalization_CNumberFormatting_CINumberFormatter2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.FormatInt(pThis, value, &result))
            }
            return .init(from: result)
        }

        open func FormatUIntImpl(_ value: UInt64) throws -> String {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CGlobalization_CNumberFormatting_CINumberFormatter2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.FormatUInt(pThis, value, &result))
            }
            return .init(from: result)
        }

        open func FormatDoubleImpl(_ value: Double) throws -> String {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CGlobalization_CNumberFormatting_CINumberFormatter2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.FormatDouble(pThis, value, &result))
            }
            return .init(from: result)
        }

    }

    internal static var INumberFormatter2VTable: __x_ABI_CWindows_CGlobalization_CNumberFormatting_CINumberFormatter2Vtbl = .init(
        QueryInterface: { INumberFormatter2Wrapper.queryInterface($0, $1, $2) },
        AddRef: { INumberFormatter2Wrapper.addRef($0) },
        Release: { INumberFormatter2Wrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Globalization_NumberFormatting.INumberFormatter2Wrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Globalization.NumberFormatting.INumberFormatter2").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        FormatInt: {
            do {
                guard let __unwrapped__instance = INumberFormatter2Wrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value: Int64 = $1
                let result = try __unwrapped__instance.formatInt(value)
                $2?.initialize(to: try! HString(result).detach())
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        FormatUInt: {
            do {
                guard let __unwrapped__instance = INumberFormatter2Wrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value: UInt64 = $1
                let result = try __unwrapped__instance.formatUInt(value)
                $2?.initialize(to: try! HString(result).detach())
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        FormatDouble: {
            do {
                guard let __unwrapped__instance = INumberFormatter2Wrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value: Double = $1
                let result = try __unwrapped__instance.formatDouble(value)
                $2?.initialize(to: try! HString(result).detach())
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )

    public typealias INumberFormatter2Wrapper = InterfaceWrapperBase<__IMPL_Windows_Globalization_NumberFormatting.INumberFormatter2Bridge>
}
